/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


type GsxConnectionAPI interface {

	/*
	V1GsxConnectionGet Finds the Jamf Pro GSX Connection information 

	Finds the Jamf Pro GSX Connection information


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return GsxConnectionAPIV1GsxConnectionGetRequest
	*/
	V1GsxConnectionGet(ctx context.Context) GsxConnectionAPIV1GsxConnectionGetRequest

	// V1GsxConnectionGetExecute executes the request
	//  @return GsxConnection
	V1GsxConnectionGetExecute(r GsxConnectionAPIV1GsxConnectionGetRequest) (*GsxConnection, *http.Response, error)

	/*
	V1GsxConnectionHistoryGet Get specified GSX Connection History object 

	Gets specified GSX Connection history object


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return GsxConnectionAPIV1GsxConnectionHistoryGetRequest
	*/
	V1GsxConnectionHistoryGet(ctx context.Context) GsxConnectionAPIV1GsxConnectionHistoryGetRequest

	// V1GsxConnectionHistoryGetExecute executes the request
	//  @return HistorySearchResultsV1
	V1GsxConnectionHistoryGetExecute(r GsxConnectionAPIV1GsxConnectionHistoryGetRequest) (*HistorySearchResultsV1, *http.Response, error)

	/*
	V1GsxConnectionHistoryPost Add specified GSX Connection history object notes 

	Adds specified GSX Connection history object notes


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return GsxConnectionAPIV1GsxConnectionHistoryPostRequest
	*/
	V1GsxConnectionHistoryPost(ctx context.Context) GsxConnectionAPIV1GsxConnectionHistoryPostRequest

	// V1GsxConnectionHistoryPostExecute executes the request
	//  @return HrefResponse
	V1GsxConnectionHistoryPostExecute(r GsxConnectionAPIV1GsxConnectionHistoryPostRequest) (*HrefResponse, *http.Response, error)

	/*
	V1GsxConnectionPatch Updates Jamf Pro GSX Connection information 

	Updates Jamf Pro GSX Connection information


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return GsxConnectionAPIV1GsxConnectionPatchRequest
	*/
	V1GsxConnectionPatch(ctx context.Context) GsxConnectionAPIV1GsxConnectionPatchRequest

	// V1GsxConnectionPatchExecute executes the request
	//  @return GsxConnection
	V1GsxConnectionPatchExecute(r GsxConnectionAPIV1GsxConnectionPatchRequest) (*GsxConnection, *http.Response, error)

	/*
	V1GsxConnectionPut Updates Jamf Pro GSX Connection information 

	Updates Jamf Pro GSX Connection information


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return GsxConnectionAPIV1GsxConnectionPutRequest
	*/
	V1GsxConnectionPut(ctx context.Context) GsxConnectionAPIV1GsxConnectionPutRequest

	// V1GsxConnectionPutExecute executes the request
	//  @return GsxConnection
	V1GsxConnectionPutExecute(r GsxConnectionAPIV1GsxConnectionPutRequest) (*GsxConnection, *http.Response, error)

	/*
	V1GsxConnectionTestPost Test functionality of an GSX Connection

	Test functionality of an GSX Connection

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return GsxConnectionAPIV1GsxConnectionTestPostRequest
	*/
	V1GsxConnectionTestPost(ctx context.Context) GsxConnectionAPIV1GsxConnectionTestPostRequest

	// V1GsxConnectionTestPostExecute executes the request
	V1GsxConnectionTestPostExecute(r GsxConnectionAPIV1GsxConnectionTestPostRequest) (*http.Response, error)
}

// GsxConnectionAPIService GsxConnectionAPI service
type GsxConnectionAPIService service

type GsxConnectionAPIV1GsxConnectionGetRequest struct {
	ctx context.Context
	ApiService GsxConnectionAPI
}

func (r GsxConnectionAPIV1GsxConnectionGetRequest) Execute() (*GsxConnection, *http.Response, error) {
	return r.ApiService.V1GsxConnectionGetExecute(r)
}

/*
V1GsxConnectionGet Finds the Jamf Pro GSX Connection information 

Finds the Jamf Pro GSX Connection information


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GsxConnectionAPIV1GsxConnectionGetRequest
*/
func (a *GsxConnectionAPIService) V1GsxConnectionGet(ctx context.Context) GsxConnectionAPIV1GsxConnectionGetRequest {
	return GsxConnectionAPIV1GsxConnectionGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GsxConnection
func (a *GsxConnectionAPIService) V1GsxConnectionGetExecute(r GsxConnectionAPIV1GsxConnectionGetRequest) (*GsxConnection, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GsxConnection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GsxConnectionAPIService.V1GsxConnectionGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gsx-connection"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type GsxConnectionAPIV1GsxConnectionHistoryGetRequest struct {
	ctx context.Context
	ApiService GsxConnectionAPI
	page *int64
	pageSize *int64
	sort *[]string
	filter *string
}

func (r GsxConnectionAPIV1GsxConnectionHistoryGetRequest) Page(page int64) GsxConnectionAPIV1GsxConnectionHistoryGetRequest {
	r.page = &page
	return r
}

func (r GsxConnectionAPIV1GsxConnectionHistoryGetRequest) PageSize(pageSize int64) GsxConnectionAPIV1GsxConnectionHistoryGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Default sort is date:desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc 
func (r GsxConnectionAPIV1GsxConnectionHistoryGetRequest) Sort(sort []string) GsxConnectionAPIV1GsxConnectionHistoryGetRequest {
	r.sort = &sort
	return r
}

// Query in the RSQL format, allowing to filter history notes collection. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: username, date, note, details. This param can be combined with paging and sorting. Example: filter&#x3D;username!&#x3D;admin and details&#x3D;&#x3D;*disabled* and date&lt;2019-12-15
func (r GsxConnectionAPIV1GsxConnectionHistoryGetRequest) Filter(filter string) GsxConnectionAPIV1GsxConnectionHistoryGetRequest {
	r.filter = &filter
	return r
}

func (r GsxConnectionAPIV1GsxConnectionHistoryGetRequest) Execute() (*HistorySearchResultsV1, *http.Response, error) {
	return r.ApiService.V1GsxConnectionHistoryGetExecute(r)
}

/*
V1GsxConnectionHistoryGet Get specified GSX Connection History object 

Gets specified GSX Connection history object


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GsxConnectionAPIV1GsxConnectionHistoryGetRequest
*/
func (a *GsxConnectionAPIService) V1GsxConnectionHistoryGet(ctx context.Context) GsxConnectionAPIV1GsxConnectionHistoryGetRequest {
	return GsxConnectionAPIV1GsxConnectionHistoryGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HistorySearchResultsV1
func (a *GsxConnectionAPIService) V1GsxConnectionHistoryGetExecute(r GsxConnectionAPIV1GsxConnectionHistoryGetRequest) (*HistorySearchResultsV1, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HistorySearchResultsV1
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GsxConnectionAPIService.V1GsxConnectionHistoryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gsx-connection/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int64 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int64 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		defaultValue := []string{"date:desc"}
		r.sort = &defaultValue
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	} else {
		var defaultValue string = ""
		r.filter = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type GsxConnectionAPIV1GsxConnectionHistoryPostRequest struct {
	ctx context.Context
	ApiService GsxConnectionAPI
	objectHistoryNote *ObjectHistoryNote
}

// history notes to create
func (r GsxConnectionAPIV1GsxConnectionHistoryPostRequest) ObjectHistoryNote(objectHistoryNote ObjectHistoryNote) GsxConnectionAPIV1GsxConnectionHistoryPostRequest {
	r.objectHistoryNote = &objectHistoryNote
	return r
}

func (r GsxConnectionAPIV1GsxConnectionHistoryPostRequest) Execute() (*HrefResponse, *http.Response, error) {
	return r.ApiService.V1GsxConnectionHistoryPostExecute(r)
}

/*
V1GsxConnectionHistoryPost Add specified GSX Connection history object notes 

Adds specified GSX Connection history object notes


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GsxConnectionAPIV1GsxConnectionHistoryPostRequest
*/
func (a *GsxConnectionAPIService) V1GsxConnectionHistoryPost(ctx context.Context) GsxConnectionAPIV1GsxConnectionHistoryPostRequest {
	return GsxConnectionAPIV1GsxConnectionHistoryPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HrefResponse
func (a *GsxConnectionAPIService) V1GsxConnectionHistoryPostExecute(r GsxConnectionAPIV1GsxConnectionHistoryPostRequest) (*HrefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HrefResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GsxConnectionAPIService.V1GsxConnectionHistoryPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gsx-connection/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.objectHistoryNote == nil {
		return localVarReturnValue, nil, reportError("objectHistoryNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.objectHistoryNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type GsxConnectionAPIV1GsxConnectionPatchRequest struct {
	ctx context.Context
	ApiService GsxConnectionAPI
	gsxConnectionUpdate *GsxConnectionUpdate
}

// GSX Connection to update
func (r GsxConnectionAPIV1GsxConnectionPatchRequest) GsxConnectionUpdate(gsxConnectionUpdate GsxConnectionUpdate) GsxConnectionAPIV1GsxConnectionPatchRequest {
	r.gsxConnectionUpdate = &gsxConnectionUpdate
	return r
}

func (r GsxConnectionAPIV1GsxConnectionPatchRequest) Execute() (*GsxConnection, *http.Response, error) {
	return r.ApiService.V1GsxConnectionPatchExecute(r)
}

/*
V1GsxConnectionPatch Updates Jamf Pro GSX Connection information 

Updates Jamf Pro GSX Connection information


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GsxConnectionAPIV1GsxConnectionPatchRequest
*/
func (a *GsxConnectionAPIService) V1GsxConnectionPatch(ctx context.Context) GsxConnectionAPIV1GsxConnectionPatchRequest {
	return GsxConnectionAPIV1GsxConnectionPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GsxConnection
func (a *GsxConnectionAPIService) V1GsxConnectionPatchExecute(r GsxConnectionAPIV1GsxConnectionPatchRequest) (*GsxConnection, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GsxConnection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GsxConnectionAPIService.V1GsxConnectionPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gsx-connection"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gsxConnectionUpdate == nil {
		return localVarReturnValue, nil, reportError("gsxConnectionUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gsxConnectionUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type GsxConnectionAPIV1GsxConnectionPutRequest struct {
	ctx context.Context
	ApiService GsxConnectionAPI
	gsxConnection *GsxConnection
}

// GSX Connection to update
func (r GsxConnectionAPIV1GsxConnectionPutRequest) GsxConnection(gsxConnection GsxConnection) GsxConnectionAPIV1GsxConnectionPutRequest {
	r.gsxConnection = &gsxConnection
	return r
}

func (r GsxConnectionAPIV1GsxConnectionPutRequest) Execute() (*GsxConnection, *http.Response, error) {
	return r.ApiService.V1GsxConnectionPutExecute(r)
}

/*
V1GsxConnectionPut Updates Jamf Pro GSX Connection information 

Updates Jamf Pro GSX Connection information


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GsxConnectionAPIV1GsxConnectionPutRequest
*/
func (a *GsxConnectionAPIService) V1GsxConnectionPut(ctx context.Context) GsxConnectionAPIV1GsxConnectionPutRequest {
	return GsxConnectionAPIV1GsxConnectionPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GsxConnection
func (a *GsxConnectionAPIService) V1GsxConnectionPutExecute(r GsxConnectionAPIV1GsxConnectionPutRequest) (*GsxConnection, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GsxConnection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GsxConnectionAPIService.V1GsxConnectionPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gsx-connection"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gsxConnection == nil {
		return localVarReturnValue, nil, reportError("gsxConnection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gsxConnection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type GsxConnectionAPIV1GsxConnectionTestPostRequest struct {
	ctx context.Context
	ApiService GsxConnectionAPI
}

func (r GsxConnectionAPIV1GsxConnectionTestPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1GsxConnectionTestPostExecute(r)
}

/*
V1GsxConnectionTestPost Test functionality of an GSX Connection

Test functionality of an GSX Connection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GsxConnectionAPIV1GsxConnectionTestPostRequest
*/
func (a *GsxConnectionAPIService) V1GsxConnectionTestPost(ctx context.Context) GsxConnectionAPIV1GsxConnectionTestPostRequest {
	return GsxConnectionAPIV1GsxConnectionTestPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *GsxConnectionAPIService) V1GsxConnectionTestPostExecute(r GsxConnectionAPIV1GsxConnectionTestPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GsxConnectionAPIService.V1GsxConnectionTestPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gsx-connection/test"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v GsxTestResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
