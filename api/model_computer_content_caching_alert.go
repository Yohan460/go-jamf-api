/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// ComputerContentCachingAlert struct for ComputerContentCachingAlert
type ComputerContentCachingAlert struct {
	CacheBytesLimit *int64 `json:"cacheBytesLimit,omitempty"`
	ClassName *string `json:"className,omitempty"`
	PathPreventingAccess *string `json:"pathPreventingAccess,omitempty"`
	PostDate *time.Time `json:"postDate,omitempty"`
	ReservedVolumeBytes *int64 `json:"reservedVolumeBytes,omitempty"`
	Resource *string `json:"resource,omitempty"`
}

// NewComputerContentCachingAlert instantiates a new ComputerContentCachingAlert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputerContentCachingAlert() *ComputerContentCachingAlert {
	this := ComputerContentCachingAlert{}
	return &this
}

// NewComputerContentCachingAlertWithDefaults instantiates a new ComputerContentCachingAlert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputerContentCachingAlertWithDefaults() *ComputerContentCachingAlert {
	this := ComputerContentCachingAlert{}
	return &this
}

// GetCacheBytesLimit returns the CacheBytesLimit field value if set, zero value otherwise.
func (o *ComputerContentCachingAlert) GetCacheBytesLimit() int64 {
	if o == nil || o.CacheBytesLimit == nil {
		var ret int64
		return ret
	}
	return *o.CacheBytesLimit
}

// GetCacheBytesLimitOk returns a tuple with the CacheBytesLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCachingAlert) GetCacheBytesLimitOk() (*int64, bool) {
	if o == nil || o.CacheBytesLimit == nil {
		return nil, false
	}
	return o.CacheBytesLimit, true
}

// HasCacheBytesLimit returns a boolean if a field has been set.
func (o *ComputerContentCachingAlert) HasCacheBytesLimit() bool {
	if o != nil && o.CacheBytesLimit != nil {
		return true
	}

	return false
}

// SetCacheBytesLimit gets a reference to the given int64 and assigns it to the CacheBytesLimit field.
func (o *ComputerContentCachingAlert) SetCacheBytesLimit(v int64) {
	o.CacheBytesLimit = &v
}

// GetClassName returns the ClassName field value if set, zero value otherwise.
func (o *ComputerContentCachingAlert) GetClassName() string {
	if o == nil || o.ClassName == nil {
		var ret string
		return ret
	}
	return *o.ClassName
}

// GetClassNameOk returns a tuple with the ClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCachingAlert) GetClassNameOk() (*string, bool) {
	if o == nil || o.ClassName == nil {
		return nil, false
	}
	return o.ClassName, true
}

// HasClassName returns a boolean if a field has been set.
func (o *ComputerContentCachingAlert) HasClassName() bool {
	if o != nil && o.ClassName != nil {
		return true
	}

	return false
}

// SetClassName gets a reference to the given string and assigns it to the ClassName field.
func (o *ComputerContentCachingAlert) SetClassName(v string) {
	o.ClassName = &v
}

// GetPathPreventingAccess returns the PathPreventingAccess field value if set, zero value otherwise.
func (o *ComputerContentCachingAlert) GetPathPreventingAccess() string {
	if o == nil || o.PathPreventingAccess == nil {
		var ret string
		return ret
	}
	return *o.PathPreventingAccess
}

// GetPathPreventingAccessOk returns a tuple with the PathPreventingAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCachingAlert) GetPathPreventingAccessOk() (*string, bool) {
	if o == nil || o.PathPreventingAccess == nil {
		return nil, false
	}
	return o.PathPreventingAccess, true
}

// HasPathPreventingAccess returns a boolean if a field has been set.
func (o *ComputerContentCachingAlert) HasPathPreventingAccess() bool {
	if o != nil && o.PathPreventingAccess != nil {
		return true
	}

	return false
}

// SetPathPreventingAccess gets a reference to the given string and assigns it to the PathPreventingAccess field.
func (o *ComputerContentCachingAlert) SetPathPreventingAccess(v string) {
	o.PathPreventingAccess = &v
}

// GetPostDate returns the PostDate field value if set, zero value otherwise.
func (o *ComputerContentCachingAlert) GetPostDate() time.Time {
	if o == nil || o.PostDate == nil {
		var ret time.Time
		return ret
	}
	return *o.PostDate
}

// GetPostDateOk returns a tuple with the PostDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCachingAlert) GetPostDateOk() (*time.Time, bool) {
	if o == nil || o.PostDate == nil {
		return nil, false
	}
	return o.PostDate, true
}

// HasPostDate returns a boolean if a field has been set.
func (o *ComputerContentCachingAlert) HasPostDate() bool {
	if o != nil && o.PostDate != nil {
		return true
	}

	return false
}

// SetPostDate gets a reference to the given time.Time and assigns it to the PostDate field.
func (o *ComputerContentCachingAlert) SetPostDate(v time.Time) {
	o.PostDate = &v
}

// GetReservedVolumeBytes returns the ReservedVolumeBytes field value if set, zero value otherwise.
func (o *ComputerContentCachingAlert) GetReservedVolumeBytes() int64 {
	if o == nil || o.ReservedVolumeBytes == nil {
		var ret int64
		return ret
	}
	return *o.ReservedVolumeBytes
}

// GetReservedVolumeBytesOk returns a tuple with the ReservedVolumeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCachingAlert) GetReservedVolumeBytesOk() (*int64, bool) {
	if o == nil || o.ReservedVolumeBytes == nil {
		return nil, false
	}
	return o.ReservedVolumeBytes, true
}

// HasReservedVolumeBytes returns a boolean if a field has been set.
func (o *ComputerContentCachingAlert) HasReservedVolumeBytes() bool {
	if o != nil && o.ReservedVolumeBytes != nil {
		return true
	}

	return false
}

// SetReservedVolumeBytes gets a reference to the given int64 and assigns it to the ReservedVolumeBytes field.
func (o *ComputerContentCachingAlert) SetReservedVolumeBytes(v int64) {
	o.ReservedVolumeBytes = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *ComputerContentCachingAlert) GetResource() string {
	if o == nil || o.Resource == nil {
		var ret string
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCachingAlert) GetResourceOk() (*string, bool) {
	if o == nil || o.Resource == nil {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *ComputerContentCachingAlert) HasResource() bool {
	if o != nil && o.Resource != nil {
		return true
	}

	return false
}

// SetResource gets a reference to the given string and assigns it to the Resource field.
func (o *ComputerContentCachingAlert) SetResource(v string) {
	o.Resource = &v
}

func (o ComputerContentCachingAlert) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CacheBytesLimit != nil {
		toSerialize["cacheBytesLimit"] = o.CacheBytesLimit
	}
	if o.ClassName != nil {
		toSerialize["className"] = o.ClassName
	}
	if o.PathPreventingAccess != nil {
		toSerialize["pathPreventingAccess"] = o.PathPreventingAccess
	}
	if o.PostDate != nil {
		toSerialize["postDate"] = o.PostDate
	}
	if o.ReservedVolumeBytes != nil {
		toSerialize["reservedVolumeBytes"] = o.ReservedVolumeBytes
	}
	if o.Resource != nil {
		toSerialize["resource"] = o.Resource
	}
	return json.Marshal(toSerialize)
}

type NullableComputerContentCachingAlert struct {
	value *ComputerContentCachingAlert
	isSet bool
}

func (v NullableComputerContentCachingAlert) Get() *ComputerContentCachingAlert {
	return v.value
}

func (v *NullableComputerContentCachingAlert) Set(val *ComputerContentCachingAlert) {
	v.value = val
	v.isSet = true
}

func (v NullableComputerContentCachingAlert) IsSet() bool {
	return v.isSet
}

func (v *NullableComputerContentCachingAlert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputerContentCachingAlert(val *ComputerContentCachingAlert) *NullableComputerContentCachingAlert {
	return &NullableComputerContentCachingAlert{value: val, isSet: true}
}

func (v NullableComputerContentCachingAlert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputerContentCachingAlert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


