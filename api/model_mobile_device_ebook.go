/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// MobileDeviceEbook struct for MobileDeviceEbook
type MobileDeviceEbook struct {
	Author *string `json:"author,omitempty"`
	Title *string `json:"title,omitempty"`
	Version *string `json:"version,omitempty"`
}

// NewMobileDeviceEbook instantiates a new MobileDeviceEbook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMobileDeviceEbook() *MobileDeviceEbook {
	this := MobileDeviceEbook{}
	return &this
}

// NewMobileDeviceEbookWithDefaults instantiates a new MobileDeviceEbook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMobileDeviceEbookWithDefaults() *MobileDeviceEbook {
	this := MobileDeviceEbook{}
	return &this
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *MobileDeviceEbook) GetAuthor() string {
	if o == nil || o.Author == nil {
		var ret string
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDeviceEbook) GetAuthorOk() (*string, bool) {
	if o == nil || o.Author == nil {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *MobileDeviceEbook) HasAuthor() bool {
	if o != nil && o.Author != nil {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given string and assigns it to the Author field.
func (o *MobileDeviceEbook) SetAuthor(v string) {
	o.Author = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *MobileDeviceEbook) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDeviceEbook) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *MobileDeviceEbook) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *MobileDeviceEbook) SetTitle(v string) {
	o.Title = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *MobileDeviceEbook) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDeviceEbook) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *MobileDeviceEbook) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *MobileDeviceEbook) SetVersion(v string) {
	o.Version = &v
}

func (o MobileDeviceEbook) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Author != nil {
		toSerialize["author"] = o.Author
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableMobileDeviceEbook struct {
	value *MobileDeviceEbook
	isSet bool
}

func (v NullableMobileDeviceEbook) Get() *MobileDeviceEbook {
	return v.value
}

func (v *NullableMobileDeviceEbook) Set(val *MobileDeviceEbook) {
	v.value = val
	v.isSet = true
}

func (v NullableMobileDeviceEbook) IsSet() bool {
	return v.isSet
}

func (v *NullableMobileDeviceEbook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMobileDeviceEbook(val *MobileDeviceEbook) *NullableMobileDeviceEbook {
	return &NullableMobileDeviceEbook{value: val, isSet: true}
}

func (v NullableMobileDeviceEbook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMobileDeviceEbook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


