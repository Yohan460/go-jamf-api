/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// PrestageScopeV2 struct for PrestageScopeV2
type PrestageScopeV2 struct {
	SerialsByPrestageId *map[string]string `json:"serialsByPrestageId,omitempty"`
}

// NewPrestageScopeV2 instantiates a new PrestageScopeV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrestageScopeV2() *PrestageScopeV2 {
	this := PrestageScopeV2{}
	return &this
}

// NewPrestageScopeV2WithDefaults instantiates a new PrestageScopeV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrestageScopeV2WithDefaults() *PrestageScopeV2 {
	this := PrestageScopeV2{}
	return &this
}

// GetSerialsByPrestageId returns the SerialsByPrestageId field value if set, zero value otherwise.
func (o *PrestageScopeV2) GetSerialsByPrestageId() map[string]string {
	if o == nil || o.SerialsByPrestageId == nil {
		var ret map[string]string
		return ret
	}
	return *o.SerialsByPrestageId
}

// GetSerialsByPrestageIdOk returns a tuple with the SerialsByPrestageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrestageScopeV2) GetSerialsByPrestageIdOk() (*map[string]string, bool) {
	if o == nil || o.SerialsByPrestageId == nil {
		return nil, false
	}
	return o.SerialsByPrestageId, true
}

// HasSerialsByPrestageId returns a boolean if a field has been set.
func (o *PrestageScopeV2) HasSerialsByPrestageId() bool {
	if o != nil && o.SerialsByPrestageId != nil {
		return true
	}

	return false
}

// SetSerialsByPrestageId gets a reference to the given map[string]string and assigns it to the SerialsByPrestageId field.
func (o *PrestageScopeV2) SetSerialsByPrestageId(v map[string]string) {
	o.SerialsByPrestageId = &v
}

func (o PrestageScopeV2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SerialsByPrestageId != nil {
		toSerialize["serialsByPrestageId"] = o.SerialsByPrestageId
	}
	return json.Marshal(toSerialize)
}

type NullablePrestageScopeV2 struct {
	value *PrestageScopeV2
	isSet bool
}

func (v NullablePrestageScopeV2) Get() *PrestageScopeV2 {
	return v.value
}

func (v *NullablePrestageScopeV2) Set(val *PrestageScopeV2) {
	v.value = val
	v.isSet = true
}

func (v NullablePrestageScopeV2) IsSet() bool {
	return v.isSet
}

func (v *NullablePrestageScopeV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrestageScopeV2(val *PrestageScopeV2) *NullablePrestageScopeV2 {
	return &NullablePrestageScopeV2{value: val, isSet: true}
}

func (v NullablePrestageScopeV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrestageScopeV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


