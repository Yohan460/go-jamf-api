/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// SsoKeystoreAllOf struct for SsoKeystoreAllOf
type SsoKeystoreAllOf struct {
	Keys []CertificateKey `json:"keys,omitempty"`
	Key string `json:"key"`
	Password string `json:"password"`
	Type string `json:"type"`
	KeystoreSetupType *string `json:"keystoreSetupType,omitempty"`
}

// NewSsoKeystoreAllOf instantiates a new SsoKeystoreAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSsoKeystoreAllOf(key string, password string, type_ string) *SsoKeystoreAllOf {
	this := SsoKeystoreAllOf{}
	this.Key = key
	this.Password = password
	this.Type = type_
	return &this
}

// NewSsoKeystoreAllOfWithDefaults instantiates a new SsoKeystoreAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSsoKeystoreAllOfWithDefaults() *SsoKeystoreAllOf {
	this := SsoKeystoreAllOf{}
	var key string = " "
	this.Key = key
	return &this
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *SsoKeystoreAllOf) GetKeys() []CertificateKey {
	if o == nil || o.Keys == nil {
		var ret []CertificateKey
		return ret
	}
	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsoKeystoreAllOf) GetKeysOk() ([]CertificateKey, bool) {
	if o == nil || o.Keys == nil {
		return nil, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *SsoKeystoreAllOf) HasKeys() bool {
	if o != nil && o.Keys != nil {
		return true
	}

	return false
}

// SetKeys gets a reference to the given []CertificateKey and assigns it to the Keys field.
func (o *SsoKeystoreAllOf) SetKeys(v []CertificateKey) {
	o.Keys = v
}

// GetKey returns the Key field value
func (o *SsoKeystoreAllOf) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *SsoKeystoreAllOf) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *SsoKeystoreAllOf) SetKey(v string) {
	o.Key = v
}

// GetPassword returns the Password field value
func (o *SsoKeystoreAllOf) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *SsoKeystoreAllOf) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *SsoKeystoreAllOf) SetPassword(v string) {
	o.Password = v
}

// GetType returns the Type field value
func (o *SsoKeystoreAllOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SsoKeystoreAllOf) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SsoKeystoreAllOf) SetType(v string) {
	o.Type = v
}

// GetKeystoreSetupType returns the KeystoreSetupType field value if set, zero value otherwise.
func (o *SsoKeystoreAllOf) GetKeystoreSetupType() string {
	if o == nil || o.KeystoreSetupType == nil {
		var ret string
		return ret
	}
	return *o.KeystoreSetupType
}

// GetKeystoreSetupTypeOk returns a tuple with the KeystoreSetupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsoKeystoreAllOf) GetKeystoreSetupTypeOk() (*string, bool) {
	if o == nil || o.KeystoreSetupType == nil {
		return nil, false
	}
	return o.KeystoreSetupType, true
}

// HasKeystoreSetupType returns a boolean if a field has been set.
func (o *SsoKeystoreAllOf) HasKeystoreSetupType() bool {
	if o != nil && o.KeystoreSetupType != nil {
		return true
	}

	return false
}

// SetKeystoreSetupType gets a reference to the given string and assigns it to the KeystoreSetupType field.
func (o *SsoKeystoreAllOf) SetKeystoreSetupType(v string) {
	o.KeystoreSetupType = &v
}

func (o SsoKeystoreAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Keys != nil {
		toSerialize["keys"] = o.Keys
	}
	if true {
		toSerialize["key"] = o.Key
	}
	if true {
		toSerialize["password"] = o.Password
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.KeystoreSetupType != nil {
		toSerialize["keystoreSetupType"] = o.KeystoreSetupType
	}
	return json.Marshal(toSerialize)
}

type NullableSsoKeystoreAllOf struct {
	value *SsoKeystoreAllOf
	isSet bool
}

func (v NullableSsoKeystoreAllOf) Get() *SsoKeystoreAllOf {
	return v.value
}

func (v *NullableSsoKeystoreAllOf) Set(val *SsoKeystoreAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSsoKeystoreAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSsoKeystoreAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSsoKeystoreAllOf(val *SsoKeystoreAllOf) *NullableSsoKeystoreAllOf {
	return &NullableSsoKeystoreAllOf{value: val, isSet: true}
}

func (v NullableSsoKeystoreAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSsoKeystoreAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


