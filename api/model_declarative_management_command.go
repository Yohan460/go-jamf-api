/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeclarativeManagementCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeclarativeManagementCommand{}

// DeclarativeManagementCommand struct for DeclarativeManagementCommand
type DeclarativeManagementCommand struct {
	CommandType MdmCommandType `json:"commandType"`
	// Base64 encoded data to be sent with the command
	Data *string `json:"data,omitempty"`
}

type _DeclarativeManagementCommand DeclarativeManagementCommand

// NewDeclarativeManagementCommand instantiates a new DeclarativeManagementCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeclarativeManagementCommand(commandType MdmCommandType) *DeclarativeManagementCommand {
	this := DeclarativeManagementCommand{}
	this.CommandType = commandType
	return &this
}

// NewDeclarativeManagementCommandWithDefaults instantiates a new DeclarativeManagementCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeclarativeManagementCommandWithDefaults() *DeclarativeManagementCommand {
	this := DeclarativeManagementCommand{}
	return &this
}

// GetCommandType returns the CommandType field value
func (o *DeclarativeManagementCommand) GetCommandType() MdmCommandType {
	if o == nil {
		var ret MdmCommandType
		return ret
	}

	return o.CommandType
}

// GetCommandTypeOk returns a tuple with the CommandType field value
// and a boolean to check if the value has been set.
func (o *DeclarativeManagementCommand) GetCommandTypeOk() (*MdmCommandType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommandType, true
}

// SetCommandType sets field value
func (o *DeclarativeManagementCommand) SetCommandType(v MdmCommandType) {
	o.CommandType = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *DeclarativeManagementCommand) GetData() string {
	if o == nil || IsNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeclarativeManagementCommand) GetDataOk() (*string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *DeclarativeManagementCommand) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *DeclarativeManagementCommand) SetData(v string) {
	o.Data = &v
}

func (o DeclarativeManagementCommand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeclarativeManagementCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["commandType"] = o.CommandType
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

func (o *DeclarativeManagementCommand) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"commandType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeclarativeManagementCommand := _DeclarativeManagementCommand{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeclarativeManagementCommand)

	if err != nil {
		return err
	}

	*o = DeclarativeManagementCommand(varDeclarativeManagementCommand)

	return err
}

type NullableDeclarativeManagementCommand struct {
	value *DeclarativeManagementCommand
	isSet bool
}

func (v NullableDeclarativeManagementCommand) Get() *DeclarativeManagementCommand {
	return v.value
}

func (v *NullableDeclarativeManagementCommand) Set(val *DeclarativeManagementCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableDeclarativeManagementCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableDeclarativeManagementCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeclarativeManagementCommand(val *DeclarativeManagementCommand) *NullableDeclarativeManagementCommand {
	return &NullableDeclarativeManagementCommand{value: val, isSet: true}
}

func (v NullableDeclarativeManagementCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeclarativeManagementCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


