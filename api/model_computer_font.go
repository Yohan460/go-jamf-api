/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ComputerFont type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComputerFont{}

// ComputerFont struct for ComputerFont
type ComputerFont struct {
	Name *string `json:"name,omitempty"`
	Version *string `json:"version,omitempty"`
	Path *string `json:"path,omitempty"`
}

// NewComputerFont instantiates a new ComputerFont object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputerFont() *ComputerFont {
	this := ComputerFont{}
	return &this
}

// NewComputerFontWithDefaults instantiates a new ComputerFont object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputerFontWithDefaults() *ComputerFont {
	this := ComputerFont{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ComputerFont) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerFont) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ComputerFont) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ComputerFont) SetName(v string) {
	o.Name = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ComputerFont) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerFont) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ComputerFont) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ComputerFont) SetVersion(v string) {
	o.Version = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *ComputerFont) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerFont) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *ComputerFont) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *ComputerFont) SetPath(v string) {
	o.Path = &v
}

func (o ComputerFont) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComputerFont) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	return toSerialize, nil
}

type NullableComputerFont struct {
	value *ComputerFont
	isSet bool
}

func (v NullableComputerFont) Get() *ComputerFont {
	return v.value
}

func (v *NullableComputerFont) Set(val *ComputerFont) {
	v.value = val
	v.isSet = true
}

func (v NullableComputerFont) IsSet() bool {
	return v.isSet
}

func (v *NullableComputerFont) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputerFont(val *ComputerFont) *NullableComputerFont {
	return &NullableComputerFont{value: val, isSet: true}
}

func (v NullableComputerFont) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputerFont) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


