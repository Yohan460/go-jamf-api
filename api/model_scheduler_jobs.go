/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the SchedulerJobs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchedulerJobs{}

// SchedulerJobs struct for SchedulerJobs
type SchedulerJobs struct {
	JobKeys []string `json:"jobKeys,omitempty"`
}

// NewSchedulerJobs instantiates a new SchedulerJobs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchedulerJobs() *SchedulerJobs {
	this := SchedulerJobs{}
	return &this
}

// NewSchedulerJobsWithDefaults instantiates a new SchedulerJobs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchedulerJobsWithDefaults() *SchedulerJobs {
	this := SchedulerJobs{}
	return &this
}

// GetJobKeys returns the JobKeys field value if set, zero value otherwise.
func (o *SchedulerJobs) GetJobKeys() []string {
	if o == nil || IsNil(o.JobKeys) {
		var ret []string
		return ret
	}
	return o.JobKeys
}

// GetJobKeysOk returns a tuple with the JobKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerJobs) GetJobKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.JobKeys) {
		return nil, false
	}
	return o.JobKeys, true
}

// HasJobKeys returns a boolean if a field has been set.
func (o *SchedulerJobs) HasJobKeys() bool {
	if o != nil && !IsNil(o.JobKeys) {
		return true
	}

	return false
}

// SetJobKeys gets a reference to the given []string and assigns it to the JobKeys field.
func (o *SchedulerJobs) SetJobKeys(v []string) {
	o.JobKeys = v
}

func (o SchedulerJobs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchedulerJobs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.JobKeys) {
		toSerialize["jobKeys"] = o.JobKeys
	}
	return toSerialize, nil
}

type NullableSchedulerJobs struct {
	value *SchedulerJobs
	isSet bool
}

func (v NullableSchedulerJobs) Get() *SchedulerJobs {
	return v.value
}

func (v *NullableSchedulerJobs) Set(val *SchedulerJobs) {
	v.value = val
	v.isSet = true
}

func (v NullableSchedulerJobs) IsSet() bool {
	return v.isSet
}

func (v *NullableSchedulerJobs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchedulerJobs(val *SchedulerJobs) *NullableSchedulerJobs {
	return &NullableSchedulerJobs{value: val, isSet: true}
}

func (v NullableSchedulerJobs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchedulerJobs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


