/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// VenafiPkiPayloadRecord struct for VenafiPkiPayloadRecord
type VenafiPkiPayloadRecord struct {
	UrlPath *string `json:"urlPath,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewVenafiPkiPayloadRecord instantiates a new VenafiPkiPayloadRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVenafiPkiPayloadRecord() *VenafiPkiPayloadRecord {
	this := VenafiPkiPayloadRecord{}
	return &this
}

// NewVenafiPkiPayloadRecordWithDefaults instantiates a new VenafiPkiPayloadRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVenafiPkiPayloadRecordWithDefaults() *VenafiPkiPayloadRecord {
	this := VenafiPkiPayloadRecord{}
	return &this
}

// GetUrlPath returns the UrlPath field value if set, zero value otherwise.
func (o *VenafiPkiPayloadRecord) GetUrlPath() string {
	if o == nil || o.UrlPath == nil {
		var ret string
		return ret
	}
	return *o.UrlPath
}

// GetUrlPathOk returns a tuple with the UrlPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VenafiPkiPayloadRecord) GetUrlPathOk() (*string, bool) {
	if o == nil || o.UrlPath == nil {
		return nil, false
	}
	return o.UrlPath, true
}

// HasUrlPath returns a boolean if a field has been set.
func (o *VenafiPkiPayloadRecord) HasUrlPath() bool {
	if o != nil && o.UrlPath != nil {
		return true
	}

	return false
}

// SetUrlPath gets a reference to the given string and assigns it to the UrlPath field.
func (o *VenafiPkiPayloadRecord) SetUrlPath(v string) {
	o.UrlPath = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VenafiPkiPayloadRecord) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VenafiPkiPayloadRecord) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VenafiPkiPayloadRecord) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VenafiPkiPayloadRecord) SetName(v string) {
	o.Name = &v
}

func (o VenafiPkiPayloadRecord) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UrlPath != nil {
		toSerialize["urlPath"] = o.UrlPath
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableVenafiPkiPayloadRecord struct {
	value *VenafiPkiPayloadRecord
	isSet bool
}

func (v NullableVenafiPkiPayloadRecord) Get() *VenafiPkiPayloadRecord {
	return v.value
}

func (v *NullableVenafiPkiPayloadRecord) Set(val *VenafiPkiPayloadRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableVenafiPkiPayloadRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableVenafiPkiPayloadRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVenafiPkiPayloadRecord(val *VenafiPkiPayloadRecord) *NullableVenafiPkiPayloadRecord {
	return &NullableVenafiPkiPayloadRecord{value: val, isSet: true}
}

func (v NullableVenafiPkiPayloadRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVenafiPkiPayloadRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


