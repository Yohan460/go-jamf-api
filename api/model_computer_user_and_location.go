/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ComputerUserAndLocation struct for ComputerUserAndLocation
type ComputerUserAndLocation struct {
	Username *string `json:"username,omitempty"`
	Realname *string `json:"realname,omitempty"`
	Email *string `json:"email,omitempty"`
	Position *string `json:"position,omitempty"`
	Phone *string `json:"phone,omitempty"`
	DepartmentId *string `json:"departmentId,omitempty"`
	BuildingId *string `json:"buildingId,omitempty"`
	Room *string `json:"room,omitempty"`
	ExtensionAttributes []ComputerExtensionAttribute `json:"extensionAttributes,omitempty"`
}

// NewComputerUserAndLocation instantiates a new ComputerUserAndLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputerUserAndLocation() *ComputerUserAndLocation {
	this := ComputerUserAndLocation{}
	return &this
}

// NewComputerUserAndLocationWithDefaults instantiates a new ComputerUserAndLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputerUserAndLocationWithDefaults() *ComputerUserAndLocation {
	this := ComputerUserAndLocation{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ComputerUserAndLocation) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerUserAndLocation) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *ComputerUserAndLocation) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *ComputerUserAndLocation) SetUsername(v string) {
	o.Username = &v
}

// GetRealname returns the Realname field value if set, zero value otherwise.
func (o *ComputerUserAndLocation) GetRealname() string {
	if o == nil || o.Realname == nil {
		var ret string
		return ret
	}
	return *o.Realname
}

// GetRealnameOk returns a tuple with the Realname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerUserAndLocation) GetRealnameOk() (*string, bool) {
	if o == nil || o.Realname == nil {
		return nil, false
	}
	return o.Realname, true
}

// HasRealname returns a boolean if a field has been set.
func (o *ComputerUserAndLocation) HasRealname() bool {
	if o != nil && o.Realname != nil {
		return true
	}

	return false
}

// SetRealname gets a reference to the given string and assigns it to the Realname field.
func (o *ComputerUserAndLocation) SetRealname(v string) {
	o.Realname = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ComputerUserAndLocation) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerUserAndLocation) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ComputerUserAndLocation) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *ComputerUserAndLocation) SetEmail(v string) {
	o.Email = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *ComputerUserAndLocation) GetPosition() string {
	if o == nil || o.Position == nil {
		var ret string
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerUserAndLocation) GetPositionOk() (*string, bool) {
	if o == nil || o.Position == nil {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *ComputerUserAndLocation) HasPosition() bool {
	if o != nil && o.Position != nil {
		return true
	}

	return false
}

// SetPosition gets a reference to the given string and assigns it to the Position field.
func (o *ComputerUserAndLocation) SetPosition(v string) {
	o.Position = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *ComputerUserAndLocation) GetPhone() string {
	if o == nil || o.Phone == nil {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerUserAndLocation) GetPhoneOk() (*string, bool) {
	if o == nil || o.Phone == nil {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *ComputerUserAndLocation) HasPhone() bool {
	if o != nil && o.Phone != nil {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *ComputerUserAndLocation) SetPhone(v string) {
	o.Phone = &v
}

// GetDepartmentId returns the DepartmentId field value if set, zero value otherwise.
func (o *ComputerUserAndLocation) GetDepartmentId() string {
	if o == nil || o.DepartmentId == nil {
		var ret string
		return ret
	}
	return *o.DepartmentId
}

// GetDepartmentIdOk returns a tuple with the DepartmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerUserAndLocation) GetDepartmentIdOk() (*string, bool) {
	if o == nil || o.DepartmentId == nil {
		return nil, false
	}
	return o.DepartmentId, true
}

// HasDepartmentId returns a boolean if a field has been set.
func (o *ComputerUserAndLocation) HasDepartmentId() bool {
	if o != nil && o.DepartmentId != nil {
		return true
	}

	return false
}

// SetDepartmentId gets a reference to the given string and assigns it to the DepartmentId field.
func (o *ComputerUserAndLocation) SetDepartmentId(v string) {
	o.DepartmentId = &v
}

// GetBuildingId returns the BuildingId field value if set, zero value otherwise.
func (o *ComputerUserAndLocation) GetBuildingId() string {
	if o == nil || o.BuildingId == nil {
		var ret string
		return ret
	}
	return *o.BuildingId
}

// GetBuildingIdOk returns a tuple with the BuildingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerUserAndLocation) GetBuildingIdOk() (*string, bool) {
	if o == nil || o.BuildingId == nil {
		return nil, false
	}
	return o.BuildingId, true
}

// HasBuildingId returns a boolean if a field has been set.
func (o *ComputerUserAndLocation) HasBuildingId() bool {
	if o != nil && o.BuildingId != nil {
		return true
	}

	return false
}

// SetBuildingId gets a reference to the given string and assigns it to the BuildingId field.
func (o *ComputerUserAndLocation) SetBuildingId(v string) {
	o.BuildingId = &v
}

// GetRoom returns the Room field value if set, zero value otherwise.
func (o *ComputerUserAndLocation) GetRoom() string {
	if o == nil || o.Room == nil {
		var ret string
		return ret
	}
	return *o.Room
}

// GetRoomOk returns a tuple with the Room field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerUserAndLocation) GetRoomOk() (*string, bool) {
	if o == nil || o.Room == nil {
		return nil, false
	}
	return o.Room, true
}

// HasRoom returns a boolean if a field has been set.
func (o *ComputerUserAndLocation) HasRoom() bool {
	if o != nil && o.Room != nil {
		return true
	}

	return false
}

// SetRoom gets a reference to the given string and assigns it to the Room field.
func (o *ComputerUserAndLocation) SetRoom(v string) {
	o.Room = &v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *ComputerUserAndLocation) GetExtensionAttributes() []ComputerExtensionAttribute {
	if o == nil || o.ExtensionAttributes == nil {
		var ret []ComputerExtensionAttribute
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerUserAndLocation) GetExtensionAttributesOk() ([]ComputerExtensionAttribute, bool) {
	if o == nil || o.ExtensionAttributes == nil {
		return nil, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *ComputerUserAndLocation) HasExtensionAttributes() bool {
	if o != nil && o.ExtensionAttributes != nil {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given []ComputerExtensionAttribute and assigns it to the ExtensionAttributes field.
func (o *ComputerUserAndLocation) SetExtensionAttributes(v []ComputerExtensionAttribute) {
	o.ExtensionAttributes = v
}

func (o ComputerUserAndLocation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.Realname != nil {
		toSerialize["realname"] = o.Realname
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.Position != nil {
		toSerialize["position"] = o.Position
	}
	if o.Phone != nil {
		toSerialize["phone"] = o.Phone
	}
	if o.DepartmentId != nil {
		toSerialize["departmentId"] = o.DepartmentId
	}
	if o.BuildingId != nil {
		toSerialize["buildingId"] = o.BuildingId
	}
	if o.Room != nil {
		toSerialize["room"] = o.Room
	}
	if o.ExtensionAttributes != nil {
		toSerialize["extensionAttributes"] = o.ExtensionAttributes
	}
	return json.Marshal(toSerialize)
}

type NullableComputerUserAndLocation struct {
	value *ComputerUserAndLocation
	isSet bool
}

func (v NullableComputerUserAndLocation) Get() *ComputerUserAndLocation {
	return v.value
}

func (v *NullableComputerUserAndLocation) Set(val *ComputerUserAndLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableComputerUserAndLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableComputerUserAndLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputerUserAndLocation(val *ComputerUserAndLocation) *NullableComputerUserAndLocation {
	return &NullableComputerUserAndLocation{value: val, isSet: true}
}

func (v NullableComputerUserAndLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputerUserAndLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


