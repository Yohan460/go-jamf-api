/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the PatchPolicyLogEligibleRetryCount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchPolicyLogEligibleRetryCount{}

// PatchPolicyLogEligibleRetryCount struct for PatchPolicyLogEligibleRetryCount
type PatchPolicyLogEligibleRetryCount struct {
	Count *int32 `json:"count,omitempty"`
}

// NewPatchPolicyLogEligibleRetryCount instantiates a new PatchPolicyLogEligibleRetryCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchPolicyLogEligibleRetryCount() *PatchPolicyLogEligibleRetryCount {
	this := PatchPolicyLogEligibleRetryCount{}
	return &this
}

// NewPatchPolicyLogEligibleRetryCountWithDefaults instantiates a new PatchPolicyLogEligibleRetryCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchPolicyLogEligibleRetryCountWithDefaults() *PatchPolicyLogEligibleRetryCount {
	this := PatchPolicyLogEligibleRetryCount{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *PatchPolicyLogEligibleRetryCount) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyLogEligibleRetryCount) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *PatchPolicyLogEligibleRetryCount) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *PatchPolicyLogEligibleRetryCount) SetCount(v int32) {
	o.Count = &v
}

func (o PatchPolicyLogEligibleRetryCount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchPolicyLogEligibleRetryCount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	return toSerialize, nil
}

type NullablePatchPolicyLogEligibleRetryCount struct {
	value *PatchPolicyLogEligibleRetryCount
	isSet bool
}

func (v NullablePatchPolicyLogEligibleRetryCount) Get() *PatchPolicyLogEligibleRetryCount {
	return v.value
}

func (v *NullablePatchPolicyLogEligibleRetryCount) Set(val *PatchPolicyLogEligibleRetryCount) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchPolicyLogEligibleRetryCount) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchPolicyLogEligibleRetryCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchPolicyLogEligibleRetryCount(val *PatchPolicyLogEligibleRetryCount) *NullablePatchPolicyLogEligibleRetryCount {
	return &NullablePatchPolicyLogEligibleRetryCount{value: val, isSet: true}
}

func (v NullablePatchPolicyLogEligibleRetryCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchPolicyLogEligibleRetryCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


