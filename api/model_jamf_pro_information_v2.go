/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the JamfProInformationV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JamfProInformationV2{}

// JamfProInformationV2 struct for JamfProInformationV2
type JamfProInformationV2 struct {
	VppTokenEnabled *bool `json:"vppTokenEnabled,omitempty"`
	DepAccountEnabled *bool `json:"depAccountEnabled,omitempty"`
	ByodEnabled *bool `json:"byodEnabled,omitempty"`
	UserMigrationEnabled *bool `json:"userMigrationEnabled,omitempty"`
	CloudDeploymentsEnabled *bool `json:"cloudDeploymentsEnabled,omitempty"`
	PatchEnabled *bool `json:"patchEnabled,omitempty"`
	SsoSamlEnabled *bool `json:"ssoSamlEnabled,omitempty"`
	SmtpEnabled *bool `json:"smtpEnabled,omitempty"`
}

// NewJamfProInformationV2 instantiates a new JamfProInformationV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJamfProInformationV2() *JamfProInformationV2 {
	this := JamfProInformationV2{}
	return &this
}

// NewJamfProInformationV2WithDefaults instantiates a new JamfProInformationV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJamfProInformationV2WithDefaults() *JamfProInformationV2 {
	this := JamfProInformationV2{}
	return &this
}

// GetVppTokenEnabled returns the VppTokenEnabled field value if set, zero value otherwise.
func (o *JamfProInformationV2) GetVppTokenEnabled() bool {
	if o == nil || IsNil(o.VppTokenEnabled) {
		var ret bool
		return ret
	}
	return *o.VppTokenEnabled
}

// GetVppTokenEnabledOk returns a tuple with the VppTokenEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JamfProInformationV2) GetVppTokenEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.VppTokenEnabled) {
		return nil, false
	}
	return o.VppTokenEnabled, true
}

// HasVppTokenEnabled returns a boolean if a field has been set.
func (o *JamfProInformationV2) HasVppTokenEnabled() bool {
	if o != nil && !IsNil(o.VppTokenEnabled) {
		return true
	}

	return false
}

// SetVppTokenEnabled gets a reference to the given bool and assigns it to the VppTokenEnabled field.
func (o *JamfProInformationV2) SetVppTokenEnabled(v bool) {
	o.VppTokenEnabled = &v
}

// GetDepAccountEnabled returns the DepAccountEnabled field value if set, zero value otherwise.
func (o *JamfProInformationV2) GetDepAccountEnabled() bool {
	if o == nil || IsNil(o.DepAccountEnabled) {
		var ret bool
		return ret
	}
	return *o.DepAccountEnabled
}

// GetDepAccountEnabledOk returns a tuple with the DepAccountEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JamfProInformationV2) GetDepAccountEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DepAccountEnabled) {
		return nil, false
	}
	return o.DepAccountEnabled, true
}

// HasDepAccountEnabled returns a boolean if a field has been set.
func (o *JamfProInformationV2) HasDepAccountEnabled() bool {
	if o != nil && !IsNil(o.DepAccountEnabled) {
		return true
	}

	return false
}

// SetDepAccountEnabled gets a reference to the given bool and assigns it to the DepAccountEnabled field.
func (o *JamfProInformationV2) SetDepAccountEnabled(v bool) {
	o.DepAccountEnabled = &v
}

// GetByodEnabled returns the ByodEnabled field value if set, zero value otherwise.
func (o *JamfProInformationV2) GetByodEnabled() bool {
	if o == nil || IsNil(o.ByodEnabled) {
		var ret bool
		return ret
	}
	return *o.ByodEnabled
}

// GetByodEnabledOk returns a tuple with the ByodEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JamfProInformationV2) GetByodEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ByodEnabled) {
		return nil, false
	}
	return o.ByodEnabled, true
}

// HasByodEnabled returns a boolean if a field has been set.
func (o *JamfProInformationV2) HasByodEnabled() bool {
	if o != nil && !IsNil(o.ByodEnabled) {
		return true
	}

	return false
}

// SetByodEnabled gets a reference to the given bool and assigns it to the ByodEnabled field.
func (o *JamfProInformationV2) SetByodEnabled(v bool) {
	o.ByodEnabled = &v
}

// GetUserMigrationEnabled returns the UserMigrationEnabled field value if set, zero value otherwise.
func (o *JamfProInformationV2) GetUserMigrationEnabled() bool {
	if o == nil || IsNil(o.UserMigrationEnabled) {
		var ret bool
		return ret
	}
	return *o.UserMigrationEnabled
}

// GetUserMigrationEnabledOk returns a tuple with the UserMigrationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JamfProInformationV2) GetUserMigrationEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.UserMigrationEnabled) {
		return nil, false
	}
	return o.UserMigrationEnabled, true
}

// HasUserMigrationEnabled returns a boolean if a field has been set.
func (o *JamfProInformationV2) HasUserMigrationEnabled() bool {
	if o != nil && !IsNil(o.UserMigrationEnabled) {
		return true
	}

	return false
}

// SetUserMigrationEnabled gets a reference to the given bool and assigns it to the UserMigrationEnabled field.
func (o *JamfProInformationV2) SetUserMigrationEnabled(v bool) {
	o.UserMigrationEnabled = &v
}

// GetCloudDeploymentsEnabled returns the CloudDeploymentsEnabled field value if set, zero value otherwise.
func (o *JamfProInformationV2) GetCloudDeploymentsEnabled() bool {
	if o == nil || IsNil(o.CloudDeploymentsEnabled) {
		var ret bool
		return ret
	}
	return *o.CloudDeploymentsEnabled
}

// GetCloudDeploymentsEnabledOk returns a tuple with the CloudDeploymentsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JamfProInformationV2) GetCloudDeploymentsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.CloudDeploymentsEnabled) {
		return nil, false
	}
	return o.CloudDeploymentsEnabled, true
}

// HasCloudDeploymentsEnabled returns a boolean if a field has been set.
func (o *JamfProInformationV2) HasCloudDeploymentsEnabled() bool {
	if o != nil && !IsNil(o.CloudDeploymentsEnabled) {
		return true
	}

	return false
}

// SetCloudDeploymentsEnabled gets a reference to the given bool and assigns it to the CloudDeploymentsEnabled field.
func (o *JamfProInformationV2) SetCloudDeploymentsEnabled(v bool) {
	o.CloudDeploymentsEnabled = &v
}

// GetPatchEnabled returns the PatchEnabled field value if set, zero value otherwise.
func (o *JamfProInformationV2) GetPatchEnabled() bool {
	if o == nil || IsNil(o.PatchEnabled) {
		var ret bool
		return ret
	}
	return *o.PatchEnabled
}

// GetPatchEnabledOk returns a tuple with the PatchEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JamfProInformationV2) GetPatchEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PatchEnabled) {
		return nil, false
	}
	return o.PatchEnabled, true
}

// HasPatchEnabled returns a boolean if a field has been set.
func (o *JamfProInformationV2) HasPatchEnabled() bool {
	if o != nil && !IsNil(o.PatchEnabled) {
		return true
	}

	return false
}

// SetPatchEnabled gets a reference to the given bool and assigns it to the PatchEnabled field.
func (o *JamfProInformationV2) SetPatchEnabled(v bool) {
	o.PatchEnabled = &v
}

// GetSsoSamlEnabled returns the SsoSamlEnabled field value if set, zero value otherwise.
func (o *JamfProInformationV2) GetSsoSamlEnabled() bool {
	if o == nil || IsNil(o.SsoSamlEnabled) {
		var ret bool
		return ret
	}
	return *o.SsoSamlEnabled
}

// GetSsoSamlEnabledOk returns a tuple with the SsoSamlEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JamfProInformationV2) GetSsoSamlEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SsoSamlEnabled) {
		return nil, false
	}
	return o.SsoSamlEnabled, true
}

// HasSsoSamlEnabled returns a boolean if a field has been set.
func (o *JamfProInformationV2) HasSsoSamlEnabled() bool {
	if o != nil && !IsNil(o.SsoSamlEnabled) {
		return true
	}

	return false
}

// SetSsoSamlEnabled gets a reference to the given bool and assigns it to the SsoSamlEnabled field.
func (o *JamfProInformationV2) SetSsoSamlEnabled(v bool) {
	o.SsoSamlEnabled = &v
}

// GetSmtpEnabled returns the SmtpEnabled field value if set, zero value otherwise.
func (o *JamfProInformationV2) GetSmtpEnabled() bool {
	if o == nil || IsNil(o.SmtpEnabled) {
		var ret bool
		return ret
	}
	return *o.SmtpEnabled
}

// GetSmtpEnabledOk returns a tuple with the SmtpEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JamfProInformationV2) GetSmtpEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SmtpEnabled) {
		return nil, false
	}
	return o.SmtpEnabled, true
}

// HasSmtpEnabled returns a boolean if a field has been set.
func (o *JamfProInformationV2) HasSmtpEnabled() bool {
	if o != nil && !IsNil(o.SmtpEnabled) {
		return true
	}

	return false
}

// SetSmtpEnabled gets a reference to the given bool and assigns it to the SmtpEnabled field.
func (o *JamfProInformationV2) SetSmtpEnabled(v bool) {
	o.SmtpEnabled = &v
}

func (o JamfProInformationV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JamfProInformationV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VppTokenEnabled) {
		toSerialize["vppTokenEnabled"] = o.VppTokenEnabled
	}
	if !IsNil(o.DepAccountEnabled) {
		toSerialize["depAccountEnabled"] = o.DepAccountEnabled
	}
	if !IsNil(o.ByodEnabled) {
		toSerialize["byodEnabled"] = o.ByodEnabled
	}
	if !IsNil(o.UserMigrationEnabled) {
		toSerialize["userMigrationEnabled"] = o.UserMigrationEnabled
	}
	if !IsNil(o.CloudDeploymentsEnabled) {
		toSerialize["cloudDeploymentsEnabled"] = o.CloudDeploymentsEnabled
	}
	if !IsNil(o.PatchEnabled) {
		toSerialize["patchEnabled"] = o.PatchEnabled
	}
	if !IsNil(o.SsoSamlEnabled) {
		toSerialize["ssoSamlEnabled"] = o.SsoSamlEnabled
	}
	if !IsNil(o.SmtpEnabled) {
		toSerialize["smtpEnabled"] = o.SmtpEnabled
	}
	return toSerialize, nil
}

type NullableJamfProInformationV2 struct {
	value *JamfProInformationV2
	isSet bool
}

func (v NullableJamfProInformationV2) Get() *JamfProInformationV2 {
	return v.value
}

func (v *NullableJamfProInformationV2) Set(val *JamfProInformationV2) {
	v.value = val
	v.isSet = true
}

func (v NullableJamfProInformationV2) IsSet() bool {
	return v.isSet
}

func (v *NullableJamfProInformationV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJamfProInformationV2(val *JamfProInformationV2) *NullableJamfProInformationV2 {
	return &NullableJamfProInformationV2{value: val, isSet: true}
}

func (v NullableJamfProInformationV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJamfProInformationV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


