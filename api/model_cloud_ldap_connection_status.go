/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the CloudLdapConnectionStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudLdapConnectionStatus{}

// CloudLdapConnectionStatus Status of tested Cloud Ldap connection
type CloudLdapConnectionStatus struct {
	Status *string `json:"status,omitempty"`
}

// NewCloudLdapConnectionStatus instantiates a new CloudLdapConnectionStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudLdapConnectionStatus() *CloudLdapConnectionStatus {
	this := CloudLdapConnectionStatus{}
	return &this
}

// NewCloudLdapConnectionStatusWithDefaults instantiates a new CloudLdapConnectionStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudLdapConnectionStatusWithDefaults() *CloudLdapConnectionStatus {
	this := CloudLdapConnectionStatus{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CloudLdapConnectionStatus) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudLdapConnectionStatus) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CloudLdapConnectionStatus) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *CloudLdapConnectionStatus) SetStatus(v string) {
	o.Status = &v
}

func (o CloudLdapConnectionStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloudLdapConnectionStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableCloudLdapConnectionStatus struct {
	value *CloudLdapConnectionStatus
	isSet bool
}

func (v NullableCloudLdapConnectionStatus) Get() *CloudLdapConnectionStatus {
	return v.value
}

func (v *NullableCloudLdapConnectionStatus) Set(val *CloudLdapConnectionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudLdapConnectionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudLdapConnectionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudLdapConnectionStatus(val *CloudLdapConnectionStatus) *NullableCloudLdapConnectionStatus {
	return &NullableCloudLdapConnectionStatus{value: val, isSet: true}
}

func (v NullableCloudLdapConnectionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudLdapConnectionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


