/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type JamfProtectApi interface {

	/*
	V1JamfProtectDelete Delete Jamf Protect API registration.

	Deletes an existing Jamf Protect API registration if present. Jamf Protect API integration will be disabled.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV1JamfProtectDeleteRequest
	*/
	V1JamfProtectDelete(ctx context.Context) ApiV1JamfProtectDeleteRequest

	// V1JamfProtectDeleteExecute executes the request
	V1JamfProtectDeleteExecute(r ApiV1JamfProtectDeleteRequest) (*http.Response, error)

	/*
	V1JamfProtectDeploymentsIdTasksGet Search for deployment tasks for a config profile linked to Jamf Protect 

	Search for config profiles linked to Jamf Protect

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the UUID of the Jamf Protect deployment
	@return ApiV1JamfProtectDeploymentsIdTasksGetRequest
	*/
	V1JamfProtectDeploymentsIdTasksGet(ctx context.Context, id string) ApiV1JamfProtectDeploymentsIdTasksGetRequest

	// V1JamfProtectDeploymentsIdTasksGetExecute executes the request
	//  @return DeploymentTaskSearchResults
	V1JamfProtectDeploymentsIdTasksGetExecute(r ApiV1JamfProtectDeploymentsIdTasksGetRequest) (*DeploymentTaskSearchResults, *http.Response, error)

	/*
	V1JamfProtectDeploymentsIdTasksRetryPost Request a retry of Protect install tasks 

	Request a retry of Protect install tasks


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the UUID of the deployment associated with the retry
	@return ApiV1JamfProtectDeploymentsIdTasksRetryPostRequest
	*/
	V1JamfProtectDeploymentsIdTasksRetryPost(ctx context.Context, id string) ApiV1JamfProtectDeploymentsIdTasksRetryPostRequest

	// V1JamfProtectDeploymentsIdTasksRetryPostExecute executes the request
	V1JamfProtectDeploymentsIdTasksRetryPostExecute(r ApiV1JamfProtectDeploymentsIdTasksRetryPostRequest) (*http.Response, error)

	/*
	V1JamfProtectGet Jamf Protect integration settings

	Jamf Protect integration settings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV1JamfProtectGetRequest
	*/
	V1JamfProtectGet(ctx context.Context) ApiV1JamfProtectGetRequest

	// V1JamfProtectGetExecute executes the request
	//  @return ProtectSettingsResponse
	V1JamfProtectGetExecute(r ApiV1JamfProtectGetRequest) (*ProtectSettingsResponse, *http.Response, error)

	/*
	V1JamfProtectHistoryGet Get Jamf Protect history 

	Get Jamf Protect history


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV1JamfProtectHistoryGetRequest
	*/
	V1JamfProtectHistoryGet(ctx context.Context) ApiV1JamfProtectHistoryGetRequest

	// V1JamfProtectHistoryGetExecute executes the request
	//  @return HistorySearchResults
	V1JamfProtectHistoryGetExecute(r ApiV1JamfProtectHistoryGetRequest) (*HistorySearchResults, *http.Response, error)

	/*
	V1JamfProtectHistoryPost Add Jamf Protect history notes 

	Add Jamf Protect history notes


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV1JamfProtectHistoryPostRequest
	*/
	V1JamfProtectHistoryPost(ctx context.Context) ApiV1JamfProtectHistoryPostRequest

	// V1JamfProtectHistoryPostExecute executes the request
	//  @return HrefResponse
	V1JamfProtectHistoryPostExecute(r ApiV1JamfProtectHistoryPostRequest) (*HrefResponse, *http.Response, error)

	/*
	V1JamfProtectPlansGet Get all of the previously synced Jamf Protect Plans with information about their associated configuration profile

	Get all of the previously synced Jamf Protect Plans with information about their associated configuration profile

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV1JamfProtectPlansGetRequest
	*/
	V1JamfProtectPlansGet(ctx context.Context) ApiV1JamfProtectPlansGetRequest

	// V1JamfProtectPlansGetExecute executes the request
	//  @return PlanSearchResults
	V1JamfProtectPlansGetExecute(r ApiV1JamfProtectPlansGetRequest) (*PlanSearchResults, *http.Response, error)

	/*
	V1JamfProtectPlansSyncPost Sync Plans with Jamf Protect

	Sync Plans with Jamf Protect. Configuration profiles associated with new plans will be imported to Jamf Pro.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV1JamfProtectPlansSyncPostRequest
	*/
	V1JamfProtectPlansSyncPost(ctx context.Context) ApiV1JamfProtectPlansSyncPostRequest

	// V1JamfProtectPlansSyncPostExecute executes the request
	V1JamfProtectPlansSyncPostExecute(r ApiV1JamfProtectPlansSyncPostRequest) (*http.Response, error)

	/*
	V1JamfProtectPut Jamf Protect integration settings

	Jamf Protect integration settings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV1JamfProtectPutRequest
	*/
	V1JamfProtectPut(ctx context.Context) ApiV1JamfProtectPutRequest

	// V1JamfProtectPutExecute executes the request
	//  @return ProtectSettingsResponse
	V1JamfProtectPutExecute(r ApiV1JamfProtectPutRequest) (*ProtectSettingsResponse, *http.Response, error)

	/*
	V1JamfProtectRegisterPost Register a Jamf Protect API configuration with Jamf Pro

	Register a Jamf Protect API configuration with Jamf Pro

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV1JamfProtectRegisterPostRequest
	*/
	V1JamfProtectRegisterPost(ctx context.Context) ApiV1JamfProtectRegisterPostRequest

	// V1JamfProtectRegisterPostExecute executes the request
	//  @return ProtectSettingsResponse
	V1JamfProtectRegisterPostExecute(r ApiV1JamfProtectRegisterPostRequest) (*ProtectSettingsResponse, *http.Response, error)
}

// JamfProtectApiService JamfProtectApi service
type JamfProtectApiService service

type ApiV1JamfProtectDeleteRequest struct {
	ctx context.Context
	ApiService JamfProtectApi
}

func (r ApiV1JamfProtectDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1JamfProtectDeleteExecute(r)
}

/*
V1JamfProtectDelete Delete Jamf Protect API registration.

Deletes an existing Jamf Protect API registration if present. Jamf Protect API integration will be disabled.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1JamfProtectDeleteRequest
*/
func (a *JamfProtectApiService) V1JamfProtectDelete(ctx context.Context) ApiV1JamfProtectDeleteRequest {
	return ApiV1JamfProtectDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *JamfProtectApiService) V1JamfProtectDeleteExecute(r ApiV1JamfProtectDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JamfProtectApiService.V1JamfProtectDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/jamf-protect"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1JamfProtectDeploymentsIdTasksGetRequest struct {
	ctx context.Context
	ApiService JamfProtectApi
	id string
	page *int32
	pageSize *int32
	sort *[]string
	filter *string
}

func (r ApiV1JamfProtectDeploymentsIdTasksGetRequest) Page(page int32) ApiV1JamfProtectDeploymentsIdTasksGetRequest {
	r.page = &page
	return r
}

func (r ApiV1JamfProtectDeploymentsIdTasksGetRequest) PageSize(pageSize int32) ApiV1JamfProtectDeploymentsIdTasksGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Default sort order is descending. Multiple sort criteria are supported and must be entered on separate lines in Swagger UI. In the URI the &#39;sort&#39; query param is not duplicated for each sort criterion, e.g., ...&amp;sort&#x3D;name:asc,date:desc. Fields that can be sorted: status, updated
func (r ApiV1JamfProtectDeploymentsIdTasksGetRequest) Sort(sort []string) ApiV1JamfProtectDeploymentsIdTasksGetRequest {
	r.sort = &sort
	return r
}

// Query in the RSQL format, allowing to filter results. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: status, updated, version This param can be combined with paging and sorting. Example: filter&#x3D;username!&#x3D;admin and details&#x3D;&#x3D;*disabled* and date&lt;2019-12-15
func (r ApiV1JamfProtectDeploymentsIdTasksGetRequest) Filter(filter string) ApiV1JamfProtectDeploymentsIdTasksGetRequest {
	r.filter = &filter
	return r
}

func (r ApiV1JamfProtectDeploymentsIdTasksGetRequest) Execute() (*DeploymentTaskSearchResults, *http.Response, error) {
	return r.ApiService.V1JamfProtectDeploymentsIdTasksGetExecute(r)
}

/*
V1JamfProtectDeploymentsIdTasksGet Search for deployment tasks for a config profile linked to Jamf Protect 

Search for config profiles linked to Jamf Protect

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the UUID of the Jamf Protect deployment
 @return ApiV1JamfProtectDeploymentsIdTasksGetRequest
*/
func (a *JamfProtectApiService) V1JamfProtectDeploymentsIdTasksGet(ctx context.Context, id string) ApiV1JamfProtectDeploymentsIdTasksGetRequest {
	return ApiV1JamfProtectDeploymentsIdTasksGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DeploymentTaskSearchResults
func (a *JamfProtectApiService) V1JamfProtectDeploymentsIdTasksGetExecute(r ApiV1JamfProtectDeploymentsIdTasksGetRequest) (*DeploymentTaskSearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeploymentTaskSearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JamfProtectApiService.V1JamfProtectDeploymentsIdTasksGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/jamf-protect/deployments/{id}/tasks"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page-size", parameterToString(*r.pageSize, ""))
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sort", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sort", parameterToString(t, "multi"))
		}
	}
	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1JamfProtectDeploymentsIdTasksRetryPostRequest struct {
	ctx context.Context
	ApiService JamfProtectApi
	id string
	ids *Ids
}

// task IDs to retry
func (r ApiV1JamfProtectDeploymentsIdTasksRetryPostRequest) Ids(ids Ids) ApiV1JamfProtectDeploymentsIdTasksRetryPostRequest {
	r.ids = &ids
	return r
}

func (r ApiV1JamfProtectDeploymentsIdTasksRetryPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1JamfProtectDeploymentsIdTasksRetryPostExecute(r)
}

/*
V1JamfProtectDeploymentsIdTasksRetryPost Request a retry of Protect install tasks 

Request a retry of Protect install tasks


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the UUID of the deployment associated with the retry
 @return ApiV1JamfProtectDeploymentsIdTasksRetryPostRequest
*/
func (a *JamfProtectApiService) V1JamfProtectDeploymentsIdTasksRetryPost(ctx context.Context, id string) ApiV1JamfProtectDeploymentsIdTasksRetryPostRequest {
	return ApiV1JamfProtectDeploymentsIdTasksRetryPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *JamfProtectApiService) V1JamfProtectDeploymentsIdTasksRetryPostExecute(r ApiV1JamfProtectDeploymentsIdTasksRetryPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JamfProtectApiService.V1JamfProtectDeploymentsIdTasksRetryPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/jamf-protect/deployments/{id}/tasks/retry"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ids == nil {
		return nil, reportError("ids is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ids
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1JamfProtectGetRequest struct {
	ctx context.Context
	ApiService JamfProtectApi
}

func (r ApiV1JamfProtectGetRequest) Execute() (*ProtectSettingsResponse, *http.Response, error) {
	return r.ApiService.V1JamfProtectGetExecute(r)
}

/*
V1JamfProtectGet Jamf Protect integration settings

Jamf Protect integration settings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1JamfProtectGetRequest
*/
func (a *JamfProtectApiService) V1JamfProtectGet(ctx context.Context) ApiV1JamfProtectGetRequest {
	return ApiV1JamfProtectGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProtectSettingsResponse
func (a *JamfProtectApiService) V1JamfProtectGetExecute(r ApiV1JamfProtectGetRequest) (*ProtectSettingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProtectSettingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JamfProtectApiService.V1JamfProtectGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/jamf-protect"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1JamfProtectHistoryGetRequest struct {
	ctx context.Context
	ApiService JamfProtectApi
	page *int32
	pageSize *int32
	sort *[]string
	filter *string
}

func (r ApiV1JamfProtectHistoryGetRequest) Page(page int32) ApiV1JamfProtectHistoryGetRequest {
	r.page = &page
	return r
}

func (r ApiV1JamfProtectHistoryGetRequest) PageSize(pageSize int32) ApiV1JamfProtectHistoryGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Default sort order is descending. Multiple sort criteria are supported and must be entered on separate lines in Swagger UI. In the URI the &#39;sort&#39; query param is not duplicated for each sort criterion, e.g., ...&amp;sort&#x3D;name:asc,date:desc. Fields that can be sorted: status, updated
func (r ApiV1JamfProtectHistoryGetRequest) Sort(sort []string) ApiV1JamfProtectHistoryGetRequest {
	r.sort = &sort
	return r
}

// Query in the RSQL format, allowing to filter results. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: status, updated, version This param can be combined with paging and sorting. Example: filter&#x3D;username!&#x3D;admin and details&#x3D;&#x3D;*disabled* and date&lt;2019-12-15
func (r ApiV1JamfProtectHistoryGetRequest) Filter(filter string) ApiV1JamfProtectHistoryGetRequest {
	r.filter = &filter
	return r
}

func (r ApiV1JamfProtectHistoryGetRequest) Execute() (*HistorySearchResults, *http.Response, error) {
	return r.ApiService.V1JamfProtectHistoryGetExecute(r)
}

/*
V1JamfProtectHistoryGet Get Jamf Protect history 

Get Jamf Protect history


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1JamfProtectHistoryGetRequest
*/
func (a *JamfProtectApiService) V1JamfProtectHistoryGet(ctx context.Context) ApiV1JamfProtectHistoryGetRequest {
	return ApiV1JamfProtectHistoryGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HistorySearchResults
func (a *JamfProtectApiService) V1JamfProtectHistoryGetExecute(r ApiV1JamfProtectHistoryGetRequest) (*HistorySearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HistorySearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JamfProtectApiService.V1JamfProtectHistoryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/jamf-protect/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page-size", parameterToString(*r.pageSize, ""))
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sort", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sort", parameterToString(t, "multi"))
		}
	}
	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1JamfProtectHistoryPostRequest struct {
	ctx context.Context
	ApiService JamfProtectApi
	objectHistoryNote *ObjectHistoryNote
}

// history notes to create
func (r ApiV1JamfProtectHistoryPostRequest) ObjectHistoryNote(objectHistoryNote ObjectHistoryNote) ApiV1JamfProtectHistoryPostRequest {
	r.objectHistoryNote = &objectHistoryNote
	return r
}

func (r ApiV1JamfProtectHistoryPostRequest) Execute() (*HrefResponse, *http.Response, error) {
	return r.ApiService.V1JamfProtectHistoryPostExecute(r)
}

/*
V1JamfProtectHistoryPost Add Jamf Protect history notes 

Add Jamf Protect history notes


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1JamfProtectHistoryPostRequest
*/
func (a *JamfProtectApiService) V1JamfProtectHistoryPost(ctx context.Context) ApiV1JamfProtectHistoryPostRequest {
	return ApiV1JamfProtectHistoryPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HrefResponse
func (a *JamfProtectApiService) V1JamfProtectHistoryPostExecute(r ApiV1JamfProtectHistoryPostRequest) (*HrefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HrefResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JamfProtectApiService.V1JamfProtectHistoryPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/jamf-protect/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.objectHistoryNote == nil {
		return localVarReturnValue, nil, reportError("objectHistoryNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.objectHistoryNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1JamfProtectPlansGetRequest struct {
	ctx context.Context
	ApiService JamfProtectApi
	page *int32
	pageSize *int32
	sort *[]string
	filter *string
}

func (r ApiV1JamfProtectPlansGetRequest) Page(page int32) ApiV1JamfProtectPlansGetRequest {
	r.page = &page
	return r
}

func (r ApiV1JamfProtectPlansGetRequest) PageSize(pageSize int32) ApiV1JamfProtectPlansGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Default sort order is descending. Multiple sort criteria are supported and must be entered on separate lines in Swagger UI. In the URI the &#39;sort&#39; query param is not duplicated for each sort criterion, e.g., ...&amp;sort&#x3D;name:asc,date:desc. Fields that can be sorted: status, updated
func (r ApiV1JamfProtectPlansGetRequest) Sort(sort []string) ApiV1JamfProtectPlansGetRequest {
	r.sort = &sort
	return r
}

// Query in the RSQL format, allowing to filter results. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: status, updated, version This param can be combined with paging and sorting. Example: filter&#x3D;username!&#x3D;admin and details&#x3D;&#x3D;*disabled* and date&lt;2019-12-15
func (r ApiV1JamfProtectPlansGetRequest) Filter(filter string) ApiV1JamfProtectPlansGetRequest {
	r.filter = &filter
	return r
}

func (r ApiV1JamfProtectPlansGetRequest) Execute() (*PlanSearchResults, *http.Response, error) {
	return r.ApiService.V1JamfProtectPlansGetExecute(r)
}

/*
V1JamfProtectPlansGet Get all of the previously synced Jamf Protect Plans with information about their associated configuration profile

Get all of the previously synced Jamf Protect Plans with information about their associated configuration profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1JamfProtectPlansGetRequest
*/
func (a *JamfProtectApiService) V1JamfProtectPlansGet(ctx context.Context) ApiV1JamfProtectPlansGetRequest {
	return ApiV1JamfProtectPlansGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PlanSearchResults
func (a *JamfProtectApiService) V1JamfProtectPlansGetExecute(r ApiV1JamfProtectPlansGetRequest) (*PlanSearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PlanSearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JamfProtectApiService.V1JamfProtectPlansGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/jamf-protect/plans"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page-size", parameterToString(*r.pageSize, ""))
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sort", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sort", parameterToString(t, "multi"))
		}
	}
	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1JamfProtectPlansSyncPostRequest struct {
	ctx context.Context
	ApiService JamfProtectApi
}

func (r ApiV1JamfProtectPlansSyncPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1JamfProtectPlansSyncPostExecute(r)
}

/*
V1JamfProtectPlansSyncPost Sync Plans with Jamf Protect

Sync Plans with Jamf Protect. Configuration profiles associated with new plans will be imported to Jamf Pro.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1JamfProtectPlansSyncPostRequest
*/
func (a *JamfProtectApiService) V1JamfProtectPlansSyncPost(ctx context.Context) ApiV1JamfProtectPlansSyncPostRequest {
	return ApiV1JamfProtectPlansSyncPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *JamfProtectApiService) V1JamfProtectPlansSyncPostExecute(r ApiV1JamfProtectPlansSyncPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JamfProtectApiService.V1JamfProtectPlansSyncPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/jamf-protect/plans/sync"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1JamfProtectPutRequest struct {
	ctx context.Context
	ApiService JamfProtectApi
	protectUpdatableSettingsRequest *ProtectUpdatableSettingsRequest
}

// Updatable Jamf Protect Settings
func (r ApiV1JamfProtectPutRequest) ProtectUpdatableSettingsRequest(protectUpdatableSettingsRequest ProtectUpdatableSettingsRequest) ApiV1JamfProtectPutRequest {
	r.protectUpdatableSettingsRequest = &protectUpdatableSettingsRequest
	return r
}

func (r ApiV1JamfProtectPutRequest) Execute() (*ProtectSettingsResponse, *http.Response, error) {
	return r.ApiService.V1JamfProtectPutExecute(r)
}

/*
V1JamfProtectPut Jamf Protect integration settings

Jamf Protect integration settings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1JamfProtectPutRequest
*/
func (a *JamfProtectApiService) V1JamfProtectPut(ctx context.Context) ApiV1JamfProtectPutRequest {
	return ApiV1JamfProtectPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProtectSettingsResponse
func (a *JamfProtectApiService) V1JamfProtectPutExecute(r ApiV1JamfProtectPutRequest) (*ProtectSettingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProtectSettingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JamfProtectApiService.V1JamfProtectPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/jamf-protect"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.protectUpdatableSettingsRequest == nil {
		return localVarReturnValue, nil, reportError("protectUpdatableSettingsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.protectUpdatableSettingsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1JamfProtectRegisterPostRequest struct {
	ctx context.Context
	ApiService JamfProtectApi
	protectRegistrationRequest *ProtectRegistrationRequest
}

// Jamf Protect API connection information
func (r ApiV1JamfProtectRegisterPostRequest) ProtectRegistrationRequest(protectRegistrationRequest ProtectRegistrationRequest) ApiV1JamfProtectRegisterPostRequest {
	r.protectRegistrationRequest = &protectRegistrationRequest
	return r
}

func (r ApiV1JamfProtectRegisterPostRequest) Execute() (*ProtectSettingsResponse, *http.Response, error) {
	return r.ApiService.V1JamfProtectRegisterPostExecute(r)
}

/*
V1JamfProtectRegisterPost Register a Jamf Protect API configuration with Jamf Pro

Register a Jamf Protect API configuration with Jamf Pro

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1JamfProtectRegisterPostRequest
*/
func (a *JamfProtectApiService) V1JamfProtectRegisterPost(ctx context.Context) ApiV1JamfProtectRegisterPostRequest {
	return ApiV1JamfProtectRegisterPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProtectSettingsResponse
func (a *JamfProtectApiService) V1JamfProtectRegisterPostExecute(r ApiV1JamfProtectRegisterPostRequest) (*ProtectSettingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProtectSettingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JamfProtectApiService.V1JamfProtectRegisterPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/jamf-protect/register"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.protectRegistrationRequest == nil {
		return localVarReturnValue, nil, reportError("protectRegistrationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.protectRegistrationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
