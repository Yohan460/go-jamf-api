/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ManagedSoftwareUpdatePlanToggleStatusWrapper type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagedSoftwareUpdatePlanToggleStatusWrapper{}

// ManagedSoftwareUpdatePlanToggleStatusWrapper struct for ManagedSoftwareUpdatePlanToggleStatusWrapper
type ManagedSoftwareUpdatePlanToggleStatusWrapper struct {
	ToggleOn ManagedSoftwareUpdatePlanToggleStatus `json:"toggleOn"`
	ToggleOff ManagedSoftwareUpdatePlanToggleStatus `json:"toggleOff"`
}

type _ManagedSoftwareUpdatePlanToggleStatusWrapper ManagedSoftwareUpdatePlanToggleStatusWrapper

// NewManagedSoftwareUpdatePlanToggleStatusWrapper instantiates a new ManagedSoftwareUpdatePlanToggleStatusWrapper object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagedSoftwareUpdatePlanToggleStatusWrapper(toggleOn ManagedSoftwareUpdatePlanToggleStatus, toggleOff ManagedSoftwareUpdatePlanToggleStatus) *ManagedSoftwareUpdatePlanToggleStatusWrapper {
	this := ManagedSoftwareUpdatePlanToggleStatusWrapper{}
	this.ToggleOn = toggleOn
	this.ToggleOff = toggleOff
	return &this
}

// NewManagedSoftwareUpdatePlanToggleStatusWrapperWithDefaults instantiates a new ManagedSoftwareUpdatePlanToggleStatusWrapper object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagedSoftwareUpdatePlanToggleStatusWrapperWithDefaults() *ManagedSoftwareUpdatePlanToggleStatusWrapper {
	this := ManagedSoftwareUpdatePlanToggleStatusWrapper{}
	return &this
}

// GetToggleOn returns the ToggleOn field value
func (o *ManagedSoftwareUpdatePlanToggleStatusWrapper) GetToggleOn() ManagedSoftwareUpdatePlanToggleStatus {
	if o == nil {
		var ret ManagedSoftwareUpdatePlanToggleStatus
		return ret
	}

	return o.ToggleOn
}

// GetToggleOnOk returns a tuple with the ToggleOn field value
// and a boolean to check if the value has been set.
func (o *ManagedSoftwareUpdatePlanToggleStatusWrapper) GetToggleOnOk() (*ManagedSoftwareUpdatePlanToggleStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToggleOn, true
}

// SetToggleOn sets field value
func (o *ManagedSoftwareUpdatePlanToggleStatusWrapper) SetToggleOn(v ManagedSoftwareUpdatePlanToggleStatus) {
	o.ToggleOn = v
}

// GetToggleOff returns the ToggleOff field value
func (o *ManagedSoftwareUpdatePlanToggleStatusWrapper) GetToggleOff() ManagedSoftwareUpdatePlanToggleStatus {
	if o == nil {
		var ret ManagedSoftwareUpdatePlanToggleStatus
		return ret
	}

	return o.ToggleOff
}

// GetToggleOffOk returns a tuple with the ToggleOff field value
// and a boolean to check if the value has been set.
func (o *ManagedSoftwareUpdatePlanToggleStatusWrapper) GetToggleOffOk() (*ManagedSoftwareUpdatePlanToggleStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToggleOff, true
}

// SetToggleOff sets field value
func (o *ManagedSoftwareUpdatePlanToggleStatusWrapper) SetToggleOff(v ManagedSoftwareUpdatePlanToggleStatus) {
	o.ToggleOff = v
}

func (o ManagedSoftwareUpdatePlanToggleStatusWrapper) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagedSoftwareUpdatePlanToggleStatusWrapper) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["toggleOn"] = o.ToggleOn
	toSerialize["toggleOff"] = o.ToggleOff
	return toSerialize, nil
}

func (o *ManagedSoftwareUpdatePlanToggleStatusWrapper) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"toggleOn",
		"toggleOff",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varManagedSoftwareUpdatePlanToggleStatusWrapper := _ManagedSoftwareUpdatePlanToggleStatusWrapper{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varManagedSoftwareUpdatePlanToggleStatusWrapper)

	if err != nil {
		return err
	}

	*o = ManagedSoftwareUpdatePlanToggleStatusWrapper(varManagedSoftwareUpdatePlanToggleStatusWrapper)

	return err
}

type NullableManagedSoftwareUpdatePlanToggleStatusWrapper struct {
	value *ManagedSoftwareUpdatePlanToggleStatusWrapper
	isSet bool
}

func (v NullableManagedSoftwareUpdatePlanToggleStatusWrapper) Get() *ManagedSoftwareUpdatePlanToggleStatusWrapper {
	return v.value
}

func (v *NullableManagedSoftwareUpdatePlanToggleStatusWrapper) Set(val *ManagedSoftwareUpdatePlanToggleStatusWrapper) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedSoftwareUpdatePlanToggleStatusWrapper) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedSoftwareUpdatePlanToggleStatusWrapper) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedSoftwareUpdatePlanToggleStatusWrapper(val *ManagedSoftwareUpdatePlanToggleStatusWrapper) *NullableManagedSoftwareUpdatePlanToggleStatusWrapper {
	return &NullableManagedSoftwareUpdatePlanToggleStatusWrapper{value: val, isSet: true}
}

func (v NullableManagedSoftwareUpdatePlanToggleStatusWrapper) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedSoftwareUpdatePlanToggleStatusWrapper) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


