/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// RedeployJamfManagementFrameworkResponse struct for RedeployJamfManagementFrameworkResponse
type RedeployJamfManagementFrameworkResponse struct {
	DeviceId *string `json:"deviceId,omitempty"`
	CommandUuid *string `json:"commandUuid,omitempty"`
}

// NewRedeployJamfManagementFrameworkResponse instantiates a new RedeployJamfManagementFrameworkResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRedeployJamfManagementFrameworkResponse() *RedeployJamfManagementFrameworkResponse {
	this := RedeployJamfManagementFrameworkResponse{}
	return &this
}

// NewRedeployJamfManagementFrameworkResponseWithDefaults instantiates a new RedeployJamfManagementFrameworkResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRedeployJamfManagementFrameworkResponseWithDefaults() *RedeployJamfManagementFrameworkResponse {
	this := RedeployJamfManagementFrameworkResponse{}
	return &this
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *RedeployJamfManagementFrameworkResponse) GetDeviceId() string {
	if o == nil || o.DeviceId == nil {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedeployJamfManagementFrameworkResponse) GetDeviceIdOk() (*string, bool) {
	if o == nil || o.DeviceId == nil {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *RedeployJamfManagementFrameworkResponse) HasDeviceId() bool {
	if o != nil && o.DeviceId != nil {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *RedeployJamfManagementFrameworkResponse) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetCommandUuid returns the CommandUuid field value if set, zero value otherwise.
func (o *RedeployJamfManagementFrameworkResponse) GetCommandUuid() string {
	if o == nil || o.CommandUuid == nil {
		var ret string
		return ret
	}
	return *o.CommandUuid
}

// GetCommandUuidOk returns a tuple with the CommandUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedeployJamfManagementFrameworkResponse) GetCommandUuidOk() (*string, bool) {
	if o == nil || o.CommandUuid == nil {
		return nil, false
	}
	return o.CommandUuid, true
}

// HasCommandUuid returns a boolean if a field has been set.
func (o *RedeployJamfManagementFrameworkResponse) HasCommandUuid() bool {
	if o != nil && o.CommandUuid != nil {
		return true
	}

	return false
}

// SetCommandUuid gets a reference to the given string and assigns it to the CommandUuid field.
func (o *RedeployJamfManagementFrameworkResponse) SetCommandUuid(v string) {
	o.CommandUuid = &v
}

func (o RedeployJamfManagementFrameworkResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DeviceId != nil {
		toSerialize["deviceId"] = o.DeviceId
	}
	if o.CommandUuid != nil {
		toSerialize["commandUuid"] = o.CommandUuid
	}
	return json.Marshal(toSerialize)
}

type NullableRedeployJamfManagementFrameworkResponse struct {
	value *RedeployJamfManagementFrameworkResponse
	isSet bool
}

func (v NullableRedeployJamfManagementFrameworkResponse) Get() *RedeployJamfManagementFrameworkResponse {
	return v.value
}

func (v *NullableRedeployJamfManagementFrameworkResponse) Set(val *RedeployJamfManagementFrameworkResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRedeployJamfManagementFrameworkResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRedeployJamfManagementFrameworkResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRedeployJamfManagementFrameworkResponse(val *RedeployJamfManagementFrameworkResponse) *NullableRedeployJamfManagementFrameworkResponse {
	return &NullableRedeployJamfManagementFrameworkResponse{value: val, isSet: true}
}

func (v NullableRedeployJamfManagementFrameworkResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRedeployJamfManagementFrameworkResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


