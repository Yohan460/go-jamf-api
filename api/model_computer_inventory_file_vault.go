/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ComputerInventoryFileVault type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComputerInventoryFileVault{}

// ComputerInventoryFileVault struct for ComputerInventoryFileVault
type ComputerInventoryFileVault struct {
	ComputerId *string `json:"computerId,omitempty"`
	Name *string `json:"name,omitempty"`
	PersonalRecoveryKey *string `json:"personalRecoveryKey,omitempty"`
	BootPartitionEncryptionDetails *ComputerPartitionEncryption `json:"bootPartitionEncryptionDetails,omitempty"`
	IndividualRecoveryKeyValidityStatus *string `json:"individualRecoveryKeyValidityStatus,omitempty"`
	InstitutionalRecoveryKeyPresent *bool `json:"institutionalRecoveryKeyPresent,omitempty"`
	DiskEncryptionConfigurationName *string `json:"diskEncryptionConfigurationName,omitempty"`
}

// NewComputerInventoryFileVault instantiates a new ComputerInventoryFileVault object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputerInventoryFileVault() *ComputerInventoryFileVault {
	this := ComputerInventoryFileVault{}
	return &this
}

// NewComputerInventoryFileVaultWithDefaults instantiates a new ComputerInventoryFileVault object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputerInventoryFileVaultWithDefaults() *ComputerInventoryFileVault {
	this := ComputerInventoryFileVault{}
	return &this
}

// GetComputerId returns the ComputerId field value if set, zero value otherwise.
func (o *ComputerInventoryFileVault) GetComputerId() string {
	if o == nil || IsNil(o.ComputerId) {
		var ret string
		return ret
	}
	return *o.ComputerId
}

// GetComputerIdOk returns a tuple with the ComputerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerInventoryFileVault) GetComputerIdOk() (*string, bool) {
	if o == nil || IsNil(o.ComputerId) {
		return nil, false
	}
	return o.ComputerId, true
}

// HasComputerId returns a boolean if a field has been set.
func (o *ComputerInventoryFileVault) HasComputerId() bool {
	if o != nil && !IsNil(o.ComputerId) {
		return true
	}

	return false
}

// SetComputerId gets a reference to the given string and assigns it to the ComputerId field.
func (o *ComputerInventoryFileVault) SetComputerId(v string) {
	o.ComputerId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ComputerInventoryFileVault) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerInventoryFileVault) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ComputerInventoryFileVault) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ComputerInventoryFileVault) SetName(v string) {
	o.Name = &v
}

// GetPersonalRecoveryKey returns the PersonalRecoveryKey field value if set, zero value otherwise.
func (o *ComputerInventoryFileVault) GetPersonalRecoveryKey() string {
	if o == nil || IsNil(o.PersonalRecoveryKey) {
		var ret string
		return ret
	}
	return *o.PersonalRecoveryKey
}

// GetPersonalRecoveryKeyOk returns a tuple with the PersonalRecoveryKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerInventoryFileVault) GetPersonalRecoveryKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PersonalRecoveryKey) {
		return nil, false
	}
	return o.PersonalRecoveryKey, true
}

// HasPersonalRecoveryKey returns a boolean if a field has been set.
func (o *ComputerInventoryFileVault) HasPersonalRecoveryKey() bool {
	if o != nil && !IsNil(o.PersonalRecoveryKey) {
		return true
	}

	return false
}

// SetPersonalRecoveryKey gets a reference to the given string and assigns it to the PersonalRecoveryKey field.
func (o *ComputerInventoryFileVault) SetPersonalRecoveryKey(v string) {
	o.PersonalRecoveryKey = &v
}

// GetBootPartitionEncryptionDetails returns the BootPartitionEncryptionDetails field value if set, zero value otherwise.
func (o *ComputerInventoryFileVault) GetBootPartitionEncryptionDetails() ComputerPartitionEncryption {
	if o == nil || IsNil(o.BootPartitionEncryptionDetails) {
		var ret ComputerPartitionEncryption
		return ret
	}
	return *o.BootPartitionEncryptionDetails
}

// GetBootPartitionEncryptionDetailsOk returns a tuple with the BootPartitionEncryptionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerInventoryFileVault) GetBootPartitionEncryptionDetailsOk() (*ComputerPartitionEncryption, bool) {
	if o == nil || IsNil(o.BootPartitionEncryptionDetails) {
		return nil, false
	}
	return o.BootPartitionEncryptionDetails, true
}

// HasBootPartitionEncryptionDetails returns a boolean if a field has been set.
func (o *ComputerInventoryFileVault) HasBootPartitionEncryptionDetails() bool {
	if o != nil && !IsNil(o.BootPartitionEncryptionDetails) {
		return true
	}

	return false
}

// SetBootPartitionEncryptionDetails gets a reference to the given ComputerPartitionEncryption and assigns it to the BootPartitionEncryptionDetails field.
func (o *ComputerInventoryFileVault) SetBootPartitionEncryptionDetails(v ComputerPartitionEncryption) {
	o.BootPartitionEncryptionDetails = &v
}

// GetIndividualRecoveryKeyValidityStatus returns the IndividualRecoveryKeyValidityStatus field value if set, zero value otherwise.
func (o *ComputerInventoryFileVault) GetIndividualRecoveryKeyValidityStatus() string {
	if o == nil || IsNil(o.IndividualRecoveryKeyValidityStatus) {
		var ret string
		return ret
	}
	return *o.IndividualRecoveryKeyValidityStatus
}

// GetIndividualRecoveryKeyValidityStatusOk returns a tuple with the IndividualRecoveryKeyValidityStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerInventoryFileVault) GetIndividualRecoveryKeyValidityStatusOk() (*string, bool) {
	if o == nil || IsNil(o.IndividualRecoveryKeyValidityStatus) {
		return nil, false
	}
	return o.IndividualRecoveryKeyValidityStatus, true
}

// HasIndividualRecoveryKeyValidityStatus returns a boolean if a field has been set.
func (o *ComputerInventoryFileVault) HasIndividualRecoveryKeyValidityStatus() bool {
	if o != nil && !IsNil(o.IndividualRecoveryKeyValidityStatus) {
		return true
	}

	return false
}

// SetIndividualRecoveryKeyValidityStatus gets a reference to the given string and assigns it to the IndividualRecoveryKeyValidityStatus field.
func (o *ComputerInventoryFileVault) SetIndividualRecoveryKeyValidityStatus(v string) {
	o.IndividualRecoveryKeyValidityStatus = &v
}

// GetInstitutionalRecoveryKeyPresent returns the InstitutionalRecoveryKeyPresent field value if set, zero value otherwise.
func (o *ComputerInventoryFileVault) GetInstitutionalRecoveryKeyPresent() bool {
	if o == nil || IsNil(o.InstitutionalRecoveryKeyPresent) {
		var ret bool
		return ret
	}
	return *o.InstitutionalRecoveryKeyPresent
}

// GetInstitutionalRecoveryKeyPresentOk returns a tuple with the InstitutionalRecoveryKeyPresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerInventoryFileVault) GetInstitutionalRecoveryKeyPresentOk() (*bool, bool) {
	if o == nil || IsNil(o.InstitutionalRecoveryKeyPresent) {
		return nil, false
	}
	return o.InstitutionalRecoveryKeyPresent, true
}

// HasInstitutionalRecoveryKeyPresent returns a boolean if a field has been set.
func (o *ComputerInventoryFileVault) HasInstitutionalRecoveryKeyPresent() bool {
	if o != nil && !IsNil(o.InstitutionalRecoveryKeyPresent) {
		return true
	}

	return false
}

// SetInstitutionalRecoveryKeyPresent gets a reference to the given bool and assigns it to the InstitutionalRecoveryKeyPresent field.
func (o *ComputerInventoryFileVault) SetInstitutionalRecoveryKeyPresent(v bool) {
	o.InstitutionalRecoveryKeyPresent = &v
}

// GetDiskEncryptionConfigurationName returns the DiskEncryptionConfigurationName field value if set, zero value otherwise.
func (o *ComputerInventoryFileVault) GetDiskEncryptionConfigurationName() string {
	if o == nil || IsNil(o.DiskEncryptionConfigurationName) {
		var ret string
		return ret
	}
	return *o.DiskEncryptionConfigurationName
}

// GetDiskEncryptionConfigurationNameOk returns a tuple with the DiskEncryptionConfigurationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerInventoryFileVault) GetDiskEncryptionConfigurationNameOk() (*string, bool) {
	if o == nil || IsNil(o.DiskEncryptionConfigurationName) {
		return nil, false
	}
	return o.DiskEncryptionConfigurationName, true
}

// HasDiskEncryptionConfigurationName returns a boolean if a field has been set.
func (o *ComputerInventoryFileVault) HasDiskEncryptionConfigurationName() bool {
	if o != nil && !IsNil(o.DiskEncryptionConfigurationName) {
		return true
	}

	return false
}

// SetDiskEncryptionConfigurationName gets a reference to the given string and assigns it to the DiskEncryptionConfigurationName field.
func (o *ComputerInventoryFileVault) SetDiskEncryptionConfigurationName(v string) {
	o.DiskEncryptionConfigurationName = &v
}

func (o ComputerInventoryFileVault) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComputerInventoryFileVault) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ComputerId) {
		toSerialize["computerId"] = o.ComputerId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PersonalRecoveryKey) {
		toSerialize["personalRecoveryKey"] = o.PersonalRecoveryKey
	}
	if !IsNil(o.BootPartitionEncryptionDetails) {
		toSerialize["bootPartitionEncryptionDetails"] = o.BootPartitionEncryptionDetails
	}
	if !IsNil(o.IndividualRecoveryKeyValidityStatus) {
		toSerialize["individualRecoveryKeyValidityStatus"] = o.IndividualRecoveryKeyValidityStatus
	}
	if !IsNil(o.InstitutionalRecoveryKeyPresent) {
		toSerialize["institutionalRecoveryKeyPresent"] = o.InstitutionalRecoveryKeyPresent
	}
	if !IsNil(o.DiskEncryptionConfigurationName) {
		toSerialize["diskEncryptionConfigurationName"] = o.DiskEncryptionConfigurationName
	}
	return toSerialize, nil
}

type NullableComputerInventoryFileVault struct {
	value *ComputerInventoryFileVault
	isSet bool
}

func (v NullableComputerInventoryFileVault) Get() *ComputerInventoryFileVault {
	return v.value
}

func (v *NullableComputerInventoryFileVault) Set(val *ComputerInventoryFileVault) {
	v.value = val
	v.isSet = true
}

func (v NullableComputerInventoryFileVault) IsSet() bool {
	return v.isSet
}

func (v *NullableComputerInventoryFileVault) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputerInventoryFileVault(val *ComputerInventoryFileVault) *NullableComputerInventoryFileVault {
	return &NullableComputerInventoryFileVault{value: val, isSet: true}
}

func (v NullableComputerInventoryFileVault) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputerInventoryFileVault) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


