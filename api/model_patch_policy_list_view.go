/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the PatchPolicyListView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchPolicyListView{}

// PatchPolicyListView struct for PatchPolicyListView
type PatchPolicyListView struct {
	Id *string `json:"id,omitempty"`
	PolicyName *string `json:"policyName,omitempty"`
	PolicyEnabled *bool `json:"policyEnabled,omitempty"`
	PolicyTargetVersion *string `json:"policyTargetVersion,omitempty"`
	PolicyDeploymentMethod *string `json:"policyDeploymentMethod,omitempty"`
	SoftwareTitle *string `json:"softwareTitle,omitempty"`
	SoftwareTitleConfigurationId *string `json:"softwareTitleConfigurationId,omitempty"`
	Pending *int64 `json:"pending,omitempty"`
	Completed *int64 `json:"completed,omitempty"`
	Deferred *int64 `json:"deferred,omitempty"`
	Failed *int64 `json:"failed,omitempty"`
}

// NewPatchPolicyListView instantiates a new PatchPolicyListView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchPolicyListView() *PatchPolicyListView {
	this := PatchPolicyListView{}
	return &this
}

// NewPatchPolicyListViewWithDefaults instantiates a new PatchPolicyListView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchPolicyListViewWithDefaults() *PatchPolicyListView {
	this := PatchPolicyListView{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PatchPolicyListView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyListView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PatchPolicyListView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PatchPolicyListView) SetId(v string) {
	o.Id = &v
}

// GetPolicyName returns the PolicyName field value if set, zero value otherwise.
func (o *PatchPolicyListView) GetPolicyName() string {
	if o == nil || IsNil(o.PolicyName) {
		var ret string
		return ret
	}
	return *o.PolicyName
}

// GetPolicyNameOk returns a tuple with the PolicyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyListView) GetPolicyNameOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyName) {
		return nil, false
	}
	return o.PolicyName, true
}

// HasPolicyName returns a boolean if a field has been set.
func (o *PatchPolicyListView) HasPolicyName() bool {
	if o != nil && !IsNil(o.PolicyName) {
		return true
	}

	return false
}

// SetPolicyName gets a reference to the given string and assigns it to the PolicyName field.
func (o *PatchPolicyListView) SetPolicyName(v string) {
	o.PolicyName = &v
}

// GetPolicyEnabled returns the PolicyEnabled field value if set, zero value otherwise.
func (o *PatchPolicyListView) GetPolicyEnabled() bool {
	if o == nil || IsNil(o.PolicyEnabled) {
		var ret bool
		return ret
	}
	return *o.PolicyEnabled
}

// GetPolicyEnabledOk returns a tuple with the PolicyEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyListView) GetPolicyEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PolicyEnabled) {
		return nil, false
	}
	return o.PolicyEnabled, true
}

// HasPolicyEnabled returns a boolean if a field has been set.
func (o *PatchPolicyListView) HasPolicyEnabled() bool {
	if o != nil && !IsNil(o.PolicyEnabled) {
		return true
	}

	return false
}

// SetPolicyEnabled gets a reference to the given bool and assigns it to the PolicyEnabled field.
func (o *PatchPolicyListView) SetPolicyEnabled(v bool) {
	o.PolicyEnabled = &v
}

// GetPolicyTargetVersion returns the PolicyTargetVersion field value if set, zero value otherwise.
func (o *PatchPolicyListView) GetPolicyTargetVersion() string {
	if o == nil || IsNil(o.PolicyTargetVersion) {
		var ret string
		return ret
	}
	return *o.PolicyTargetVersion
}

// GetPolicyTargetVersionOk returns a tuple with the PolicyTargetVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyListView) GetPolicyTargetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyTargetVersion) {
		return nil, false
	}
	return o.PolicyTargetVersion, true
}

// HasPolicyTargetVersion returns a boolean if a field has been set.
func (o *PatchPolicyListView) HasPolicyTargetVersion() bool {
	if o != nil && !IsNil(o.PolicyTargetVersion) {
		return true
	}

	return false
}

// SetPolicyTargetVersion gets a reference to the given string and assigns it to the PolicyTargetVersion field.
func (o *PatchPolicyListView) SetPolicyTargetVersion(v string) {
	o.PolicyTargetVersion = &v
}

// GetPolicyDeploymentMethod returns the PolicyDeploymentMethod field value if set, zero value otherwise.
func (o *PatchPolicyListView) GetPolicyDeploymentMethod() string {
	if o == nil || IsNil(o.PolicyDeploymentMethod) {
		var ret string
		return ret
	}
	return *o.PolicyDeploymentMethod
}

// GetPolicyDeploymentMethodOk returns a tuple with the PolicyDeploymentMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyListView) GetPolicyDeploymentMethodOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyDeploymentMethod) {
		return nil, false
	}
	return o.PolicyDeploymentMethod, true
}

// HasPolicyDeploymentMethod returns a boolean if a field has been set.
func (o *PatchPolicyListView) HasPolicyDeploymentMethod() bool {
	if o != nil && !IsNil(o.PolicyDeploymentMethod) {
		return true
	}

	return false
}

// SetPolicyDeploymentMethod gets a reference to the given string and assigns it to the PolicyDeploymentMethod field.
func (o *PatchPolicyListView) SetPolicyDeploymentMethod(v string) {
	o.PolicyDeploymentMethod = &v
}

// GetSoftwareTitle returns the SoftwareTitle field value if set, zero value otherwise.
func (o *PatchPolicyListView) GetSoftwareTitle() string {
	if o == nil || IsNil(o.SoftwareTitle) {
		var ret string
		return ret
	}
	return *o.SoftwareTitle
}

// GetSoftwareTitleOk returns a tuple with the SoftwareTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyListView) GetSoftwareTitleOk() (*string, bool) {
	if o == nil || IsNil(o.SoftwareTitle) {
		return nil, false
	}
	return o.SoftwareTitle, true
}

// HasSoftwareTitle returns a boolean if a field has been set.
func (o *PatchPolicyListView) HasSoftwareTitle() bool {
	if o != nil && !IsNil(o.SoftwareTitle) {
		return true
	}

	return false
}

// SetSoftwareTitle gets a reference to the given string and assigns it to the SoftwareTitle field.
func (o *PatchPolicyListView) SetSoftwareTitle(v string) {
	o.SoftwareTitle = &v
}

// GetSoftwareTitleConfigurationId returns the SoftwareTitleConfigurationId field value if set, zero value otherwise.
func (o *PatchPolicyListView) GetSoftwareTitleConfigurationId() string {
	if o == nil || IsNil(o.SoftwareTitleConfigurationId) {
		var ret string
		return ret
	}
	return *o.SoftwareTitleConfigurationId
}

// GetSoftwareTitleConfigurationIdOk returns a tuple with the SoftwareTitleConfigurationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyListView) GetSoftwareTitleConfigurationIdOk() (*string, bool) {
	if o == nil || IsNil(o.SoftwareTitleConfigurationId) {
		return nil, false
	}
	return o.SoftwareTitleConfigurationId, true
}

// HasSoftwareTitleConfigurationId returns a boolean if a field has been set.
func (o *PatchPolicyListView) HasSoftwareTitleConfigurationId() bool {
	if o != nil && !IsNil(o.SoftwareTitleConfigurationId) {
		return true
	}

	return false
}

// SetSoftwareTitleConfigurationId gets a reference to the given string and assigns it to the SoftwareTitleConfigurationId field.
func (o *PatchPolicyListView) SetSoftwareTitleConfigurationId(v string) {
	o.SoftwareTitleConfigurationId = &v
}

// GetPending returns the Pending field value if set, zero value otherwise.
func (o *PatchPolicyListView) GetPending() int64 {
	if o == nil || IsNil(o.Pending) {
		var ret int64
		return ret
	}
	return *o.Pending
}

// GetPendingOk returns a tuple with the Pending field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyListView) GetPendingOk() (*int64, bool) {
	if o == nil || IsNil(o.Pending) {
		return nil, false
	}
	return o.Pending, true
}

// HasPending returns a boolean if a field has been set.
func (o *PatchPolicyListView) HasPending() bool {
	if o != nil && !IsNil(o.Pending) {
		return true
	}

	return false
}

// SetPending gets a reference to the given int64 and assigns it to the Pending field.
func (o *PatchPolicyListView) SetPending(v int64) {
	o.Pending = &v
}

// GetCompleted returns the Completed field value if set, zero value otherwise.
func (o *PatchPolicyListView) GetCompleted() int64 {
	if o == nil || IsNil(o.Completed) {
		var ret int64
		return ret
	}
	return *o.Completed
}

// GetCompletedOk returns a tuple with the Completed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyListView) GetCompletedOk() (*int64, bool) {
	if o == nil || IsNil(o.Completed) {
		return nil, false
	}
	return o.Completed, true
}

// HasCompleted returns a boolean if a field has been set.
func (o *PatchPolicyListView) HasCompleted() bool {
	if o != nil && !IsNil(o.Completed) {
		return true
	}

	return false
}

// SetCompleted gets a reference to the given int64 and assigns it to the Completed field.
func (o *PatchPolicyListView) SetCompleted(v int64) {
	o.Completed = &v
}

// GetDeferred returns the Deferred field value if set, zero value otherwise.
func (o *PatchPolicyListView) GetDeferred() int64 {
	if o == nil || IsNil(o.Deferred) {
		var ret int64
		return ret
	}
	return *o.Deferred
}

// GetDeferredOk returns a tuple with the Deferred field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyListView) GetDeferredOk() (*int64, bool) {
	if o == nil || IsNil(o.Deferred) {
		return nil, false
	}
	return o.Deferred, true
}

// HasDeferred returns a boolean if a field has been set.
func (o *PatchPolicyListView) HasDeferred() bool {
	if o != nil && !IsNil(o.Deferred) {
		return true
	}

	return false
}

// SetDeferred gets a reference to the given int64 and assigns it to the Deferred field.
func (o *PatchPolicyListView) SetDeferred(v int64) {
	o.Deferred = &v
}

// GetFailed returns the Failed field value if set, zero value otherwise.
func (o *PatchPolicyListView) GetFailed() int64 {
	if o == nil || IsNil(o.Failed) {
		var ret int64
		return ret
	}
	return *o.Failed
}

// GetFailedOk returns a tuple with the Failed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyListView) GetFailedOk() (*int64, bool) {
	if o == nil || IsNil(o.Failed) {
		return nil, false
	}
	return o.Failed, true
}

// HasFailed returns a boolean if a field has been set.
func (o *PatchPolicyListView) HasFailed() bool {
	if o != nil && !IsNil(o.Failed) {
		return true
	}

	return false
}

// SetFailed gets a reference to the given int64 and assigns it to the Failed field.
func (o *PatchPolicyListView) SetFailed(v int64) {
	o.Failed = &v
}

func (o PatchPolicyListView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchPolicyListView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.PolicyName) {
		toSerialize["policyName"] = o.PolicyName
	}
	if !IsNil(o.PolicyEnabled) {
		toSerialize["policyEnabled"] = o.PolicyEnabled
	}
	if !IsNil(o.PolicyTargetVersion) {
		toSerialize["policyTargetVersion"] = o.PolicyTargetVersion
	}
	if !IsNil(o.PolicyDeploymentMethod) {
		toSerialize["policyDeploymentMethod"] = o.PolicyDeploymentMethod
	}
	if !IsNil(o.SoftwareTitle) {
		toSerialize["softwareTitle"] = o.SoftwareTitle
	}
	if !IsNil(o.SoftwareTitleConfigurationId) {
		toSerialize["softwareTitleConfigurationId"] = o.SoftwareTitleConfigurationId
	}
	if !IsNil(o.Pending) {
		toSerialize["pending"] = o.Pending
	}
	if !IsNil(o.Completed) {
		toSerialize["completed"] = o.Completed
	}
	if !IsNil(o.Deferred) {
		toSerialize["deferred"] = o.Deferred
	}
	if !IsNil(o.Failed) {
		toSerialize["failed"] = o.Failed
	}
	return toSerialize, nil
}

type NullablePatchPolicyListView struct {
	value *PatchPolicyListView
	isSet bool
}

func (v NullablePatchPolicyListView) Get() *PatchPolicyListView {
	return v.value
}

func (v *NullablePatchPolicyListView) Set(val *PatchPolicyListView) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchPolicyListView) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchPolicyListView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchPolicyListView(val *PatchPolicyListView) *NullablePatchPolicyListView {
	return &NullablePatchPolicyListView{value: val, isSet: true}
}

func (v NullablePatchPolicyListView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchPolicyListView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


