/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the JamfProtectPlan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JamfProtectPlan{}

// JamfProtectPlan struct for JamfProtectPlan
type JamfProtectPlan struct {
	Uuid *string `json:"uuid,omitempty"`
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	ProfileId *int32 `json:"profileId,omitempty"`
	ProfileName *string `json:"profileName,omitempty"`
	ScopeDescription *string `json:"scopeDescription,omitempty"`
}

// NewJamfProtectPlan instantiates a new JamfProtectPlan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJamfProtectPlan() *JamfProtectPlan {
	this := JamfProtectPlan{}
	return &this
}

// NewJamfProtectPlanWithDefaults instantiates a new JamfProtectPlan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJamfProtectPlanWithDefaults() *JamfProtectPlan {
	this := JamfProtectPlan{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *JamfProtectPlan) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JamfProtectPlan) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *JamfProtectPlan) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *JamfProtectPlan) SetUuid(v string) {
	o.Uuid = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *JamfProtectPlan) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JamfProtectPlan) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *JamfProtectPlan) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *JamfProtectPlan) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *JamfProtectPlan) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JamfProtectPlan) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *JamfProtectPlan) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *JamfProtectPlan) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *JamfProtectPlan) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JamfProtectPlan) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *JamfProtectPlan) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *JamfProtectPlan) SetDescription(v string) {
	o.Description = &v
}

// GetProfileId returns the ProfileId field value if set, zero value otherwise.
func (o *JamfProtectPlan) GetProfileId() int32 {
	if o == nil || IsNil(o.ProfileId) {
		var ret int32
		return ret
	}
	return *o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JamfProtectPlan) GetProfileIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ProfileId) {
		return nil, false
	}
	return o.ProfileId, true
}

// HasProfileId returns a boolean if a field has been set.
func (o *JamfProtectPlan) HasProfileId() bool {
	if o != nil && !IsNil(o.ProfileId) {
		return true
	}

	return false
}

// SetProfileId gets a reference to the given int32 and assigns it to the ProfileId field.
func (o *JamfProtectPlan) SetProfileId(v int32) {
	o.ProfileId = &v
}

// GetProfileName returns the ProfileName field value if set, zero value otherwise.
func (o *JamfProtectPlan) GetProfileName() string {
	if o == nil || IsNil(o.ProfileName) {
		var ret string
		return ret
	}
	return *o.ProfileName
}

// GetProfileNameOk returns a tuple with the ProfileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JamfProtectPlan) GetProfileNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProfileName) {
		return nil, false
	}
	return o.ProfileName, true
}

// HasProfileName returns a boolean if a field has been set.
func (o *JamfProtectPlan) HasProfileName() bool {
	if o != nil && !IsNil(o.ProfileName) {
		return true
	}

	return false
}

// SetProfileName gets a reference to the given string and assigns it to the ProfileName field.
func (o *JamfProtectPlan) SetProfileName(v string) {
	o.ProfileName = &v
}

// GetScopeDescription returns the ScopeDescription field value if set, zero value otherwise.
func (o *JamfProtectPlan) GetScopeDescription() string {
	if o == nil || IsNil(o.ScopeDescription) {
		var ret string
		return ret
	}
	return *o.ScopeDescription
}

// GetScopeDescriptionOk returns a tuple with the ScopeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JamfProtectPlan) GetScopeDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeDescription) {
		return nil, false
	}
	return o.ScopeDescription, true
}

// HasScopeDescription returns a boolean if a field has been set.
func (o *JamfProtectPlan) HasScopeDescription() bool {
	if o != nil && !IsNil(o.ScopeDescription) {
		return true
	}

	return false
}

// SetScopeDescription gets a reference to the given string and assigns it to the ScopeDescription field.
func (o *JamfProtectPlan) SetScopeDescription(v string) {
	o.ScopeDescription = &v
}

func (o JamfProtectPlan) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JamfProtectPlan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ProfileId) {
		toSerialize["profileId"] = o.ProfileId
	}
	if !IsNil(o.ProfileName) {
		toSerialize["profileName"] = o.ProfileName
	}
	if !IsNil(o.ScopeDescription) {
		toSerialize["scopeDescription"] = o.ScopeDescription
	}
	return toSerialize, nil
}

type NullableJamfProtectPlan struct {
	value *JamfProtectPlan
	isSet bool
}

func (v NullableJamfProtectPlan) Get() *JamfProtectPlan {
	return v.value
}

func (v *NullableJamfProtectPlan) Set(val *JamfProtectPlan) {
	v.value = val
	v.isSet = true
}

func (v NullableJamfProtectPlan) IsSet() bool {
	return v.isSet
}

func (v *NullableJamfProtectPlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJamfProtectPlan(val *JamfProtectPlan) *NullableJamfProtectPlan {
	return &NullableJamfProtectPlan{value: val, isSet: true}
}

func (v NullableJamfProtectPlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJamfProtectPlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


