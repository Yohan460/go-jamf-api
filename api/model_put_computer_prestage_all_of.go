/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// PutComputerPrestageAllOf struct for PutComputerPrestageAllOf
type PutComputerPrestageAllOf struct {
	VersionLock *int32 `json:"versionLock,omitempty"`
}

// NewPutComputerPrestageAllOf instantiates a new PutComputerPrestageAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPutComputerPrestageAllOf() *PutComputerPrestageAllOf {
	this := PutComputerPrestageAllOf{}
	return &this
}

// NewPutComputerPrestageAllOfWithDefaults instantiates a new PutComputerPrestageAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPutComputerPrestageAllOfWithDefaults() *PutComputerPrestageAllOf {
	this := PutComputerPrestageAllOf{}
	return &this
}

// GetVersionLock returns the VersionLock field value if set, zero value otherwise.
func (o *PutComputerPrestageAllOf) GetVersionLock() int32 {
	if o == nil || o.VersionLock == nil {
		var ret int32
		return ret
	}
	return *o.VersionLock
}

// GetVersionLockOk returns a tuple with the VersionLock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutComputerPrestageAllOf) GetVersionLockOk() (*int32, bool) {
	if o == nil || o.VersionLock == nil {
		return nil, false
	}
	return o.VersionLock, true
}

// HasVersionLock returns a boolean if a field has been set.
func (o *PutComputerPrestageAllOf) HasVersionLock() bool {
	if o != nil && o.VersionLock != nil {
		return true
	}

	return false
}

// SetVersionLock gets a reference to the given int32 and assigns it to the VersionLock field.
func (o *PutComputerPrestageAllOf) SetVersionLock(v int32) {
	o.VersionLock = &v
}

func (o PutComputerPrestageAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.VersionLock != nil {
		toSerialize["versionLock"] = o.VersionLock
	}
	return json.Marshal(toSerialize)
}

type NullablePutComputerPrestageAllOf struct {
	value *PutComputerPrestageAllOf
	isSet bool
}

func (v NullablePutComputerPrestageAllOf) Get() *PutComputerPrestageAllOf {
	return v.value
}

func (v *NullablePutComputerPrestageAllOf) Set(val *PutComputerPrestageAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullablePutComputerPrestageAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullablePutComputerPrestageAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutComputerPrestageAllOf(val *PutComputerPrestageAllOf) *NullablePutComputerPrestageAllOf {
	return &NullablePutComputerPrestageAllOf{value: val, isSet: true}
}

func (v NullablePutComputerPrestageAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutComputerPrestageAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


