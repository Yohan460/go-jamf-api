/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SmtpServer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmtpServer{}

// SmtpServer struct for SmtpServer
type SmtpServer struct {
	Enabled bool `json:"enabled"`
	Server string `json:"server"`
	Port int64 `json:"port"`
	EncryptionType string `json:"encryptionType"`
	ConnectionTimeout int64 `json:"connectionTimeout"`
	SenderDisplayName string `json:"senderDisplayName"`
	SenderEmailAddress string `json:"senderEmailAddress"`
	RequiresAuthentication bool `json:"requiresAuthentication"`
	Username *string `json:"username,omitempty"`
	Password *string `json:"password,omitempty"`
}

type _SmtpServer SmtpServer

// NewSmtpServer instantiates a new SmtpServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmtpServer(enabled bool, server string, port int64, encryptionType string, connectionTimeout int64, senderDisplayName string, senderEmailAddress string, requiresAuthentication bool) *SmtpServer {
	this := SmtpServer{}
	this.Enabled = enabled
	this.Server = server
	this.Port = port
	this.EncryptionType = encryptionType
	this.ConnectionTimeout = connectionTimeout
	this.SenderDisplayName = senderDisplayName
	this.SenderEmailAddress = senderEmailAddress
	this.RequiresAuthentication = requiresAuthentication
	var username string = ""
	this.Username = &username
	var password string = ""
	this.Password = &password
	return &this
}

// NewSmtpServerWithDefaults instantiates a new SmtpServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmtpServerWithDefaults() *SmtpServer {
	this := SmtpServer{}
	var enabled bool = false
	this.Enabled = enabled
	var server string = ""
	this.Server = server
	var port int64 = 25
	this.Port = port
	var encryptionType string = "NONE"
	this.EncryptionType = encryptionType
	var connectionTimeout int64 = 5
	this.ConnectionTimeout = connectionTimeout
	var senderDisplayName string = "Jamf Pro Server"
	this.SenderDisplayName = senderDisplayName
	var senderEmailAddress string = ""
	this.SenderEmailAddress = senderEmailAddress
	var requiresAuthentication bool = false
	this.RequiresAuthentication = requiresAuthentication
	var username string = ""
	this.Username = &username
	var password string = ""
	this.Password = &password
	return &this
}

// GetEnabled returns the Enabled field value
func (o *SmtpServer) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *SmtpServer) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *SmtpServer) SetEnabled(v bool) {
	o.Enabled = v
}

// GetServer returns the Server field value
func (o *SmtpServer) GetServer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Server
}

// GetServerOk returns a tuple with the Server field value
// and a boolean to check if the value has been set.
func (o *SmtpServer) GetServerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Server, true
}

// SetServer sets field value
func (o *SmtpServer) SetServer(v string) {
	o.Server = v
}

// GetPort returns the Port field value
func (o *SmtpServer) GetPort() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *SmtpServer) GetPortOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *SmtpServer) SetPort(v int64) {
	o.Port = v
}

// GetEncryptionType returns the EncryptionType field value
func (o *SmtpServer) GetEncryptionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EncryptionType
}

// GetEncryptionTypeOk returns a tuple with the EncryptionType field value
// and a boolean to check if the value has been set.
func (o *SmtpServer) GetEncryptionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EncryptionType, true
}

// SetEncryptionType sets field value
func (o *SmtpServer) SetEncryptionType(v string) {
	o.EncryptionType = v
}

// GetConnectionTimeout returns the ConnectionTimeout field value
func (o *SmtpServer) GetConnectionTimeout() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ConnectionTimeout
}

// GetConnectionTimeoutOk returns a tuple with the ConnectionTimeout field value
// and a boolean to check if the value has been set.
func (o *SmtpServer) GetConnectionTimeoutOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionTimeout, true
}

// SetConnectionTimeout sets field value
func (o *SmtpServer) SetConnectionTimeout(v int64) {
	o.ConnectionTimeout = v
}

// GetSenderDisplayName returns the SenderDisplayName field value
func (o *SmtpServer) GetSenderDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SenderDisplayName
}

// GetSenderDisplayNameOk returns a tuple with the SenderDisplayName field value
// and a boolean to check if the value has been set.
func (o *SmtpServer) GetSenderDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SenderDisplayName, true
}

// SetSenderDisplayName sets field value
func (o *SmtpServer) SetSenderDisplayName(v string) {
	o.SenderDisplayName = v
}

// GetSenderEmailAddress returns the SenderEmailAddress field value
func (o *SmtpServer) GetSenderEmailAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SenderEmailAddress
}

// GetSenderEmailAddressOk returns a tuple with the SenderEmailAddress field value
// and a boolean to check if the value has been set.
func (o *SmtpServer) GetSenderEmailAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SenderEmailAddress, true
}

// SetSenderEmailAddress sets field value
func (o *SmtpServer) SetSenderEmailAddress(v string) {
	o.SenderEmailAddress = v
}

// GetRequiresAuthentication returns the RequiresAuthentication field value
func (o *SmtpServer) GetRequiresAuthentication() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RequiresAuthentication
}

// GetRequiresAuthenticationOk returns a tuple with the RequiresAuthentication field value
// and a boolean to check if the value has been set.
func (o *SmtpServer) GetRequiresAuthenticationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequiresAuthentication, true
}

// SetRequiresAuthentication sets field value
func (o *SmtpServer) SetRequiresAuthentication(v bool) {
	o.RequiresAuthentication = v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *SmtpServer) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmtpServer) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *SmtpServer) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *SmtpServer) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *SmtpServer) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmtpServer) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *SmtpServer) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *SmtpServer) SetPassword(v string) {
	o.Password = &v
}

func (o SmtpServer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmtpServer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	toSerialize["server"] = o.Server
	toSerialize["port"] = o.Port
	toSerialize["encryptionType"] = o.EncryptionType
	toSerialize["connectionTimeout"] = o.ConnectionTimeout
	toSerialize["senderDisplayName"] = o.SenderDisplayName
	toSerialize["senderEmailAddress"] = o.SenderEmailAddress
	toSerialize["requiresAuthentication"] = o.RequiresAuthentication
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	return toSerialize, nil
}

func (o *SmtpServer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
		"server",
		"port",
		"encryptionType",
		"connectionTimeout",
		"senderDisplayName",
		"senderEmailAddress",
		"requiresAuthentication",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSmtpServer := _SmtpServer{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSmtpServer)

	if err != nil {
		return err
	}

	*o = SmtpServer(varSmtpServer)

	return err
}

type NullableSmtpServer struct {
	value *SmtpServer
	isSet bool
}

func (v NullableSmtpServer) Get() *SmtpServer {
	return v.value
}

func (v *NullableSmtpServer) Set(val *SmtpServer) {
	v.value = val
	v.isSet = true
}

func (v NullableSmtpServer) IsSet() bool {
	return v.isSet
}

func (v *NullableSmtpServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmtpServer(val *SmtpServer) *NullableSmtpServer {
	return &NullableSmtpServer{value: val, isSet: true}
}

func (v NullableSmtpServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmtpServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


