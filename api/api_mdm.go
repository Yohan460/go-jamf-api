/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"reflect"
)


type MdmApi interface {

	/*
	PreviewMdmCommandsPost Post a command for creation and queuing 

	Provided an MDM command type and appropriate information, will create and then queue said command.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPreviewMdmCommandsPostRequest
	*/
	PreviewMdmCommandsPost(ctx context.Context) ApiPreviewMdmCommandsPostRequest

	// PreviewMdmCommandsPostExecute executes the request
	//  @return []HrefResponse
	PreviewMdmCommandsPostExecute(r ApiPreviewMdmCommandsPostRequest) ([]HrefResponse, *http.Response, error)

	/*
	V1DeployPackagePost Deploy packages using MDM

	Deploys packages to macOS devices using the InstallEnterpriseApplication MDM command.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV1DeployPackagePostRequest
	*/
	V1DeployPackagePost(ctx context.Context) ApiV1DeployPackagePostRequest

	// V1DeployPackagePostExecute executes the request
	//  @return VerbosePackageDeploymentResponse
	V1DeployPackagePostExecute(r ApiV1DeployPackagePostRequest) (*VerbosePackageDeploymentResponse, *http.Response, error)

	/*
	V1MdmCommandsGet Get information about mdm commands made by Jamf Pro. 

	Get information about mdm commands made by Jamf Pro.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV1MdmCommandsGetRequest
	*/
	V1MdmCommandsGet(ctx context.Context) ApiV1MdmCommandsGetRequest

	// V1MdmCommandsGetExecute executes the request
	//  @return []MdmCommand
	V1MdmCommandsGetExecute(r ApiV1MdmCommandsGetRequest) ([]MdmCommand, *http.Response, error)

	/*
	V1MdmRenewProfilePost Renew MDM Profile 

	Renews the device's MDM Profile, including the device identity certificate within the MDM Profile.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV1MdmRenewProfilePostRequest
	*/
	V1MdmRenewProfilePost(ctx context.Context) ApiV1MdmRenewProfilePostRequest

	// V1MdmRenewProfilePostExecute executes the request
	//  @return RenewMdmProfileResponse
	V1MdmRenewProfilePostExecute(r ApiV1MdmRenewProfilePostRequest) (*RenewMdmProfileResponse, *http.Response, error)
}

// MdmApiService MdmApi service
type MdmApiService service

type ApiPreviewMdmCommandsPostRequest struct {
	ctx context.Context
	ApiService MdmApi
	mdmCommandRequest *MdmCommandRequest
}

// The mdm command object to create and queue
func (r ApiPreviewMdmCommandsPostRequest) MdmCommandRequest(mdmCommandRequest MdmCommandRequest) ApiPreviewMdmCommandsPostRequest {
	r.mdmCommandRequest = &mdmCommandRequest
	return r
}

func (r ApiPreviewMdmCommandsPostRequest) Execute() ([]HrefResponse, *http.Response, error) {
	return r.ApiService.PreviewMdmCommandsPostExecute(r)
}

/*
PreviewMdmCommandsPost Post a command for creation and queuing 

Provided an MDM command type and appropriate information, will create and then queue said command.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPreviewMdmCommandsPostRequest
*/
func (a *MdmApiService) PreviewMdmCommandsPost(ctx context.Context) ApiPreviewMdmCommandsPostRequest {
	return ApiPreviewMdmCommandsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []HrefResponse
func (a *MdmApiService) PreviewMdmCommandsPostExecute(r ApiPreviewMdmCommandsPostRequest) ([]HrefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []HrefResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MdmApiService.PreviewMdmCommandsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/preview/mdm/commands"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.mdmCommandRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1DeployPackagePostRequest struct {
	ctx context.Context
	ApiService MdmApi
	installPackage *InstallPackage
	verbose *bool
}

func (r ApiV1DeployPackagePostRequest) InstallPackage(installPackage InstallPackage) ApiV1DeployPackagePostRequest {
	r.installPackage = &installPackage
	return r
}

// Enables the &#39;verbose&#39; response, which includes information about the commands queued as well as information about commands that failed to queue.
func (r ApiV1DeployPackagePostRequest) Verbose(verbose bool) ApiV1DeployPackagePostRequest {
	r.verbose = &verbose
	return r
}

func (r ApiV1DeployPackagePostRequest) Execute() (*VerbosePackageDeploymentResponse, *http.Response, error) {
	return r.ApiService.V1DeployPackagePostExecute(r)
}

/*
V1DeployPackagePost Deploy packages using MDM

Deploys packages to macOS devices using the InstallEnterpriseApplication MDM command.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1DeployPackagePostRequest
*/
func (a *MdmApiService) V1DeployPackagePost(ctx context.Context) ApiV1DeployPackagePostRequest {
	return ApiV1DeployPackagePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return VerbosePackageDeploymentResponse
func (a *MdmApiService) V1DeployPackagePostExecute(r ApiV1DeployPackagePostRequest) (*VerbosePackageDeploymentResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VerbosePackageDeploymentResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MdmApiService.V1DeployPackagePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/deploy-package"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.installPackage == nil {
		return localVarReturnValue, nil, reportError("installPackage is required and must be specified")
	}

	if r.verbose != nil {
		localVarQueryParams.Add("verbose", parameterToString(*r.verbose, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.installPackage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1MdmCommandsGetRequest struct {
	ctx context.Context
	ApiService MdmApi
	uuids *[]string
}

// A list of the UUIDs of the commands being searched for.  Limited to 40 UUIDs in length.
func (r ApiV1MdmCommandsGetRequest) Uuids(uuids []string) ApiV1MdmCommandsGetRequest {
	r.uuids = &uuids
	return r
}

func (r ApiV1MdmCommandsGetRequest) Execute() ([]MdmCommand, *http.Response, error) {
	return r.ApiService.V1MdmCommandsGetExecute(r)
}

/*
V1MdmCommandsGet Get information about mdm commands made by Jamf Pro. 

Get information about mdm commands made by Jamf Pro.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1MdmCommandsGetRequest
*/
func (a *MdmApiService) V1MdmCommandsGet(ctx context.Context) ApiV1MdmCommandsGetRequest {
	return ApiV1MdmCommandsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []MdmCommand
func (a *MdmApiService) V1MdmCommandsGetExecute(r ApiV1MdmCommandsGetRequest) ([]MdmCommand, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []MdmCommand
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MdmApiService.V1MdmCommandsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/mdm/commands"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.uuids == nil {
		return localVarReturnValue, nil, reportError("uuids is required and must be specified")
	}

	{
		t := *r.uuids
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("uuids", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("uuids", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 414 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1MdmRenewProfilePostRequest struct {
	ctx context.Context
	ApiService MdmApi
	udids *Udids
}

// List of devices&#39; UDIDs to perform MDM profile renewal
func (r ApiV1MdmRenewProfilePostRequest) Udids(udids Udids) ApiV1MdmRenewProfilePostRequest {
	r.udids = &udids
	return r
}

func (r ApiV1MdmRenewProfilePostRequest) Execute() (*RenewMdmProfileResponse, *http.Response, error) {
	return r.ApiService.V1MdmRenewProfilePostExecute(r)
}

/*
V1MdmRenewProfilePost Renew MDM Profile 

Renews the device's MDM Profile, including the device identity certificate within the MDM Profile.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1MdmRenewProfilePostRequest
*/
func (a *MdmApiService) V1MdmRenewProfilePost(ctx context.Context) ApiV1MdmRenewProfilePostRequest {
	return ApiV1MdmRenewProfilePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RenewMdmProfileResponse
func (a *MdmApiService) V1MdmRenewProfilePostExecute(r ApiV1MdmRenewProfilePostRequest) (*RenewMdmProfileResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RenewMdmProfileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MdmApiService.V1MdmRenewProfilePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/mdm/renew-profile"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.udids == nil {
		return localVarReturnValue, nil, reportError("udids is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.udids
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
