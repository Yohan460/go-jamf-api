/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


type MdmAPI interface {

	/*
	PreviewMdmCommandsPost Post a command for creation and queuing 

	Provided an MDM command type and appropriate information, will create and then queue said command.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MdmAPIPreviewMdmCommandsPostRequest

	Deprecated
	*/
	PreviewMdmCommandsPost(ctx context.Context) MdmAPIPreviewMdmCommandsPostRequest

	// PreviewMdmCommandsPostExecute executes the request
	//  @return []HrefResponse
	// Deprecated
	PreviewMdmCommandsPostExecute(r MdmAPIPreviewMdmCommandsPostRequest) ([]HrefResponse, *http.Response, error)

	/*
	V1DeployPackagePost Deploy packages using MDM

	Deploys packages to macOS devices using the InstallEnterpriseApplication MDM command.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MdmAPIV1DeployPackagePostRequest
	*/
	V1DeployPackagePost(ctx context.Context) MdmAPIV1DeployPackagePostRequest

	// V1DeployPackagePostExecute executes the request
	//  @return VerbosePackageDeploymentResponse
	V1DeployPackagePostExecute(r MdmAPIV1DeployPackagePostRequest) (*VerbosePackageDeploymentResponse, *http.Response, error)

	/*
	V1MdmCommandsGet Get information about mdm commands made by Jamf Pro.

	Get information about mdm commands made by Jamf Pro.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MdmAPIV1MdmCommandsGetRequest

	Deprecated
	*/
	V1MdmCommandsGet(ctx context.Context) MdmAPIV1MdmCommandsGetRequest

	// V1MdmCommandsGetExecute executes the request
	//  @return []MdmCommand
	// Deprecated
	V1MdmCommandsGetExecute(r MdmAPIV1MdmCommandsGetRequest) ([]MdmCommand, *http.Response, error)

	/*
	V1MdmRenewProfilePost Renew MDM Profile 

	Renews the device's MDM Profile, including the device identity certificate within the MDM Profile.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MdmAPIV1MdmRenewProfilePostRequest
	*/
	V1MdmRenewProfilePost(ctx context.Context) MdmAPIV1MdmRenewProfilePostRequest

	// V1MdmRenewProfilePostExecute executes the request
	//  @return RenewMdmProfileResponse
	V1MdmRenewProfilePostExecute(r MdmAPIV1MdmRenewProfilePostRequest) (*RenewMdmProfileResponse, *http.Response, error)

	/*
	V2MdmCommandsGet Get information about mdm commands made by Jamf Pro. 

	Get information about mdm commands made by Jamf Pro.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MdmAPIV2MdmCommandsGetRequest
	*/
	V2MdmCommandsGet(ctx context.Context) MdmAPIV2MdmCommandsGetRequest

	// V2MdmCommandsGetExecute executes the request
	//  @return MdmCommandResults
	V2MdmCommandsGetExecute(r MdmAPIV2MdmCommandsGetRequest) (*MdmCommandResults, *http.Response, error)

	/*
	V2MdmCommandsPost Post a command for creation and queuing 

	Provided an MDM command type and appropriate information, will create and then queue said command.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MdmAPIV2MdmCommandsPostRequest
	*/
	V2MdmCommandsPost(ctx context.Context) MdmAPIV2MdmCommandsPostRequest

	// V2MdmCommandsPostExecute executes the request
	//  @return []HrefResponse
	V2MdmCommandsPostExecute(r MdmAPIV2MdmCommandsPostRequest) ([]HrefResponse, *http.Response, error)
}

// MdmAPIService MdmAPI service
type MdmAPIService service

type MdmAPIPreviewMdmCommandsPostRequest struct {
	ctx context.Context
	ApiService MdmAPI
	mdmCommandRequest *MdmCommandRequest
}

// The mdm command object to create and queue
func (r MdmAPIPreviewMdmCommandsPostRequest) MdmCommandRequest(mdmCommandRequest MdmCommandRequest) MdmAPIPreviewMdmCommandsPostRequest {
	r.mdmCommandRequest = &mdmCommandRequest
	return r
}

func (r MdmAPIPreviewMdmCommandsPostRequest) Execute() ([]HrefResponse, *http.Response, error) {
	return r.ApiService.PreviewMdmCommandsPostExecute(r)
}

/*
PreviewMdmCommandsPost Post a command for creation and queuing 

Provided an MDM command type and appropriate information, will create and then queue said command.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MdmAPIPreviewMdmCommandsPostRequest

Deprecated
*/
func (a *MdmAPIService) PreviewMdmCommandsPost(ctx context.Context) MdmAPIPreviewMdmCommandsPostRequest {
	return MdmAPIPreviewMdmCommandsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []HrefResponse
// Deprecated
func (a *MdmAPIService) PreviewMdmCommandsPostExecute(r MdmAPIPreviewMdmCommandsPostRequest) ([]HrefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []HrefResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MdmAPIService.PreviewMdmCommandsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/preview/mdm/commands"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.mdmCommandRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MdmAPIV1DeployPackagePostRequest struct {
	ctx context.Context
	ApiService MdmAPI
	installPackage *InstallPackage
	verbose *bool
}

func (r MdmAPIV1DeployPackagePostRequest) InstallPackage(installPackage InstallPackage) MdmAPIV1DeployPackagePostRequest {
	r.installPackage = &installPackage
	return r
}

// Enables the &#39;verbose&#39; response, which includes information about the commands queued as well as information about commands that failed to queue.
func (r MdmAPIV1DeployPackagePostRequest) Verbose(verbose bool) MdmAPIV1DeployPackagePostRequest {
	r.verbose = &verbose
	return r
}

func (r MdmAPIV1DeployPackagePostRequest) Execute() (*VerbosePackageDeploymentResponse, *http.Response, error) {
	return r.ApiService.V1DeployPackagePostExecute(r)
}

/*
V1DeployPackagePost Deploy packages using MDM

Deploys packages to macOS devices using the InstallEnterpriseApplication MDM command.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MdmAPIV1DeployPackagePostRequest
*/
func (a *MdmAPIService) V1DeployPackagePost(ctx context.Context) MdmAPIV1DeployPackagePostRequest {
	return MdmAPIV1DeployPackagePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return VerbosePackageDeploymentResponse
func (a *MdmAPIService) V1DeployPackagePostExecute(r MdmAPIV1DeployPackagePostRequest) (*VerbosePackageDeploymentResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VerbosePackageDeploymentResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MdmAPIService.V1DeployPackagePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/deploy-package"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.installPackage == nil {
		return localVarReturnValue, nil, reportError("installPackage is required and must be specified")
	}

	if r.verbose != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "verbose", r.verbose, "")
	} else {
		var defaultValue bool = false
		r.verbose = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.installPackage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MdmAPIV1MdmCommandsGetRequest struct {
	ctx context.Context
	ApiService MdmAPI
	uuids *[]string
	clientManagementId *string
}

// A list of the UUIDs of the commands being searched for.  Limited to 40 UUIDs in length. Choose one of two parameters, but not both.
func (r MdmAPIV1MdmCommandsGetRequest) Uuids(uuids []string) MdmAPIV1MdmCommandsGetRequest {
	r.uuids = &uuids
	return r
}

// The client management id used to search for a list of commands. Choose one of two parameters, but not both.
func (r MdmAPIV1MdmCommandsGetRequest) ClientManagementId(clientManagementId string) MdmAPIV1MdmCommandsGetRequest {
	r.clientManagementId = &clientManagementId
	return r
}

func (r MdmAPIV1MdmCommandsGetRequest) Execute() ([]MdmCommand, *http.Response, error) {
	return r.ApiService.V1MdmCommandsGetExecute(r)
}

/*
V1MdmCommandsGet Get information about mdm commands made by Jamf Pro.

Get information about mdm commands made by Jamf Pro.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MdmAPIV1MdmCommandsGetRequest

Deprecated
*/
func (a *MdmAPIService) V1MdmCommandsGet(ctx context.Context) MdmAPIV1MdmCommandsGetRequest {
	return MdmAPIV1MdmCommandsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []MdmCommand
// Deprecated
func (a *MdmAPIService) V1MdmCommandsGetExecute(r MdmAPIV1MdmCommandsGetRequest) ([]MdmCommand, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []MdmCommand
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MdmAPIService.V1MdmCommandsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/mdm/commands"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.uuids != nil {
		t := *r.uuids
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "uuids", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "uuids", t, "multi")
		}
	}
	if r.clientManagementId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "client-management-id", r.clientManagementId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 414 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MdmAPIV1MdmRenewProfilePostRequest struct {
	ctx context.Context
	ApiService MdmAPI
	udids *Udids
}

// List of devices&#39; UDIDs to perform MDM profile renewal
func (r MdmAPIV1MdmRenewProfilePostRequest) Udids(udids Udids) MdmAPIV1MdmRenewProfilePostRequest {
	r.udids = &udids
	return r
}

func (r MdmAPIV1MdmRenewProfilePostRequest) Execute() (*RenewMdmProfileResponse, *http.Response, error) {
	return r.ApiService.V1MdmRenewProfilePostExecute(r)
}

/*
V1MdmRenewProfilePost Renew MDM Profile 

Renews the device's MDM Profile, including the device identity certificate within the MDM Profile.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MdmAPIV1MdmRenewProfilePostRequest
*/
func (a *MdmAPIService) V1MdmRenewProfilePost(ctx context.Context) MdmAPIV1MdmRenewProfilePostRequest {
	return MdmAPIV1MdmRenewProfilePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RenewMdmProfileResponse
func (a *MdmAPIService) V1MdmRenewProfilePostExecute(r MdmAPIV1MdmRenewProfilePostRequest) (*RenewMdmProfileResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RenewMdmProfileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MdmAPIService.V1MdmRenewProfilePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/mdm/renew-profile"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.udids == nil {
		return localVarReturnValue, nil, reportError("udids is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.udids
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MdmAPIV2MdmCommandsGetRequest struct {
	ctx context.Context
	ApiService MdmAPI
	page *int64
	pageSize *int64
	sort *[]string
	filter *string
}

func (r MdmAPIV2MdmCommandsGetRequest) Page(page int64) MdmAPIV2MdmCommandsGetRequest {
	r.page = &page
	return r
}

func (r MdmAPIV2MdmCommandsGetRequest) PageSize(pageSize int64) MdmAPIV2MdmCommandsGetRequest {
	r.pageSize = &pageSize
	return r
}

// Default sort is dateSent:asc. Multiple sort criteria are supported and must be separated with a comma.
func (r MdmAPIV2MdmCommandsGetRequest) Sort(sort []string) MdmAPIV2MdmCommandsGetRequest {
	r.sort = &sort
	return r
}

// Query in the RSQL format, allowing to filter, for a list of commands. All url must contain minimum one filter field. Fields allowed in the query: uuid, clientManagementId, command, status, clientType, dateSent, validAfter, dateCompleted, profileIdentifier, and active. This param can be combined with paging. Please note that any date filters must be used with gt, lt, ge, le Example: clientManagementId&#x3D;&#x3D;fb511aae-c557-474f-a9c1-5dc845b90d0f;status&#x3D;&#x3D;Pending;command&#x3D;&#x3D;INSTALL_PROFILE;uuid&#x3D;&#x3D;9e18f849-e689-4f2d-b616-a99d3da7db42;clientType&#x3D;&#x3D;COMPUTER_USER;profileIdentifier&#x3D;&#x3D;18cc61c2-01fc-11ed-b939-0242ac120002;dateCompleted&#x3D;ge&#x3D;2021-08-04T14:25:18.26Z;dateCompleted&#x3D;le&#x3D;2021-08-04T14:25:18.26Z;validAfter&#x3D;ge&#x3D;2021-08-05T14:25:18.26Z;active&#x3D;&#x3D;true
func (r MdmAPIV2MdmCommandsGetRequest) Filter(filter string) MdmAPIV2MdmCommandsGetRequest {
	r.filter = &filter
	return r
}

func (r MdmAPIV2MdmCommandsGetRequest) Execute() (*MdmCommandResults, *http.Response, error) {
	return r.ApiService.V2MdmCommandsGetExecute(r)
}

/*
V2MdmCommandsGet Get information about mdm commands made by Jamf Pro. 

Get information about mdm commands made by Jamf Pro.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MdmAPIV2MdmCommandsGetRequest
*/
func (a *MdmAPIService) V2MdmCommandsGet(ctx context.Context) MdmAPIV2MdmCommandsGetRequest {
	return MdmAPIV2MdmCommandsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MdmCommandResults
func (a *MdmAPIService) V2MdmCommandsGetExecute(r MdmAPIV2MdmCommandsGetRequest) (*MdmCommandResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MdmCommandResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MdmAPIService.V2MdmCommandsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/mdm/commands"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int64 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int64 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		defaultValue := []string{"dateSent:asc"}
		r.sort = &defaultValue
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	} else {
		var defaultValue string = ""
		r.filter = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MdmAPIV2MdmCommandsPostRequest struct {
	ctx context.Context
	ApiService MdmAPI
	mdmCommandRequest *MdmCommandRequest
}

// The mdm command object to create and queue
func (r MdmAPIV2MdmCommandsPostRequest) MdmCommandRequest(mdmCommandRequest MdmCommandRequest) MdmAPIV2MdmCommandsPostRequest {
	r.mdmCommandRequest = &mdmCommandRequest
	return r
}

func (r MdmAPIV2MdmCommandsPostRequest) Execute() ([]HrefResponse, *http.Response, error) {
	return r.ApiService.V2MdmCommandsPostExecute(r)
}

/*
V2MdmCommandsPost Post a command for creation and queuing 

Provided an MDM command type and appropriate information, will create and then queue said command.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MdmAPIV2MdmCommandsPostRequest
*/
func (a *MdmAPIService) V2MdmCommandsPost(ctx context.Context) MdmAPIV2MdmCommandsPostRequest {
	return MdmAPIV2MdmCommandsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []HrefResponse
func (a *MdmAPIService) V2MdmCommandsPostExecute(r MdmAPIV2MdmCommandsPostRequest) ([]HrefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []HrefResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MdmAPIService.V2MdmCommandsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/mdm/commands"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.mdmCommandRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
