/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type PatchSoftwareTitleConfigurationsAPI interface {

	/*
	V2PatchSoftwareTitleConfigurationsGet Retrieve Patch Software Title Configurations

	Retrieves patch software title configurations

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsGetRequest
	*/
	V2PatchSoftwareTitleConfigurationsGet(ctx context.Context) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsGetRequest

	// V2PatchSoftwareTitleConfigurationsGetExecute executes the request
	//  @return []PatchSoftwareTitleConfiguration
	V2PatchSoftwareTitleConfigurationsGetExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsGetRequest) ([]PatchSoftwareTitleConfiguration, *http.Response, error)

	/*
	V2PatchSoftwareTitleConfigurationsIdDashboardDelete Remove a software title configuration from the dashboard 

	Removes a software title configuration from the dashboard.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id software title configuration id
	@return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDashboardDeleteRequest
	*/
	V2PatchSoftwareTitleConfigurationsIdDashboardDelete(ctx context.Context, id string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDashboardDeleteRequest

	// V2PatchSoftwareTitleConfigurationsIdDashboardDeleteExecute executes the request
	V2PatchSoftwareTitleConfigurationsIdDashboardDeleteExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDashboardDeleteRequest) (*http.Response, error)

	/*
	V2PatchSoftwareTitleConfigurationsIdDashboardGet Return whether or not the requested software title configuration is on the dashboard 

	Returns whether or not the requested software title configuration is on the dashboard

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id software title configuration id
	@return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDashboardGetRequest
	*/
	V2PatchSoftwareTitleConfigurationsIdDashboardGet(ctx context.Context, id string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDashboardGetRequest

	// V2PatchSoftwareTitleConfigurationsIdDashboardGetExecute executes the request
	//  @return SoftwareTitleConfigurationOnDashboard
	V2PatchSoftwareTitleConfigurationsIdDashboardGetExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDashboardGetRequest) (*SoftwareTitleConfigurationOnDashboard, *http.Response, error)

	/*
	V2PatchSoftwareTitleConfigurationsIdDashboardPost Add a software title configuration to the dashboard 

	Adds asoftware title configuration to the dashboard.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id software title configuration id
	@return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDashboardPostRequest
	*/
	V2PatchSoftwareTitleConfigurationsIdDashboardPost(ctx context.Context, id string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDashboardPostRequest

	// V2PatchSoftwareTitleConfigurationsIdDashboardPostExecute executes the request
	V2PatchSoftwareTitleConfigurationsIdDashboardPostExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDashboardPostRequest) (*http.Response, error)

	/*
	V2PatchSoftwareTitleConfigurationsIdDefinitionsGet Retrieve Patch Software Title Definitions with the supplied id

	Retrieves patch software title definitions with the supplied id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Patch Software Title identifier
	@return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDefinitionsGetRequest
	*/
	V2PatchSoftwareTitleConfigurationsIdDefinitionsGet(ctx context.Context, id string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDefinitionsGetRequest

	// V2PatchSoftwareTitleConfigurationsIdDefinitionsGetExecute executes the request
	//  @return PatchSoftwareTitleDefinitions
	V2PatchSoftwareTitleConfigurationsIdDefinitionsGetExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDefinitionsGetRequest) (*PatchSoftwareTitleDefinitions, *http.Response, error)

	/*
	V2PatchSoftwareTitleConfigurationsIdDelete Delete Patch Software Title Configurations with the supplied id

	Deletes Patch Software Title Configurations with the supplied id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Patch Software Title Configurations identifier
	@return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDeleteRequest
	*/
	V2PatchSoftwareTitleConfigurationsIdDelete(ctx context.Context, id string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDeleteRequest

	// V2PatchSoftwareTitleConfigurationsIdDeleteExecute executes the request
	V2PatchSoftwareTitleConfigurationsIdDeleteExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDeleteRequest) (*http.Response, error)

	/*
	V2PatchSoftwareTitleConfigurationsIdDependenciesGet Retrieve list of Patch Software Title Configuration Dependencies

	Retrieve list of Patch Software Title Configuration Dependencies

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Patch Software Title Configuration Id
	@return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDependenciesGetRequest
	*/
	V2PatchSoftwareTitleConfigurationsIdDependenciesGet(ctx context.Context, id string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDependenciesGetRequest

	// V2PatchSoftwareTitleConfigurationsIdDependenciesGetExecute executes the request
	//  @return PatchSoftwareTitleConfigurationDependencies
	V2PatchSoftwareTitleConfigurationsIdDependenciesGetExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDependenciesGetRequest) (*PatchSoftwareTitleConfigurationDependencies, *http.Response, error)

	/*
	V2PatchSoftwareTitleConfigurationsIdExportReportGet Export Patch Reporting Data

	Export Patch Reporting Data

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Patch Software Title Configurations identifier
	@return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdExportReportGetRequest
	*/
	V2PatchSoftwareTitleConfigurationsIdExportReportGet(ctx context.Context, id string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdExportReportGetRequest

	// V2PatchSoftwareTitleConfigurationsIdExportReportGetExecute executes the request
	//  @return interface{}
	V2PatchSoftwareTitleConfigurationsIdExportReportGetExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdExportReportGetRequest) (interface{}, *http.Response, error)

	/*
	V2PatchSoftwareTitleConfigurationsIdExtensionAttributesGet Retrieve Software Title Extension Attributes with the supplied id

	Retrieves software title extension attributes with the supplied id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Patch Software Title identifier
	@return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdExtensionAttributesGetRequest
	*/
	V2PatchSoftwareTitleConfigurationsIdExtensionAttributesGet(ctx context.Context, id string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdExtensionAttributesGetRequest

	// V2PatchSoftwareTitleConfigurationsIdExtensionAttributesGetExecute executes the request
	//  @return []PatchSoftwareTitleExtensionAttributes
	V2PatchSoftwareTitleConfigurationsIdExtensionAttributesGetExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdExtensionAttributesGetRequest) ([]PatchSoftwareTitleExtensionAttributes, *http.Response, error)

	/*
	V2PatchSoftwareTitleConfigurationsIdGet Retrieve Patch Software Title Configurations with the supplied id

	Retrieves Patch Software Title Configurations with the supplied id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Patch Software Title Configurations identifier
	@return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdGetRequest
	*/
	V2PatchSoftwareTitleConfigurationsIdGet(ctx context.Context, id string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdGetRequest

	// V2PatchSoftwareTitleConfigurationsIdGetExecute executes the request
	//  @return PatchSoftwareTitleConfiguration
	V2PatchSoftwareTitleConfigurationsIdGetExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdGetRequest) (*PatchSoftwareTitleConfiguration, *http.Response, error)

	/*
	V2PatchSoftwareTitleConfigurationsIdHistoryGet Get specified Patch Software Title Configuration history object 

	Gets specified Patch Software Title Configuration history object


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Patch Software Title Configuration Id
	@return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdHistoryGetRequest
	*/
	V2PatchSoftwareTitleConfigurationsIdHistoryGet(ctx context.Context, id string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdHistoryGetRequest

	// V2PatchSoftwareTitleConfigurationsIdHistoryGetExecute executes the request
	//  @return HistorySearchResults
	V2PatchSoftwareTitleConfigurationsIdHistoryGetExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdHistoryGetRequest) (*HistorySearchResults, *http.Response, error)

	/*
	V2PatchSoftwareTitleConfigurationsIdHistoryPost Add Patch Software Title Configuration history object notes 

	Adds Patch Software Title Configuration history object notes

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Patch Software Title Configuration Id
	@return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdHistoryPostRequest
	*/
	V2PatchSoftwareTitleConfigurationsIdHistoryPost(ctx context.Context, id string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdHistoryPostRequest

	// V2PatchSoftwareTitleConfigurationsIdHistoryPostExecute executes the request
	//  @return HrefResponse
	V2PatchSoftwareTitleConfigurationsIdHistoryPostExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdHistoryPostRequest) (*HrefResponse, *http.Response, error)

	/*
	V2PatchSoftwareTitleConfigurationsIdPatch Update Patch Software Title Configurations

	Updates Patch Software Title Configurations

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Patch Software Title Configurations identifier
	@return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchRequest
	*/
	V2PatchSoftwareTitleConfigurationsIdPatch(ctx context.Context, id string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchRequest

	// V2PatchSoftwareTitleConfigurationsIdPatchExecute executes the request
	//  @return PatchSoftwareTitleConfiguration
	V2PatchSoftwareTitleConfigurationsIdPatchExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchRequest) (*PatchSoftwareTitleConfiguration, *http.Response, error)

	/*
	V2PatchSoftwareTitleConfigurationsIdPatchReportGet Retrieve Patch Software Title Configuration Patch Report

	Retrieve Patch Software Title Configuration Patch Report

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Patch Software Title Configurations identifier
	@return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchReportGetRequest
	*/
	V2PatchSoftwareTitleConfigurationsIdPatchReportGet(ctx context.Context, id string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchReportGetRequest

	// V2PatchSoftwareTitleConfigurationsIdPatchReportGetExecute executes the request
	//  @return PatchSoftwareTitleReportSearchResult
	V2PatchSoftwareTitleConfigurationsIdPatchReportGetExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchReportGetRequest) (*PatchSoftwareTitleReportSearchResult, *http.Response, error)

	/*
	V2PatchSoftwareTitleConfigurationsIdPatchSummaryGet Return Active Patch Summary

	Returns active patch summary.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Patch id
	@return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchSummaryGetRequest
	*/
	V2PatchSoftwareTitleConfigurationsIdPatchSummaryGet(ctx context.Context, id string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchSummaryGetRequest

	// V2PatchSoftwareTitleConfigurationsIdPatchSummaryGetExecute executes the request
	//  @return PatchSummary
	V2PatchSoftwareTitleConfigurationsIdPatchSummaryGetExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchSummaryGetRequest) (*PatchSummary, *http.Response, error)

	/*
	V2PatchSoftwareTitleConfigurationsIdPatchSummaryVersionsGet Returns patch versions

	Returns patch versions

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Patch id
	@return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchSummaryVersionsGetRequest
	*/
	V2PatchSoftwareTitleConfigurationsIdPatchSummaryVersionsGet(ctx context.Context, id string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchSummaryVersionsGetRequest

	// V2PatchSoftwareTitleConfigurationsIdPatchSummaryVersionsGetExecute executes the request
	//  @return []PatchSummaryVersion
	V2PatchSoftwareTitleConfigurationsIdPatchSummaryVersionsGetExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchSummaryVersionsGetRequest) ([]PatchSummaryVersion, *http.Response, error)

	/*
	V2PatchSoftwareTitleConfigurationsPost Create Patch Software Title Configurations

	Creates Patch Software Title Configurations using sToken

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsPostRequest
	*/
	V2PatchSoftwareTitleConfigurationsPost(ctx context.Context) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsPostRequest

	// V2PatchSoftwareTitleConfigurationsPostExecute executes the request
	//  @return HrefResponse
	V2PatchSoftwareTitleConfigurationsPostExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsPostRequest) (*HrefResponse, *http.Response, error)
}

// PatchSoftwareTitleConfigurationsAPIService PatchSoftwareTitleConfigurationsAPI service
type PatchSoftwareTitleConfigurationsAPIService service

type PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsGetRequest struct {
	ctx context.Context
	ApiService PatchSoftwareTitleConfigurationsAPI
}

func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsGetRequest) Execute() ([]PatchSoftwareTitleConfiguration, *http.Response, error) {
	return r.ApiService.V2PatchSoftwareTitleConfigurationsGetExecute(r)
}

/*
V2PatchSoftwareTitleConfigurationsGet Retrieve Patch Software Title Configurations

Retrieves patch software title configurations

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsGetRequest
*/
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsGet(ctx context.Context) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsGetRequest {
	return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []PatchSoftwareTitleConfiguration
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsGetExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsGetRequest) ([]PatchSoftwareTitleConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PatchSoftwareTitleConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchSoftwareTitleConfigurationsAPIService.V2PatchSoftwareTitleConfigurationsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/patch-software-title-configurations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDashboardDeleteRequest struct {
	ctx context.Context
	ApiService PatchSoftwareTitleConfigurationsAPI
	id string
}

func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDashboardDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V2PatchSoftwareTitleConfigurationsIdDashboardDeleteExecute(r)
}

/*
V2PatchSoftwareTitleConfigurationsIdDashboardDelete Remove a software title configuration from the dashboard 

Removes a software title configuration from the dashboard.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id software title configuration id
 @return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDashboardDeleteRequest
*/
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsIdDashboardDelete(ctx context.Context, id string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDashboardDeleteRequest {
	return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDashboardDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsIdDashboardDeleteExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDashboardDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchSoftwareTitleConfigurationsAPIService.V2PatchSoftwareTitleConfigurationsIdDashboardDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/patch-software-title-configurations/{id}/dashboard"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDashboardGetRequest struct {
	ctx context.Context
	ApiService PatchSoftwareTitleConfigurationsAPI
	id string
}

func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDashboardGetRequest) Execute() (*SoftwareTitleConfigurationOnDashboard, *http.Response, error) {
	return r.ApiService.V2PatchSoftwareTitleConfigurationsIdDashboardGetExecute(r)
}

/*
V2PatchSoftwareTitleConfigurationsIdDashboardGet Return whether or not the requested software title configuration is on the dashboard 

Returns whether or not the requested software title configuration is on the dashboard

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id software title configuration id
 @return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDashboardGetRequest
*/
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsIdDashboardGet(ctx context.Context, id string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDashboardGetRequest {
	return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDashboardGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SoftwareTitleConfigurationOnDashboard
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsIdDashboardGetExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDashboardGetRequest) (*SoftwareTitleConfigurationOnDashboard, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SoftwareTitleConfigurationOnDashboard
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchSoftwareTitleConfigurationsAPIService.V2PatchSoftwareTitleConfigurationsIdDashboardGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/patch-software-title-configurations/{id}/dashboard"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDashboardPostRequest struct {
	ctx context.Context
	ApiService PatchSoftwareTitleConfigurationsAPI
	id string
}

func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDashboardPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.V2PatchSoftwareTitleConfigurationsIdDashboardPostExecute(r)
}

/*
V2PatchSoftwareTitleConfigurationsIdDashboardPost Add a software title configuration to the dashboard 

Adds asoftware title configuration to the dashboard.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id software title configuration id
 @return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDashboardPostRequest
*/
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsIdDashboardPost(ctx context.Context, id string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDashboardPostRequest {
	return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDashboardPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsIdDashboardPostExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDashboardPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchSoftwareTitleConfigurationsAPIService.V2PatchSoftwareTitleConfigurationsIdDashboardPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/patch-software-title-configurations/{id}/dashboard"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDefinitionsGetRequest struct {
	ctx context.Context
	ApiService PatchSoftwareTitleConfigurationsAPI
	id string
	page *int32
	pageSize *int32
	sort *[]string
	filter *string
}

func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDefinitionsGetRequest) Page(page int32) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDefinitionsGetRequest {
	r.page = &page
	return r
}

func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDefinitionsGetRequest) PageSize(pageSize int32) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDefinitionsGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Default sort is absoluteOrderId:asc. Multiple sort criteria are supported and must be separated with a comma.
func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDefinitionsGetRequest) Sort(sort []string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDefinitionsGetRequest {
	r.sort = &sort
	return r
}

// Query in the RSQL format, allowing to filter Patch Software Title Definition collection. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: id, version, minimumOperatingSystem, releaseDate, reboot, standalone and absoluteOrderId. This param can be combined with paging and sorting.
func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDefinitionsGetRequest) Filter(filter string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDefinitionsGetRequest {
	r.filter = &filter
	return r
}

func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDefinitionsGetRequest) Execute() (*PatchSoftwareTitleDefinitions, *http.Response, error) {
	return r.ApiService.V2PatchSoftwareTitleConfigurationsIdDefinitionsGetExecute(r)
}

/*
V2PatchSoftwareTitleConfigurationsIdDefinitionsGet Retrieve Patch Software Title Definitions with the supplied id

Retrieves patch software title definitions with the supplied id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Patch Software Title identifier
 @return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDefinitionsGetRequest
*/
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsIdDefinitionsGet(ctx context.Context, id string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDefinitionsGetRequest {
	return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDefinitionsGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PatchSoftwareTitleDefinitions
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsIdDefinitionsGetExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDefinitionsGetRequest) (*PatchSoftwareTitleDefinitions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PatchSoftwareTitleDefinitions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchSoftwareTitleConfigurationsAPIService.V2PatchSoftwareTitleConfigurationsIdDefinitionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/patch-software-title-configurations/{id}/definitions"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		defaultValue := []string{"absoluteOrderId:asc"}
		r.sort = &defaultValue
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	} else {
		var defaultValue string = ""
		r.filter = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDeleteRequest struct {
	ctx context.Context
	ApiService PatchSoftwareTitleConfigurationsAPI
	id string
}

func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V2PatchSoftwareTitleConfigurationsIdDeleteExecute(r)
}

/*
V2PatchSoftwareTitleConfigurationsIdDelete Delete Patch Software Title Configurations with the supplied id

Deletes Patch Software Title Configurations with the supplied id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Patch Software Title Configurations identifier
 @return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDeleteRequest
*/
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsIdDelete(ctx context.Context, id string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDeleteRequest {
	return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsIdDeleteExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchSoftwareTitleConfigurationsAPIService.V2PatchSoftwareTitleConfigurationsIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/patch-software-title-configurations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDependenciesGetRequest struct {
	ctx context.Context
	ApiService PatchSoftwareTitleConfigurationsAPI
	id string
}

func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDependenciesGetRequest) Execute() (*PatchSoftwareTitleConfigurationDependencies, *http.Response, error) {
	return r.ApiService.V2PatchSoftwareTitleConfigurationsIdDependenciesGetExecute(r)
}

/*
V2PatchSoftwareTitleConfigurationsIdDependenciesGet Retrieve list of Patch Software Title Configuration Dependencies

Retrieve list of Patch Software Title Configuration Dependencies

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Patch Software Title Configuration Id
 @return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDependenciesGetRequest
*/
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsIdDependenciesGet(ctx context.Context, id string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDependenciesGetRequest {
	return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDependenciesGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PatchSoftwareTitleConfigurationDependencies
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsIdDependenciesGetExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdDependenciesGetRequest) (*PatchSoftwareTitleConfigurationDependencies, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PatchSoftwareTitleConfigurationDependencies
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchSoftwareTitleConfigurationsAPIService.V2PatchSoftwareTitleConfigurationsIdDependenciesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/patch-software-title-configurations/{id}/dependencies"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdExportReportGetRequest struct {
	ctx context.Context
	ApiService PatchSoftwareTitleConfigurationsAPI
	id string
	columnsToExport *[]string
	page *int32
	pageSize *int32
	sort *[]string
	filter *string
	accept *string
}

// List of column names to export
func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdExportReportGetRequest) ColumnsToExport(columnsToExport []string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdExportReportGetRequest {
	r.columnsToExport = &columnsToExport
	return r
}

func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdExportReportGetRequest) Page(page int32) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdExportReportGetRequest {
	r.page = &page
	return r
}

// Leave blank for full export
func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdExportReportGetRequest) PageSize(pageSize int32) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdExportReportGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Default sort is computerName:asc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;id:desc,name:asc Supported fields: computerName, deviceId, username, operatingSystemVersion, lastContactTime, buildingName, departmentName, siteName, version
func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdExportReportGetRequest) Sort(sort []string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdExportReportGetRequest {
	r.sort = &sort
	return r
}

// Query in the RSQL format, allowing to filter Patch Report collection on version equality only. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: version. Comparators allowed in the query: &#x3D;&#x3D;, !&#x3D; This param can be combined with paging and sorting.
func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdExportReportGetRequest) Filter(filter string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdExportReportGetRequest {
	r.filter = &filter
	return r
}

// File
func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdExportReportGetRequest) Accept(accept string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdExportReportGetRequest {
	r.accept = &accept
	return r
}

func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdExportReportGetRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.V2PatchSoftwareTitleConfigurationsIdExportReportGetExecute(r)
}

/*
V2PatchSoftwareTitleConfigurationsIdExportReportGet Export Patch Reporting Data

Export Patch Reporting Data

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Patch Software Title Configurations identifier
 @return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdExportReportGetRequest
*/
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsIdExportReportGet(ctx context.Context, id string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdExportReportGetRequest {
	return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdExportReportGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return interface{}
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsIdExportReportGetExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdExportReportGetRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchSoftwareTitleConfigurationsAPIService.V2PatchSoftwareTitleConfigurationsIdExportReportGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/patch-software-title-configurations/{id}/export-report"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.columnsToExport == nil {
		return localVarReturnValue, nil, reportError("columnsToExport is required and must be specified")
	}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		defaultValue := []string{"computerName:asc"}
		r.sort = &defaultValue
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	} else {
		var defaultValue string = ""
		r.filter = &defaultValue
	}
	{
		t := *r.columnsToExport
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "columns-to-export", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "columns-to-export", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/csv", "text/tab", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accept != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "accept", r.accept, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdExtensionAttributesGetRequest struct {
	ctx context.Context
	ApiService PatchSoftwareTitleConfigurationsAPI
	id string
}

func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdExtensionAttributesGetRequest) Execute() ([]PatchSoftwareTitleExtensionAttributes, *http.Response, error) {
	return r.ApiService.V2PatchSoftwareTitleConfigurationsIdExtensionAttributesGetExecute(r)
}

/*
V2PatchSoftwareTitleConfigurationsIdExtensionAttributesGet Retrieve Software Title Extension Attributes with the supplied id

Retrieves software title extension attributes with the supplied id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Patch Software Title identifier
 @return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdExtensionAttributesGetRequest
*/
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsIdExtensionAttributesGet(ctx context.Context, id string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdExtensionAttributesGetRequest {
	return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdExtensionAttributesGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []PatchSoftwareTitleExtensionAttributes
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsIdExtensionAttributesGetExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdExtensionAttributesGetRequest) ([]PatchSoftwareTitleExtensionAttributes, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PatchSoftwareTitleExtensionAttributes
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchSoftwareTitleConfigurationsAPIService.V2PatchSoftwareTitleConfigurationsIdExtensionAttributesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/patch-software-title-configurations/{id}/extension-attributes"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdGetRequest struct {
	ctx context.Context
	ApiService PatchSoftwareTitleConfigurationsAPI
	id string
}

func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdGetRequest) Execute() (*PatchSoftwareTitleConfiguration, *http.Response, error) {
	return r.ApiService.V2PatchSoftwareTitleConfigurationsIdGetExecute(r)
}

/*
V2PatchSoftwareTitleConfigurationsIdGet Retrieve Patch Software Title Configurations with the supplied id

Retrieves Patch Software Title Configurations with the supplied id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Patch Software Title Configurations identifier
 @return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdGetRequest
*/
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsIdGet(ctx context.Context, id string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdGetRequest {
	return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PatchSoftwareTitleConfiguration
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsIdGetExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdGetRequest) (*PatchSoftwareTitleConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PatchSoftwareTitleConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchSoftwareTitleConfigurationsAPIService.V2PatchSoftwareTitleConfigurationsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/patch-software-title-configurations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdHistoryGetRequest struct {
	ctx context.Context
	ApiService PatchSoftwareTitleConfigurationsAPI
	id string
	page *int32
	pageSize *int32
	sort *[]string
	filter *string
}

func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdHistoryGetRequest) Page(page int32) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdHistoryGetRequest {
	r.page = &page
	return r
}

func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdHistoryGetRequest) PageSize(pageSize int32) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdHistoryGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Default sort is date:desc. Multiple sort criteria are supported and must be separated with a comma. 
func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdHistoryGetRequest) Sort(sort []string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdHistoryGetRequest {
	r.sort = &sort
	return r
}

// Query in the RSQL format, allowing to filter history notes collection. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: username, date, note, details. This param can be combined with paging and sorting. Example: filter&#x3D;username!&#x3D;admin and details&#x3D;&#x3D;*disabled* and date&lt;2019-12-15
func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdHistoryGetRequest) Filter(filter string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdHistoryGetRequest {
	r.filter = &filter
	return r
}

func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdHistoryGetRequest) Execute() (*HistorySearchResults, *http.Response, error) {
	return r.ApiService.V2PatchSoftwareTitleConfigurationsIdHistoryGetExecute(r)
}

/*
V2PatchSoftwareTitleConfigurationsIdHistoryGet Get specified Patch Software Title Configuration history object 

Gets specified Patch Software Title Configuration history object


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Patch Software Title Configuration Id
 @return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdHistoryGetRequest
*/
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsIdHistoryGet(ctx context.Context, id string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdHistoryGetRequest {
	return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdHistoryGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return HistorySearchResults
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsIdHistoryGetExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdHistoryGetRequest) (*HistorySearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HistorySearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchSoftwareTitleConfigurationsAPIService.V2PatchSoftwareTitleConfigurationsIdHistoryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/patch-software-title-configurations/{id}/history"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		defaultValue := []string{"date:desc"}
		r.sort = &defaultValue
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	} else {
		var defaultValue string = ""
		r.filter = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdHistoryPostRequest struct {
	ctx context.Context
	ApiService PatchSoftwareTitleConfigurationsAPI
	id string
	objectHistoryNote *ObjectHistoryNote
}

// History notes to create
func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdHistoryPostRequest) ObjectHistoryNote(objectHistoryNote ObjectHistoryNote) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdHistoryPostRequest {
	r.objectHistoryNote = &objectHistoryNote
	return r
}

func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdHistoryPostRequest) Execute() (*HrefResponse, *http.Response, error) {
	return r.ApiService.V2PatchSoftwareTitleConfigurationsIdHistoryPostExecute(r)
}

/*
V2PatchSoftwareTitleConfigurationsIdHistoryPost Add Patch Software Title Configuration history object notes 

Adds Patch Software Title Configuration history object notes

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Patch Software Title Configuration Id
 @return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdHistoryPostRequest
*/
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsIdHistoryPost(ctx context.Context, id string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdHistoryPostRequest {
	return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdHistoryPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return HrefResponse
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsIdHistoryPostExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdHistoryPostRequest) (*HrefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HrefResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchSoftwareTitleConfigurationsAPIService.V2PatchSoftwareTitleConfigurationsIdHistoryPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/patch-software-title-configurations/{id}/history"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.objectHistoryNote == nil {
		return localVarReturnValue, nil, reportError("objectHistoryNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.objectHistoryNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchRequest struct {
	ctx context.Context
	ApiService PatchSoftwareTitleConfigurationsAPI
	id string
	patchSoftwareTitleConfigurationPatch *PatchSoftwareTitleConfigurationPatch
}

// Patch Software Title Configurations to update
func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchRequest) PatchSoftwareTitleConfigurationPatch(patchSoftwareTitleConfigurationPatch PatchSoftwareTitleConfigurationPatch) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchRequest {
	r.patchSoftwareTitleConfigurationPatch = &patchSoftwareTitleConfigurationPatch
	return r
}

func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchRequest) Execute() (*PatchSoftwareTitleConfiguration, *http.Response, error) {
	return r.ApiService.V2PatchSoftwareTitleConfigurationsIdPatchExecute(r)
}

/*
V2PatchSoftwareTitleConfigurationsIdPatch Update Patch Software Title Configurations

Updates Patch Software Title Configurations

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Patch Software Title Configurations identifier
 @return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchRequest
*/
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsIdPatch(ctx context.Context, id string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchRequest {
	return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PatchSoftwareTitleConfiguration
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsIdPatchExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchRequest) (*PatchSoftwareTitleConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PatchSoftwareTitleConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchSoftwareTitleConfigurationsAPIService.V2PatchSoftwareTitleConfigurationsIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/patch-software-title-configurations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchSoftwareTitleConfigurationPatch == nil {
		return localVarReturnValue, nil, reportError("patchSoftwareTitleConfigurationPatch is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchSoftwareTitleConfigurationPatch
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchReportGetRequest struct {
	ctx context.Context
	ApiService PatchSoftwareTitleConfigurationsAPI
	id string
	page *int32
	pageSize *int32
	sort *[]string
	filter *string
}

func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchReportGetRequest) Page(page int32) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchReportGetRequest {
	r.page = &page
	return r
}

func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchReportGetRequest) PageSize(pageSize int32) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchReportGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Default sort is computerName:asc. Multiple sort criteria are supported and must be separated with a comma. Supported fields: computerName, deviceId, username, operatingSystemVersion, lastContactTime, buildingName, departmentName, siteName, version
func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchReportGetRequest) Sort(sort []string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchReportGetRequest {
	r.sort = &sort
	return r
}

// Query in the RSQL format, allowing to filter Patch Report collection on version equality only. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: version. Comparators allowed in the query: &#x3D;&#x3D;, !&#x3D; This param can be combined with paging and sorting.
func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchReportGetRequest) Filter(filter string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchReportGetRequest {
	r.filter = &filter
	return r
}

func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchReportGetRequest) Execute() (*PatchSoftwareTitleReportSearchResult, *http.Response, error) {
	return r.ApiService.V2PatchSoftwareTitleConfigurationsIdPatchReportGetExecute(r)
}

/*
V2PatchSoftwareTitleConfigurationsIdPatchReportGet Retrieve Patch Software Title Configuration Patch Report

Retrieve Patch Software Title Configuration Patch Report

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Patch Software Title Configurations identifier
 @return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchReportGetRequest
*/
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsIdPatchReportGet(ctx context.Context, id string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchReportGetRequest {
	return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchReportGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PatchSoftwareTitleReportSearchResult
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsIdPatchReportGetExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchReportGetRequest) (*PatchSoftwareTitleReportSearchResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PatchSoftwareTitleReportSearchResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchSoftwareTitleConfigurationsAPIService.V2PatchSoftwareTitleConfigurationsIdPatchReportGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/patch-software-title-configurations/{id}/patch-report"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		defaultValue := []string{"computerName:asc"}
		r.sort = &defaultValue
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	} else {
		var defaultValue string = ""
		r.filter = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchSummaryGetRequest struct {
	ctx context.Context
	ApiService PatchSoftwareTitleConfigurationsAPI
	id string
}

func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchSummaryGetRequest) Execute() (*PatchSummary, *http.Response, error) {
	return r.ApiService.V2PatchSoftwareTitleConfigurationsIdPatchSummaryGetExecute(r)
}

/*
V2PatchSoftwareTitleConfigurationsIdPatchSummaryGet Return Active Patch Summary

Returns active patch summary.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Patch id
 @return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchSummaryGetRequest
*/
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsIdPatchSummaryGet(ctx context.Context, id string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchSummaryGetRequest {
	return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchSummaryGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PatchSummary
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsIdPatchSummaryGetExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchSummaryGetRequest) (*PatchSummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PatchSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchSoftwareTitleConfigurationsAPIService.V2PatchSoftwareTitleConfigurationsIdPatchSummaryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/patch-software-title-configurations/{id}/patch-summary"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchSummaryVersionsGetRequest struct {
	ctx context.Context
	ApiService PatchSoftwareTitleConfigurationsAPI
	id string
}

func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchSummaryVersionsGetRequest) Execute() ([]PatchSummaryVersion, *http.Response, error) {
	return r.ApiService.V2PatchSoftwareTitleConfigurationsIdPatchSummaryVersionsGetExecute(r)
}

/*
V2PatchSoftwareTitleConfigurationsIdPatchSummaryVersionsGet Returns patch versions

Returns patch versions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Patch id
 @return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchSummaryVersionsGetRequest
*/
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsIdPatchSummaryVersionsGet(ctx context.Context, id string) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchSummaryVersionsGetRequest {
	return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchSummaryVersionsGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []PatchSummaryVersion
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsIdPatchSummaryVersionsGetExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsIdPatchSummaryVersionsGetRequest) ([]PatchSummaryVersion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PatchSummaryVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchSoftwareTitleConfigurationsAPIService.V2PatchSoftwareTitleConfigurationsIdPatchSummaryVersionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/patch-software-title-configurations/{id}/patch-summary/versions"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsPostRequest struct {
	ctx context.Context
	ApiService PatchSoftwareTitleConfigurationsAPI
	patchSoftwareTitleConfigurationBase *PatchSoftwareTitleConfigurationBase
}

// Software title configurations to create
func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsPostRequest) PatchSoftwareTitleConfigurationBase(patchSoftwareTitleConfigurationBase PatchSoftwareTitleConfigurationBase) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsPostRequest {
	r.patchSoftwareTitleConfigurationBase = &patchSoftwareTitleConfigurationBase
	return r
}

func (r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsPostRequest) Execute() (*HrefResponse, *http.Response, error) {
	return r.ApiService.V2PatchSoftwareTitleConfigurationsPostExecute(r)
}

/*
V2PatchSoftwareTitleConfigurationsPost Create Patch Software Title Configurations

Creates Patch Software Title Configurations using sToken

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsPostRequest
*/
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsPost(ctx context.Context) PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsPostRequest {
	return PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HrefResponse
func (a *PatchSoftwareTitleConfigurationsAPIService) V2PatchSoftwareTitleConfigurationsPostExecute(r PatchSoftwareTitleConfigurationsAPIV2PatchSoftwareTitleConfigurationsPostRequest) (*HrefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HrefResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchSoftwareTitleConfigurationsAPIService.V2PatchSoftwareTitleConfigurationsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/patch-software-title-configurations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchSoftwareTitleConfigurationBase == nil {
		return localVarReturnValue, nil, reportError("patchSoftwareTitleConfigurationBase is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchSoftwareTitleConfigurationBase
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
