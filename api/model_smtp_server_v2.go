/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SmtpServerV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmtpServerV2{}

// SmtpServerV2 struct for SmtpServerV2
type SmtpServerV2 struct {
	Enabled bool `json:"enabled"`
	AuthenticationType string `json:"authenticationType"`
	ConnectionSettings *SmtpConnectionSettings `json:"connectionSettings,omitempty"`
	SenderSettings SmtpSenderSettings `json:"senderSettings"`
	BasicAuthCredentials *SmtpBasicCredentials `json:"basicAuthCredentials,omitempty"`
	GraphApiCredentials *SmtpGraphApiCredentials `json:"graphApiCredentials,omitempty"`
}

type _SmtpServerV2 SmtpServerV2

// NewSmtpServerV2 instantiates a new SmtpServerV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmtpServerV2(enabled bool, authenticationType string, senderSettings SmtpSenderSettings) *SmtpServerV2 {
	this := SmtpServerV2{}
	this.Enabled = enabled
	this.AuthenticationType = authenticationType
	this.SenderSettings = senderSettings
	return &this
}

// NewSmtpServerV2WithDefaults instantiates a new SmtpServerV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmtpServerV2WithDefaults() *SmtpServerV2 {
	this := SmtpServerV2{}
	var enabled bool = false
	this.Enabled = enabled
	return &this
}

// GetEnabled returns the Enabled field value
func (o *SmtpServerV2) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *SmtpServerV2) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *SmtpServerV2) SetEnabled(v bool) {
	o.Enabled = v
}

// GetAuthenticationType returns the AuthenticationType field value
func (o *SmtpServerV2) GetAuthenticationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthenticationType
}

// GetAuthenticationTypeOk returns a tuple with the AuthenticationType field value
// and a boolean to check if the value has been set.
func (o *SmtpServerV2) GetAuthenticationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthenticationType, true
}

// SetAuthenticationType sets field value
func (o *SmtpServerV2) SetAuthenticationType(v string) {
	o.AuthenticationType = v
}

// GetConnectionSettings returns the ConnectionSettings field value if set, zero value otherwise.
func (o *SmtpServerV2) GetConnectionSettings() SmtpConnectionSettings {
	if o == nil || IsNil(o.ConnectionSettings) {
		var ret SmtpConnectionSettings
		return ret
	}
	return *o.ConnectionSettings
}

// GetConnectionSettingsOk returns a tuple with the ConnectionSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmtpServerV2) GetConnectionSettingsOk() (*SmtpConnectionSettings, bool) {
	if o == nil || IsNil(o.ConnectionSettings) {
		return nil, false
	}
	return o.ConnectionSettings, true
}

// HasConnectionSettings returns a boolean if a field has been set.
func (o *SmtpServerV2) HasConnectionSettings() bool {
	if o != nil && !IsNil(o.ConnectionSettings) {
		return true
	}

	return false
}

// SetConnectionSettings gets a reference to the given SmtpConnectionSettings and assigns it to the ConnectionSettings field.
func (o *SmtpServerV2) SetConnectionSettings(v SmtpConnectionSettings) {
	o.ConnectionSettings = &v
}

// GetSenderSettings returns the SenderSettings field value
func (o *SmtpServerV2) GetSenderSettings() SmtpSenderSettings {
	if o == nil {
		var ret SmtpSenderSettings
		return ret
	}

	return o.SenderSettings
}

// GetSenderSettingsOk returns a tuple with the SenderSettings field value
// and a boolean to check if the value has been set.
func (o *SmtpServerV2) GetSenderSettingsOk() (*SmtpSenderSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SenderSettings, true
}

// SetSenderSettings sets field value
func (o *SmtpServerV2) SetSenderSettings(v SmtpSenderSettings) {
	o.SenderSettings = v
}

// GetBasicAuthCredentials returns the BasicAuthCredentials field value if set, zero value otherwise.
func (o *SmtpServerV2) GetBasicAuthCredentials() SmtpBasicCredentials {
	if o == nil || IsNil(o.BasicAuthCredentials) {
		var ret SmtpBasicCredentials
		return ret
	}
	return *o.BasicAuthCredentials
}

// GetBasicAuthCredentialsOk returns a tuple with the BasicAuthCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmtpServerV2) GetBasicAuthCredentialsOk() (*SmtpBasicCredentials, bool) {
	if o == nil || IsNil(o.BasicAuthCredentials) {
		return nil, false
	}
	return o.BasicAuthCredentials, true
}

// HasBasicAuthCredentials returns a boolean if a field has been set.
func (o *SmtpServerV2) HasBasicAuthCredentials() bool {
	if o != nil && !IsNil(o.BasicAuthCredentials) {
		return true
	}

	return false
}

// SetBasicAuthCredentials gets a reference to the given SmtpBasicCredentials and assigns it to the BasicAuthCredentials field.
func (o *SmtpServerV2) SetBasicAuthCredentials(v SmtpBasicCredentials) {
	o.BasicAuthCredentials = &v
}

// GetGraphApiCredentials returns the GraphApiCredentials field value if set, zero value otherwise.
func (o *SmtpServerV2) GetGraphApiCredentials() SmtpGraphApiCredentials {
	if o == nil || IsNil(o.GraphApiCredentials) {
		var ret SmtpGraphApiCredentials
		return ret
	}
	return *o.GraphApiCredentials
}

// GetGraphApiCredentialsOk returns a tuple with the GraphApiCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmtpServerV2) GetGraphApiCredentialsOk() (*SmtpGraphApiCredentials, bool) {
	if o == nil || IsNil(o.GraphApiCredentials) {
		return nil, false
	}
	return o.GraphApiCredentials, true
}

// HasGraphApiCredentials returns a boolean if a field has been set.
func (o *SmtpServerV2) HasGraphApiCredentials() bool {
	if o != nil && !IsNil(o.GraphApiCredentials) {
		return true
	}

	return false
}

// SetGraphApiCredentials gets a reference to the given SmtpGraphApiCredentials and assigns it to the GraphApiCredentials field.
func (o *SmtpServerV2) SetGraphApiCredentials(v SmtpGraphApiCredentials) {
	o.GraphApiCredentials = &v
}

func (o SmtpServerV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmtpServerV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	toSerialize["authenticationType"] = o.AuthenticationType
	if !IsNil(o.ConnectionSettings) {
		toSerialize["connectionSettings"] = o.ConnectionSettings
	}
	toSerialize["senderSettings"] = o.SenderSettings
	if !IsNil(o.BasicAuthCredentials) {
		toSerialize["basicAuthCredentials"] = o.BasicAuthCredentials
	}
	if !IsNil(o.GraphApiCredentials) {
		toSerialize["graphApiCredentials"] = o.GraphApiCredentials
	}
	return toSerialize, nil
}

func (o *SmtpServerV2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
		"authenticationType",
		"senderSettings",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSmtpServerV2 := _SmtpServerV2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSmtpServerV2)

	if err != nil {
		return err
	}

	*o = SmtpServerV2(varSmtpServerV2)

	return err
}

type NullableSmtpServerV2 struct {
	value *SmtpServerV2
	isSet bool
}

func (v NullableSmtpServerV2) Get() *SmtpServerV2 {
	return v.value
}

func (v *NullableSmtpServerV2) Set(val *SmtpServerV2) {
	v.value = val
	v.isSet = true
}

func (v NullableSmtpServerV2) IsSet() bool {
	return v.isSet
}

func (v *NullableSmtpServerV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmtpServerV2(val *SmtpServerV2) *NullableSmtpServerV2 {
	return &NullableSmtpServerV2{value: val, isSet: true}
}

func (v NullableSmtpServerV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmtpServerV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


