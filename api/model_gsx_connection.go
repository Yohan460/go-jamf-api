/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GsxConnection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GsxConnection{}

// GsxConnection struct for GsxConnection
type GsxConnection struct {
	Enabled bool `json:"enabled"`
	Username string `json:"username"`
	ServiceAccountNo string `json:"serviceAccountNo"`
	ShipToNo *string `json:"shipToNo,omitempty"`
	Token string `json:"token"`
	GsxKeystore GsxKeystore `json:"gsxKeystore"`
}

type _GsxConnection GsxConnection

// NewGsxConnection instantiates a new GsxConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGsxConnection(enabled bool, username string, serviceAccountNo string, token string, gsxKeystore GsxKeystore) *GsxConnection {
	this := GsxConnection{}
	this.Enabled = enabled
	this.Username = username
	this.ServiceAccountNo = serviceAccountNo
	this.Token = token
	this.GsxKeystore = gsxKeystore
	return &this
}

// NewGsxConnectionWithDefaults instantiates a new GsxConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGsxConnectionWithDefaults() *GsxConnection {
	this := GsxConnection{}
	var enabled bool = false
	this.Enabled = enabled
	var username string = " "
	this.Username = username
	return &this
}

// GetEnabled returns the Enabled field value
func (o *GsxConnection) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *GsxConnection) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *GsxConnection) SetEnabled(v bool) {
	o.Enabled = v
}

// GetUsername returns the Username field value
func (o *GsxConnection) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *GsxConnection) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *GsxConnection) SetUsername(v string) {
	o.Username = v
}

// GetServiceAccountNo returns the ServiceAccountNo field value
func (o *GsxConnection) GetServiceAccountNo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceAccountNo
}

// GetServiceAccountNoOk returns a tuple with the ServiceAccountNo field value
// and a boolean to check if the value has been set.
func (o *GsxConnection) GetServiceAccountNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceAccountNo, true
}

// SetServiceAccountNo sets field value
func (o *GsxConnection) SetServiceAccountNo(v string) {
	o.ServiceAccountNo = v
}

// GetShipToNo returns the ShipToNo field value if set, zero value otherwise.
func (o *GsxConnection) GetShipToNo() string {
	if o == nil || IsNil(o.ShipToNo) {
		var ret string
		return ret
	}
	return *o.ShipToNo
}

// GetShipToNoOk returns a tuple with the ShipToNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GsxConnection) GetShipToNoOk() (*string, bool) {
	if o == nil || IsNil(o.ShipToNo) {
		return nil, false
	}
	return o.ShipToNo, true
}

// HasShipToNo returns a boolean if a field has been set.
func (o *GsxConnection) HasShipToNo() bool {
	if o != nil && !IsNil(o.ShipToNo) {
		return true
	}

	return false
}

// SetShipToNo gets a reference to the given string and assigns it to the ShipToNo field.
func (o *GsxConnection) SetShipToNo(v string) {
	o.ShipToNo = &v
}

// GetToken returns the Token field value
func (o *GsxConnection) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *GsxConnection) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *GsxConnection) SetToken(v string) {
	o.Token = v
}

// GetGsxKeystore returns the GsxKeystore field value
func (o *GsxConnection) GetGsxKeystore() GsxKeystore {
	if o == nil {
		var ret GsxKeystore
		return ret
	}

	return o.GsxKeystore
}

// GetGsxKeystoreOk returns a tuple with the GsxKeystore field value
// and a boolean to check if the value has been set.
func (o *GsxConnection) GetGsxKeystoreOk() (*GsxKeystore, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GsxKeystore, true
}

// SetGsxKeystore sets field value
func (o *GsxConnection) SetGsxKeystore(v GsxKeystore) {
	o.GsxKeystore = v
}

func (o GsxConnection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GsxConnection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	toSerialize["username"] = o.Username
	toSerialize["serviceAccountNo"] = o.ServiceAccountNo
	if !IsNil(o.ShipToNo) {
		toSerialize["shipToNo"] = o.ShipToNo
	}
	toSerialize["token"] = o.Token
	toSerialize["gsxKeystore"] = o.GsxKeystore
	return toSerialize, nil
}

func (o *GsxConnection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
		"username",
		"serviceAccountNo",
		"token",
		"gsxKeystore",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGsxConnection := _GsxConnection{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGsxConnection)

	if err != nil {
		return err
	}

	*o = GsxConnection(varGsxConnection)

	return err
}

type NullableGsxConnection struct {
	value *GsxConnection
	isSet bool
}

func (v NullableGsxConnection) Get() *GsxConnection {
	return v.value
}

func (v *NullableGsxConnection) Set(val *GsxConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableGsxConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableGsxConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGsxConnection(val *GsxConnection) *NullableGsxConnection {
	return &NullableGsxConnection{value: val, isSet: true}
}

func (v NullableGsxConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGsxConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


