/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// CurrentAuthorization struct for CurrentAuthorization
type CurrentAuthorization struct {
	Account *CurrentAccount `json:"account,omitempty"`
	Sites []Site `json:"sites,omitempty"`
	AuthenticationType *string `json:"authenticationType,omitempty"`
}

// NewCurrentAuthorization instantiates a new CurrentAuthorization object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrentAuthorization() *CurrentAuthorization {
	this := CurrentAuthorization{}
	return &this
}

// NewCurrentAuthorizationWithDefaults instantiates a new CurrentAuthorization object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrentAuthorizationWithDefaults() *CurrentAuthorization {
	this := CurrentAuthorization{}
	return &this
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *CurrentAuthorization) GetAccount() CurrentAccount {
	if o == nil || o.Account == nil {
		var ret CurrentAccount
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentAuthorization) GetAccountOk() (*CurrentAccount, bool) {
	if o == nil || o.Account == nil {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *CurrentAuthorization) HasAccount() bool {
	if o != nil && o.Account != nil {
		return true
	}

	return false
}

// SetAccount gets a reference to the given CurrentAccount and assigns it to the Account field.
func (o *CurrentAuthorization) SetAccount(v CurrentAccount) {
	o.Account = &v
}

// GetSites returns the Sites field value if set, zero value otherwise.
func (o *CurrentAuthorization) GetSites() []Site {
	if o == nil || o.Sites == nil {
		var ret []Site
		return ret
	}
	return o.Sites
}

// GetSitesOk returns a tuple with the Sites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentAuthorization) GetSitesOk() ([]Site, bool) {
	if o == nil || o.Sites == nil {
		return nil, false
	}
	return o.Sites, true
}

// HasSites returns a boolean if a field has been set.
func (o *CurrentAuthorization) HasSites() bool {
	if o != nil && o.Sites != nil {
		return true
	}

	return false
}

// SetSites gets a reference to the given []Site and assigns it to the Sites field.
func (o *CurrentAuthorization) SetSites(v []Site) {
	o.Sites = v
}

// GetAuthenticationType returns the AuthenticationType field value if set, zero value otherwise.
func (o *CurrentAuthorization) GetAuthenticationType() string {
	if o == nil || o.AuthenticationType == nil {
		var ret string
		return ret
	}
	return *o.AuthenticationType
}

// GetAuthenticationTypeOk returns a tuple with the AuthenticationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentAuthorization) GetAuthenticationTypeOk() (*string, bool) {
	if o == nil || o.AuthenticationType == nil {
		return nil, false
	}
	return o.AuthenticationType, true
}

// HasAuthenticationType returns a boolean if a field has been set.
func (o *CurrentAuthorization) HasAuthenticationType() bool {
	if o != nil && o.AuthenticationType != nil {
		return true
	}

	return false
}

// SetAuthenticationType gets a reference to the given string and assigns it to the AuthenticationType field.
func (o *CurrentAuthorization) SetAuthenticationType(v string) {
	o.AuthenticationType = &v
}

func (o CurrentAuthorization) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Account != nil {
		toSerialize["account"] = o.Account
	}
	if o.Sites != nil {
		toSerialize["sites"] = o.Sites
	}
	if o.AuthenticationType != nil {
		toSerialize["authenticationType"] = o.AuthenticationType
	}
	return json.Marshal(toSerialize)
}

type NullableCurrentAuthorization struct {
	value *CurrentAuthorization
	isSet bool
}

func (v NullableCurrentAuthorization) Get() *CurrentAuthorization {
	return v.value
}

func (v *NullableCurrentAuthorization) Set(val *CurrentAuthorization) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrentAuthorization) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrentAuthorization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrentAuthorization(val *CurrentAuthorization) *NullableCurrentAuthorization {
	return &NullableCurrentAuthorization{value: val, isSet: true}
}

func (v NullableCurrentAuthorization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrentAuthorization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


