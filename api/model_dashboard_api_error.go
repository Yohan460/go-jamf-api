/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the DashboardApiError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DashboardApiError{}

// DashboardApiError struct for DashboardApiError
type DashboardApiError struct {
	HttpStatusCode *int32 `json:"httpStatusCode,omitempty"`
	Id *string `json:"id,omitempty"`
	Description *string `json:"description,omitempty"`
}

// NewDashboardApiError instantiates a new DashboardApiError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardApiError() *DashboardApiError {
	this := DashboardApiError{}
	var httpStatusCode int32 = 500
	this.HttpStatusCode = &httpStatusCode
	var id string = ""
	this.Id = &id
	var description string = ""
	this.Description = &description
	return &this
}

// NewDashboardApiErrorWithDefaults instantiates a new DashboardApiError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardApiErrorWithDefaults() *DashboardApiError {
	this := DashboardApiError{}
	var httpStatusCode int32 = 500
	this.HttpStatusCode = &httpStatusCode
	var id string = ""
	this.Id = &id
	var description string = ""
	this.Description = &description
	return &this
}

// GetHttpStatusCode returns the HttpStatusCode field value if set, zero value otherwise.
func (o *DashboardApiError) GetHttpStatusCode() int32 {
	if o == nil || IsNil(o.HttpStatusCode) {
		var ret int32
		return ret
	}
	return *o.HttpStatusCode
}

// GetHttpStatusCodeOk returns a tuple with the HttpStatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardApiError) GetHttpStatusCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.HttpStatusCode) {
		return nil, false
	}
	return o.HttpStatusCode, true
}

// HasHttpStatusCode returns a boolean if a field has been set.
func (o *DashboardApiError) HasHttpStatusCode() bool {
	if o != nil && !IsNil(o.HttpStatusCode) {
		return true
	}

	return false
}

// SetHttpStatusCode gets a reference to the given int32 and assigns it to the HttpStatusCode field.
func (o *DashboardApiError) SetHttpStatusCode(v int32) {
	o.HttpStatusCode = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DashboardApiError) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardApiError) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DashboardApiError) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DashboardApiError) SetId(v string) {
	o.Id = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DashboardApiError) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardApiError) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DashboardApiError) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DashboardApiError) SetDescription(v string) {
	o.Description = &v
}

func (o DashboardApiError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DashboardApiError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HttpStatusCode) {
		toSerialize["httpStatusCode"] = o.HttpStatusCode
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

type NullableDashboardApiError struct {
	value *DashboardApiError
	isSet bool
}

func (v NullableDashboardApiError) Get() *DashboardApiError {
	return v.value
}

func (v *NullableDashboardApiError) Set(val *DashboardApiError) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardApiError) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardApiError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardApiError(val *DashboardApiError) *NullableDashboardApiError {
	return &NullableDashboardApiError{value: val, isSet: true}
}

func (v NullableDashboardApiError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardApiError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


