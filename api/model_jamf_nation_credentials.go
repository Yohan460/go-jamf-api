/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the JamfNationCredentials type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JamfNationCredentials{}

// JamfNationCredentials struct for JamfNationCredentials
type JamfNationCredentials struct {
	EmailAddress *string `json:"emailAddress,omitempty"`
	Password *string `json:"password,omitempty"`
}

// NewJamfNationCredentials instantiates a new JamfNationCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJamfNationCredentials() *JamfNationCredentials {
	this := JamfNationCredentials{}
	return &this
}

// NewJamfNationCredentialsWithDefaults instantiates a new JamfNationCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJamfNationCredentialsWithDefaults() *JamfNationCredentials {
	this := JamfNationCredentials{}
	return &this
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise.
func (o *JamfNationCredentials) GetEmailAddress() string {
	if o == nil || IsNil(o.EmailAddress) {
		var ret string
		return ret
	}
	return *o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JamfNationCredentials) GetEmailAddressOk() (*string, bool) {
	if o == nil || IsNil(o.EmailAddress) {
		return nil, false
	}
	return o.EmailAddress, true
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *JamfNationCredentials) HasEmailAddress() bool {
	if o != nil && !IsNil(o.EmailAddress) {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given string and assigns it to the EmailAddress field.
func (o *JamfNationCredentials) SetEmailAddress(v string) {
	o.EmailAddress = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *JamfNationCredentials) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JamfNationCredentials) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *JamfNationCredentials) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *JamfNationCredentials) SetPassword(v string) {
	o.Password = &v
}

func (o JamfNationCredentials) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JamfNationCredentials) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EmailAddress) {
		toSerialize["emailAddress"] = o.EmailAddress
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	return toSerialize, nil
}

type NullableJamfNationCredentials struct {
	value *JamfNationCredentials
	isSet bool
}

func (v NullableJamfNationCredentials) Get() *JamfNationCredentials {
	return v.value
}

func (v *NullableJamfNationCredentials) Set(val *JamfNationCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableJamfNationCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableJamfNationCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJamfNationCredentials(val *JamfNationCredentials) *NullableJamfNationCredentials {
	return &NullableJamfNationCredentials{value: val, isSet: true}
}

func (v NullableJamfNationCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJamfNationCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


