/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// AccountPreferencesSearchType the model 'AccountPreferencesSearchType'
type AccountPreferencesSearchType string

// List of AccountPreferencesSearchType
const (
	ACCOUNTPREFERENCESSEARCHTYPE_EXACT_MATCH AccountPreferencesSearchType = "EXACT_MATCH"
	ACCOUNTPREFERENCESSEARCHTYPE_STARTS_WITH AccountPreferencesSearchType = "STARTS_WITH"
	ACCOUNTPREFERENCESSEARCHTYPE_CONTAINS AccountPreferencesSearchType = "CONTAINS"
)

// All allowed values of AccountPreferencesSearchType enum
var AllowedAccountPreferencesSearchTypeEnumValues = []AccountPreferencesSearchType{
	"EXACT_MATCH",
	"STARTS_WITH",
	"CONTAINS",
}

func (v *AccountPreferencesSearchType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccountPreferencesSearchType(value)
	for _, existing := range AllowedAccountPreferencesSearchTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccountPreferencesSearchType", value)
}

// NewAccountPreferencesSearchTypeFromValue returns a pointer to a valid AccountPreferencesSearchType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountPreferencesSearchTypeFromValue(v string) (*AccountPreferencesSearchType, error) {
	ev := AccountPreferencesSearchType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccountPreferencesSearchType: valid values are %v", v, AllowedAccountPreferencesSearchTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountPreferencesSearchType) IsValid() bool {
	for _, existing := range AllowedAccountPreferencesSearchTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccountPreferencesSearchType value
func (v AccountPreferencesSearchType) Ptr() *AccountPreferencesSearchType {
	return &v
}

type NullableAccountPreferencesSearchType struct {
	value *AccountPreferencesSearchType
	isSet bool
}

func (v NullableAccountPreferencesSearchType) Get() *AccountPreferencesSearchType {
	return v.value
}

func (v *NullableAccountPreferencesSearchType) Set(val *AccountPreferencesSearchType) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountPreferencesSearchType) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountPreferencesSearchType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountPreferencesSearchType(val *AccountPreferencesSearchType) *NullableAccountPreferencesSearchType {
	return &NullableAccountPreferencesSearchType{value: val, isSet: true}
}

func (v NullableAccountPreferencesSearchType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountPreferencesSearchType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

