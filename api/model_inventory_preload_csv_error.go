/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// InventoryPreloadCsvError struct for InventoryPreloadCsvError
type InventoryPreloadCsvError struct {
	Code *string `json:"code,omitempty"`
	Description *string `json:"description,omitempty"`
	Field *string `json:"field,omitempty"`
	Value *string `json:"value,omitempty"`
	SerialNumber *string `json:"serialNumber,omitempty"`
	Line *int32 `json:"line,omitempty"`
	FieldSize *int32 `json:"fieldSize,omitempty"`
	DeviceType *string `json:"deviceType,omitempty"`
}

// NewInventoryPreloadCsvError instantiates a new InventoryPreloadCsvError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInventoryPreloadCsvError() *InventoryPreloadCsvError {
	this := InventoryPreloadCsvError{}
	return &this
}

// NewInventoryPreloadCsvErrorWithDefaults instantiates a new InventoryPreloadCsvError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInventoryPreloadCsvErrorWithDefaults() *InventoryPreloadCsvError {
	this := InventoryPreloadCsvError{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *InventoryPreloadCsvError) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryPreloadCsvError) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *InventoryPreloadCsvError) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *InventoryPreloadCsvError) SetCode(v string) {
	o.Code = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InventoryPreloadCsvError) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryPreloadCsvError) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InventoryPreloadCsvError) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InventoryPreloadCsvError) SetDescription(v string) {
	o.Description = &v
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *InventoryPreloadCsvError) GetField() string {
	if o == nil || o.Field == nil {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryPreloadCsvError) GetFieldOk() (*string, bool) {
	if o == nil || o.Field == nil {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *InventoryPreloadCsvError) HasField() bool {
	if o != nil && o.Field != nil {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *InventoryPreloadCsvError) SetField(v string) {
	o.Field = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *InventoryPreloadCsvError) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryPreloadCsvError) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *InventoryPreloadCsvError) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *InventoryPreloadCsvError) SetValue(v string) {
	o.Value = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *InventoryPreloadCsvError) GetSerialNumber() string {
	if o == nil || o.SerialNumber == nil {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryPreloadCsvError) GetSerialNumberOk() (*string, bool) {
	if o == nil || o.SerialNumber == nil {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *InventoryPreloadCsvError) HasSerialNumber() bool {
	if o != nil && o.SerialNumber != nil {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *InventoryPreloadCsvError) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetLine returns the Line field value if set, zero value otherwise.
func (o *InventoryPreloadCsvError) GetLine() int32 {
	if o == nil || o.Line == nil {
		var ret int32
		return ret
	}
	return *o.Line
}

// GetLineOk returns a tuple with the Line field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryPreloadCsvError) GetLineOk() (*int32, bool) {
	if o == nil || o.Line == nil {
		return nil, false
	}
	return o.Line, true
}

// HasLine returns a boolean if a field has been set.
func (o *InventoryPreloadCsvError) HasLine() bool {
	if o != nil && o.Line != nil {
		return true
	}

	return false
}

// SetLine gets a reference to the given int32 and assigns it to the Line field.
func (o *InventoryPreloadCsvError) SetLine(v int32) {
	o.Line = &v
}

// GetFieldSize returns the FieldSize field value if set, zero value otherwise.
func (o *InventoryPreloadCsvError) GetFieldSize() int32 {
	if o == nil || o.FieldSize == nil {
		var ret int32
		return ret
	}
	return *o.FieldSize
}

// GetFieldSizeOk returns a tuple with the FieldSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryPreloadCsvError) GetFieldSizeOk() (*int32, bool) {
	if o == nil || o.FieldSize == nil {
		return nil, false
	}
	return o.FieldSize, true
}

// HasFieldSize returns a boolean if a field has been set.
func (o *InventoryPreloadCsvError) HasFieldSize() bool {
	if o != nil && o.FieldSize != nil {
		return true
	}

	return false
}

// SetFieldSize gets a reference to the given int32 and assigns it to the FieldSize field.
func (o *InventoryPreloadCsvError) SetFieldSize(v int32) {
	o.FieldSize = &v
}

// GetDeviceType returns the DeviceType field value if set, zero value otherwise.
func (o *InventoryPreloadCsvError) GetDeviceType() string {
	if o == nil || o.DeviceType == nil {
		var ret string
		return ret
	}
	return *o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryPreloadCsvError) GetDeviceTypeOk() (*string, bool) {
	if o == nil || o.DeviceType == nil {
		return nil, false
	}
	return o.DeviceType, true
}

// HasDeviceType returns a boolean if a field has been set.
func (o *InventoryPreloadCsvError) HasDeviceType() bool {
	if o != nil && o.DeviceType != nil {
		return true
	}

	return false
}

// SetDeviceType gets a reference to the given string and assigns it to the DeviceType field.
func (o *InventoryPreloadCsvError) SetDeviceType(v string) {
	o.DeviceType = &v
}

func (o InventoryPreloadCsvError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Field != nil {
		toSerialize["field"] = o.Field
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.SerialNumber != nil {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	if o.Line != nil {
		toSerialize["line"] = o.Line
	}
	if o.FieldSize != nil {
		toSerialize["fieldSize"] = o.FieldSize
	}
	if o.DeviceType != nil {
		toSerialize["deviceType"] = o.DeviceType
	}
	return json.Marshal(toSerialize)
}

type NullableInventoryPreloadCsvError struct {
	value *InventoryPreloadCsvError
	isSet bool
}

func (v NullableInventoryPreloadCsvError) Get() *InventoryPreloadCsvError {
	return v.value
}

func (v *NullableInventoryPreloadCsvError) Set(val *InventoryPreloadCsvError) {
	v.value = val
	v.isSet = true
}

func (v NullableInventoryPreloadCsvError) IsSet() bool {
	return v.isSet
}

func (v *NullableInventoryPreloadCsvError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventoryPreloadCsvError(val *InventoryPreloadCsvError) *NullableInventoryPreloadCsvError {
	return &NullableInventoryPreloadCsvError{value: val, isSet: true}
}

func (v NullableInventoryPreloadCsvError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventoryPreloadCsvError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


