/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DockItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DockItem{}

// DockItem struct for DockItem
type DockItem struct {
	Id *string `json:"id,omitempty"`
	Name string `json:"name"`
	Type string `json:"type"`
	Path string `json:"path"`
	Contents *string `json:"contents,omitempty"`
}

type _DockItem DockItem

// NewDockItem instantiates a new DockItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDockItem(name string, type_ string, path string) *DockItem {
	this := DockItem{}
	this.Name = name
	this.Type = type_
	this.Path = path
	return &this
}

// NewDockItemWithDefaults instantiates a new DockItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDockItemWithDefaults() *DockItem {
	this := DockItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DockItem) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockItem) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DockItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DockItem) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *DockItem) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DockItem) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DockItem) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *DockItem) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DockItem) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DockItem) SetType(v string) {
	o.Type = v
}

// GetPath returns the Path field value
func (o *DockItem) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *DockItem) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *DockItem) SetPath(v string) {
	o.Path = v
}

// GetContents returns the Contents field value if set, zero value otherwise.
func (o *DockItem) GetContents() string {
	if o == nil || IsNil(o.Contents) {
		var ret string
		return ret
	}
	return *o.Contents
}

// GetContentsOk returns a tuple with the Contents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockItem) GetContentsOk() (*string, bool) {
	if o == nil || IsNil(o.Contents) {
		return nil, false
	}
	return o.Contents, true
}

// HasContents returns a boolean if a field has been set.
func (o *DockItem) HasContents() bool {
	if o != nil && !IsNil(o.Contents) {
		return true
	}

	return false
}

// SetContents gets a reference to the given string and assigns it to the Contents field.
func (o *DockItem) SetContents(v string) {
	o.Contents = &v
}

func (o DockItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DockItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	toSerialize["path"] = o.Path
	if !IsNil(o.Contents) {
		toSerialize["contents"] = o.Contents
	}
	return toSerialize, nil
}

func (o *DockItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDockItem := _DockItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDockItem)

	if err != nil {
		return err
	}

	*o = DockItem(varDockItem)

	return err
}

type NullableDockItem struct {
	value *DockItem
	isSet bool
}

func (v NullableDockItem) Get() *DockItem {
	return v.value
}

func (v *NullableDockItem) Set(val *DockItem) {
	v.value = val
	v.isSet = true
}

func (v NullableDockItem) IsSet() bool {
	return v.isSet
}

func (v *NullableDockItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDockItem(val *DockItem) *NullableDockItem {
	return &NullableDockItem{value: val, isSet: true}
}

func (v NullableDockItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDockItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


