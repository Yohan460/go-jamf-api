/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// checks if the MdmCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MdmCommand{}

// MdmCommand struct for MdmCommand
type MdmCommand struct {
	Uuid *string `json:"uuid,omitempty"`
	DateSent *time.Time `json:"dateSent,omitempty"`
	Client *MdmCommandClient `json:"client,omitempty"`
	CommandState *MdmCommandState `json:"commandState,omitempty"`
	CommandType *MdmCommandType `json:"commandType,omitempty"`
}

// NewMdmCommand instantiates a new MdmCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMdmCommand() *MdmCommand {
	this := MdmCommand{}
	return &this
}

// NewMdmCommandWithDefaults instantiates a new MdmCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMdmCommandWithDefaults() *MdmCommand {
	this := MdmCommand{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *MdmCommand) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MdmCommand) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *MdmCommand) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *MdmCommand) SetUuid(v string) {
	o.Uuid = &v
}

// GetDateSent returns the DateSent field value if set, zero value otherwise.
func (o *MdmCommand) GetDateSent() time.Time {
	if o == nil || IsNil(o.DateSent) {
		var ret time.Time
		return ret
	}
	return *o.DateSent
}

// GetDateSentOk returns a tuple with the DateSent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MdmCommand) GetDateSentOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateSent) {
		return nil, false
	}
	return o.DateSent, true
}

// HasDateSent returns a boolean if a field has been set.
func (o *MdmCommand) HasDateSent() bool {
	if o != nil && !IsNil(o.DateSent) {
		return true
	}

	return false
}

// SetDateSent gets a reference to the given time.Time and assigns it to the DateSent field.
func (o *MdmCommand) SetDateSent(v time.Time) {
	o.DateSent = &v
}

// GetClient returns the Client field value if set, zero value otherwise.
func (o *MdmCommand) GetClient() MdmCommandClient {
	if o == nil || IsNil(o.Client) {
		var ret MdmCommandClient
		return ret
	}
	return *o.Client
}

// GetClientOk returns a tuple with the Client field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MdmCommand) GetClientOk() (*MdmCommandClient, bool) {
	if o == nil || IsNil(o.Client) {
		return nil, false
	}
	return o.Client, true
}

// HasClient returns a boolean if a field has been set.
func (o *MdmCommand) HasClient() bool {
	if o != nil && !IsNil(o.Client) {
		return true
	}

	return false
}

// SetClient gets a reference to the given MdmCommandClient and assigns it to the Client field.
func (o *MdmCommand) SetClient(v MdmCommandClient) {
	o.Client = &v
}

// GetCommandState returns the CommandState field value if set, zero value otherwise.
func (o *MdmCommand) GetCommandState() MdmCommandState {
	if o == nil || IsNil(o.CommandState) {
		var ret MdmCommandState
		return ret
	}
	return *o.CommandState
}

// GetCommandStateOk returns a tuple with the CommandState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MdmCommand) GetCommandStateOk() (*MdmCommandState, bool) {
	if o == nil || IsNil(o.CommandState) {
		return nil, false
	}
	return o.CommandState, true
}

// HasCommandState returns a boolean if a field has been set.
func (o *MdmCommand) HasCommandState() bool {
	if o != nil && !IsNil(o.CommandState) {
		return true
	}

	return false
}

// SetCommandState gets a reference to the given MdmCommandState and assigns it to the CommandState field.
func (o *MdmCommand) SetCommandState(v MdmCommandState) {
	o.CommandState = &v
}

// GetCommandType returns the CommandType field value if set, zero value otherwise.
func (o *MdmCommand) GetCommandType() MdmCommandType {
	if o == nil || IsNil(o.CommandType) {
		var ret MdmCommandType
		return ret
	}
	return *o.CommandType
}

// GetCommandTypeOk returns a tuple with the CommandType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MdmCommand) GetCommandTypeOk() (*MdmCommandType, bool) {
	if o == nil || IsNil(o.CommandType) {
		return nil, false
	}
	return o.CommandType, true
}

// HasCommandType returns a boolean if a field has been set.
func (o *MdmCommand) HasCommandType() bool {
	if o != nil && !IsNil(o.CommandType) {
		return true
	}

	return false
}

// SetCommandType gets a reference to the given MdmCommandType and assigns it to the CommandType field.
func (o *MdmCommand) SetCommandType(v MdmCommandType) {
	o.CommandType = &v
}

func (o MdmCommand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MdmCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.DateSent) {
		toSerialize["dateSent"] = o.DateSent
	}
	if !IsNil(o.Client) {
		toSerialize["client"] = o.Client
	}
	if !IsNil(o.CommandState) {
		toSerialize["commandState"] = o.CommandState
	}
	if !IsNil(o.CommandType) {
		toSerialize["commandType"] = o.CommandType
	}
	return toSerialize, nil
}

type NullableMdmCommand struct {
	value *MdmCommand
	isSet bool
}

func (v NullableMdmCommand) Get() *MdmCommand {
	return v.value
}

func (v *NullableMdmCommand) Set(val *MdmCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableMdmCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableMdmCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMdmCommand(val *MdmCommand) *NullableMdmCommand {
	return &NullableMdmCommand{value: val, isSet: true}
}

func (v NullableMdmCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMdmCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


