/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// checks if the MobileDeviceProfile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MobileDeviceProfile{}

// MobileDeviceProfile struct for MobileDeviceProfile
type MobileDeviceProfile struct {
	DisplayName *string `json:"displayName,omitempty"`
	Version *string `json:"version,omitempty"`
	Uuid *string `json:"uuid,omitempty"`
	Identifier *string `json:"identifier,omitempty"`
	Removable *bool `json:"removable,omitempty"`
	LastInstalled *time.Time `json:"lastInstalled,omitempty"`
}

// NewMobileDeviceProfile instantiates a new MobileDeviceProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMobileDeviceProfile() *MobileDeviceProfile {
	this := MobileDeviceProfile{}
	return &this
}

// NewMobileDeviceProfileWithDefaults instantiates a new MobileDeviceProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMobileDeviceProfileWithDefaults() *MobileDeviceProfile {
	this := MobileDeviceProfile{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *MobileDeviceProfile) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDeviceProfile) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *MobileDeviceProfile) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *MobileDeviceProfile) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *MobileDeviceProfile) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDeviceProfile) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *MobileDeviceProfile) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *MobileDeviceProfile) SetVersion(v string) {
	o.Version = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *MobileDeviceProfile) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDeviceProfile) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *MobileDeviceProfile) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *MobileDeviceProfile) SetUuid(v string) {
	o.Uuid = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *MobileDeviceProfile) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDeviceProfile) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *MobileDeviceProfile) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *MobileDeviceProfile) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetRemovable returns the Removable field value if set, zero value otherwise.
func (o *MobileDeviceProfile) GetRemovable() bool {
	if o == nil || IsNil(o.Removable) {
		var ret bool
		return ret
	}
	return *o.Removable
}

// GetRemovableOk returns a tuple with the Removable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDeviceProfile) GetRemovableOk() (*bool, bool) {
	if o == nil || IsNil(o.Removable) {
		return nil, false
	}
	return o.Removable, true
}

// HasRemovable returns a boolean if a field has been set.
func (o *MobileDeviceProfile) HasRemovable() bool {
	if o != nil && !IsNil(o.Removable) {
		return true
	}

	return false
}

// SetRemovable gets a reference to the given bool and assigns it to the Removable field.
func (o *MobileDeviceProfile) SetRemovable(v bool) {
	o.Removable = &v
}

// GetLastInstalled returns the LastInstalled field value if set, zero value otherwise.
func (o *MobileDeviceProfile) GetLastInstalled() time.Time {
	if o == nil || IsNil(o.LastInstalled) {
		var ret time.Time
		return ret
	}
	return *o.LastInstalled
}

// GetLastInstalledOk returns a tuple with the LastInstalled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDeviceProfile) GetLastInstalledOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastInstalled) {
		return nil, false
	}
	return o.LastInstalled, true
}

// HasLastInstalled returns a boolean if a field has been set.
func (o *MobileDeviceProfile) HasLastInstalled() bool {
	if o != nil && !IsNil(o.LastInstalled) {
		return true
	}

	return false
}

// SetLastInstalled gets a reference to the given time.Time and assigns it to the LastInstalled field.
func (o *MobileDeviceProfile) SetLastInstalled(v time.Time) {
	o.LastInstalled = &v
}

func (o MobileDeviceProfile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MobileDeviceProfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Removable) {
		toSerialize["removable"] = o.Removable
	}
	if !IsNil(o.LastInstalled) {
		toSerialize["lastInstalled"] = o.LastInstalled
	}
	return toSerialize, nil
}

type NullableMobileDeviceProfile struct {
	value *MobileDeviceProfile
	isSet bool
}

func (v NullableMobileDeviceProfile) Get() *MobileDeviceProfile {
	return v.value
}

func (v *NullableMobileDeviceProfile) Set(val *MobileDeviceProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableMobileDeviceProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableMobileDeviceProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMobileDeviceProfile(val *MobileDeviceProfile) *NullableMobileDeviceProfile {
	return &NullableMobileDeviceProfile{value: val, isSet: true}
}

func (v NullableMobileDeviceProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMobileDeviceProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


