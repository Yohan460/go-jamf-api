/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the MobileDeviceSharedUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MobileDeviceSharedUser{}

// MobileDeviceSharedUser struct for MobileDeviceSharedUser
type MobileDeviceSharedUser struct {
	ManagedAppleId *string `json:"managedAppleId,omitempty"`
	LoggedIn *bool `json:"loggedIn,omitempty"`
	DataToSync *bool `json:"dataToSync,omitempty"`
}

// NewMobileDeviceSharedUser instantiates a new MobileDeviceSharedUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMobileDeviceSharedUser() *MobileDeviceSharedUser {
	this := MobileDeviceSharedUser{}
	return &this
}

// NewMobileDeviceSharedUserWithDefaults instantiates a new MobileDeviceSharedUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMobileDeviceSharedUserWithDefaults() *MobileDeviceSharedUser {
	this := MobileDeviceSharedUser{}
	return &this
}

// GetManagedAppleId returns the ManagedAppleId field value if set, zero value otherwise.
func (o *MobileDeviceSharedUser) GetManagedAppleId() string {
	if o == nil || IsNil(o.ManagedAppleId) {
		var ret string
		return ret
	}
	return *o.ManagedAppleId
}

// GetManagedAppleIdOk returns a tuple with the ManagedAppleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDeviceSharedUser) GetManagedAppleIdOk() (*string, bool) {
	if o == nil || IsNil(o.ManagedAppleId) {
		return nil, false
	}
	return o.ManagedAppleId, true
}

// HasManagedAppleId returns a boolean if a field has been set.
func (o *MobileDeviceSharedUser) HasManagedAppleId() bool {
	if o != nil && !IsNil(o.ManagedAppleId) {
		return true
	}

	return false
}

// SetManagedAppleId gets a reference to the given string and assigns it to the ManagedAppleId field.
func (o *MobileDeviceSharedUser) SetManagedAppleId(v string) {
	o.ManagedAppleId = &v
}

// GetLoggedIn returns the LoggedIn field value if set, zero value otherwise.
func (o *MobileDeviceSharedUser) GetLoggedIn() bool {
	if o == nil || IsNil(o.LoggedIn) {
		var ret bool
		return ret
	}
	return *o.LoggedIn
}

// GetLoggedInOk returns a tuple with the LoggedIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDeviceSharedUser) GetLoggedInOk() (*bool, bool) {
	if o == nil || IsNil(o.LoggedIn) {
		return nil, false
	}
	return o.LoggedIn, true
}

// HasLoggedIn returns a boolean if a field has been set.
func (o *MobileDeviceSharedUser) HasLoggedIn() bool {
	if o != nil && !IsNil(o.LoggedIn) {
		return true
	}

	return false
}

// SetLoggedIn gets a reference to the given bool and assigns it to the LoggedIn field.
func (o *MobileDeviceSharedUser) SetLoggedIn(v bool) {
	o.LoggedIn = &v
}

// GetDataToSync returns the DataToSync field value if set, zero value otherwise.
func (o *MobileDeviceSharedUser) GetDataToSync() bool {
	if o == nil || IsNil(o.DataToSync) {
		var ret bool
		return ret
	}
	return *o.DataToSync
}

// GetDataToSyncOk returns a tuple with the DataToSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDeviceSharedUser) GetDataToSyncOk() (*bool, bool) {
	if o == nil || IsNil(o.DataToSync) {
		return nil, false
	}
	return o.DataToSync, true
}

// HasDataToSync returns a boolean if a field has been set.
func (o *MobileDeviceSharedUser) HasDataToSync() bool {
	if o != nil && !IsNil(o.DataToSync) {
		return true
	}

	return false
}

// SetDataToSync gets a reference to the given bool and assigns it to the DataToSync field.
func (o *MobileDeviceSharedUser) SetDataToSync(v bool) {
	o.DataToSync = &v
}

func (o MobileDeviceSharedUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MobileDeviceSharedUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ManagedAppleId) {
		toSerialize["managedAppleId"] = o.ManagedAppleId
	}
	if !IsNil(o.LoggedIn) {
		toSerialize["loggedIn"] = o.LoggedIn
	}
	if !IsNil(o.DataToSync) {
		toSerialize["dataToSync"] = o.DataToSync
	}
	return toSerialize, nil
}

type NullableMobileDeviceSharedUser struct {
	value *MobileDeviceSharedUser
	isSet bool
}

func (v NullableMobileDeviceSharedUser) Get() *MobileDeviceSharedUser {
	return v.value
}

func (v *NullableMobileDeviceSharedUser) Set(val *MobileDeviceSharedUser) {
	v.value = val
	v.isSet = true
}

func (v NullableMobileDeviceSharedUser) IsSet() bool {
	return v.isSet
}

func (v *NullableMobileDeviceSharedUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMobileDeviceSharedUser(val *MobileDeviceSharedUser) *NullableMobileDeviceSharedUser {
	return &NullableMobileDeviceSharedUser{value: val, isSet: true}
}

func (v NullableMobileDeviceSharedUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMobileDeviceSharedUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


