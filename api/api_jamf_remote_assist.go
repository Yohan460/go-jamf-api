/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type JamfRemoteAssistAPI interface {

	/*
	V1JamfRemoteAssistSessionGet Gets session history items. 

	Returns tenants sessions history.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return JamfRemoteAssistAPIV1JamfRemoteAssistSessionGetRequest
	*/
	V1JamfRemoteAssistSessionGet(ctx context.Context) JamfRemoteAssistAPIV1JamfRemoteAssistSessionGetRequest

	// V1JamfRemoteAssistSessionGetExecute executes the request
	//  @return []SessionHistoryItem
	V1JamfRemoteAssistSessionGetExecute(r JamfRemoteAssistAPIV1JamfRemoteAssistSessionGetRequest) ([]SessionHistoryItem, *http.Response, error)

	/*
	V1JamfRemoteAssistSessionIdGet Gets single session history item. 

	Returns tenants session history for specific session.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id instance id of session
	@return JamfRemoteAssistAPIV1JamfRemoteAssistSessionIdGetRequest
	*/
	V1JamfRemoteAssistSessionIdGet(ctx context.Context, id string) JamfRemoteAssistAPIV1JamfRemoteAssistSessionIdGetRequest

	// V1JamfRemoteAssistSessionIdGetExecute executes the request
	//  @return SessionHistoryItemWithDetails
	V1JamfRemoteAssistSessionIdGetExecute(r JamfRemoteAssistAPIV1JamfRemoteAssistSessionIdGetRequest) (*SessionHistoryItemWithDetails, *http.Response, error)

	/*
	V2JamfRemoteAssistSessionExportPost Export Jamf Remote Assist sessions history 

	Export Jamf Remote Assist sessions history


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return JamfRemoteAssistAPIV2JamfRemoteAssistSessionExportPostRequest
	*/
	V2JamfRemoteAssistSessionExportPost(ctx context.Context) JamfRemoteAssistAPIV2JamfRemoteAssistSessionExportPostRequest

	// V2JamfRemoteAssistSessionExportPostExecute executes the request
	//  @return interface{}
	V2JamfRemoteAssistSessionExportPostExecute(r JamfRemoteAssistAPIV2JamfRemoteAssistSessionExportPostRequest) (interface{}, *http.Response, error)

	/*
	V2JamfRemoteAssistSessionGet Gets session history items. 

	Returns tenants sessions history.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return JamfRemoteAssistAPIV2JamfRemoteAssistSessionGetRequest
	*/
	V2JamfRemoteAssistSessionGet(ctx context.Context) JamfRemoteAssistAPIV2JamfRemoteAssistSessionGetRequest

	// V2JamfRemoteAssistSessionGetExecute executes the request
	//  @return SessionHistorySearchResults
	V2JamfRemoteAssistSessionGetExecute(r JamfRemoteAssistAPIV2JamfRemoteAssistSessionGetRequest) (*SessionHistorySearchResults, *http.Response, error)

	/*
	V2JamfRemoteAssistSessionIdGet Gets single session history item. 

	Returns tenants session history for specific session.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id instance id of session
	@return JamfRemoteAssistAPIV2JamfRemoteAssistSessionIdGetRequest
	*/
	V2JamfRemoteAssistSessionIdGet(ctx context.Context, id string) JamfRemoteAssistAPIV2JamfRemoteAssistSessionIdGetRequest

	// V2JamfRemoteAssistSessionIdGetExecute executes the request
	//  @return SessionHistoryItemWithDetails
	V2JamfRemoteAssistSessionIdGetExecute(r JamfRemoteAssistAPIV2JamfRemoteAssistSessionIdGetRequest) (*SessionHistoryItemWithDetails, *http.Response, error)
}

// JamfRemoteAssistAPIService JamfRemoteAssistAPI service
type JamfRemoteAssistAPIService service

type JamfRemoteAssistAPIV1JamfRemoteAssistSessionGetRequest struct {
	ctx context.Context
	ApiService JamfRemoteAssistAPI
}

func (r JamfRemoteAssistAPIV1JamfRemoteAssistSessionGetRequest) Execute() ([]SessionHistoryItem, *http.Response, error) {
	return r.ApiService.V1JamfRemoteAssistSessionGetExecute(r)
}

/*
V1JamfRemoteAssistSessionGet Gets session history items. 

Returns tenants sessions history.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return JamfRemoteAssistAPIV1JamfRemoteAssistSessionGetRequest
*/
func (a *JamfRemoteAssistAPIService) V1JamfRemoteAssistSessionGet(ctx context.Context) JamfRemoteAssistAPIV1JamfRemoteAssistSessionGetRequest {
	return JamfRemoteAssistAPIV1JamfRemoteAssistSessionGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SessionHistoryItem
func (a *JamfRemoteAssistAPIService) V1JamfRemoteAssistSessionGetExecute(r JamfRemoteAssistAPIV1JamfRemoteAssistSessionGetRequest) ([]SessionHistoryItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SessionHistoryItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JamfRemoteAssistAPIService.V1JamfRemoteAssistSessionGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/jamf-remote-assist/session"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type JamfRemoteAssistAPIV1JamfRemoteAssistSessionIdGetRequest struct {
	ctx context.Context
	ApiService JamfRemoteAssistAPI
	id string
}

func (r JamfRemoteAssistAPIV1JamfRemoteAssistSessionIdGetRequest) Execute() (*SessionHistoryItemWithDetails, *http.Response, error) {
	return r.ApiService.V1JamfRemoteAssistSessionIdGetExecute(r)
}

/*
V1JamfRemoteAssistSessionIdGet Gets single session history item. 

Returns tenants session history for specific session.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id instance id of session
 @return JamfRemoteAssistAPIV1JamfRemoteAssistSessionIdGetRequest
*/
func (a *JamfRemoteAssistAPIService) V1JamfRemoteAssistSessionIdGet(ctx context.Context, id string) JamfRemoteAssistAPIV1JamfRemoteAssistSessionIdGetRequest {
	return JamfRemoteAssistAPIV1JamfRemoteAssistSessionIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SessionHistoryItemWithDetails
func (a *JamfRemoteAssistAPIService) V1JamfRemoteAssistSessionIdGetExecute(r JamfRemoteAssistAPIV1JamfRemoteAssistSessionIdGetRequest) (*SessionHistoryItemWithDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SessionHistoryItemWithDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JamfRemoteAssistAPIService.V1JamfRemoteAssistSessionIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/jamf-remote-assist/session/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type JamfRemoteAssistAPIV2JamfRemoteAssistSessionExportPostRequest struct {
	ctx context.Context
	ApiService JamfRemoteAssistAPI
	exportParameters *ExportParameters
}

// Optional. Override query parameters since they can make URI exceed 2,000 character limit.
func (r JamfRemoteAssistAPIV2JamfRemoteAssistSessionExportPostRequest) ExportParameters(exportParameters ExportParameters) JamfRemoteAssistAPIV2JamfRemoteAssistSessionExportPostRequest {
	r.exportParameters = &exportParameters
	return r
}

func (r JamfRemoteAssistAPIV2JamfRemoteAssistSessionExportPostRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.V2JamfRemoteAssistSessionExportPostExecute(r)
}

/*
V2JamfRemoteAssistSessionExportPost Export Jamf Remote Assist sessions history 

Export Jamf Remote Assist sessions history


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return JamfRemoteAssistAPIV2JamfRemoteAssistSessionExportPostRequest
*/
func (a *JamfRemoteAssistAPIService) V2JamfRemoteAssistSessionExportPost(ctx context.Context) JamfRemoteAssistAPIV2JamfRemoteAssistSessionExportPostRequest {
	return JamfRemoteAssistAPIV2JamfRemoteAssistSessionExportPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return interface{}
func (a *JamfRemoteAssistAPIService) V2JamfRemoteAssistSessionExportPostExecute(r JamfRemoteAssistAPIV2JamfRemoteAssistSessionExportPostRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JamfRemoteAssistAPIService.V2JamfRemoteAssistSessionExportPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/jamf-remote-assist/session/export"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/csv", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.exportParameters
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type JamfRemoteAssistAPIV2JamfRemoteAssistSessionGetRequest struct {
	ctx context.Context
	ApiService JamfRemoteAssistAPI
	page *int64
	pageSize *int64
	sort *[]string
	filter *string
}

func (r JamfRemoteAssistAPIV2JamfRemoteAssistSessionGetRequest) Page(page int64) JamfRemoteAssistAPIV2JamfRemoteAssistSessionGetRequest {
	r.page = &page
	return r
}

func (r JamfRemoteAssistAPIV2JamfRemoteAssistSessionGetRequest) PageSize(pageSize int64) JamfRemoteAssistAPIV2JamfRemoteAssistSessionGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Default sort is sessionId:desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;sessionId:desc,deviceId:asc 
func (r JamfRemoteAssistAPIV2JamfRemoteAssistSessionGetRequest) Sort(sort []string) JamfRemoteAssistAPIV2JamfRemoteAssistSessionGetRequest {
	r.sort = &sort
	return r
}

// Query in the RSQL format, allowing to filter session history items collection. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: sessionId, deviceId, sessionAdminId. This param can be combined with paging and sorting. Example: sessionAdminId&#x3D;&#x3D;\&quot;*Andrzej*\&quot;
func (r JamfRemoteAssistAPIV2JamfRemoteAssistSessionGetRequest) Filter(filter string) JamfRemoteAssistAPIV2JamfRemoteAssistSessionGetRequest {
	r.filter = &filter
	return r
}

func (r JamfRemoteAssistAPIV2JamfRemoteAssistSessionGetRequest) Execute() (*SessionHistorySearchResults, *http.Response, error) {
	return r.ApiService.V2JamfRemoteAssistSessionGetExecute(r)
}

/*
V2JamfRemoteAssistSessionGet Gets session history items. 

Returns tenants sessions history.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return JamfRemoteAssistAPIV2JamfRemoteAssistSessionGetRequest
*/
func (a *JamfRemoteAssistAPIService) V2JamfRemoteAssistSessionGet(ctx context.Context) JamfRemoteAssistAPIV2JamfRemoteAssistSessionGetRequest {
	return JamfRemoteAssistAPIV2JamfRemoteAssistSessionGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SessionHistorySearchResults
func (a *JamfRemoteAssistAPIService) V2JamfRemoteAssistSessionGetExecute(r JamfRemoteAssistAPIV2JamfRemoteAssistSessionGetRequest) (*SessionHistorySearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SessionHistorySearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JamfRemoteAssistAPIService.V2JamfRemoteAssistSessionGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/jamf-remote-assist/session"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int64 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int64 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		defaultValue := []string{"sessionId:desc"}
		r.sort = &defaultValue
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	} else {
		var defaultValue string = ""
		r.filter = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type JamfRemoteAssistAPIV2JamfRemoteAssistSessionIdGetRequest struct {
	ctx context.Context
	ApiService JamfRemoteAssistAPI
	id string
}

func (r JamfRemoteAssistAPIV2JamfRemoteAssistSessionIdGetRequest) Execute() (*SessionHistoryItemWithDetails, *http.Response, error) {
	return r.ApiService.V2JamfRemoteAssistSessionIdGetExecute(r)
}

/*
V2JamfRemoteAssistSessionIdGet Gets single session history item. 

Returns tenants session history for specific session.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id instance id of session
 @return JamfRemoteAssistAPIV2JamfRemoteAssistSessionIdGetRequest
*/
func (a *JamfRemoteAssistAPIService) V2JamfRemoteAssistSessionIdGet(ctx context.Context, id string) JamfRemoteAssistAPIV2JamfRemoteAssistSessionIdGetRequest {
	return JamfRemoteAssistAPIV2JamfRemoteAssistSessionIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SessionHistoryItemWithDetails
func (a *JamfRemoteAssistAPIService) V2JamfRemoteAssistSessionIdGetExecute(r JamfRemoteAssistAPIV2JamfRemoteAssistSessionIdGetRequest) (*SessionHistoryItemWithDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SessionHistoryItemWithDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JamfRemoteAssistAPIService.V2JamfRemoteAssistSessionIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/jamf-remote-assist/session/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
