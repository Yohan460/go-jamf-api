/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// CacheSettings struct for CacheSettings
type CacheSettings struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	CacheType string `json:"cacheType"`
	TimeToLiveSeconds int32 `json:"timeToLiveSeconds"`
	TimeToIdleSeconds *int32 `json:"timeToIdleSeconds,omitempty"`
	DirectoryTimeToLiveSeconds *int32 `json:"directoryTimeToLiveSeconds,omitempty"`
	EhcacheMaxBytesLocalHeap *string `json:"ehcacheMaxBytesLocalHeap,omitempty"`
	// The default is for Jamf Pro to generate a UUID, so we can only give an example instead.
	CacheUniqueId string `json:"cacheUniqueId"`
	Elasticache *bool `json:"elasticache,omitempty"`
	MemcachedEndpoints []MemcachedEndpoints `json:"memcachedEndpoints"`
}

// NewCacheSettings instantiates a new CacheSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCacheSettings(cacheType string, timeToLiveSeconds int32, cacheUniqueId string, memcachedEndpoints []MemcachedEndpoints) *CacheSettings {
	this := CacheSettings{}
	var name string = "cache configuration"
	this.Name = &name
	this.CacheType = cacheType
	this.TimeToLiveSeconds = timeToLiveSeconds
	var ehcacheMaxBytesLocalHeap string = "null"
	this.EhcacheMaxBytesLocalHeap = &ehcacheMaxBytesLocalHeap
	this.CacheUniqueId = cacheUniqueId
	var elasticache bool = false
	this.Elasticache = &elasticache
	this.MemcachedEndpoints = memcachedEndpoints
	return &this
}

// NewCacheSettingsWithDefaults instantiates a new CacheSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCacheSettingsWithDefaults() *CacheSettings {
	this := CacheSettings{}
	var name string = "cache configuration"
	this.Name = &name
	var ehcacheMaxBytesLocalHeap string = "null"
	this.EhcacheMaxBytesLocalHeap = &ehcacheMaxBytesLocalHeap
	var elasticache bool = false
	this.Elasticache = &elasticache
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CacheSettings) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettings) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CacheSettings) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CacheSettings) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CacheSettings) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettings) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CacheSettings) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CacheSettings) SetName(v string) {
	o.Name = &v
}

// GetCacheType returns the CacheType field value
func (o *CacheSettings) GetCacheType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CacheType
}

// GetCacheTypeOk returns a tuple with the CacheType field value
// and a boolean to check if the value has been set.
func (o *CacheSettings) GetCacheTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CacheType, true
}

// SetCacheType sets field value
func (o *CacheSettings) SetCacheType(v string) {
	o.CacheType = v
}

// GetTimeToLiveSeconds returns the TimeToLiveSeconds field value
func (o *CacheSettings) GetTimeToLiveSeconds() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TimeToLiveSeconds
}

// GetTimeToLiveSecondsOk returns a tuple with the TimeToLiveSeconds field value
// and a boolean to check if the value has been set.
func (o *CacheSettings) GetTimeToLiveSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeToLiveSeconds, true
}

// SetTimeToLiveSeconds sets field value
func (o *CacheSettings) SetTimeToLiveSeconds(v int32) {
	o.TimeToLiveSeconds = v
}

// GetTimeToIdleSeconds returns the TimeToIdleSeconds field value if set, zero value otherwise.
func (o *CacheSettings) GetTimeToIdleSeconds() int32 {
	if o == nil || o.TimeToIdleSeconds == nil {
		var ret int32
		return ret
	}
	return *o.TimeToIdleSeconds
}

// GetTimeToIdleSecondsOk returns a tuple with the TimeToIdleSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettings) GetTimeToIdleSecondsOk() (*int32, bool) {
	if o == nil || o.TimeToIdleSeconds == nil {
		return nil, false
	}
	return o.TimeToIdleSeconds, true
}

// HasTimeToIdleSeconds returns a boolean if a field has been set.
func (o *CacheSettings) HasTimeToIdleSeconds() bool {
	if o != nil && o.TimeToIdleSeconds != nil {
		return true
	}

	return false
}

// SetTimeToIdleSeconds gets a reference to the given int32 and assigns it to the TimeToIdleSeconds field.
func (o *CacheSettings) SetTimeToIdleSeconds(v int32) {
	o.TimeToIdleSeconds = &v
}

// GetDirectoryTimeToLiveSeconds returns the DirectoryTimeToLiveSeconds field value if set, zero value otherwise.
func (o *CacheSettings) GetDirectoryTimeToLiveSeconds() int32 {
	if o == nil || o.DirectoryTimeToLiveSeconds == nil {
		var ret int32
		return ret
	}
	return *o.DirectoryTimeToLiveSeconds
}

// GetDirectoryTimeToLiveSecondsOk returns a tuple with the DirectoryTimeToLiveSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettings) GetDirectoryTimeToLiveSecondsOk() (*int32, bool) {
	if o == nil || o.DirectoryTimeToLiveSeconds == nil {
		return nil, false
	}
	return o.DirectoryTimeToLiveSeconds, true
}

// HasDirectoryTimeToLiveSeconds returns a boolean if a field has been set.
func (o *CacheSettings) HasDirectoryTimeToLiveSeconds() bool {
	if o != nil && o.DirectoryTimeToLiveSeconds != nil {
		return true
	}

	return false
}

// SetDirectoryTimeToLiveSeconds gets a reference to the given int32 and assigns it to the DirectoryTimeToLiveSeconds field.
func (o *CacheSettings) SetDirectoryTimeToLiveSeconds(v int32) {
	o.DirectoryTimeToLiveSeconds = &v
}

// GetEhcacheMaxBytesLocalHeap returns the EhcacheMaxBytesLocalHeap field value if set, zero value otherwise.
func (o *CacheSettings) GetEhcacheMaxBytesLocalHeap() string {
	if o == nil || o.EhcacheMaxBytesLocalHeap == nil {
		var ret string
		return ret
	}
	return *o.EhcacheMaxBytesLocalHeap
}

// GetEhcacheMaxBytesLocalHeapOk returns a tuple with the EhcacheMaxBytesLocalHeap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettings) GetEhcacheMaxBytesLocalHeapOk() (*string, bool) {
	if o == nil || o.EhcacheMaxBytesLocalHeap == nil {
		return nil, false
	}
	return o.EhcacheMaxBytesLocalHeap, true
}

// HasEhcacheMaxBytesLocalHeap returns a boolean if a field has been set.
func (o *CacheSettings) HasEhcacheMaxBytesLocalHeap() bool {
	if o != nil && o.EhcacheMaxBytesLocalHeap != nil {
		return true
	}

	return false
}

// SetEhcacheMaxBytesLocalHeap gets a reference to the given string and assigns it to the EhcacheMaxBytesLocalHeap field.
func (o *CacheSettings) SetEhcacheMaxBytesLocalHeap(v string) {
	o.EhcacheMaxBytesLocalHeap = &v
}

// GetCacheUniqueId returns the CacheUniqueId field value
func (o *CacheSettings) GetCacheUniqueId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CacheUniqueId
}

// GetCacheUniqueIdOk returns a tuple with the CacheUniqueId field value
// and a boolean to check if the value has been set.
func (o *CacheSettings) GetCacheUniqueIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CacheUniqueId, true
}

// SetCacheUniqueId sets field value
func (o *CacheSettings) SetCacheUniqueId(v string) {
	o.CacheUniqueId = v
}

// GetElasticache returns the Elasticache field value if set, zero value otherwise.
func (o *CacheSettings) GetElasticache() bool {
	if o == nil || o.Elasticache == nil {
		var ret bool
		return ret
	}
	return *o.Elasticache
}

// GetElasticacheOk returns a tuple with the Elasticache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettings) GetElasticacheOk() (*bool, bool) {
	if o == nil || o.Elasticache == nil {
		return nil, false
	}
	return o.Elasticache, true
}

// HasElasticache returns a boolean if a field has been set.
func (o *CacheSettings) HasElasticache() bool {
	if o != nil && o.Elasticache != nil {
		return true
	}

	return false
}

// SetElasticache gets a reference to the given bool and assigns it to the Elasticache field.
func (o *CacheSettings) SetElasticache(v bool) {
	o.Elasticache = &v
}

// GetMemcachedEndpoints returns the MemcachedEndpoints field value
func (o *CacheSettings) GetMemcachedEndpoints() []MemcachedEndpoints {
	if o == nil {
		var ret []MemcachedEndpoints
		return ret
	}

	return o.MemcachedEndpoints
}

// GetMemcachedEndpointsOk returns a tuple with the MemcachedEndpoints field value
// and a boolean to check if the value has been set.
func (o *CacheSettings) GetMemcachedEndpointsOk() ([]MemcachedEndpoints, bool) {
	if o == nil {
		return nil, false
	}
	return o.MemcachedEndpoints, true
}

// SetMemcachedEndpoints sets field value
func (o *CacheSettings) SetMemcachedEndpoints(v []MemcachedEndpoints) {
	o.MemcachedEndpoints = v
}

func (o CacheSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["cacheType"] = o.CacheType
	}
	if true {
		toSerialize["timeToLiveSeconds"] = o.TimeToLiveSeconds
	}
	if o.TimeToIdleSeconds != nil {
		toSerialize["timeToIdleSeconds"] = o.TimeToIdleSeconds
	}
	if o.DirectoryTimeToLiveSeconds != nil {
		toSerialize["directoryTimeToLiveSeconds"] = o.DirectoryTimeToLiveSeconds
	}
	if o.EhcacheMaxBytesLocalHeap != nil {
		toSerialize["ehcacheMaxBytesLocalHeap"] = o.EhcacheMaxBytesLocalHeap
	}
	if true {
		toSerialize["cacheUniqueId"] = o.CacheUniqueId
	}
	if o.Elasticache != nil {
		toSerialize["elasticache"] = o.Elasticache
	}
	if true {
		toSerialize["memcachedEndpoints"] = o.MemcachedEndpoints
	}
	return json.Marshal(toSerialize)
}

type NullableCacheSettings struct {
	value *CacheSettings
	isSet bool
}

func (v NullableCacheSettings) Get() *CacheSettings {
	return v.value
}

func (v *NullableCacheSettings) Set(val *CacheSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableCacheSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableCacheSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCacheSettings(val *CacheSettings) *NullableCacheSettings {
	return &NullableCacheSettings{value: val, isSet: true}
}

func (v NullableCacheSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCacheSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


