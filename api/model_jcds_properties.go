/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the JcdsProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JcdsProperties{}

// JcdsProperties struct for JcdsProperties
type JcdsProperties struct {
	Jcds2Enabled *bool `json:"jcds2Enabled,omitempty"`
	FileStreamEndpointEnabled *bool `json:"fileStreamEndpointEnabled,omitempty"`
	MaxChunkSize *int64 `json:"maxChunkSize,omitempty"`
}

// NewJcdsProperties instantiates a new JcdsProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJcdsProperties() *JcdsProperties {
	this := JcdsProperties{}
	return &this
}

// NewJcdsPropertiesWithDefaults instantiates a new JcdsProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJcdsPropertiesWithDefaults() *JcdsProperties {
	this := JcdsProperties{}
	return &this
}

// GetJcds2Enabled returns the Jcds2Enabled field value if set, zero value otherwise.
func (o *JcdsProperties) GetJcds2Enabled() bool {
	if o == nil || IsNil(o.Jcds2Enabled) {
		var ret bool
		return ret
	}
	return *o.Jcds2Enabled
}

// GetJcds2EnabledOk returns a tuple with the Jcds2Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JcdsProperties) GetJcds2EnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Jcds2Enabled) {
		return nil, false
	}
	return o.Jcds2Enabled, true
}

// HasJcds2Enabled returns a boolean if a field has been set.
func (o *JcdsProperties) HasJcds2Enabled() bool {
	if o != nil && !IsNil(o.Jcds2Enabled) {
		return true
	}

	return false
}

// SetJcds2Enabled gets a reference to the given bool and assigns it to the Jcds2Enabled field.
func (o *JcdsProperties) SetJcds2Enabled(v bool) {
	o.Jcds2Enabled = &v
}

// GetFileStreamEndpointEnabled returns the FileStreamEndpointEnabled field value if set, zero value otherwise.
func (o *JcdsProperties) GetFileStreamEndpointEnabled() bool {
	if o == nil || IsNil(o.FileStreamEndpointEnabled) {
		var ret bool
		return ret
	}
	return *o.FileStreamEndpointEnabled
}

// GetFileStreamEndpointEnabledOk returns a tuple with the FileStreamEndpointEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JcdsProperties) GetFileStreamEndpointEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.FileStreamEndpointEnabled) {
		return nil, false
	}
	return o.FileStreamEndpointEnabled, true
}

// HasFileStreamEndpointEnabled returns a boolean if a field has been set.
func (o *JcdsProperties) HasFileStreamEndpointEnabled() bool {
	if o != nil && !IsNil(o.FileStreamEndpointEnabled) {
		return true
	}

	return false
}

// SetFileStreamEndpointEnabled gets a reference to the given bool and assigns it to the FileStreamEndpointEnabled field.
func (o *JcdsProperties) SetFileStreamEndpointEnabled(v bool) {
	o.FileStreamEndpointEnabled = &v
}

// GetMaxChunkSize returns the MaxChunkSize field value if set, zero value otherwise.
func (o *JcdsProperties) GetMaxChunkSize() int64 {
	if o == nil || IsNil(o.MaxChunkSize) {
		var ret int64
		return ret
	}
	return *o.MaxChunkSize
}

// GetMaxChunkSizeOk returns a tuple with the MaxChunkSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JcdsProperties) GetMaxChunkSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxChunkSize) {
		return nil, false
	}
	return o.MaxChunkSize, true
}

// HasMaxChunkSize returns a boolean if a field has been set.
func (o *JcdsProperties) HasMaxChunkSize() bool {
	if o != nil && !IsNil(o.MaxChunkSize) {
		return true
	}

	return false
}

// SetMaxChunkSize gets a reference to the given int64 and assigns it to the MaxChunkSize field.
func (o *JcdsProperties) SetMaxChunkSize(v int64) {
	o.MaxChunkSize = &v
}

func (o JcdsProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JcdsProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Jcds2Enabled) {
		toSerialize["jcds2Enabled"] = o.Jcds2Enabled
	}
	if !IsNil(o.FileStreamEndpointEnabled) {
		toSerialize["fileStreamEndpointEnabled"] = o.FileStreamEndpointEnabled
	}
	if !IsNil(o.MaxChunkSize) {
		toSerialize["maxChunkSize"] = o.MaxChunkSize
	}
	return toSerialize, nil
}

type NullableJcdsProperties struct {
	value *JcdsProperties
	isSet bool
}

func (v NullableJcdsProperties) Get() *JcdsProperties {
	return v.value
}

func (v *NullableJcdsProperties) Set(val *JcdsProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableJcdsProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableJcdsProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJcdsProperties(val *JcdsProperties) *NullableJcdsProperties {
	return &NullableJcdsProperties{value: val, isSet: true}
}

func (v NullableJcdsProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJcdsProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


