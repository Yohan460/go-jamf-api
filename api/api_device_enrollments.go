/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
	"os"
)


type DeviceEnrollmentsAPI interface {

	/*
	V1DeviceEnrollmentsGet Read all sorted and paged Device Enrollment instances 

	Search for sorted and paged device enrollment instances

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DeviceEnrollmentsAPIV1DeviceEnrollmentsGetRequest
	*/
	V1DeviceEnrollmentsGet(ctx context.Context) DeviceEnrollmentsAPIV1DeviceEnrollmentsGetRequest

	// V1DeviceEnrollmentsGetExecute executes the request
	//  @return DeviceEnrollmentInstanceSearchResults
	V1DeviceEnrollmentsGetExecute(r DeviceEnrollmentsAPIV1DeviceEnrollmentsGetRequest) (*DeviceEnrollmentInstanceSearchResults, *http.Response, error)

	/*
	V1DeviceEnrollmentsIdDelete Delete a Device Enrollment Instance with the supplied id 

	Deletes a Device Enrollment Instance with the supplied id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Device Enrollment Instance identifier
	@return DeviceEnrollmentsAPIV1DeviceEnrollmentsIdDeleteRequest
	*/
	V1DeviceEnrollmentsIdDelete(ctx context.Context, id string) DeviceEnrollmentsAPIV1DeviceEnrollmentsIdDeleteRequest

	// V1DeviceEnrollmentsIdDeleteExecute executes the request
	V1DeviceEnrollmentsIdDeleteExecute(r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdDeleteRequest) (*http.Response, error)

	/*
	V1DeviceEnrollmentsIdDisownPost Disown devices from the given Device Enrollment Instance 

	Disowns devices from the given device enrollment instance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Device Enrollment Instance identifier
	@return DeviceEnrollmentsAPIV1DeviceEnrollmentsIdDisownPostRequest
	*/
	V1DeviceEnrollmentsIdDisownPost(ctx context.Context, id string) DeviceEnrollmentsAPIV1DeviceEnrollmentsIdDisownPostRequest

	// V1DeviceEnrollmentsIdDisownPostExecute executes the request
	//  @return DeviceEnrollmentDisownResponse
	V1DeviceEnrollmentsIdDisownPostExecute(r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdDisownPostRequest) (*DeviceEnrollmentDisownResponse, *http.Response, error)

	/*
	V1DeviceEnrollmentsIdGet Retrieve a Device Enrollment Instance with the supplied id 

	Retrieves a Device Enrollment Instance with the supplied id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Device Enrollment Instance identifier
	@return DeviceEnrollmentsAPIV1DeviceEnrollmentsIdGetRequest
	*/
	V1DeviceEnrollmentsIdGet(ctx context.Context, id string) DeviceEnrollmentsAPIV1DeviceEnrollmentsIdGetRequest

	// V1DeviceEnrollmentsIdGetExecute executes the request
	//  @return DeviceEnrollmentInstance
	V1DeviceEnrollmentsIdGetExecute(r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdGetRequest) (*DeviceEnrollmentInstance, *http.Response, error)

	/*
	V1DeviceEnrollmentsIdHistoryGet Get sorted and paged Device Enrollment history objects 

	Gets sorted and paged device enrollment history objects

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Device Enrollment Instance identifier
	@return DeviceEnrollmentsAPIV1DeviceEnrollmentsIdHistoryGetRequest
	*/
	V1DeviceEnrollmentsIdHistoryGet(ctx context.Context, id string) DeviceEnrollmentsAPIV1DeviceEnrollmentsIdHistoryGetRequest

	// V1DeviceEnrollmentsIdHistoryGetExecute executes the request
	//  @return HistorySearchResults
	V1DeviceEnrollmentsIdHistoryGetExecute(r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdHistoryGetRequest) (*HistorySearchResults, *http.Response, error)

	/*
	V1DeviceEnrollmentsIdHistoryPost Add Device Enrollment history object notes 

	Adds device enrollment history object notes

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Device Enrollment Instance identifier
	@return DeviceEnrollmentsAPIV1DeviceEnrollmentsIdHistoryPostRequest
	*/
	V1DeviceEnrollmentsIdHistoryPost(ctx context.Context, id string) DeviceEnrollmentsAPIV1DeviceEnrollmentsIdHistoryPostRequest

	// V1DeviceEnrollmentsIdHistoryPostExecute executes the request
	//  @return HrefResponse
	V1DeviceEnrollmentsIdHistoryPostExecute(r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdHistoryPostRequest) (*HrefResponse, *http.Response, error)

	/*
	V1DeviceEnrollmentsIdPut Update a Device Enrollment Instance with the supplied id 

	Updates a Device Enrollment Instance with the supplied id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Device Enrollment Instance identifier
	@return DeviceEnrollmentsAPIV1DeviceEnrollmentsIdPutRequest
	*/
	V1DeviceEnrollmentsIdPut(ctx context.Context, id string) DeviceEnrollmentsAPIV1DeviceEnrollmentsIdPutRequest

	// V1DeviceEnrollmentsIdPutExecute executes the request
	//  @return DeviceEnrollmentInstance
	V1DeviceEnrollmentsIdPutExecute(r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdPutRequest) (*DeviceEnrollmentInstance, *http.Response, error)

	/*
	V1DeviceEnrollmentsIdSyncsGet Get all instance sync states for a single Device Enrollment Instance 

	Get all instance sync states for a single instance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Device Enrollment Instance identifier
	@return DeviceEnrollmentsAPIV1DeviceEnrollmentsIdSyncsGetRequest
	*/
	V1DeviceEnrollmentsIdSyncsGet(ctx context.Context, id string) DeviceEnrollmentsAPIV1DeviceEnrollmentsIdSyncsGetRequest

	// V1DeviceEnrollmentsIdSyncsGetExecute executes the request
	//  @return []DeviceEnrollmentInstanceSyncStatus
	V1DeviceEnrollmentsIdSyncsGetExecute(r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdSyncsGetRequest) ([]DeviceEnrollmentInstanceSyncStatus, *http.Response, error)

	/*
	V1DeviceEnrollmentsIdSyncsLatestGet Get the latest sync state for a single Device Enrollment Instance 

	Get the latest sync state for a single instance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Device Enrollment Instance identifier
	@return DeviceEnrollmentsAPIV1DeviceEnrollmentsIdSyncsLatestGetRequest
	*/
	V1DeviceEnrollmentsIdSyncsLatestGet(ctx context.Context, id string) DeviceEnrollmentsAPIV1DeviceEnrollmentsIdSyncsLatestGetRequest

	// V1DeviceEnrollmentsIdSyncsLatestGetExecute executes the request
	//  @return DeviceEnrollmentInstanceSyncStatus
	V1DeviceEnrollmentsIdSyncsLatestGetExecute(r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdSyncsLatestGetRequest) (*DeviceEnrollmentInstanceSyncStatus, *http.Response, error)

	/*
	V1DeviceEnrollmentsIdUploadTokenPut Update a Device Enrollment Instance with the supplied Token 

	Updates a device enrollment instance with the supplied token.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Device Enrollment Instance identifier
	@return DeviceEnrollmentsAPIV1DeviceEnrollmentsIdUploadTokenPutRequest
	*/
	V1DeviceEnrollmentsIdUploadTokenPut(ctx context.Context, id string) DeviceEnrollmentsAPIV1DeviceEnrollmentsIdUploadTokenPutRequest

	// V1DeviceEnrollmentsIdUploadTokenPutExecute executes the request
	//  @return DeviceEnrollmentInstance
	V1DeviceEnrollmentsIdUploadTokenPutExecute(r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdUploadTokenPutRequest) (*DeviceEnrollmentInstance, *http.Response, error)

	/*
	V1DeviceEnrollmentsPublicKeyGet Retrieve the Jamf Pro Device Enrollment public key 

	Retrieve the Jamf Pro device enrollment public key

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DeviceEnrollmentsAPIV1DeviceEnrollmentsPublicKeyGetRequest
	*/
	V1DeviceEnrollmentsPublicKeyGet(ctx context.Context) DeviceEnrollmentsAPIV1DeviceEnrollmentsPublicKeyGetRequest

	// V1DeviceEnrollmentsPublicKeyGetExecute executes the request
	//  @return *os.File
	V1DeviceEnrollmentsPublicKeyGetExecute(r DeviceEnrollmentsAPIV1DeviceEnrollmentsPublicKeyGetRequest) (*os.File, *http.Response, error)

	/*
	V1DeviceEnrollmentsSyncsGet Get all instance sync states for all Device Enrollment Instances 

	Get all instance sync states for all instances

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DeviceEnrollmentsAPIV1DeviceEnrollmentsSyncsGetRequest
	*/
	V1DeviceEnrollmentsSyncsGet(ctx context.Context) DeviceEnrollmentsAPIV1DeviceEnrollmentsSyncsGetRequest

	// V1DeviceEnrollmentsSyncsGetExecute executes the request
	//  @return []DeviceEnrollmentInstanceSyncStatus
	V1DeviceEnrollmentsSyncsGetExecute(r DeviceEnrollmentsAPIV1DeviceEnrollmentsSyncsGetRequest) ([]DeviceEnrollmentInstanceSyncStatus, *http.Response, error)

	/*
	V1DeviceEnrollmentsUploadTokenPost Create a Device Enrollment Instance with the supplied Token 

	Creates a device enrollment instance with the supplied token.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DeviceEnrollmentsAPIV1DeviceEnrollmentsUploadTokenPostRequest
	*/
	V1DeviceEnrollmentsUploadTokenPost(ctx context.Context) DeviceEnrollmentsAPIV1DeviceEnrollmentsUploadTokenPostRequest

	// V1DeviceEnrollmentsUploadTokenPostExecute executes the request
	//  @return HrefResponse
	V1DeviceEnrollmentsUploadTokenPostExecute(r DeviceEnrollmentsAPIV1DeviceEnrollmentsUploadTokenPostRequest) (*HrefResponse, *http.Response, error)
}

// DeviceEnrollmentsAPIService DeviceEnrollmentsAPI service
type DeviceEnrollmentsAPIService service

type DeviceEnrollmentsAPIV1DeviceEnrollmentsGetRequest struct {
	ctx context.Context
	ApiService DeviceEnrollmentsAPI
	page *int32
	pageSize *int32
	sort *[]string
}

func (r DeviceEnrollmentsAPIV1DeviceEnrollmentsGetRequest) Page(page int32) DeviceEnrollmentsAPIV1DeviceEnrollmentsGetRequest {
	r.page = &page
	return r
}

func (r DeviceEnrollmentsAPIV1DeviceEnrollmentsGetRequest) PageSize(pageSize int32) DeviceEnrollmentsAPIV1DeviceEnrollmentsGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc 
func (r DeviceEnrollmentsAPIV1DeviceEnrollmentsGetRequest) Sort(sort []string) DeviceEnrollmentsAPIV1DeviceEnrollmentsGetRequest {
	r.sort = &sort
	return r
}

func (r DeviceEnrollmentsAPIV1DeviceEnrollmentsGetRequest) Execute() (*DeviceEnrollmentInstanceSearchResults, *http.Response, error) {
	return r.ApiService.V1DeviceEnrollmentsGetExecute(r)
}

/*
V1DeviceEnrollmentsGet Read all sorted and paged Device Enrollment instances 

Search for sorted and paged device enrollment instances

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DeviceEnrollmentsAPIV1DeviceEnrollmentsGetRequest
*/
func (a *DeviceEnrollmentsAPIService) V1DeviceEnrollmentsGet(ctx context.Context) DeviceEnrollmentsAPIV1DeviceEnrollmentsGetRequest {
	return DeviceEnrollmentsAPIV1DeviceEnrollmentsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DeviceEnrollmentInstanceSearchResults
func (a *DeviceEnrollmentsAPIService) V1DeviceEnrollmentsGetExecute(r DeviceEnrollmentsAPIV1DeviceEnrollmentsGetRequest) (*DeviceEnrollmentInstanceSearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceEnrollmentInstanceSearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceEnrollmentsAPIService.V1DeviceEnrollmentsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/device-enrollments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		defaultValue := []string{"id:asc"}
		r.sort = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DeviceEnrollmentsAPIV1DeviceEnrollmentsIdDeleteRequest struct {
	ctx context.Context
	ApiService DeviceEnrollmentsAPI
	id string
}

func (r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1DeviceEnrollmentsIdDeleteExecute(r)
}

/*
V1DeviceEnrollmentsIdDelete Delete a Device Enrollment Instance with the supplied id 

Deletes a Device Enrollment Instance with the supplied id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Device Enrollment Instance identifier
 @return DeviceEnrollmentsAPIV1DeviceEnrollmentsIdDeleteRequest
*/
func (a *DeviceEnrollmentsAPIService) V1DeviceEnrollmentsIdDelete(ctx context.Context, id string) DeviceEnrollmentsAPIV1DeviceEnrollmentsIdDeleteRequest {
	return DeviceEnrollmentsAPIV1DeviceEnrollmentsIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DeviceEnrollmentsAPIService) V1DeviceEnrollmentsIdDeleteExecute(r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceEnrollmentsAPIService.V1DeviceEnrollmentsIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/device-enrollments/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DeviceEnrollmentsAPIV1DeviceEnrollmentsIdDisownPostRequest struct {
	ctx context.Context
	ApiService DeviceEnrollmentsAPI
	id string
	deviceEnrollmentDisownBody *DeviceEnrollmentDisownBody
}

// List of device serial numbers to disown
func (r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdDisownPostRequest) DeviceEnrollmentDisownBody(deviceEnrollmentDisownBody DeviceEnrollmentDisownBody) DeviceEnrollmentsAPIV1DeviceEnrollmentsIdDisownPostRequest {
	r.deviceEnrollmentDisownBody = &deviceEnrollmentDisownBody
	return r
}

func (r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdDisownPostRequest) Execute() (*DeviceEnrollmentDisownResponse, *http.Response, error) {
	return r.ApiService.V1DeviceEnrollmentsIdDisownPostExecute(r)
}

/*
V1DeviceEnrollmentsIdDisownPost Disown devices from the given Device Enrollment Instance 

Disowns devices from the given device enrollment instance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Device Enrollment Instance identifier
 @return DeviceEnrollmentsAPIV1DeviceEnrollmentsIdDisownPostRequest
*/
func (a *DeviceEnrollmentsAPIService) V1DeviceEnrollmentsIdDisownPost(ctx context.Context, id string) DeviceEnrollmentsAPIV1DeviceEnrollmentsIdDisownPostRequest {
	return DeviceEnrollmentsAPIV1DeviceEnrollmentsIdDisownPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DeviceEnrollmentDisownResponse
func (a *DeviceEnrollmentsAPIService) V1DeviceEnrollmentsIdDisownPostExecute(r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdDisownPostRequest) (*DeviceEnrollmentDisownResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceEnrollmentDisownResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceEnrollmentsAPIService.V1DeviceEnrollmentsIdDisownPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/device-enrollments/{id}/disown"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deviceEnrollmentDisownBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DeviceEnrollmentsAPIV1DeviceEnrollmentsIdGetRequest struct {
	ctx context.Context
	ApiService DeviceEnrollmentsAPI
	id string
}

func (r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdGetRequest) Execute() (*DeviceEnrollmentInstance, *http.Response, error) {
	return r.ApiService.V1DeviceEnrollmentsIdGetExecute(r)
}

/*
V1DeviceEnrollmentsIdGet Retrieve a Device Enrollment Instance with the supplied id 

Retrieves a Device Enrollment Instance with the supplied id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Device Enrollment Instance identifier
 @return DeviceEnrollmentsAPIV1DeviceEnrollmentsIdGetRequest
*/
func (a *DeviceEnrollmentsAPIService) V1DeviceEnrollmentsIdGet(ctx context.Context, id string) DeviceEnrollmentsAPIV1DeviceEnrollmentsIdGetRequest {
	return DeviceEnrollmentsAPIV1DeviceEnrollmentsIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DeviceEnrollmentInstance
func (a *DeviceEnrollmentsAPIService) V1DeviceEnrollmentsIdGetExecute(r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdGetRequest) (*DeviceEnrollmentInstance, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceEnrollmentInstance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceEnrollmentsAPIService.V1DeviceEnrollmentsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/device-enrollments/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DeviceEnrollmentsAPIV1DeviceEnrollmentsIdHistoryGetRequest struct {
	ctx context.Context
	ApiService DeviceEnrollmentsAPI
	id string
	page *int32
	pageSize *int32
	sort *[]string
	filter *string
}

func (r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdHistoryGetRequest) Page(page int32) DeviceEnrollmentsAPIV1DeviceEnrollmentsIdHistoryGetRequest {
	r.page = &page
	return r
}

func (r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdHistoryGetRequest) PageSize(pageSize int32) DeviceEnrollmentsAPIV1DeviceEnrollmentsIdHistoryGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property,asc/desc. Default sort order is descending. Multiple sort criteria are supported and must be entered on separate lines in Swagger UI. In the URI the &#39;sort&#39; query param is duplicated for each sort criterion, e.g., ...&amp;sort&#x3D;name%2Casc&amp;sort&#x3D;date%2Cdesc
func (r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdHistoryGetRequest) Sort(sort []string) DeviceEnrollmentsAPIV1DeviceEnrollmentsIdHistoryGetRequest {
	r.sort = &sort
	return r
}

// Query in the RSQL format, allowing to filter history notes collection. Default search is empty query - returning all results for the requested page. Fields allowed in the query: username, date, note, details. This param can be combined with paging and sorting. Example: search&#x3D;username!&#x3D;admin and details&#x3D;&#x3D;*disabled* and date&lt;2019-12-15
func (r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdHistoryGetRequest) Filter(filter string) DeviceEnrollmentsAPIV1DeviceEnrollmentsIdHistoryGetRequest {
	r.filter = &filter
	return r
}

func (r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdHistoryGetRequest) Execute() (*HistorySearchResults, *http.Response, error) {
	return r.ApiService.V1DeviceEnrollmentsIdHistoryGetExecute(r)
}

/*
V1DeviceEnrollmentsIdHistoryGet Get sorted and paged Device Enrollment history objects 

Gets sorted and paged device enrollment history objects

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Device Enrollment Instance identifier
 @return DeviceEnrollmentsAPIV1DeviceEnrollmentsIdHistoryGetRequest
*/
func (a *DeviceEnrollmentsAPIService) V1DeviceEnrollmentsIdHistoryGet(ctx context.Context, id string) DeviceEnrollmentsAPIV1DeviceEnrollmentsIdHistoryGetRequest {
	return DeviceEnrollmentsAPIV1DeviceEnrollmentsIdHistoryGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return HistorySearchResults
func (a *DeviceEnrollmentsAPIService) V1DeviceEnrollmentsIdHistoryGetExecute(r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdHistoryGetRequest) (*HistorySearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HistorySearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceEnrollmentsAPIService.V1DeviceEnrollmentsIdHistoryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/device-enrollments/{id}/history"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		defaultValue := []string{"date:desc"}
		r.sort = &defaultValue
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	} else {
		var defaultValue string = ""
		r.filter = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DeviceEnrollmentsAPIV1DeviceEnrollmentsIdHistoryPostRequest struct {
	ctx context.Context
	ApiService DeviceEnrollmentsAPI
	id string
	objectHistoryNote *ObjectHistoryNote
}

// History notes to create
func (r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdHistoryPostRequest) ObjectHistoryNote(objectHistoryNote ObjectHistoryNote) DeviceEnrollmentsAPIV1DeviceEnrollmentsIdHistoryPostRequest {
	r.objectHistoryNote = &objectHistoryNote
	return r
}

func (r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdHistoryPostRequest) Execute() (*HrefResponse, *http.Response, error) {
	return r.ApiService.V1DeviceEnrollmentsIdHistoryPostExecute(r)
}

/*
V1DeviceEnrollmentsIdHistoryPost Add Device Enrollment history object notes 

Adds device enrollment history object notes

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Device Enrollment Instance identifier
 @return DeviceEnrollmentsAPIV1DeviceEnrollmentsIdHistoryPostRequest
*/
func (a *DeviceEnrollmentsAPIService) V1DeviceEnrollmentsIdHistoryPost(ctx context.Context, id string) DeviceEnrollmentsAPIV1DeviceEnrollmentsIdHistoryPostRequest {
	return DeviceEnrollmentsAPIV1DeviceEnrollmentsIdHistoryPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return HrefResponse
func (a *DeviceEnrollmentsAPIService) V1DeviceEnrollmentsIdHistoryPostExecute(r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdHistoryPostRequest) (*HrefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HrefResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceEnrollmentsAPIService.V1DeviceEnrollmentsIdHistoryPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/device-enrollments/{id}/history"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.objectHistoryNote == nil {
		return localVarReturnValue, nil, reportError("objectHistoryNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.objectHistoryNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DeviceEnrollmentsAPIV1DeviceEnrollmentsIdPutRequest struct {
	ctx context.Context
	ApiService DeviceEnrollmentsAPI
	id string
	deviceEnrollmentInstance *DeviceEnrollmentInstance
}

func (r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdPutRequest) DeviceEnrollmentInstance(deviceEnrollmentInstance DeviceEnrollmentInstance) DeviceEnrollmentsAPIV1DeviceEnrollmentsIdPutRequest {
	r.deviceEnrollmentInstance = &deviceEnrollmentInstance
	return r
}

func (r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdPutRequest) Execute() (*DeviceEnrollmentInstance, *http.Response, error) {
	return r.ApiService.V1DeviceEnrollmentsIdPutExecute(r)
}

/*
V1DeviceEnrollmentsIdPut Update a Device Enrollment Instance with the supplied id 

Updates a Device Enrollment Instance with the supplied id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Device Enrollment Instance identifier
 @return DeviceEnrollmentsAPIV1DeviceEnrollmentsIdPutRequest
*/
func (a *DeviceEnrollmentsAPIService) V1DeviceEnrollmentsIdPut(ctx context.Context, id string) DeviceEnrollmentsAPIV1DeviceEnrollmentsIdPutRequest {
	return DeviceEnrollmentsAPIV1DeviceEnrollmentsIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DeviceEnrollmentInstance
func (a *DeviceEnrollmentsAPIService) V1DeviceEnrollmentsIdPutExecute(r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdPutRequest) (*DeviceEnrollmentInstance, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceEnrollmentInstance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceEnrollmentsAPIService.V1DeviceEnrollmentsIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/device-enrollments/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceEnrollmentInstance == nil {
		return localVarReturnValue, nil, reportError("deviceEnrollmentInstance is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deviceEnrollmentInstance
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DeviceEnrollmentsAPIV1DeviceEnrollmentsIdSyncsGetRequest struct {
	ctx context.Context
	ApiService DeviceEnrollmentsAPI
	id string
}

func (r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdSyncsGetRequest) Execute() ([]DeviceEnrollmentInstanceSyncStatus, *http.Response, error) {
	return r.ApiService.V1DeviceEnrollmentsIdSyncsGetExecute(r)
}

/*
V1DeviceEnrollmentsIdSyncsGet Get all instance sync states for a single Device Enrollment Instance 

Get all instance sync states for a single instance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Device Enrollment Instance identifier
 @return DeviceEnrollmentsAPIV1DeviceEnrollmentsIdSyncsGetRequest
*/
func (a *DeviceEnrollmentsAPIService) V1DeviceEnrollmentsIdSyncsGet(ctx context.Context, id string) DeviceEnrollmentsAPIV1DeviceEnrollmentsIdSyncsGetRequest {
	return DeviceEnrollmentsAPIV1DeviceEnrollmentsIdSyncsGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []DeviceEnrollmentInstanceSyncStatus
func (a *DeviceEnrollmentsAPIService) V1DeviceEnrollmentsIdSyncsGetExecute(r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdSyncsGetRequest) ([]DeviceEnrollmentInstanceSyncStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []DeviceEnrollmentInstanceSyncStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceEnrollmentsAPIService.V1DeviceEnrollmentsIdSyncsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/device-enrollments/{id}/syncs"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DeviceEnrollmentsAPIV1DeviceEnrollmentsIdSyncsLatestGetRequest struct {
	ctx context.Context
	ApiService DeviceEnrollmentsAPI
	id string
}

func (r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdSyncsLatestGetRequest) Execute() (*DeviceEnrollmentInstanceSyncStatus, *http.Response, error) {
	return r.ApiService.V1DeviceEnrollmentsIdSyncsLatestGetExecute(r)
}

/*
V1DeviceEnrollmentsIdSyncsLatestGet Get the latest sync state for a single Device Enrollment Instance 

Get the latest sync state for a single instance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Device Enrollment Instance identifier
 @return DeviceEnrollmentsAPIV1DeviceEnrollmentsIdSyncsLatestGetRequest
*/
func (a *DeviceEnrollmentsAPIService) V1DeviceEnrollmentsIdSyncsLatestGet(ctx context.Context, id string) DeviceEnrollmentsAPIV1DeviceEnrollmentsIdSyncsLatestGetRequest {
	return DeviceEnrollmentsAPIV1DeviceEnrollmentsIdSyncsLatestGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DeviceEnrollmentInstanceSyncStatus
func (a *DeviceEnrollmentsAPIService) V1DeviceEnrollmentsIdSyncsLatestGetExecute(r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdSyncsLatestGetRequest) (*DeviceEnrollmentInstanceSyncStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceEnrollmentInstanceSyncStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceEnrollmentsAPIService.V1DeviceEnrollmentsIdSyncsLatestGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/device-enrollments/{id}/syncs/latest"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DeviceEnrollmentsAPIV1DeviceEnrollmentsIdUploadTokenPutRequest struct {
	ctx context.Context
	ApiService DeviceEnrollmentsAPI
	id string
	deviceEnrollmentToken *DeviceEnrollmentToken
}

// The downloaded token base 64 encoded from the MDM server to be used to create a new Device Enrollment Instance.
func (r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdUploadTokenPutRequest) DeviceEnrollmentToken(deviceEnrollmentToken DeviceEnrollmentToken) DeviceEnrollmentsAPIV1DeviceEnrollmentsIdUploadTokenPutRequest {
	r.deviceEnrollmentToken = &deviceEnrollmentToken
	return r
}

func (r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdUploadTokenPutRequest) Execute() (*DeviceEnrollmentInstance, *http.Response, error) {
	return r.ApiService.V1DeviceEnrollmentsIdUploadTokenPutExecute(r)
}

/*
V1DeviceEnrollmentsIdUploadTokenPut Update a Device Enrollment Instance with the supplied Token 

Updates a device enrollment instance with the supplied token.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Device Enrollment Instance identifier
 @return DeviceEnrollmentsAPIV1DeviceEnrollmentsIdUploadTokenPutRequest
*/
func (a *DeviceEnrollmentsAPIService) V1DeviceEnrollmentsIdUploadTokenPut(ctx context.Context, id string) DeviceEnrollmentsAPIV1DeviceEnrollmentsIdUploadTokenPutRequest {
	return DeviceEnrollmentsAPIV1DeviceEnrollmentsIdUploadTokenPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DeviceEnrollmentInstance
func (a *DeviceEnrollmentsAPIService) V1DeviceEnrollmentsIdUploadTokenPutExecute(r DeviceEnrollmentsAPIV1DeviceEnrollmentsIdUploadTokenPutRequest) (*DeviceEnrollmentInstance, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceEnrollmentInstance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceEnrollmentsAPIService.V1DeviceEnrollmentsIdUploadTokenPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/device-enrollments/{id}/upload-token"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceEnrollmentToken == nil {
		return localVarReturnValue, nil, reportError("deviceEnrollmentToken is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deviceEnrollmentToken
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DeviceEnrollmentsAPIV1DeviceEnrollmentsPublicKeyGetRequest struct {
	ctx context.Context
	ApiService DeviceEnrollmentsAPI
}

func (r DeviceEnrollmentsAPIV1DeviceEnrollmentsPublicKeyGetRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.V1DeviceEnrollmentsPublicKeyGetExecute(r)
}

/*
V1DeviceEnrollmentsPublicKeyGet Retrieve the Jamf Pro Device Enrollment public key 

Retrieve the Jamf Pro device enrollment public key

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DeviceEnrollmentsAPIV1DeviceEnrollmentsPublicKeyGetRequest
*/
func (a *DeviceEnrollmentsAPIService) V1DeviceEnrollmentsPublicKeyGet(ctx context.Context) DeviceEnrollmentsAPIV1DeviceEnrollmentsPublicKeyGetRequest {
	return DeviceEnrollmentsAPIV1DeviceEnrollmentsPublicKeyGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return *os.File
func (a *DeviceEnrollmentsAPIService) V1DeviceEnrollmentsPublicKeyGetExecute(r DeviceEnrollmentsAPIV1DeviceEnrollmentsPublicKeyGetRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceEnrollmentsAPIService.V1DeviceEnrollmentsPublicKeyGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/device-enrollments/public-key"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/x-pem-file"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DeviceEnrollmentsAPIV1DeviceEnrollmentsSyncsGetRequest struct {
	ctx context.Context
	ApiService DeviceEnrollmentsAPI
}

func (r DeviceEnrollmentsAPIV1DeviceEnrollmentsSyncsGetRequest) Execute() ([]DeviceEnrollmentInstanceSyncStatus, *http.Response, error) {
	return r.ApiService.V1DeviceEnrollmentsSyncsGetExecute(r)
}

/*
V1DeviceEnrollmentsSyncsGet Get all instance sync states for all Device Enrollment Instances 

Get all instance sync states for all instances

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DeviceEnrollmentsAPIV1DeviceEnrollmentsSyncsGetRequest
*/
func (a *DeviceEnrollmentsAPIService) V1DeviceEnrollmentsSyncsGet(ctx context.Context) DeviceEnrollmentsAPIV1DeviceEnrollmentsSyncsGetRequest {
	return DeviceEnrollmentsAPIV1DeviceEnrollmentsSyncsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []DeviceEnrollmentInstanceSyncStatus
func (a *DeviceEnrollmentsAPIService) V1DeviceEnrollmentsSyncsGetExecute(r DeviceEnrollmentsAPIV1DeviceEnrollmentsSyncsGetRequest) ([]DeviceEnrollmentInstanceSyncStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []DeviceEnrollmentInstanceSyncStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceEnrollmentsAPIService.V1DeviceEnrollmentsSyncsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/device-enrollments/syncs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DeviceEnrollmentsAPIV1DeviceEnrollmentsUploadTokenPostRequest struct {
	ctx context.Context
	ApiService DeviceEnrollmentsAPI
	deviceEnrollmentToken *DeviceEnrollmentToken
}

// The downloaded token base 64 encoded from the MDM server to be used to create a new Device Enrollment Instance.
func (r DeviceEnrollmentsAPIV1DeviceEnrollmentsUploadTokenPostRequest) DeviceEnrollmentToken(deviceEnrollmentToken DeviceEnrollmentToken) DeviceEnrollmentsAPIV1DeviceEnrollmentsUploadTokenPostRequest {
	r.deviceEnrollmentToken = &deviceEnrollmentToken
	return r
}

func (r DeviceEnrollmentsAPIV1DeviceEnrollmentsUploadTokenPostRequest) Execute() (*HrefResponse, *http.Response, error) {
	return r.ApiService.V1DeviceEnrollmentsUploadTokenPostExecute(r)
}

/*
V1DeviceEnrollmentsUploadTokenPost Create a Device Enrollment Instance with the supplied Token 

Creates a device enrollment instance with the supplied token.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DeviceEnrollmentsAPIV1DeviceEnrollmentsUploadTokenPostRequest
*/
func (a *DeviceEnrollmentsAPIService) V1DeviceEnrollmentsUploadTokenPost(ctx context.Context) DeviceEnrollmentsAPIV1DeviceEnrollmentsUploadTokenPostRequest {
	return DeviceEnrollmentsAPIV1DeviceEnrollmentsUploadTokenPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HrefResponse
func (a *DeviceEnrollmentsAPIService) V1DeviceEnrollmentsUploadTokenPostExecute(r DeviceEnrollmentsAPIV1DeviceEnrollmentsUploadTokenPostRequest) (*HrefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HrefResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceEnrollmentsAPIService.V1DeviceEnrollmentsUploadTokenPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/device-enrollments/upload-token"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceEnrollmentToken == nil {
		return localVarReturnValue, nil, reportError("deviceEnrollmentToken is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deviceEnrollmentToken
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
