/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// checks if the LapsHistory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LapsHistory{}

// LapsHistory struct for LapsHistory
type LapsHistory struct {
	CreatedDate NullableTime `json:"createdDate,omitempty"`
	DateLastSeen NullableTime `json:"dateLastSeen,omitempty"`
	ExpirationTime NullableTime `json:"expirationTime,omitempty"`
	RotationStatus *string `json:"rotationStatus,omitempty"`
}

// NewLapsHistory instantiates a new LapsHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLapsHistory() *LapsHistory {
	this := LapsHistory{}
	return &this
}

// NewLapsHistoryWithDefaults instantiates a new LapsHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLapsHistoryWithDefaults() *LapsHistory {
	this := LapsHistory{}
	return &this
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LapsHistory) GetCreatedDate() time.Time {
	if o == nil || IsNil(o.CreatedDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CreatedDate.Get()
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LapsHistory) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedDate.Get(), o.CreatedDate.IsSet()
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *LapsHistory) HasCreatedDate() bool {
	if o != nil && o.CreatedDate.IsSet() {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given NullableTime and assigns it to the CreatedDate field.
func (o *LapsHistory) SetCreatedDate(v time.Time) {
	o.CreatedDate.Set(&v)
}
// SetCreatedDateNil sets the value for CreatedDate to be an explicit nil
func (o *LapsHistory) SetCreatedDateNil() {
	o.CreatedDate.Set(nil)
}

// UnsetCreatedDate ensures that no value is present for CreatedDate, not even an explicit nil
func (o *LapsHistory) UnsetCreatedDate() {
	o.CreatedDate.Unset()
}

// GetDateLastSeen returns the DateLastSeen field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LapsHistory) GetDateLastSeen() time.Time {
	if o == nil || IsNil(o.DateLastSeen.Get()) {
		var ret time.Time
		return ret
	}
	return *o.DateLastSeen.Get()
}

// GetDateLastSeenOk returns a tuple with the DateLastSeen field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LapsHistory) GetDateLastSeenOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.DateLastSeen.Get(), o.DateLastSeen.IsSet()
}

// HasDateLastSeen returns a boolean if a field has been set.
func (o *LapsHistory) HasDateLastSeen() bool {
	if o != nil && o.DateLastSeen.IsSet() {
		return true
	}

	return false
}

// SetDateLastSeen gets a reference to the given NullableTime and assigns it to the DateLastSeen field.
func (o *LapsHistory) SetDateLastSeen(v time.Time) {
	o.DateLastSeen.Set(&v)
}
// SetDateLastSeenNil sets the value for DateLastSeen to be an explicit nil
func (o *LapsHistory) SetDateLastSeenNil() {
	o.DateLastSeen.Set(nil)
}

// UnsetDateLastSeen ensures that no value is present for DateLastSeen, not even an explicit nil
func (o *LapsHistory) UnsetDateLastSeen() {
	o.DateLastSeen.Unset()
}

// GetExpirationTime returns the ExpirationTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LapsHistory) GetExpirationTime() time.Time {
	if o == nil || IsNil(o.ExpirationTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationTime.Get()
}

// GetExpirationTimeOk returns a tuple with the ExpirationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LapsHistory) GetExpirationTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpirationTime.Get(), o.ExpirationTime.IsSet()
}

// HasExpirationTime returns a boolean if a field has been set.
func (o *LapsHistory) HasExpirationTime() bool {
	if o != nil && o.ExpirationTime.IsSet() {
		return true
	}

	return false
}

// SetExpirationTime gets a reference to the given NullableTime and assigns it to the ExpirationTime field.
func (o *LapsHistory) SetExpirationTime(v time.Time) {
	o.ExpirationTime.Set(&v)
}
// SetExpirationTimeNil sets the value for ExpirationTime to be an explicit nil
func (o *LapsHistory) SetExpirationTimeNil() {
	o.ExpirationTime.Set(nil)
}

// UnsetExpirationTime ensures that no value is present for ExpirationTime, not even an explicit nil
func (o *LapsHistory) UnsetExpirationTime() {
	o.ExpirationTime.Unset()
}

// GetRotationStatus returns the RotationStatus field value if set, zero value otherwise.
func (o *LapsHistory) GetRotationStatus() string {
	if o == nil || IsNil(o.RotationStatus) {
		var ret string
		return ret
	}
	return *o.RotationStatus
}

// GetRotationStatusOk returns a tuple with the RotationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LapsHistory) GetRotationStatusOk() (*string, bool) {
	if o == nil || IsNil(o.RotationStatus) {
		return nil, false
	}
	return o.RotationStatus, true
}

// HasRotationStatus returns a boolean if a field has been set.
func (o *LapsHistory) HasRotationStatus() bool {
	if o != nil && !IsNil(o.RotationStatus) {
		return true
	}

	return false
}

// SetRotationStatus gets a reference to the given string and assigns it to the RotationStatus field.
func (o *LapsHistory) SetRotationStatus(v string) {
	o.RotationStatus = &v
}

func (o LapsHistory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LapsHistory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedDate.IsSet() {
		toSerialize["createdDate"] = o.CreatedDate.Get()
	}
	if o.DateLastSeen.IsSet() {
		toSerialize["dateLastSeen"] = o.DateLastSeen.Get()
	}
	if o.ExpirationTime.IsSet() {
		toSerialize["expirationTime"] = o.ExpirationTime.Get()
	}
	if !IsNil(o.RotationStatus) {
		toSerialize["rotationStatus"] = o.RotationStatus
	}
	return toSerialize, nil
}

type NullableLapsHistory struct {
	value *LapsHistory
	isSet bool
}

func (v NullableLapsHistory) Get() *LapsHistory {
	return v.value
}

func (v *NullableLapsHistory) Set(val *LapsHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableLapsHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableLapsHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLapsHistory(val *LapsHistory) *NullableLapsHistory {
	return &NullableLapsHistory{value: val, isSet: true}
}

func (v NullableLapsHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLapsHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


