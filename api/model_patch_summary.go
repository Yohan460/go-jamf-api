/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// checks if the PatchSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchSummary{}

// PatchSummary struct for PatchSummary
type PatchSummary struct {
	SoftwareTitleId *string `json:"softwareTitleId,omitempty"`
	Title *string `json:"title,omitempty"`
	LatestVersion *string `json:"latestVersion,omitempty"`
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	UpToDate *int32 `json:"upToDate,omitempty"`
	OutOfDate *int32 `json:"outOfDate,omitempty"`
	OnDashboard *bool `json:"onDashboard,omitempty"`
	SoftwareTitleConfigurationId *string `json:"softwareTitleConfigurationId,omitempty"`
}

// NewPatchSummary instantiates a new PatchSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchSummary() *PatchSummary {
	this := PatchSummary{}
	return &this
}

// NewPatchSummaryWithDefaults instantiates a new PatchSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchSummaryWithDefaults() *PatchSummary {
	this := PatchSummary{}
	return &this
}

// GetSoftwareTitleId returns the SoftwareTitleId field value if set, zero value otherwise.
func (o *PatchSummary) GetSoftwareTitleId() string {
	if o == nil || IsNil(o.SoftwareTitleId) {
		var ret string
		return ret
	}
	return *o.SoftwareTitleId
}

// GetSoftwareTitleIdOk returns a tuple with the SoftwareTitleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSummary) GetSoftwareTitleIdOk() (*string, bool) {
	if o == nil || IsNil(o.SoftwareTitleId) {
		return nil, false
	}
	return o.SoftwareTitleId, true
}

// HasSoftwareTitleId returns a boolean if a field has been set.
func (o *PatchSummary) HasSoftwareTitleId() bool {
	if o != nil && !IsNil(o.SoftwareTitleId) {
		return true
	}

	return false
}

// SetSoftwareTitleId gets a reference to the given string and assigns it to the SoftwareTitleId field.
func (o *PatchSummary) SetSoftwareTitleId(v string) {
	o.SoftwareTitleId = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *PatchSummary) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSummary) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *PatchSummary) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *PatchSummary) SetTitle(v string) {
	o.Title = &v
}

// GetLatestVersion returns the LatestVersion field value if set, zero value otherwise.
func (o *PatchSummary) GetLatestVersion() string {
	if o == nil || IsNil(o.LatestVersion) {
		var ret string
		return ret
	}
	return *o.LatestVersion
}

// GetLatestVersionOk returns a tuple with the LatestVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSummary) GetLatestVersionOk() (*string, bool) {
	if o == nil || IsNil(o.LatestVersion) {
		return nil, false
	}
	return o.LatestVersion, true
}

// HasLatestVersion returns a boolean if a field has been set.
func (o *PatchSummary) HasLatestVersion() bool {
	if o != nil && !IsNil(o.LatestVersion) {
		return true
	}

	return false
}

// SetLatestVersion gets a reference to the given string and assigns it to the LatestVersion field.
func (o *PatchSummary) SetLatestVersion(v string) {
	o.LatestVersion = &v
}

// GetReleaseDate returns the ReleaseDate field value if set, zero value otherwise.
func (o *PatchSummary) GetReleaseDate() time.Time {
	if o == nil || IsNil(o.ReleaseDate) {
		var ret time.Time
		return ret
	}
	return *o.ReleaseDate
}

// GetReleaseDateOk returns a tuple with the ReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSummary) GetReleaseDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ReleaseDate) {
		return nil, false
	}
	return o.ReleaseDate, true
}

// HasReleaseDate returns a boolean if a field has been set.
func (o *PatchSummary) HasReleaseDate() bool {
	if o != nil && !IsNil(o.ReleaseDate) {
		return true
	}

	return false
}

// SetReleaseDate gets a reference to the given time.Time and assigns it to the ReleaseDate field.
func (o *PatchSummary) SetReleaseDate(v time.Time) {
	o.ReleaseDate = &v
}

// GetUpToDate returns the UpToDate field value if set, zero value otherwise.
func (o *PatchSummary) GetUpToDate() int32 {
	if o == nil || IsNil(o.UpToDate) {
		var ret int32
		return ret
	}
	return *o.UpToDate
}

// GetUpToDateOk returns a tuple with the UpToDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSummary) GetUpToDateOk() (*int32, bool) {
	if o == nil || IsNil(o.UpToDate) {
		return nil, false
	}
	return o.UpToDate, true
}

// HasUpToDate returns a boolean if a field has been set.
func (o *PatchSummary) HasUpToDate() bool {
	if o != nil && !IsNil(o.UpToDate) {
		return true
	}

	return false
}

// SetUpToDate gets a reference to the given int32 and assigns it to the UpToDate field.
func (o *PatchSummary) SetUpToDate(v int32) {
	o.UpToDate = &v
}

// GetOutOfDate returns the OutOfDate field value if set, zero value otherwise.
func (o *PatchSummary) GetOutOfDate() int32 {
	if o == nil || IsNil(o.OutOfDate) {
		var ret int32
		return ret
	}
	return *o.OutOfDate
}

// GetOutOfDateOk returns a tuple with the OutOfDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSummary) GetOutOfDateOk() (*int32, bool) {
	if o == nil || IsNil(o.OutOfDate) {
		return nil, false
	}
	return o.OutOfDate, true
}

// HasOutOfDate returns a boolean if a field has been set.
func (o *PatchSummary) HasOutOfDate() bool {
	if o != nil && !IsNil(o.OutOfDate) {
		return true
	}

	return false
}

// SetOutOfDate gets a reference to the given int32 and assigns it to the OutOfDate field.
func (o *PatchSummary) SetOutOfDate(v int32) {
	o.OutOfDate = &v
}

// GetOnDashboard returns the OnDashboard field value if set, zero value otherwise.
func (o *PatchSummary) GetOnDashboard() bool {
	if o == nil || IsNil(o.OnDashboard) {
		var ret bool
		return ret
	}
	return *o.OnDashboard
}

// GetOnDashboardOk returns a tuple with the OnDashboard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSummary) GetOnDashboardOk() (*bool, bool) {
	if o == nil || IsNil(o.OnDashboard) {
		return nil, false
	}
	return o.OnDashboard, true
}

// HasOnDashboard returns a boolean if a field has been set.
func (o *PatchSummary) HasOnDashboard() bool {
	if o != nil && !IsNil(o.OnDashboard) {
		return true
	}

	return false
}

// SetOnDashboard gets a reference to the given bool and assigns it to the OnDashboard field.
func (o *PatchSummary) SetOnDashboard(v bool) {
	o.OnDashboard = &v
}

// GetSoftwareTitleConfigurationId returns the SoftwareTitleConfigurationId field value if set, zero value otherwise.
func (o *PatchSummary) GetSoftwareTitleConfigurationId() string {
	if o == nil || IsNil(o.SoftwareTitleConfigurationId) {
		var ret string
		return ret
	}
	return *o.SoftwareTitleConfigurationId
}

// GetSoftwareTitleConfigurationIdOk returns a tuple with the SoftwareTitleConfigurationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSummary) GetSoftwareTitleConfigurationIdOk() (*string, bool) {
	if o == nil || IsNil(o.SoftwareTitleConfigurationId) {
		return nil, false
	}
	return o.SoftwareTitleConfigurationId, true
}

// HasSoftwareTitleConfigurationId returns a boolean if a field has been set.
func (o *PatchSummary) HasSoftwareTitleConfigurationId() bool {
	if o != nil && !IsNil(o.SoftwareTitleConfigurationId) {
		return true
	}

	return false
}

// SetSoftwareTitleConfigurationId gets a reference to the given string and assigns it to the SoftwareTitleConfigurationId field.
func (o *PatchSummary) SetSoftwareTitleConfigurationId(v string) {
	o.SoftwareTitleConfigurationId = &v
}

func (o PatchSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SoftwareTitleId) {
		toSerialize["softwareTitleId"] = o.SoftwareTitleId
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.LatestVersion) {
		toSerialize["latestVersion"] = o.LatestVersion
	}
	if !IsNil(o.ReleaseDate) {
		toSerialize["releaseDate"] = o.ReleaseDate
	}
	if !IsNil(o.UpToDate) {
		toSerialize["upToDate"] = o.UpToDate
	}
	if !IsNil(o.OutOfDate) {
		toSerialize["outOfDate"] = o.OutOfDate
	}
	if !IsNil(o.OnDashboard) {
		toSerialize["onDashboard"] = o.OnDashboard
	}
	if !IsNil(o.SoftwareTitleConfigurationId) {
		toSerialize["softwareTitleConfigurationId"] = o.SoftwareTitleConfigurationId
	}
	return toSerialize, nil
}

type NullablePatchSummary struct {
	value *PatchSummary
	isSet bool
}

func (v NullablePatchSummary) Get() *PatchSummary {
	return v.value
}

func (v *NullablePatchSummary) Set(val *PatchSummary) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchSummary) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchSummary(val *PatchSummary) *NullablePatchSummary {
	return &NullablePatchSummary{value: val, isSet: true}
}

func (v NullablePatchSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


