/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// ActivePatchSummary struct for ActivePatchSummary
type ActivePatchSummary struct {
	SoftwareTitleID *int32 `json:"softwareTitleID,omitempty"`
	Title *string `json:"title,omitempty"`
	LatestVersion *string `json:"latestVersion,omitempty"`
	ReleaseDate *time.Time `json:"releaseDate,omitempty"`
	UpToDate *int32 `json:"upToDate,omitempty"`
	OutOfDate *int32 `json:"outOfDate,omitempty"`
	IsOnDashboard *bool `json:"isOnDashboard,omitempty"`
	SoftwareTitleConfigurationID *int32 `json:"softwareTitleConfigurationID,omitempty"`
}

// NewActivePatchSummary instantiates a new ActivePatchSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivePatchSummary() *ActivePatchSummary {
	this := ActivePatchSummary{}
	return &this
}

// NewActivePatchSummaryWithDefaults instantiates a new ActivePatchSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivePatchSummaryWithDefaults() *ActivePatchSummary {
	this := ActivePatchSummary{}
	return &this
}

// GetSoftwareTitleID returns the SoftwareTitleID field value if set, zero value otherwise.
func (o *ActivePatchSummary) GetSoftwareTitleID() int32 {
	if o == nil || o.SoftwareTitleID == nil {
		var ret int32
		return ret
	}
	return *o.SoftwareTitleID
}

// GetSoftwareTitleIDOk returns a tuple with the SoftwareTitleID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivePatchSummary) GetSoftwareTitleIDOk() (*int32, bool) {
	if o == nil || o.SoftwareTitleID == nil {
		return nil, false
	}
	return o.SoftwareTitleID, true
}

// HasSoftwareTitleID returns a boolean if a field has been set.
func (o *ActivePatchSummary) HasSoftwareTitleID() bool {
	if o != nil && o.SoftwareTitleID != nil {
		return true
	}

	return false
}

// SetSoftwareTitleID gets a reference to the given int32 and assigns it to the SoftwareTitleID field.
func (o *ActivePatchSummary) SetSoftwareTitleID(v int32) {
	o.SoftwareTitleID = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ActivePatchSummary) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivePatchSummary) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ActivePatchSummary) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ActivePatchSummary) SetTitle(v string) {
	o.Title = &v
}

// GetLatestVersion returns the LatestVersion field value if set, zero value otherwise.
func (o *ActivePatchSummary) GetLatestVersion() string {
	if o == nil || o.LatestVersion == nil {
		var ret string
		return ret
	}
	return *o.LatestVersion
}

// GetLatestVersionOk returns a tuple with the LatestVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivePatchSummary) GetLatestVersionOk() (*string, bool) {
	if o == nil || o.LatestVersion == nil {
		return nil, false
	}
	return o.LatestVersion, true
}

// HasLatestVersion returns a boolean if a field has been set.
func (o *ActivePatchSummary) HasLatestVersion() bool {
	if o != nil && o.LatestVersion != nil {
		return true
	}

	return false
}

// SetLatestVersion gets a reference to the given string and assigns it to the LatestVersion field.
func (o *ActivePatchSummary) SetLatestVersion(v string) {
	o.LatestVersion = &v
}

// GetReleaseDate returns the ReleaseDate field value if set, zero value otherwise.
func (o *ActivePatchSummary) GetReleaseDate() time.Time {
	if o == nil || o.ReleaseDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ReleaseDate
}

// GetReleaseDateOk returns a tuple with the ReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivePatchSummary) GetReleaseDateOk() (*time.Time, bool) {
	if o == nil || o.ReleaseDate == nil {
		return nil, false
	}
	return o.ReleaseDate, true
}

// HasReleaseDate returns a boolean if a field has been set.
func (o *ActivePatchSummary) HasReleaseDate() bool {
	if o != nil && o.ReleaseDate != nil {
		return true
	}

	return false
}

// SetReleaseDate gets a reference to the given time.Time and assigns it to the ReleaseDate field.
func (o *ActivePatchSummary) SetReleaseDate(v time.Time) {
	o.ReleaseDate = &v
}

// GetUpToDate returns the UpToDate field value if set, zero value otherwise.
func (o *ActivePatchSummary) GetUpToDate() int32 {
	if o == nil || o.UpToDate == nil {
		var ret int32
		return ret
	}
	return *o.UpToDate
}

// GetUpToDateOk returns a tuple with the UpToDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivePatchSummary) GetUpToDateOk() (*int32, bool) {
	if o == nil || o.UpToDate == nil {
		return nil, false
	}
	return o.UpToDate, true
}

// HasUpToDate returns a boolean if a field has been set.
func (o *ActivePatchSummary) HasUpToDate() bool {
	if o != nil && o.UpToDate != nil {
		return true
	}

	return false
}

// SetUpToDate gets a reference to the given int32 and assigns it to the UpToDate field.
func (o *ActivePatchSummary) SetUpToDate(v int32) {
	o.UpToDate = &v
}

// GetOutOfDate returns the OutOfDate field value if set, zero value otherwise.
func (o *ActivePatchSummary) GetOutOfDate() int32 {
	if o == nil || o.OutOfDate == nil {
		var ret int32
		return ret
	}
	return *o.OutOfDate
}

// GetOutOfDateOk returns a tuple with the OutOfDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivePatchSummary) GetOutOfDateOk() (*int32, bool) {
	if o == nil || o.OutOfDate == nil {
		return nil, false
	}
	return o.OutOfDate, true
}

// HasOutOfDate returns a boolean if a field has been set.
func (o *ActivePatchSummary) HasOutOfDate() bool {
	if o != nil && o.OutOfDate != nil {
		return true
	}

	return false
}

// SetOutOfDate gets a reference to the given int32 and assigns it to the OutOfDate field.
func (o *ActivePatchSummary) SetOutOfDate(v int32) {
	o.OutOfDate = &v
}

// GetIsOnDashboard returns the IsOnDashboard field value if set, zero value otherwise.
func (o *ActivePatchSummary) GetIsOnDashboard() bool {
	if o == nil || o.IsOnDashboard == nil {
		var ret bool
		return ret
	}
	return *o.IsOnDashboard
}

// GetIsOnDashboardOk returns a tuple with the IsOnDashboard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivePatchSummary) GetIsOnDashboardOk() (*bool, bool) {
	if o == nil || o.IsOnDashboard == nil {
		return nil, false
	}
	return o.IsOnDashboard, true
}

// HasIsOnDashboard returns a boolean if a field has been set.
func (o *ActivePatchSummary) HasIsOnDashboard() bool {
	if o != nil && o.IsOnDashboard != nil {
		return true
	}

	return false
}

// SetIsOnDashboard gets a reference to the given bool and assigns it to the IsOnDashboard field.
func (o *ActivePatchSummary) SetIsOnDashboard(v bool) {
	o.IsOnDashboard = &v
}

// GetSoftwareTitleConfigurationID returns the SoftwareTitleConfigurationID field value if set, zero value otherwise.
func (o *ActivePatchSummary) GetSoftwareTitleConfigurationID() int32 {
	if o == nil || o.SoftwareTitleConfigurationID == nil {
		var ret int32
		return ret
	}
	return *o.SoftwareTitleConfigurationID
}

// GetSoftwareTitleConfigurationIDOk returns a tuple with the SoftwareTitleConfigurationID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivePatchSummary) GetSoftwareTitleConfigurationIDOk() (*int32, bool) {
	if o == nil || o.SoftwareTitleConfigurationID == nil {
		return nil, false
	}
	return o.SoftwareTitleConfigurationID, true
}

// HasSoftwareTitleConfigurationID returns a boolean if a field has been set.
func (o *ActivePatchSummary) HasSoftwareTitleConfigurationID() bool {
	if o != nil && o.SoftwareTitleConfigurationID != nil {
		return true
	}

	return false
}

// SetSoftwareTitleConfigurationID gets a reference to the given int32 and assigns it to the SoftwareTitleConfigurationID field.
func (o *ActivePatchSummary) SetSoftwareTitleConfigurationID(v int32) {
	o.SoftwareTitleConfigurationID = &v
}

func (o ActivePatchSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SoftwareTitleID != nil {
		toSerialize["softwareTitleID"] = o.SoftwareTitleID
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.LatestVersion != nil {
		toSerialize["latestVersion"] = o.LatestVersion
	}
	if o.ReleaseDate != nil {
		toSerialize["releaseDate"] = o.ReleaseDate
	}
	if o.UpToDate != nil {
		toSerialize["upToDate"] = o.UpToDate
	}
	if o.OutOfDate != nil {
		toSerialize["outOfDate"] = o.OutOfDate
	}
	if o.IsOnDashboard != nil {
		toSerialize["isOnDashboard"] = o.IsOnDashboard
	}
	if o.SoftwareTitleConfigurationID != nil {
		toSerialize["softwareTitleConfigurationID"] = o.SoftwareTitleConfigurationID
	}
	return json.Marshal(toSerialize)
}

type NullableActivePatchSummary struct {
	value *ActivePatchSummary
	isSet bool
}

func (v NullableActivePatchSummary) Get() *ActivePatchSummary {
	return v.value
}

func (v *NullableActivePatchSummary) Set(val *ActivePatchSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableActivePatchSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableActivePatchSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivePatchSummary(val *ActivePatchSummary) *NullableActivePatchSummary {
	return &NullableActivePatchSummary{value: val, isSet: true}
}

func (v NullableActivePatchSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivePatchSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


