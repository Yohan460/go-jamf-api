/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the PlanConfigurationPost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanConfigurationPost{}

// PlanConfigurationPost struct for PlanConfigurationPost
type PlanConfigurationPost struct {
	UpdateAction string `json:"updateAction"`
	VersionType string `json:"versionType"`
	// Optional. Indicates the specific version to update to. Only available when the version type is set to specific version, otherwise defaults to NO_SPECIFIC_VERSION.
	SpecificVersion *string `json:"specificVersion,omitempty"`
	// Required when the provided updateAction is DOWNLOAD_INSTALL_ALLOW_DEFERRAL, not applicable to all managed software update plans
	MaxDeferrals *int32 `json:"maxDeferrals,omitempty"`
	// Optional. Indicates the local date and time of the device to force update by.
	ForceInstallLocalDateTime NullableString `json:"forceInstallLocalDateTime,omitempty"`
}

// NewPlanConfigurationPost instantiates a new PlanConfigurationPost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanConfigurationPost(updateAction string, versionType string) *PlanConfigurationPost {
	this := PlanConfigurationPost{}
	this.UpdateAction = updateAction
	this.VersionType = versionType
	var specificVersion string = "NO_SPECIFIC_VERSION"
	this.SpecificVersion = &specificVersion
	return &this
}

// NewPlanConfigurationPostWithDefaults instantiates a new PlanConfigurationPost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanConfigurationPostWithDefaults() *PlanConfigurationPost {
	this := PlanConfigurationPost{}
	var specificVersion string = "NO_SPECIFIC_VERSION"
	this.SpecificVersion = &specificVersion
	return &this
}

// GetUpdateAction returns the UpdateAction field value
func (o *PlanConfigurationPost) GetUpdateAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdateAction
}

// GetUpdateActionOk returns a tuple with the UpdateAction field value
// and a boolean to check if the value has been set.
func (o *PlanConfigurationPost) GetUpdateActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdateAction, true
}

// SetUpdateAction sets field value
func (o *PlanConfigurationPost) SetUpdateAction(v string) {
	o.UpdateAction = v
}

// GetVersionType returns the VersionType field value
func (o *PlanConfigurationPost) GetVersionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VersionType
}

// GetVersionTypeOk returns a tuple with the VersionType field value
// and a boolean to check if the value has been set.
func (o *PlanConfigurationPost) GetVersionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VersionType, true
}

// SetVersionType sets field value
func (o *PlanConfigurationPost) SetVersionType(v string) {
	o.VersionType = v
}

// GetSpecificVersion returns the SpecificVersion field value if set, zero value otherwise.
func (o *PlanConfigurationPost) GetSpecificVersion() string {
	if o == nil || IsNil(o.SpecificVersion) {
		var ret string
		return ret
	}
	return *o.SpecificVersion
}

// GetSpecificVersionOk returns a tuple with the SpecificVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanConfigurationPost) GetSpecificVersionOk() (*string, bool) {
	if o == nil || IsNil(o.SpecificVersion) {
		return nil, false
	}
	return o.SpecificVersion, true
}

// HasSpecificVersion returns a boolean if a field has been set.
func (o *PlanConfigurationPost) HasSpecificVersion() bool {
	if o != nil && !IsNil(o.SpecificVersion) {
		return true
	}

	return false
}

// SetSpecificVersion gets a reference to the given string and assigns it to the SpecificVersion field.
func (o *PlanConfigurationPost) SetSpecificVersion(v string) {
	o.SpecificVersion = &v
}

// GetMaxDeferrals returns the MaxDeferrals field value if set, zero value otherwise.
func (o *PlanConfigurationPost) GetMaxDeferrals() int32 {
	if o == nil || IsNil(o.MaxDeferrals) {
		var ret int32
		return ret
	}
	return *o.MaxDeferrals
}

// GetMaxDeferralsOk returns a tuple with the MaxDeferrals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanConfigurationPost) GetMaxDeferralsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxDeferrals) {
		return nil, false
	}
	return o.MaxDeferrals, true
}

// HasMaxDeferrals returns a boolean if a field has been set.
func (o *PlanConfigurationPost) HasMaxDeferrals() bool {
	if o != nil && !IsNil(o.MaxDeferrals) {
		return true
	}

	return false
}

// SetMaxDeferrals gets a reference to the given int32 and assigns it to the MaxDeferrals field.
func (o *PlanConfigurationPost) SetMaxDeferrals(v int32) {
	o.MaxDeferrals = &v
}

// GetForceInstallLocalDateTime returns the ForceInstallLocalDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlanConfigurationPost) GetForceInstallLocalDateTime() string {
	if o == nil || IsNil(o.ForceInstallLocalDateTime.Get()) {
		var ret string
		return ret
	}
	return *o.ForceInstallLocalDateTime.Get()
}

// GetForceInstallLocalDateTimeOk returns a tuple with the ForceInstallLocalDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlanConfigurationPost) GetForceInstallLocalDateTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ForceInstallLocalDateTime.Get(), o.ForceInstallLocalDateTime.IsSet()
}

// HasForceInstallLocalDateTime returns a boolean if a field has been set.
func (o *PlanConfigurationPost) HasForceInstallLocalDateTime() bool {
	if o != nil && o.ForceInstallLocalDateTime.IsSet() {
		return true
	}

	return false
}

// SetForceInstallLocalDateTime gets a reference to the given NullableString and assigns it to the ForceInstallLocalDateTime field.
func (o *PlanConfigurationPost) SetForceInstallLocalDateTime(v string) {
	o.ForceInstallLocalDateTime.Set(&v)
}
// SetForceInstallLocalDateTimeNil sets the value for ForceInstallLocalDateTime to be an explicit nil
func (o *PlanConfigurationPost) SetForceInstallLocalDateTimeNil() {
	o.ForceInstallLocalDateTime.Set(nil)
}

// UnsetForceInstallLocalDateTime ensures that no value is present for ForceInstallLocalDateTime, not even an explicit nil
func (o *PlanConfigurationPost) UnsetForceInstallLocalDateTime() {
	o.ForceInstallLocalDateTime.Unset()
}

func (o PlanConfigurationPost) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanConfigurationPost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["updateAction"] = o.UpdateAction
	toSerialize["versionType"] = o.VersionType
	if !IsNil(o.SpecificVersion) {
		toSerialize["specificVersion"] = o.SpecificVersion
	}
	if !IsNil(o.MaxDeferrals) {
		toSerialize["maxDeferrals"] = o.MaxDeferrals
	}
	if o.ForceInstallLocalDateTime.IsSet() {
		toSerialize["forceInstallLocalDateTime"] = o.ForceInstallLocalDateTime.Get()
	}
	return toSerialize, nil
}

type NullablePlanConfigurationPost struct {
	value *PlanConfigurationPost
	isSet bool
}

func (v NullablePlanConfigurationPost) Get() *PlanConfigurationPost {
	return v.value
}

func (v *NullablePlanConfigurationPost) Set(val *PlanConfigurationPost) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanConfigurationPost) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanConfigurationPost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanConfigurationPost(val *PlanConfigurationPost) *NullablePlanConfigurationPost {
	return &NullablePlanConfigurationPost{value: val, isSet: true}
}

func (v NullablePlanConfigurationPost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanConfigurationPost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


