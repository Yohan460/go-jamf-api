/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the PatchSoftwareTitleDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchSoftwareTitleDefinition{}

// PatchSoftwareTitleDefinition struct for PatchSoftwareTitleDefinition
type PatchSoftwareTitleDefinition struct {
	Version *string `json:"version,omitempty"`
	MinimumOperatingSystem *string `json:"minimumOperatingSystem,omitempty"`
	ReleaseDate *string `json:"releaseDate,omitempty"`
	RebootRequired *bool `json:"rebootRequired,omitempty"`
	KillApps []PatchSoftwareTitleConfigurationDefinitionKillApp `json:"killApps,omitempty"`
	Standalone *bool `json:"standalone,omitempty"`
	AbsoluteOrderId *string `json:"absoluteOrderId,omitempty"`
}

// NewPatchSoftwareTitleDefinition instantiates a new PatchSoftwareTitleDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchSoftwareTitleDefinition() *PatchSoftwareTitleDefinition {
	this := PatchSoftwareTitleDefinition{}
	var minimumOperatingSystem string = "-1"
	this.MinimumOperatingSystem = &minimumOperatingSystem
	var releaseDate string = "-1"
	this.ReleaseDate = &releaseDate
	var rebootRequired bool = false
	this.RebootRequired = &rebootRequired
	var standalone bool = false
	this.Standalone = &standalone
	return &this
}

// NewPatchSoftwareTitleDefinitionWithDefaults instantiates a new PatchSoftwareTitleDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchSoftwareTitleDefinitionWithDefaults() *PatchSoftwareTitleDefinition {
	this := PatchSoftwareTitleDefinition{}
	var minimumOperatingSystem string = "-1"
	this.MinimumOperatingSystem = &minimumOperatingSystem
	var releaseDate string = "-1"
	this.ReleaseDate = &releaseDate
	var rebootRequired bool = false
	this.RebootRequired = &rebootRequired
	var standalone bool = false
	this.Standalone = &standalone
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *PatchSoftwareTitleDefinition) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSoftwareTitleDefinition) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *PatchSoftwareTitleDefinition) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *PatchSoftwareTitleDefinition) SetVersion(v string) {
	o.Version = &v
}

// GetMinimumOperatingSystem returns the MinimumOperatingSystem field value if set, zero value otherwise.
func (o *PatchSoftwareTitleDefinition) GetMinimumOperatingSystem() string {
	if o == nil || IsNil(o.MinimumOperatingSystem) {
		var ret string
		return ret
	}
	return *o.MinimumOperatingSystem
}

// GetMinimumOperatingSystemOk returns a tuple with the MinimumOperatingSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSoftwareTitleDefinition) GetMinimumOperatingSystemOk() (*string, bool) {
	if o == nil || IsNil(o.MinimumOperatingSystem) {
		return nil, false
	}
	return o.MinimumOperatingSystem, true
}

// HasMinimumOperatingSystem returns a boolean if a field has been set.
func (o *PatchSoftwareTitleDefinition) HasMinimumOperatingSystem() bool {
	if o != nil && !IsNil(o.MinimumOperatingSystem) {
		return true
	}

	return false
}

// SetMinimumOperatingSystem gets a reference to the given string and assigns it to the MinimumOperatingSystem field.
func (o *PatchSoftwareTitleDefinition) SetMinimumOperatingSystem(v string) {
	o.MinimumOperatingSystem = &v
}

// GetReleaseDate returns the ReleaseDate field value if set, zero value otherwise.
func (o *PatchSoftwareTitleDefinition) GetReleaseDate() string {
	if o == nil || IsNil(o.ReleaseDate) {
		var ret string
		return ret
	}
	return *o.ReleaseDate
}

// GetReleaseDateOk returns a tuple with the ReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSoftwareTitleDefinition) GetReleaseDateOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseDate) {
		return nil, false
	}
	return o.ReleaseDate, true
}

// HasReleaseDate returns a boolean if a field has been set.
func (o *PatchSoftwareTitleDefinition) HasReleaseDate() bool {
	if o != nil && !IsNil(o.ReleaseDate) {
		return true
	}

	return false
}

// SetReleaseDate gets a reference to the given string and assigns it to the ReleaseDate field.
func (o *PatchSoftwareTitleDefinition) SetReleaseDate(v string) {
	o.ReleaseDate = &v
}

// GetRebootRequired returns the RebootRequired field value if set, zero value otherwise.
func (o *PatchSoftwareTitleDefinition) GetRebootRequired() bool {
	if o == nil || IsNil(o.RebootRequired) {
		var ret bool
		return ret
	}
	return *o.RebootRequired
}

// GetRebootRequiredOk returns a tuple with the RebootRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSoftwareTitleDefinition) GetRebootRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.RebootRequired) {
		return nil, false
	}
	return o.RebootRequired, true
}

// HasRebootRequired returns a boolean if a field has been set.
func (o *PatchSoftwareTitleDefinition) HasRebootRequired() bool {
	if o != nil && !IsNil(o.RebootRequired) {
		return true
	}

	return false
}

// SetRebootRequired gets a reference to the given bool and assigns it to the RebootRequired field.
func (o *PatchSoftwareTitleDefinition) SetRebootRequired(v bool) {
	o.RebootRequired = &v
}

// GetKillApps returns the KillApps field value if set, zero value otherwise.
func (o *PatchSoftwareTitleDefinition) GetKillApps() []PatchSoftwareTitleConfigurationDefinitionKillApp {
	if o == nil || IsNil(o.KillApps) {
		var ret []PatchSoftwareTitleConfigurationDefinitionKillApp
		return ret
	}
	return o.KillApps
}

// GetKillAppsOk returns a tuple with the KillApps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSoftwareTitleDefinition) GetKillAppsOk() ([]PatchSoftwareTitleConfigurationDefinitionKillApp, bool) {
	if o == nil || IsNil(o.KillApps) {
		return nil, false
	}
	return o.KillApps, true
}

// HasKillApps returns a boolean if a field has been set.
func (o *PatchSoftwareTitleDefinition) HasKillApps() bool {
	if o != nil && !IsNil(o.KillApps) {
		return true
	}

	return false
}

// SetKillApps gets a reference to the given []PatchSoftwareTitleConfigurationDefinitionKillApp and assigns it to the KillApps field.
func (o *PatchSoftwareTitleDefinition) SetKillApps(v []PatchSoftwareTitleConfigurationDefinitionKillApp) {
	o.KillApps = v
}

// GetStandalone returns the Standalone field value if set, zero value otherwise.
func (o *PatchSoftwareTitleDefinition) GetStandalone() bool {
	if o == nil || IsNil(o.Standalone) {
		var ret bool
		return ret
	}
	return *o.Standalone
}

// GetStandaloneOk returns a tuple with the Standalone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSoftwareTitleDefinition) GetStandaloneOk() (*bool, bool) {
	if o == nil || IsNil(o.Standalone) {
		return nil, false
	}
	return o.Standalone, true
}

// HasStandalone returns a boolean if a field has been set.
func (o *PatchSoftwareTitleDefinition) HasStandalone() bool {
	if o != nil && !IsNil(o.Standalone) {
		return true
	}

	return false
}

// SetStandalone gets a reference to the given bool and assigns it to the Standalone field.
func (o *PatchSoftwareTitleDefinition) SetStandalone(v bool) {
	o.Standalone = &v
}

// GetAbsoluteOrderId returns the AbsoluteOrderId field value if set, zero value otherwise.
func (o *PatchSoftwareTitleDefinition) GetAbsoluteOrderId() string {
	if o == nil || IsNil(o.AbsoluteOrderId) {
		var ret string
		return ret
	}
	return *o.AbsoluteOrderId
}

// GetAbsoluteOrderIdOk returns a tuple with the AbsoluteOrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSoftwareTitleDefinition) GetAbsoluteOrderIdOk() (*string, bool) {
	if o == nil || IsNil(o.AbsoluteOrderId) {
		return nil, false
	}
	return o.AbsoluteOrderId, true
}

// HasAbsoluteOrderId returns a boolean if a field has been set.
func (o *PatchSoftwareTitleDefinition) HasAbsoluteOrderId() bool {
	if o != nil && !IsNil(o.AbsoluteOrderId) {
		return true
	}

	return false
}

// SetAbsoluteOrderId gets a reference to the given string and assigns it to the AbsoluteOrderId field.
func (o *PatchSoftwareTitleDefinition) SetAbsoluteOrderId(v string) {
	o.AbsoluteOrderId = &v
}

func (o PatchSoftwareTitleDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchSoftwareTitleDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.MinimumOperatingSystem) {
		toSerialize["minimumOperatingSystem"] = o.MinimumOperatingSystem
	}
	if !IsNil(o.ReleaseDate) {
		toSerialize["releaseDate"] = o.ReleaseDate
	}
	if !IsNil(o.RebootRequired) {
		toSerialize["rebootRequired"] = o.RebootRequired
	}
	if !IsNil(o.KillApps) {
		toSerialize["killApps"] = o.KillApps
	}
	if !IsNil(o.Standalone) {
		toSerialize["standalone"] = o.Standalone
	}
	if !IsNil(o.AbsoluteOrderId) {
		toSerialize["absoluteOrderId"] = o.AbsoluteOrderId
	}
	return toSerialize, nil
}

type NullablePatchSoftwareTitleDefinition struct {
	value *PatchSoftwareTitleDefinition
	isSet bool
}

func (v NullablePatchSoftwareTitleDefinition) Get() *PatchSoftwareTitleDefinition {
	return v.value
}

func (v *NullablePatchSoftwareTitleDefinition) Set(val *PatchSoftwareTitleDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchSoftwareTitleDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchSoftwareTitleDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchSoftwareTitleDefinition(val *PatchSoftwareTitleDefinition) *NullablePatchSoftwareTitleDefinition {
	return &NullablePatchSoftwareTitleDefinition{value: val, isSet: true}
}

func (v NullablePatchSoftwareTitleDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchSoftwareTitleDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


