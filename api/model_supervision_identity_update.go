/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SupervisionIdentityUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupervisionIdentityUpdate{}

// SupervisionIdentityUpdate struct for SupervisionIdentityUpdate
type SupervisionIdentityUpdate struct {
	DisplayName string `json:"displayName"`
}

type _SupervisionIdentityUpdate SupervisionIdentityUpdate

// NewSupervisionIdentityUpdate instantiates a new SupervisionIdentityUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupervisionIdentityUpdate(displayName string) *SupervisionIdentityUpdate {
	this := SupervisionIdentityUpdate{}
	this.DisplayName = displayName
	return &this
}

// NewSupervisionIdentityUpdateWithDefaults instantiates a new SupervisionIdentityUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupervisionIdentityUpdateWithDefaults() *SupervisionIdentityUpdate {
	this := SupervisionIdentityUpdate{}
	return &this
}

// GetDisplayName returns the DisplayName field value
func (o *SupervisionIdentityUpdate) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *SupervisionIdentityUpdate) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *SupervisionIdentityUpdate) SetDisplayName(v string) {
	o.DisplayName = v
}

func (o SupervisionIdentityUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupervisionIdentityUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["displayName"] = o.DisplayName
	return toSerialize, nil
}

func (o *SupervisionIdentityUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"displayName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSupervisionIdentityUpdate := _SupervisionIdentityUpdate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSupervisionIdentityUpdate)

	if err != nil {
		return err
	}

	*o = SupervisionIdentityUpdate(varSupervisionIdentityUpdate)

	return err
}

type NullableSupervisionIdentityUpdate struct {
	value *SupervisionIdentityUpdate
	isSet bool
}

func (v NullableSupervisionIdentityUpdate) Get() *SupervisionIdentityUpdate {
	return v.value
}

func (v *NullableSupervisionIdentityUpdate) Set(val *SupervisionIdentityUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableSupervisionIdentityUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableSupervisionIdentityUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupervisionIdentityUpdate(val *SupervisionIdentityUpdate) *NullableSupervisionIdentityUpdate {
	return &NullableSupervisionIdentityUpdate{value: val, isSet: true}
}

func (v NullableSupervisionIdentityUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupervisionIdentityUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


