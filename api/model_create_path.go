/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the CreatePath type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreatePath{}

// CreatePath struct for CreatePath
type CreatePath struct {
	Scope string `json:"scope"`
	Path string `json:"path"`
}

// NewCreatePath instantiates a new CreatePath object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatePath(scope string, path string) *CreatePath {
	this := CreatePath{}
	this.Scope = scope
	this.Path = path
	return &this
}

// NewCreatePathWithDefaults instantiates a new CreatePath object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatePathWithDefaults() *CreatePath {
	this := CreatePath{}
	return &this
}

// GetScope returns the Scope field value
func (o *CreatePath) GetScope() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *CreatePath) GetScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *CreatePath) SetScope(v string) {
	o.Scope = v
}

// GetPath returns the Path field value
func (o *CreatePath) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *CreatePath) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *CreatePath) SetPath(v string) {
	o.Path = v
}

func (o CreatePath) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreatePath) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["scope"] = o.Scope
	toSerialize["path"] = o.Path
	return toSerialize, nil
}

type NullableCreatePath struct {
	value *CreatePath
	isSet bool
}

func (v NullableCreatePath) Get() *CreatePath {
	return v.value
}

func (v *NullableCreatePath) Set(val *CreatePath) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePath) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePath) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePath(val *CreatePath) *NullableCreatePath {
	return &NullableCreatePath{value: val, isSet: true}
}

func (v NullableCreatePath) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatePath) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


