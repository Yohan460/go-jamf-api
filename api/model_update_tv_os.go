/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the UpdateTvOs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateTvOs{}

// UpdateTvOs struct for UpdateTvOs
type UpdateTvOs struct {
	AirplayPassword *string `json:"airplayPassword,omitempty"`
	Purchasing *PurchasingV2 `json:"purchasing,omitempty"`
}

// NewUpdateTvOs instantiates a new UpdateTvOs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateTvOs() *UpdateTvOs {
	this := UpdateTvOs{}
	return &this
}

// NewUpdateTvOsWithDefaults instantiates a new UpdateTvOs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateTvOsWithDefaults() *UpdateTvOs {
	this := UpdateTvOs{}
	return &this
}

// GetAirplayPassword returns the AirplayPassword field value if set, zero value otherwise.
func (o *UpdateTvOs) GetAirplayPassword() string {
	if o == nil || IsNil(o.AirplayPassword) {
		var ret string
		return ret
	}
	return *o.AirplayPassword
}

// GetAirplayPasswordOk returns a tuple with the AirplayPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTvOs) GetAirplayPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.AirplayPassword) {
		return nil, false
	}
	return o.AirplayPassword, true
}

// HasAirplayPassword returns a boolean if a field has been set.
func (o *UpdateTvOs) HasAirplayPassword() bool {
	if o != nil && !IsNil(o.AirplayPassword) {
		return true
	}

	return false
}

// SetAirplayPassword gets a reference to the given string and assigns it to the AirplayPassword field.
func (o *UpdateTvOs) SetAirplayPassword(v string) {
	o.AirplayPassword = &v
}

// GetPurchasing returns the Purchasing field value if set, zero value otherwise.
func (o *UpdateTvOs) GetPurchasing() PurchasingV2 {
	if o == nil || IsNil(o.Purchasing) {
		var ret PurchasingV2
		return ret
	}
	return *o.Purchasing
}

// GetPurchasingOk returns a tuple with the Purchasing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTvOs) GetPurchasingOk() (*PurchasingV2, bool) {
	if o == nil || IsNil(o.Purchasing) {
		return nil, false
	}
	return o.Purchasing, true
}

// HasPurchasing returns a boolean if a field has been set.
func (o *UpdateTvOs) HasPurchasing() bool {
	if o != nil && !IsNil(o.Purchasing) {
		return true
	}

	return false
}

// SetPurchasing gets a reference to the given PurchasingV2 and assigns it to the Purchasing field.
func (o *UpdateTvOs) SetPurchasing(v PurchasingV2) {
	o.Purchasing = &v
}

func (o UpdateTvOs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateTvOs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AirplayPassword) {
		toSerialize["airplayPassword"] = o.AirplayPassword
	}
	if !IsNil(o.Purchasing) {
		toSerialize["purchasing"] = o.Purchasing
	}
	return toSerialize, nil
}

type NullableUpdateTvOs struct {
	value *UpdateTvOs
	isSet bool
}

func (v NullableUpdateTvOs) Get() *UpdateTvOs {
	return v.value
}

func (v *NullableUpdateTvOs) Set(val *UpdateTvOs) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateTvOs) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateTvOs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateTvOs(val *UpdateTvOs) *NullableUpdateTvOs {
	return &NullableUpdateTvOs{value: val, isSet: true}
}

func (v NullableUpdateTvOs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateTvOs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


