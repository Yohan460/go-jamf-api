/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the AppRequestSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppRequestSettings{}

// AppRequestSettings struct for AppRequestSettings
type AppRequestSettings struct {
	IsEnabled *bool `json:"isEnabled,omitempty"`
	// Can be any of the country codes from /v1/app-store-country-codes or \"deviceLocale\" to use each individual device's locale
	AppStoreLocale *string `json:"appStoreLocale,omitempty"`
	RequesterUserGroupId *int64 `json:"requesterUserGroupId,omitempty"`
	ApproverEmails []string `json:"approverEmails,omitempty"`
}

// NewAppRequestSettings instantiates a new AppRequestSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppRequestSettings() *AppRequestSettings {
	this := AppRequestSettings{}
	return &this
}

// NewAppRequestSettingsWithDefaults instantiates a new AppRequestSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppRequestSettingsWithDefaults() *AppRequestSettings {
	this := AppRequestSettings{}
	return &this
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *AppRequestSettings) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRequestSettings) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *AppRequestSettings) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *AppRequestSettings) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetAppStoreLocale returns the AppStoreLocale field value if set, zero value otherwise.
func (o *AppRequestSettings) GetAppStoreLocale() string {
	if o == nil || IsNil(o.AppStoreLocale) {
		var ret string
		return ret
	}
	return *o.AppStoreLocale
}

// GetAppStoreLocaleOk returns a tuple with the AppStoreLocale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRequestSettings) GetAppStoreLocaleOk() (*string, bool) {
	if o == nil || IsNil(o.AppStoreLocale) {
		return nil, false
	}
	return o.AppStoreLocale, true
}

// HasAppStoreLocale returns a boolean if a field has been set.
func (o *AppRequestSettings) HasAppStoreLocale() bool {
	if o != nil && !IsNil(o.AppStoreLocale) {
		return true
	}

	return false
}

// SetAppStoreLocale gets a reference to the given string and assigns it to the AppStoreLocale field.
func (o *AppRequestSettings) SetAppStoreLocale(v string) {
	o.AppStoreLocale = &v
}

// GetRequesterUserGroupId returns the RequesterUserGroupId field value if set, zero value otherwise.
func (o *AppRequestSettings) GetRequesterUserGroupId() int64 {
	if o == nil || IsNil(o.RequesterUserGroupId) {
		var ret int64
		return ret
	}
	return *o.RequesterUserGroupId
}

// GetRequesterUserGroupIdOk returns a tuple with the RequesterUserGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRequestSettings) GetRequesterUserGroupIdOk() (*int64, bool) {
	if o == nil || IsNil(o.RequesterUserGroupId) {
		return nil, false
	}
	return o.RequesterUserGroupId, true
}

// HasRequesterUserGroupId returns a boolean if a field has been set.
func (o *AppRequestSettings) HasRequesterUserGroupId() bool {
	if o != nil && !IsNil(o.RequesterUserGroupId) {
		return true
	}

	return false
}

// SetRequesterUserGroupId gets a reference to the given int64 and assigns it to the RequesterUserGroupId field.
func (o *AppRequestSettings) SetRequesterUserGroupId(v int64) {
	o.RequesterUserGroupId = &v
}

// GetApproverEmails returns the ApproverEmails field value if set, zero value otherwise.
func (o *AppRequestSettings) GetApproverEmails() []string {
	if o == nil || IsNil(o.ApproverEmails) {
		var ret []string
		return ret
	}
	return o.ApproverEmails
}

// GetApproverEmailsOk returns a tuple with the ApproverEmails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRequestSettings) GetApproverEmailsOk() ([]string, bool) {
	if o == nil || IsNil(o.ApproverEmails) {
		return nil, false
	}
	return o.ApproverEmails, true
}

// HasApproverEmails returns a boolean if a field has been set.
func (o *AppRequestSettings) HasApproverEmails() bool {
	if o != nil && !IsNil(o.ApproverEmails) {
		return true
	}

	return false
}

// SetApproverEmails gets a reference to the given []string and assigns it to the ApproverEmails field.
func (o *AppRequestSettings) SetApproverEmails(v []string) {
	o.ApproverEmails = v
}

func (o AppRequestSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppRequestSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsEnabled) {
		toSerialize["isEnabled"] = o.IsEnabled
	}
	if !IsNil(o.AppStoreLocale) {
		toSerialize["appStoreLocale"] = o.AppStoreLocale
	}
	if !IsNil(o.RequesterUserGroupId) {
		toSerialize["requesterUserGroupId"] = o.RequesterUserGroupId
	}
	if !IsNil(o.ApproverEmails) {
		toSerialize["approverEmails"] = o.ApproverEmails
	}
	return toSerialize, nil
}

type NullableAppRequestSettings struct {
	value *AppRequestSettings
	isSet bool
}

func (v NullableAppRequestSettings) Get() *AppRequestSettings {
	return v.value
}

func (v *NullableAppRequestSettings) Set(val *AppRequestSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableAppRequestSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableAppRequestSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppRequestSettings(val *AppRequestSettings) *NullableAppRequestSettings {
	return &NullableAppRequestSettings{value: val, isSet: true}
}

func (v NullableAppRequestSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppRequestSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


