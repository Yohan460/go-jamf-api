/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// checks if the ManagedSoftwareUpdateStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagedSoftwareUpdateStatus{}

// ManagedSoftwareUpdateStatus struct for ManagedSoftwareUpdateStatus
type ManagedSoftwareUpdateStatus struct {
	OsUpdatesStatusId *string `json:"osUpdatesStatusId,omitempty"`
	Device *ManagedSoftwareUpdateStatusDevice `json:"device,omitempty"`
	DownloadPercentComplete *float32 `json:"downloadPercentComplete,omitempty"`
	Downloaded *bool `json:"downloaded,omitempty"`
	ProductKey *string `json:"productKey,omitempty"`
	Status *string `json:"status,omitempty"`
	// not applicable to all managed software update statuses
	DeferralsRemaining *int64 `json:"deferralsRemaining,omitempty"`
	// not applicable to all managed software update statuses
	MaxDeferrals *int64 `json:"maxDeferrals,omitempty"`
	// not applicable to all managed software update statuses
	NextScheduledInstall *time.Time `json:"nextScheduledInstall,omitempty"`
	// not applicable to all managed software update statuses
	PastNotifications []time.Time `json:"pastNotifications,omitempty"`
	Created *time.Time `json:"created,omitempty"`
	Updated *time.Time `json:"updated,omitempty"`
}

// NewManagedSoftwareUpdateStatus instantiates a new ManagedSoftwareUpdateStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagedSoftwareUpdateStatus() *ManagedSoftwareUpdateStatus {
	this := ManagedSoftwareUpdateStatus{}
	return &this
}

// NewManagedSoftwareUpdateStatusWithDefaults instantiates a new ManagedSoftwareUpdateStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagedSoftwareUpdateStatusWithDefaults() *ManagedSoftwareUpdateStatus {
	this := ManagedSoftwareUpdateStatus{}
	return &this
}

// GetOsUpdatesStatusId returns the OsUpdatesStatusId field value if set, zero value otherwise.
func (o *ManagedSoftwareUpdateStatus) GetOsUpdatesStatusId() string {
	if o == nil || IsNil(o.OsUpdatesStatusId) {
		var ret string
		return ret
	}
	return *o.OsUpdatesStatusId
}

// GetOsUpdatesStatusIdOk returns a tuple with the OsUpdatesStatusId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedSoftwareUpdateStatus) GetOsUpdatesStatusIdOk() (*string, bool) {
	if o == nil || IsNil(o.OsUpdatesStatusId) {
		return nil, false
	}
	return o.OsUpdatesStatusId, true
}

// HasOsUpdatesStatusId returns a boolean if a field has been set.
func (o *ManagedSoftwareUpdateStatus) HasOsUpdatesStatusId() bool {
	if o != nil && !IsNil(o.OsUpdatesStatusId) {
		return true
	}

	return false
}

// SetOsUpdatesStatusId gets a reference to the given string and assigns it to the OsUpdatesStatusId field.
func (o *ManagedSoftwareUpdateStatus) SetOsUpdatesStatusId(v string) {
	o.OsUpdatesStatusId = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *ManagedSoftwareUpdateStatus) GetDevice() ManagedSoftwareUpdateStatusDevice {
	if o == nil || IsNil(o.Device) {
		var ret ManagedSoftwareUpdateStatusDevice
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedSoftwareUpdateStatus) GetDeviceOk() (*ManagedSoftwareUpdateStatusDevice, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *ManagedSoftwareUpdateStatus) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given ManagedSoftwareUpdateStatusDevice and assigns it to the Device field.
func (o *ManagedSoftwareUpdateStatus) SetDevice(v ManagedSoftwareUpdateStatusDevice) {
	o.Device = &v
}

// GetDownloadPercentComplete returns the DownloadPercentComplete field value if set, zero value otherwise.
func (o *ManagedSoftwareUpdateStatus) GetDownloadPercentComplete() float32 {
	if o == nil || IsNil(o.DownloadPercentComplete) {
		var ret float32
		return ret
	}
	return *o.DownloadPercentComplete
}

// GetDownloadPercentCompleteOk returns a tuple with the DownloadPercentComplete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedSoftwareUpdateStatus) GetDownloadPercentCompleteOk() (*float32, bool) {
	if o == nil || IsNil(o.DownloadPercentComplete) {
		return nil, false
	}
	return o.DownloadPercentComplete, true
}

// HasDownloadPercentComplete returns a boolean if a field has been set.
func (o *ManagedSoftwareUpdateStatus) HasDownloadPercentComplete() bool {
	if o != nil && !IsNil(o.DownloadPercentComplete) {
		return true
	}

	return false
}

// SetDownloadPercentComplete gets a reference to the given float32 and assigns it to the DownloadPercentComplete field.
func (o *ManagedSoftwareUpdateStatus) SetDownloadPercentComplete(v float32) {
	o.DownloadPercentComplete = &v
}

// GetDownloaded returns the Downloaded field value if set, zero value otherwise.
func (o *ManagedSoftwareUpdateStatus) GetDownloaded() bool {
	if o == nil || IsNil(o.Downloaded) {
		var ret bool
		return ret
	}
	return *o.Downloaded
}

// GetDownloadedOk returns a tuple with the Downloaded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedSoftwareUpdateStatus) GetDownloadedOk() (*bool, bool) {
	if o == nil || IsNil(o.Downloaded) {
		return nil, false
	}
	return o.Downloaded, true
}

// HasDownloaded returns a boolean if a field has been set.
func (o *ManagedSoftwareUpdateStatus) HasDownloaded() bool {
	if o != nil && !IsNil(o.Downloaded) {
		return true
	}

	return false
}

// SetDownloaded gets a reference to the given bool and assigns it to the Downloaded field.
func (o *ManagedSoftwareUpdateStatus) SetDownloaded(v bool) {
	o.Downloaded = &v
}

// GetProductKey returns the ProductKey field value if set, zero value otherwise.
func (o *ManagedSoftwareUpdateStatus) GetProductKey() string {
	if o == nil || IsNil(o.ProductKey) {
		var ret string
		return ret
	}
	return *o.ProductKey
}

// GetProductKeyOk returns a tuple with the ProductKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedSoftwareUpdateStatus) GetProductKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ProductKey) {
		return nil, false
	}
	return o.ProductKey, true
}

// HasProductKey returns a boolean if a field has been set.
func (o *ManagedSoftwareUpdateStatus) HasProductKey() bool {
	if o != nil && !IsNil(o.ProductKey) {
		return true
	}

	return false
}

// SetProductKey gets a reference to the given string and assigns it to the ProductKey field.
func (o *ManagedSoftwareUpdateStatus) SetProductKey(v string) {
	o.ProductKey = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ManagedSoftwareUpdateStatus) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedSoftwareUpdateStatus) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ManagedSoftwareUpdateStatus) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ManagedSoftwareUpdateStatus) SetStatus(v string) {
	o.Status = &v
}

// GetDeferralsRemaining returns the DeferralsRemaining field value if set, zero value otherwise.
func (o *ManagedSoftwareUpdateStatus) GetDeferralsRemaining() int64 {
	if o == nil || IsNil(o.DeferralsRemaining) {
		var ret int64
		return ret
	}
	return *o.DeferralsRemaining
}

// GetDeferralsRemainingOk returns a tuple with the DeferralsRemaining field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedSoftwareUpdateStatus) GetDeferralsRemainingOk() (*int64, bool) {
	if o == nil || IsNil(o.DeferralsRemaining) {
		return nil, false
	}
	return o.DeferralsRemaining, true
}

// HasDeferralsRemaining returns a boolean if a field has been set.
func (o *ManagedSoftwareUpdateStatus) HasDeferralsRemaining() bool {
	if o != nil && !IsNil(o.DeferralsRemaining) {
		return true
	}

	return false
}

// SetDeferralsRemaining gets a reference to the given int64 and assigns it to the DeferralsRemaining field.
func (o *ManagedSoftwareUpdateStatus) SetDeferralsRemaining(v int64) {
	o.DeferralsRemaining = &v
}

// GetMaxDeferrals returns the MaxDeferrals field value if set, zero value otherwise.
func (o *ManagedSoftwareUpdateStatus) GetMaxDeferrals() int64 {
	if o == nil || IsNil(o.MaxDeferrals) {
		var ret int64
		return ret
	}
	return *o.MaxDeferrals
}

// GetMaxDeferralsOk returns a tuple with the MaxDeferrals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedSoftwareUpdateStatus) GetMaxDeferralsOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxDeferrals) {
		return nil, false
	}
	return o.MaxDeferrals, true
}

// HasMaxDeferrals returns a boolean if a field has been set.
func (o *ManagedSoftwareUpdateStatus) HasMaxDeferrals() bool {
	if o != nil && !IsNil(o.MaxDeferrals) {
		return true
	}

	return false
}

// SetMaxDeferrals gets a reference to the given int64 and assigns it to the MaxDeferrals field.
func (o *ManagedSoftwareUpdateStatus) SetMaxDeferrals(v int64) {
	o.MaxDeferrals = &v
}

// GetNextScheduledInstall returns the NextScheduledInstall field value if set, zero value otherwise.
func (o *ManagedSoftwareUpdateStatus) GetNextScheduledInstall() time.Time {
	if o == nil || IsNil(o.NextScheduledInstall) {
		var ret time.Time
		return ret
	}
	return *o.NextScheduledInstall
}

// GetNextScheduledInstallOk returns a tuple with the NextScheduledInstall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedSoftwareUpdateStatus) GetNextScheduledInstallOk() (*time.Time, bool) {
	if o == nil || IsNil(o.NextScheduledInstall) {
		return nil, false
	}
	return o.NextScheduledInstall, true
}

// HasNextScheduledInstall returns a boolean if a field has been set.
func (o *ManagedSoftwareUpdateStatus) HasNextScheduledInstall() bool {
	if o != nil && !IsNil(o.NextScheduledInstall) {
		return true
	}

	return false
}

// SetNextScheduledInstall gets a reference to the given time.Time and assigns it to the NextScheduledInstall field.
func (o *ManagedSoftwareUpdateStatus) SetNextScheduledInstall(v time.Time) {
	o.NextScheduledInstall = &v
}

// GetPastNotifications returns the PastNotifications field value if set, zero value otherwise.
func (o *ManagedSoftwareUpdateStatus) GetPastNotifications() []time.Time {
	if o == nil || IsNil(o.PastNotifications) {
		var ret []time.Time
		return ret
	}
	return o.PastNotifications
}

// GetPastNotificationsOk returns a tuple with the PastNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedSoftwareUpdateStatus) GetPastNotificationsOk() ([]time.Time, bool) {
	if o == nil || IsNil(o.PastNotifications) {
		return nil, false
	}
	return o.PastNotifications, true
}

// HasPastNotifications returns a boolean if a field has been set.
func (o *ManagedSoftwareUpdateStatus) HasPastNotifications() bool {
	if o != nil && !IsNil(o.PastNotifications) {
		return true
	}

	return false
}

// SetPastNotifications gets a reference to the given []time.Time and assigns it to the PastNotifications field.
func (o *ManagedSoftwareUpdateStatus) SetPastNotifications(v []time.Time) {
	o.PastNotifications = v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ManagedSoftwareUpdateStatus) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedSoftwareUpdateStatus) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ManagedSoftwareUpdateStatus) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *ManagedSoftwareUpdateStatus) SetCreated(v time.Time) {
	o.Created = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *ManagedSoftwareUpdateStatus) GetUpdated() time.Time {
	if o == nil || IsNil(o.Updated) {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedSoftwareUpdateStatus) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *ManagedSoftwareUpdateStatus) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *ManagedSoftwareUpdateStatus) SetUpdated(v time.Time) {
	o.Updated = &v
}

func (o ManagedSoftwareUpdateStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagedSoftwareUpdateStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OsUpdatesStatusId) {
		toSerialize["osUpdatesStatusId"] = o.OsUpdatesStatusId
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.DownloadPercentComplete) {
		toSerialize["downloadPercentComplete"] = o.DownloadPercentComplete
	}
	if !IsNil(o.Downloaded) {
		toSerialize["downloaded"] = o.Downloaded
	}
	if !IsNil(o.ProductKey) {
		toSerialize["productKey"] = o.ProductKey
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.DeferralsRemaining) {
		toSerialize["deferralsRemaining"] = o.DeferralsRemaining
	}
	if !IsNil(o.MaxDeferrals) {
		toSerialize["maxDeferrals"] = o.MaxDeferrals
	}
	if !IsNil(o.NextScheduledInstall) {
		toSerialize["nextScheduledInstall"] = o.NextScheduledInstall
	}
	if !IsNil(o.PastNotifications) {
		toSerialize["pastNotifications"] = o.PastNotifications
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	return toSerialize, nil
}

type NullableManagedSoftwareUpdateStatus struct {
	value *ManagedSoftwareUpdateStatus
	isSet bool
}

func (v NullableManagedSoftwareUpdateStatus) Get() *ManagedSoftwareUpdateStatus {
	return v.value
}

func (v *NullableManagedSoftwareUpdateStatus) Set(val *ManagedSoftwareUpdateStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedSoftwareUpdateStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedSoftwareUpdateStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedSoftwareUpdateStatus(val *ManagedSoftwareUpdateStatus) *NullableManagedSoftwareUpdateStatus {
	return &NullableManagedSoftwareUpdateStatus{value: val, isSet: true}
}

func (v NullableManagedSoftwareUpdateStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedSoftwareUpdateStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


