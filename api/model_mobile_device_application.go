/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the MobileDeviceApplication type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MobileDeviceApplication{}

// MobileDeviceApplication struct for MobileDeviceApplication
type MobileDeviceApplication struct {
	Identifier *string `json:"identifier,omitempty"`
	Name *string `json:"name,omitempty"`
	Version *string `json:"version,omitempty"`
	ShortVersion *string `json:"shortVersion,omitempty"`
}

// NewMobileDeviceApplication instantiates a new MobileDeviceApplication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMobileDeviceApplication() *MobileDeviceApplication {
	this := MobileDeviceApplication{}
	return &this
}

// NewMobileDeviceApplicationWithDefaults instantiates a new MobileDeviceApplication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMobileDeviceApplicationWithDefaults() *MobileDeviceApplication {
	this := MobileDeviceApplication{}
	return &this
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *MobileDeviceApplication) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDeviceApplication) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *MobileDeviceApplication) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *MobileDeviceApplication) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MobileDeviceApplication) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDeviceApplication) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MobileDeviceApplication) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MobileDeviceApplication) SetName(v string) {
	o.Name = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *MobileDeviceApplication) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDeviceApplication) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *MobileDeviceApplication) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *MobileDeviceApplication) SetVersion(v string) {
	o.Version = &v
}

// GetShortVersion returns the ShortVersion field value if set, zero value otherwise.
func (o *MobileDeviceApplication) GetShortVersion() string {
	if o == nil || IsNil(o.ShortVersion) {
		var ret string
		return ret
	}
	return *o.ShortVersion
}

// GetShortVersionOk returns a tuple with the ShortVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDeviceApplication) GetShortVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ShortVersion) {
		return nil, false
	}
	return o.ShortVersion, true
}

// HasShortVersion returns a boolean if a field has been set.
func (o *MobileDeviceApplication) HasShortVersion() bool {
	if o != nil && !IsNil(o.ShortVersion) {
		return true
	}

	return false
}

// SetShortVersion gets a reference to the given string and assigns it to the ShortVersion field.
func (o *MobileDeviceApplication) SetShortVersion(v string) {
	o.ShortVersion = &v
}

func (o MobileDeviceApplication) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MobileDeviceApplication) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.ShortVersion) {
		toSerialize["shortVersion"] = o.ShortVersion
	}
	return toSerialize, nil
}

type NullableMobileDeviceApplication struct {
	value *MobileDeviceApplication
	isSet bool
}

func (v NullableMobileDeviceApplication) Get() *MobileDeviceApplication {
	return v.value
}

func (v *NullableMobileDeviceApplication) Set(val *MobileDeviceApplication) {
	v.value = val
	v.isSet = true
}

func (v NullableMobileDeviceApplication) IsSet() bool {
	return v.isSet
}

func (v *NullableMobileDeviceApplication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMobileDeviceApplication(val *MobileDeviceApplication) *NullableMobileDeviceApplication {
	return &NullableMobileDeviceApplication{value: val, isSet: true}
}

func (v NullableMobileDeviceApplication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMobileDeviceApplication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


