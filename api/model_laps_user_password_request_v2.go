/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the LapsUserPasswordRequestV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LapsUserPasswordRequestV2{}

// LapsUserPasswordRequestV2 struct for LapsUserPasswordRequestV2
type LapsUserPasswordRequestV2 struct {
	LapsUserPasswordList []LapsUserPasswordV2 `json:"lapsUserPasswordList,omitempty"`
}

// NewLapsUserPasswordRequestV2 instantiates a new LapsUserPasswordRequestV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLapsUserPasswordRequestV2() *LapsUserPasswordRequestV2 {
	this := LapsUserPasswordRequestV2{}
	return &this
}

// NewLapsUserPasswordRequestV2WithDefaults instantiates a new LapsUserPasswordRequestV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLapsUserPasswordRequestV2WithDefaults() *LapsUserPasswordRequestV2 {
	this := LapsUserPasswordRequestV2{}
	return &this
}

// GetLapsUserPasswordList returns the LapsUserPasswordList field value if set, zero value otherwise.
func (o *LapsUserPasswordRequestV2) GetLapsUserPasswordList() []LapsUserPasswordV2 {
	if o == nil || IsNil(o.LapsUserPasswordList) {
		var ret []LapsUserPasswordV2
		return ret
	}
	return o.LapsUserPasswordList
}

// GetLapsUserPasswordListOk returns a tuple with the LapsUserPasswordList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LapsUserPasswordRequestV2) GetLapsUserPasswordListOk() ([]LapsUserPasswordV2, bool) {
	if o == nil || IsNil(o.LapsUserPasswordList) {
		return nil, false
	}
	return o.LapsUserPasswordList, true
}

// HasLapsUserPasswordList returns a boolean if a field has been set.
func (o *LapsUserPasswordRequestV2) HasLapsUserPasswordList() bool {
	if o != nil && !IsNil(o.LapsUserPasswordList) {
		return true
	}

	return false
}

// SetLapsUserPasswordList gets a reference to the given []LapsUserPasswordV2 and assigns it to the LapsUserPasswordList field.
func (o *LapsUserPasswordRequestV2) SetLapsUserPasswordList(v []LapsUserPasswordV2) {
	o.LapsUserPasswordList = v
}

func (o LapsUserPasswordRequestV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LapsUserPasswordRequestV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LapsUserPasswordList) {
		toSerialize["lapsUserPasswordList"] = o.LapsUserPasswordList
	}
	return toSerialize, nil
}

type NullableLapsUserPasswordRequestV2 struct {
	value *LapsUserPasswordRequestV2
	isSet bool
}

func (v NullableLapsUserPasswordRequestV2) Get() *LapsUserPasswordRequestV2 {
	return v.value
}

func (v *NullableLapsUserPasswordRequestV2) Set(val *LapsUserPasswordRequestV2) {
	v.value = val
	v.isSet = true
}

func (v NullableLapsUserPasswordRequestV2) IsSet() bool {
	return v.isSet
}

func (v *NullableLapsUserPasswordRequestV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLapsUserPasswordRequestV2(val *LapsUserPasswordRequestV2) *NullableLapsUserPasswordRequestV2 {
	return &NullableLapsUserPasswordRequestV2{value: val, isSet: true}
}

func (v NullableLapsUserPasswordRequestV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLapsUserPasswordRequestV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


