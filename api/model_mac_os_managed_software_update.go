/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// MacOsManagedSoftwareUpdate struct for MacOsManagedSoftwareUpdate
type MacOsManagedSoftwareUpdate struct {
	DeviceIds []string `json:"deviceIds"`
	// Allow users to defer the update the provided number of times before macOS forces the update. If a value is provided, the Software Update will use the InstallLater install action.
	MaxDeferrals *int32 `json:"maxDeferrals,omitempty"`
	// If no value is provided, the version will default to latest version based on device eligibility.
	Version *string `json:"version,omitempty"`
	// MaxDeferral is ignored if using the DownloadOnly install action.
	UpdateAction *string `json:"updateAction,omitempty"`
}

// NewMacOsManagedSoftwareUpdate instantiates a new MacOsManagedSoftwareUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMacOsManagedSoftwareUpdate(deviceIds []string) *MacOsManagedSoftwareUpdate {
	this := MacOsManagedSoftwareUpdate{}
	this.DeviceIds = deviceIds
	return &this
}

// NewMacOsManagedSoftwareUpdateWithDefaults instantiates a new MacOsManagedSoftwareUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMacOsManagedSoftwareUpdateWithDefaults() *MacOsManagedSoftwareUpdate {
	this := MacOsManagedSoftwareUpdate{}
	return &this
}

// GetDeviceIds returns the DeviceIds field value
func (o *MacOsManagedSoftwareUpdate) GetDeviceIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DeviceIds
}

// GetDeviceIdsOk returns a tuple with the DeviceIds field value
// and a boolean to check if the value has been set.
func (o *MacOsManagedSoftwareUpdate) GetDeviceIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeviceIds, true
}

// SetDeviceIds sets field value
func (o *MacOsManagedSoftwareUpdate) SetDeviceIds(v []string) {
	o.DeviceIds = v
}

// GetMaxDeferrals returns the MaxDeferrals field value if set, zero value otherwise.
func (o *MacOsManagedSoftwareUpdate) GetMaxDeferrals() int32 {
	if o == nil || o.MaxDeferrals == nil {
		var ret int32
		return ret
	}
	return *o.MaxDeferrals
}

// GetMaxDeferralsOk returns a tuple with the MaxDeferrals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MacOsManagedSoftwareUpdate) GetMaxDeferralsOk() (*int32, bool) {
	if o == nil || o.MaxDeferrals == nil {
		return nil, false
	}
	return o.MaxDeferrals, true
}

// HasMaxDeferrals returns a boolean if a field has been set.
func (o *MacOsManagedSoftwareUpdate) HasMaxDeferrals() bool {
	if o != nil && o.MaxDeferrals != nil {
		return true
	}

	return false
}

// SetMaxDeferrals gets a reference to the given int32 and assigns it to the MaxDeferrals field.
func (o *MacOsManagedSoftwareUpdate) SetMaxDeferrals(v int32) {
	o.MaxDeferrals = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *MacOsManagedSoftwareUpdate) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MacOsManagedSoftwareUpdate) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *MacOsManagedSoftwareUpdate) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *MacOsManagedSoftwareUpdate) SetVersion(v string) {
	o.Version = &v
}

// GetUpdateAction returns the UpdateAction field value if set, zero value otherwise.
func (o *MacOsManagedSoftwareUpdate) GetUpdateAction() string {
	if o == nil || o.UpdateAction == nil {
		var ret string
		return ret
	}
	return *o.UpdateAction
}

// GetUpdateActionOk returns a tuple with the UpdateAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MacOsManagedSoftwareUpdate) GetUpdateActionOk() (*string, bool) {
	if o == nil || o.UpdateAction == nil {
		return nil, false
	}
	return o.UpdateAction, true
}

// HasUpdateAction returns a boolean if a field has been set.
func (o *MacOsManagedSoftwareUpdate) HasUpdateAction() bool {
	if o != nil && o.UpdateAction != nil {
		return true
	}

	return false
}

// SetUpdateAction gets a reference to the given string and assigns it to the UpdateAction field.
func (o *MacOsManagedSoftwareUpdate) SetUpdateAction(v string) {
	o.UpdateAction = &v
}

func (o MacOsManagedSoftwareUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["deviceIds"] = o.DeviceIds
	}
	if o.MaxDeferrals != nil {
		toSerialize["maxDeferrals"] = o.MaxDeferrals
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.UpdateAction != nil {
		toSerialize["updateAction"] = o.UpdateAction
	}
	return json.Marshal(toSerialize)
}

type NullableMacOsManagedSoftwareUpdate struct {
	value *MacOsManagedSoftwareUpdate
	isSet bool
}

func (v NullableMacOsManagedSoftwareUpdate) Get() *MacOsManagedSoftwareUpdate {
	return v.value
}

func (v *NullableMacOsManagedSoftwareUpdate) Set(val *MacOsManagedSoftwareUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableMacOsManagedSoftwareUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableMacOsManagedSoftwareUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMacOsManagedSoftwareUpdate(val *MacOsManagedSoftwareUpdate) *NullableMacOsManagedSoftwareUpdate {
	return &NullableMacOsManagedSoftwareUpdate{value: val, isSet: true}
}

func (v NullableMacOsManagedSoftwareUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMacOsManagedSoftwareUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


