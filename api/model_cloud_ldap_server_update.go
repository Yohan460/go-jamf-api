/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// CloudLdapServerUpdate A Cloud Identity Provider LDAP server configuration for updates
type CloudLdapServerUpdate struct {
	ServerUrl string `json:"serverUrl"`
	Enabled bool `json:"enabled"`
	DomainName string `json:"domainName"`
	Port int32 `json:"port"`
	Keystore *CloudLdapKeystoreFile `json:"keystore,omitempty"`
	ConnectionTimeout int32 `json:"connectionTimeout"`
	SearchTimeout int32 `json:"searchTimeout"`
	UseWildcards bool `json:"useWildcards"`
	ConnectionType string `json:"connectionType"`
}

// NewCloudLdapServerUpdate instantiates a new CloudLdapServerUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudLdapServerUpdate(serverUrl string, enabled bool, domainName string, port int32, connectionTimeout int32, searchTimeout int32, useWildcards bool, connectionType string) *CloudLdapServerUpdate {
	this := CloudLdapServerUpdate{}
	this.ServerUrl = serverUrl
	this.Enabled = enabled
	this.DomainName = domainName
	this.Port = port
	this.ConnectionTimeout = connectionTimeout
	this.SearchTimeout = searchTimeout
	this.UseWildcards = useWildcards
	this.ConnectionType = connectionType
	return &this
}

// NewCloudLdapServerUpdateWithDefaults instantiates a new CloudLdapServerUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudLdapServerUpdateWithDefaults() *CloudLdapServerUpdate {
	this := CloudLdapServerUpdate{}
	return &this
}

// GetServerUrl returns the ServerUrl field value
func (o *CloudLdapServerUpdate) GetServerUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerUrl
}

// GetServerUrlOk returns a tuple with the ServerUrl field value
// and a boolean to check if the value has been set.
func (o *CloudLdapServerUpdate) GetServerUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerUrl, true
}

// SetServerUrl sets field value
func (o *CloudLdapServerUpdate) SetServerUrl(v string) {
	o.ServerUrl = v
}

// GetEnabled returns the Enabled field value
func (o *CloudLdapServerUpdate) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *CloudLdapServerUpdate) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *CloudLdapServerUpdate) SetEnabled(v bool) {
	o.Enabled = v
}

// GetDomainName returns the DomainName field value
func (o *CloudLdapServerUpdate) GetDomainName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DomainName
}

// GetDomainNameOk returns a tuple with the DomainName field value
// and a boolean to check if the value has been set.
func (o *CloudLdapServerUpdate) GetDomainNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DomainName, true
}

// SetDomainName sets field value
func (o *CloudLdapServerUpdate) SetDomainName(v string) {
	o.DomainName = v
}

// GetPort returns the Port field value
func (o *CloudLdapServerUpdate) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *CloudLdapServerUpdate) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *CloudLdapServerUpdate) SetPort(v int32) {
	o.Port = v
}

// GetKeystore returns the Keystore field value if set, zero value otherwise.
func (o *CloudLdapServerUpdate) GetKeystore() CloudLdapKeystoreFile {
	if o == nil || o.Keystore == nil {
		var ret CloudLdapKeystoreFile
		return ret
	}
	return *o.Keystore
}

// GetKeystoreOk returns a tuple with the Keystore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudLdapServerUpdate) GetKeystoreOk() (*CloudLdapKeystoreFile, bool) {
	if o == nil || o.Keystore == nil {
		return nil, false
	}
	return o.Keystore, true
}

// HasKeystore returns a boolean if a field has been set.
func (o *CloudLdapServerUpdate) HasKeystore() bool {
	if o != nil && o.Keystore != nil {
		return true
	}

	return false
}

// SetKeystore gets a reference to the given CloudLdapKeystoreFile and assigns it to the Keystore field.
func (o *CloudLdapServerUpdate) SetKeystore(v CloudLdapKeystoreFile) {
	o.Keystore = &v
}

// GetConnectionTimeout returns the ConnectionTimeout field value
func (o *CloudLdapServerUpdate) GetConnectionTimeout() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ConnectionTimeout
}

// GetConnectionTimeoutOk returns a tuple with the ConnectionTimeout field value
// and a boolean to check if the value has been set.
func (o *CloudLdapServerUpdate) GetConnectionTimeoutOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionTimeout, true
}

// SetConnectionTimeout sets field value
func (o *CloudLdapServerUpdate) SetConnectionTimeout(v int32) {
	o.ConnectionTimeout = v
}

// GetSearchTimeout returns the SearchTimeout field value
func (o *CloudLdapServerUpdate) GetSearchTimeout() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SearchTimeout
}

// GetSearchTimeoutOk returns a tuple with the SearchTimeout field value
// and a boolean to check if the value has been set.
func (o *CloudLdapServerUpdate) GetSearchTimeoutOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SearchTimeout, true
}

// SetSearchTimeout sets field value
func (o *CloudLdapServerUpdate) SetSearchTimeout(v int32) {
	o.SearchTimeout = v
}

// GetUseWildcards returns the UseWildcards field value
func (o *CloudLdapServerUpdate) GetUseWildcards() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UseWildcards
}

// GetUseWildcardsOk returns a tuple with the UseWildcards field value
// and a boolean to check if the value has been set.
func (o *CloudLdapServerUpdate) GetUseWildcardsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseWildcards, true
}

// SetUseWildcards sets field value
func (o *CloudLdapServerUpdate) SetUseWildcards(v bool) {
	o.UseWildcards = v
}

// GetConnectionType returns the ConnectionType field value
func (o *CloudLdapServerUpdate) GetConnectionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionType
}

// GetConnectionTypeOk returns a tuple with the ConnectionType field value
// and a boolean to check if the value has been set.
func (o *CloudLdapServerUpdate) GetConnectionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionType, true
}

// SetConnectionType sets field value
func (o *CloudLdapServerUpdate) SetConnectionType(v string) {
	o.ConnectionType = v
}

func (o CloudLdapServerUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["serverUrl"] = o.ServerUrl
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if true {
		toSerialize["domainName"] = o.DomainName
	}
	if true {
		toSerialize["port"] = o.Port
	}
	if o.Keystore != nil {
		toSerialize["keystore"] = o.Keystore
	}
	if true {
		toSerialize["connectionTimeout"] = o.ConnectionTimeout
	}
	if true {
		toSerialize["searchTimeout"] = o.SearchTimeout
	}
	if true {
		toSerialize["useWildcards"] = o.UseWildcards
	}
	if true {
		toSerialize["connectionType"] = o.ConnectionType
	}
	return json.Marshal(toSerialize)
}

type NullableCloudLdapServerUpdate struct {
	value *CloudLdapServerUpdate
	isSet bool
}

func (v NullableCloudLdapServerUpdate) Get() *CloudLdapServerUpdate {
	return v.value
}

func (v *NullableCloudLdapServerUpdate) Set(val *CloudLdapServerUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudLdapServerUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudLdapServerUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudLdapServerUpdate(val *CloudLdapServerUpdate) *NullableCloudLdapServerUpdate {
	return &NullableCloudLdapServerUpdate{value: val, isSet: true}
}

func (v NullableCloudLdapServerUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudLdapServerUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


