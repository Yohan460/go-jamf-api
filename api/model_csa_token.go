/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the CsaToken type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CsaToken{}

// CsaToken struct for CsaToken
type CsaToken struct {
	// The tenant ID
	TenantId NullableString `json:"tenantId,omitempty"`
	// Salesforce CRM account ID
	Subject *string `json:"subject,omitempty"`
	RefreshExpiration *int64 `json:"refreshExpiration,omitempty"`
	Scopes []string `json:"scopes,omitempty"`
}

// NewCsaToken instantiates a new CsaToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCsaToken() *CsaToken {
	this := CsaToken{}
	return &this
}

// NewCsaTokenWithDefaults instantiates a new CsaToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCsaTokenWithDefaults() *CsaToken {
	this := CsaToken{}
	return &this
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CsaToken) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CsaToken) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *CsaToken) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *CsaToken) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *CsaToken) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *CsaToken) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *CsaToken) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CsaToken) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *CsaToken) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *CsaToken) SetSubject(v string) {
	o.Subject = &v
}

// GetRefreshExpiration returns the RefreshExpiration field value if set, zero value otherwise.
func (o *CsaToken) GetRefreshExpiration() int64 {
	if o == nil || IsNil(o.RefreshExpiration) {
		var ret int64
		return ret
	}
	return *o.RefreshExpiration
}

// GetRefreshExpirationOk returns a tuple with the RefreshExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CsaToken) GetRefreshExpirationOk() (*int64, bool) {
	if o == nil || IsNil(o.RefreshExpiration) {
		return nil, false
	}
	return o.RefreshExpiration, true
}

// HasRefreshExpiration returns a boolean if a field has been set.
func (o *CsaToken) HasRefreshExpiration() bool {
	if o != nil && !IsNil(o.RefreshExpiration) {
		return true
	}

	return false
}

// SetRefreshExpiration gets a reference to the given int64 and assigns it to the RefreshExpiration field.
func (o *CsaToken) SetRefreshExpiration(v int64) {
	o.RefreshExpiration = &v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *CsaToken) GetScopes() []string {
	if o == nil || IsNil(o.Scopes) {
		var ret []string
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CsaToken) GetScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *CsaToken) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *CsaToken) SetScopes(v []string) {
	o.Scopes = v
}

func (o CsaToken) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CsaToken) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.RefreshExpiration) {
		toSerialize["refreshExpiration"] = o.RefreshExpiration
	}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	return toSerialize, nil
}

type NullableCsaToken struct {
	value *CsaToken
	isSet bool
}

func (v NullableCsaToken) Get() *CsaToken {
	return v.value
}

func (v *NullableCsaToken) Set(val *CsaToken) {
	v.value = val
	v.isSet = true
}

func (v NullableCsaToken) IsSet() bool {
	return v.isSet
}

func (v *NullableCsaToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCsaToken(val *CsaToken) *NullableCsaToken {
	return &NullableCsaToken{value: val, isSet: true}
}

func (v NullableCsaToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCsaToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


