/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// DeploymentTask struct for DeploymentTask
type DeploymentTask struct {
	Id *string `json:"id,omitempty"`
	ComputerId *string `json:"computerId,omitempty"`
	ComputerName *string `json:"computerName,omitempty"`
	Version *string `json:"version,omitempty"`
	Updated *time.Time `json:"updated,omitempty"`
	// Status of this Jamf Connect deployment task. \"Command\" below refers to an `InstallEnterpriseApplication` command. Tasks that are not finished (i.e., `COMPLETE` or `GAVE_UP`) are evaluated once every thirty minutes, so the status value for a device may lag behind a successful Jamf Connect package install up to thirty minutes. * `COMMAND_QUEUED` - command has been queued * `NO_COMMAND` - command has not yet been queued * `PENDING_MANIFEST` - task is waiting to obtain a valid package manifest before a command can be queued * `COMPLETE` - command has been completed successfully * `GAVE_UP` - the command failed with an error or the device did not process it in a reasonable amount of time * `UNKNOWN` - unknown; tasks in this state will be evaluated 
	Status *string `json:"status,omitempty"`
}

// NewDeploymentTask instantiates a new DeploymentTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentTask() *DeploymentTask {
	this := DeploymentTask{}
	return &this
}

// NewDeploymentTaskWithDefaults instantiates a new DeploymentTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentTaskWithDefaults() *DeploymentTask {
	this := DeploymentTask{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DeploymentTask) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentTask) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DeploymentTask) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DeploymentTask) SetId(v string) {
	o.Id = &v
}

// GetComputerId returns the ComputerId field value if set, zero value otherwise.
func (o *DeploymentTask) GetComputerId() string {
	if o == nil || o.ComputerId == nil {
		var ret string
		return ret
	}
	return *o.ComputerId
}

// GetComputerIdOk returns a tuple with the ComputerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentTask) GetComputerIdOk() (*string, bool) {
	if o == nil || o.ComputerId == nil {
		return nil, false
	}
	return o.ComputerId, true
}

// HasComputerId returns a boolean if a field has been set.
func (o *DeploymentTask) HasComputerId() bool {
	if o != nil && o.ComputerId != nil {
		return true
	}

	return false
}

// SetComputerId gets a reference to the given string and assigns it to the ComputerId field.
func (o *DeploymentTask) SetComputerId(v string) {
	o.ComputerId = &v
}

// GetComputerName returns the ComputerName field value if set, zero value otherwise.
func (o *DeploymentTask) GetComputerName() string {
	if o == nil || o.ComputerName == nil {
		var ret string
		return ret
	}
	return *o.ComputerName
}

// GetComputerNameOk returns a tuple with the ComputerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentTask) GetComputerNameOk() (*string, bool) {
	if o == nil || o.ComputerName == nil {
		return nil, false
	}
	return o.ComputerName, true
}

// HasComputerName returns a boolean if a field has been set.
func (o *DeploymentTask) HasComputerName() bool {
	if o != nil && o.ComputerName != nil {
		return true
	}

	return false
}

// SetComputerName gets a reference to the given string and assigns it to the ComputerName field.
func (o *DeploymentTask) SetComputerName(v string) {
	o.ComputerName = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *DeploymentTask) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentTask) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *DeploymentTask) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *DeploymentTask) SetVersion(v string) {
	o.Version = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *DeploymentTask) GetUpdated() time.Time {
	if o == nil || o.Updated == nil {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentTask) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || o.Updated == nil {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *DeploymentTask) HasUpdated() bool {
	if o != nil && o.Updated != nil {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *DeploymentTask) SetUpdated(v time.Time) {
	o.Updated = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DeploymentTask) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentTask) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DeploymentTask) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DeploymentTask) SetStatus(v string) {
	o.Status = &v
}

func (o DeploymentTask) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ComputerId != nil {
		toSerialize["computerId"] = o.ComputerId
	}
	if o.ComputerName != nil {
		toSerialize["computerName"] = o.ComputerName
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.Updated != nil {
		toSerialize["updated"] = o.Updated
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableDeploymentTask struct {
	value *DeploymentTask
	isSet bool
}

func (v NullableDeploymentTask) Get() *DeploymentTask {
	return v.value
}

func (v *NullableDeploymentTask) Set(val *DeploymentTask) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentTask) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentTask(val *DeploymentTask) *NullableDeploymentTask {
	return &NullableDeploymentTask{value: val, isSet: true}
}

func (v NullableDeploymentTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


