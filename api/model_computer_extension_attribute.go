/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ComputerExtensionAttribute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComputerExtensionAttribute{}

// ComputerExtensionAttribute struct for ComputerExtensionAttribute
type ComputerExtensionAttribute struct {
	// An identifier of extension attribute definition.
	DefinitionId *string `json:"definitionId,omitempty"`
	// A human-readable name by which attribute can be referred to.
	Name *string `json:"name,omitempty"`
	// An additional explanation of exact attribute meaning, possible values, etc.
	Description NullableString `json:"description,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	MultiValue *bool `json:"multiValue,omitempty"`
	// A value of extension attribute, in some rare cases there may be multiple values present, hence the array. 
	Values []string `json:"values,omitempty"`
	// A data type of extension attribute.
	DataType NullableString `json:"dataType,omitempty"`
	// A closed list of possible values (applies to `popup` input type). 
	Options []string `json:"options,omitempty"`
	// The input method. `text` is most common and means simply free text, `popup` i a closed list of values from which one or many can be selected and `script` value is calculated and can never be set directly. 
	InputType NullableString `json:"inputType,omitempty"`
}

// NewComputerExtensionAttribute instantiates a new ComputerExtensionAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputerExtensionAttribute() *ComputerExtensionAttribute {
	this := ComputerExtensionAttribute{}
	return &this
}

// NewComputerExtensionAttributeWithDefaults instantiates a new ComputerExtensionAttribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputerExtensionAttributeWithDefaults() *ComputerExtensionAttribute {
	this := ComputerExtensionAttribute{}
	return &this
}

// GetDefinitionId returns the DefinitionId field value if set, zero value otherwise.
func (o *ComputerExtensionAttribute) GetDefinitionId() string {
	if o == nil || IsNil(o.DefinitionId) {
		var ret string
		return ret
	}
	return *o.DefinitionId
}

// GetDefinitionIdOk returns a tuple with the DefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerExtensionAttribute) GetDefinitionIdOk() (*string, bool) {
	if o == nil || IsNil(o.DefinitionId) {
		return nil, false
	}
	return o.DefinitionId, true
}

// HasDefinitionId returns a boolean if a field has been set.
func (o *ComputerExtensionAttribute) HasDefinitionId() bool {
	if o != nil && !IsNil(o.DefinitionId) {
		return true
	}

	return false
}

// SetDefinitionId gets a reference to the given string and assigns it to the DefinitionId field.
func (o *ComputerExtensionAttribute) SetDefinitionId(v string) {
	o.DefinitionId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ComputerExtensionAttribute) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerExtensionAttribute) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ComputerExtensionAttribute) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ComputerExtensionAttribute) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputerExtensionAttribute) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputerExtensionAttribute) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ComputerExtensionAttribute) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ComputerExtensionAttribute) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ComputerExtensionAttribute) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ComputerExtensionAttribute) UnsetDescription() {
	o.Description.Unset()
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ComputerExtensionAttribute) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerExtensionAttribute) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ComputerExtensionAttribute) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ComputerExtensionAttribute) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetMultiValue returns the MultiValue field value if set, zero value otherwise.
func (o *ComputerExtensionAttribute) GetMultiValue() bool {
	if o == nil || IsNil(o.MultiValue) {
		var ret bool
		return ret
	}
	return *o.MultiValue
}

// GetMultiValueOk returns a tuple with the MultiValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerExtensionAttribute) GetMultiValueOk() (*bool, bool) {
	if o == nil || IsNil(o.MultiValue) {
		return nil, false
	}
	return o.MultiValue, true
}

// HasMultiValue returns a boolean if a field has been set.
func (o *ComputerExtensionAttribute) HasMultiValue() bool {
	if o != nil && !IsNil(o.MultiValue) {
		return true
	}

	return false
}

// SetMultiValue gets a reference to the given bool and assigns it to the MultiValue field.
func (o *ComputerExtensionAttribute) SetMultiValue(v bool) {
	o.MultiValue = &v
}

// GetValues returns the Values field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputerExtensionAttribute) GetValues() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputerExtensionAttribute) GetValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *ComputerExtensionAttribute) HasValues() bool {
	if o != nil && IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *ComputerExtensionAttribute) SetValues(v []string) {
	o.Values = v
}

// GetDataType returns the DataType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputerExtensionAttribute) GetDataType() string {
	if o == nil || IsNil(o.DataType.Get()) {
		var ret string
		return ret
	}
	return *o.DataType.Get()
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputerExtensionAttribute) GetDataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataType.Get(), o.DataType.IsSet()
}

// HasDataType returns a boolean if a field has been set.
func (o *ComputerExtensionAttribute) HasDataType() bool {
	if o != nil && o.DataType.IsSet() {
		return true
	}

	return false
}

// SetDataType gets a reference to the given NullableString and assigns it to the DataType field.
func (o *ComputerExtensionAttribute) SetDataType(v string) {
	o.DataType.Set(&v)
}
// SetDataTypeNil sets the value for DataType to be an explicit nil
func (o *ComputerExtensionAttribute) SetDataTypeNil() {
	o.DataType.Set(nil)
}

// UnsetDataType ensures that no value is present for DataType, not even an explicit nil
func (o *ComputerExtensionAttribute) UnsetDataType() {
	o.DataType.Unset()
}

// GetOptions returns the Options field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputerExtensionAttribute) GetOptions() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputerExtensionAttribute) GetOptionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *ComputerExtensionAttribute) HasOptions() bool {
	if o != nil && IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []string and assigns it to the Options field.
func (o *ComputerExtensionAttribute) SetOptions(v []string) {
	o.Options = v
}

// GetInputType returns the InputType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputerExtensionAttribute) GetInputType() string {
	if o == nil || IsNil(o.InputType.Get()) {
		var ret string
		return ret
	}
	return *o.InputType.Get()
}

// GetInputTypeOk returns a tuple with the InputType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputerExtensionAttribute) GetInputTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InputType.Get(), o.InputType.IsSet()
}

// HasInputType returns a boolean if a field has been set.
func (o *ComputerExtensionAttribute) HasInputType() bool {
	if o != nil && o.InputType.IsSet() {
		return true
	}

	return false
}

// SetInputType gets a reference to the given NullableString and assigns it to the InputType field.
func (o *ComputerExtensionAttribute) SetInputType(v string) {
	o.InputType.Set(&v)
}
// SetInputTypeNil sets the value for InputType to be an explicit nil
func (o *ComputerExtensionAttribute) SetInputTypeNil() {
	o.InputType.Set(nil)
}

// UnsetInputType ensures that no value is present for InputType, not even an explicit nil
func (o *ComputerExtensionAttribute) UnsetInputType() {
	o.InputType.Unset()
}

func (o ComputerExtensionAttribute) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComputerExtensionAttribute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefinitionId) {
		toSerialize["definitionId"] = o.DefinitionId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.MultiValue) {
		toSerialize["multiValue"] = o.MultiValue
	}
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	if o.DataType.IsSet() {
		toSerialize["dataType"] = o.DataType.Get()
	}
	if o.Options != nil {
		toSerialize["options"] = o.Options
	}
	if o.InputType.IsSet() {
		toSerialize["inputType"] = o.InputType.Get()
	}
	return toSerialize, nil
}

type NullableComputerExtensionAttribute struct {
	value *ComputerExtensionAttribute
	isSet bool
}

func (v NullableComputerExtensionAttribute) Get() *ComputerExtensionAttribute {
	return v.value
}

func (v *NullableComputerExtensionAttribute) Set(val *ComputerExtensionAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableComputerExtensionAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableComputerExtensionAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputerExtensionAttribute(val *ComputerExtensionAttribute) *NullableComputerExtensionAttribute {
	return &NullableComputerExtensionAttribute{value: val, isSet: true}
}

func (v NullableComputerExtensionAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputerExtensionAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


