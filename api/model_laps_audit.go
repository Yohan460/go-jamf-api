/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// checks if the LapsAudit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LapsAudit{}

// LapsAudit struct for LapsAudit
type LapsAudit struct {
	ViewedBy NullableString `json:"viewedBy,omitempty"`
	DateSeen NullableTime `json:"dateSeen,omitempty"`
}

// NewLapsAudit instantiates a new LapsAudit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLapsAudit() *LapsAudit {
	this := LapsAudit{}
	return &this
}

// NewLapsAuditWithDefaults instantiates a new LapsAudit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLapsAuditWithDefaults() *LapsAudit {
	this := LapsAudit{}
	return &this
}

// GetViewedBy returns the ViewedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LapsAudit) GetViewedBy() string {
	if o == nil || IsNil(o.ViewedBy.Get()) {
		var ret string
		return ret
	}
	return *o.ViewedBy.Get()
}

// GetViewedByOk returns a tuple with the ViewedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LapsAudit) GetViewedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ViewedBy.Get(), o.ViewedBy.IsSet()
}

// HasViewedBy returns a boolean if a field has been set.
func (o *LapsAudit) HasViewedBy() bool {
	if o != nil && o.ViewedBy.IsSet() {
		return true
	}

	return false
}

// SetViewedBy gets a reference to the given NullableString and assigns it to the ViewedBy field.
func (o *LapsAudit) SetViewedBy(v string) {
	o.ViewedBy.Set(&v)
}
// SetViewedByNil sets the value for ViewedBy to be an explicit nil
func (o *LapsAudit) SetViewedByNil() {
	o.ViewedBy.Set(nil)
}

// UnsetViewedBy ensures that no value is present for ViewedBy, not even an explicit nil
func (o *LapsAudit) UnsetViewedBy() {
	o.ViewedBy.Unset()
}

// GetDateSeen returns the DateSeen field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LapsAudit) GetDateSeen() time.Time {
	if o == nil || IsNil(o.DateSeen.Get()) {
		var ret time.Time
		return ret
	}
	return *o.DateSeen.Get()
}

// GetDateSeenOk returns a tuple with the DateSeen field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LapsAudit) GetDateSeenOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.DateSeen.Get(), o.DateSeen.IsSet()
}

// HasDateSeen returns a boolean if a field has been set.
func (o *LapsAudit) HasDateSeen() bool {
	if o != nil && o.DateSeen.IsSet() {
		return true
	}

	return false
}

// SetDateSeen gets a reference to the given NullableTime and assigns it to the DateSeen field.
func (o *LapsAudit) SetDateSeen(v time.Time) {
	o.DateSeen.Set(&v)
}
// SetDateSeenNil sets the value for DateSeen to be an explicit nil
func (o *LapsAudit) SetDateSeenNil() {
	o.DateSeen.Set(nil)
}

// UnsetDateSeen ensures that no value is present for DateSeen, not even an explicit nil
func (o *LapsAudit) UnsetDateSeen() {
	o.DateSeen.Unset()
}

func (o LapsAudit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LapsAudit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ViewedBy.IsSet() {
		toSerialize["viewedBy"] = o.ViewedBy.Get()
	}
	if o.DateSeen.IsSet() {
		toSerialize["dateSeen"] = o.DateSeen.Get()
	}
	return toSerialize, nil
}

type NullableLapsAudit struct {
	value *LapsAudit
	isSet bool
}

func (v NullableLapsAudit) Get() *LapsAudit {
	return v.value
}

func (v *NullableLapsAudit) Set(val *LapsAudit) {
	v.value = val
	v.isSet = true
}

func (v NullableLapsAudit) IsSet() bool {
	return v.isSet
}

func (v *NullableLapsAudit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLapsAudit(val *LapsAudit) *NullableLapsAudit {
	return &NullableLapsAudit{value: val, isSet: true}
}

func (v NullableLapsAudit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLapsAudit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


