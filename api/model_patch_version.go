/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// PatchVersion struct for PatchVersion
type PatchVersion struct {
	AbsoluteOrderId *int32 `json:"absoluteOrderId,omitempty"`
	Version *string `json:"version,omitempty"`
	OnVersion *int32 `json:"onVersion,omitempty"`
}

// NewPatchVersion instantiates a new PatchVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchVersion() *PatchVersion {
	this := PatchVersion{}
	return &this
}

// NewPatchVersionWithDefaults instantiates a new PatchVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchVersionWithDefaults() *PatchVersion {
	this := PatchVersion{}
	return &this
}

// GetAbsoluteOrderId returns the AbsoluteOrderId field value if set, zero value otherwise.
func (o *PatchVersion) GetAbsoluteOrderId() int32 {
	if o == nil || o.AbsoluteOrderId == nil {
		var ret int32
		return ret
	}
	return *o.AbsoluteOrderId
}

// GetAbsoluteOrderIdOk returns a tuple with the AbsoluteOrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchVersion) GetAbsoluteOrderIdOk() (*int32, bool) {
	if o == nil || o.AbsoluteOrderId == nil {
		return nil, false
	}
	return o.AbsoluteOrderId, true
}

// HasAbsoluteOrderId returns a boolean if a field has been set.
func (o *PatchVersion) HasAbsoluteOrderId() bool {
	if o != nil && o.AbsoluteOrderId != nil {
		return true
	}

	return false
}

// SetAbsoluteOrderId gets a reference to the given int32 and assigns it to the AbsoluteOrderId field.
func (o *PatchVersion) SetAbsoluteOrderId(v int32) {
	o.AbsoluteOrderId = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *PatchVersion) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchVersion) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *PatchVersion) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *PatchVersion) SetVersion(v string) {
	o.Version = &v
}

// GetOnVersion returns the OnVersion field value if set, zero value otherwise.
func (o *PatchVersion) GetOnVersion() int32 {
	if o == nil || o.OnVersion == nil {
		var ret int32
		return ret
	}
	return *o.OnVersion
}

// GetOnVersionOk returns a tuple with the OnVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchVersion) GetOnVersionOk() (*int32, bool) {
	if o == nil || o.OnVersion == nil {
		return nil, false
	}
	return o.OnVersion, true
}

// HasOnVersion returns a boolean if a field has been set.
func (o *PatchVersion) HasOnVersion() bool {
	if o != nil && o.OnVersion != nil {
		return true
	}

	return false
}

// SetOnVersion gets a reference to the given int32 and assigns it to the OnVersion field.
func (o *PatchVersion) SetOnVersion(v int32) {
	o.OnVersion = &v
}

func (o PatchVersion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AbsoluteOrderId != nil {
		toSerialize["absoluteOrderId"] = o.AbsoluteOrderId
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.OnVersion != nil {
		toSerialize["onVersion"] = o.OnVersion
	}
	return json.Marshal(toSerialize)
}

type NullablePatchVersion struct {
	value *PatchVersion
	isSet bool
}

func (v NullablePatchVersion) Get() *PatchVersion {
	return v.value
}

func (v *NullablePatchVersion) Set(val *PatchVersion) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchVersion) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchVersion(val *PatchVersion) *NullablePatchVersion {
	return &NullablePatchVersion{value: val, isSet: true}
}

func (v NullablePatchVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


