/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type PoliciesPreviewAPI interface {

	/*
	SettingsObjPolicyPropertiesGet Get Policy Properties object 

	Gets `Policy Properties` object.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return PoliciesPreviewAPISettingsObjPolicyPropertiesGetRequest

	Deprecated
	*/
	SettingsObjPolicyPropertiesGet(ctx context.Context) PoliciesPreviewAPISettingsObjPolicyPropertiesGetRequest

	// SettingsObjPolicyPropertiesGetExecute executes the request
	//  @return PolicyProperties
	// Deprecated
	SettingsObjPolicyPropertiesGetExecute(r PoliciesPreviewAPISettingsObjPolicyPropertiesGetRequest) (*PolicyProperties, *http.Response, error)

	/*
	SettingsObjPolicyPropertiesPut Update Policy Properties object 

	Update Policy Properties object


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return PoliciesPreviewAPISettingsObjPolicyPropertiesPutRequest

	Deprecated
	*/
	SettingsObjPolicyPropertiesPut(ctx context.Context) PoliciesPreviewAPISettingsObjPolicyPropertiesPutRequest

	// SettingsObjPolicyPropertiesPutExecute executes the request
	//  @return PolicyProperties
	// Deprecated
	SettingsObjPolicyPropertiesPutExecute(r PoliciesPreviewAPISettingsObjPolicyPropertiesPutRequest) (*PolicyProperties, *http.Response, error)

	/*
	V1PolicyPropertiesGet Get Policy Properties object 

	Gets `Policy Properties` object.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return PoliciesPreviewAPIV1PolicyPropertiesGetRequest
	*/
	V1PolicyPropertiesGet(ctx context.Context) PoliciesPreviewAPIV1PolicyPropertiesGetRequest

	// V1PolicyPropertiesGetExecute executes the request
	//  @return PolicyPropertiesV1
	V1PolicyPropertiesGetExecute(r PoliciesPreviewAPIV1PolicyPropertiesGetRequest) (*PolicyPropertiesV1, *http.Response, error)

	/*
	V1PolicyPropertiesPut Update Policy Properties object 

	Update Policy Properties object


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return PoliciesPreviewAPIV1PolicyPropertiesPutRequest
	*/
	V1PolicyPropertiesPut(ctx context.Context) PoliciesPreviewAPIV1PolicyPropertiesPutRequest

	// V1PolicyPropertiesPutExecute executes the request
	//  @return PolicyPropertiesV1
	V1PolicyPropertiesPutExecute(r PoliciesPreviewAPIV1PolicyPropertiesPutRequest) (*PolicyPropertiesV1, *http.Response, error)
}

// PoliciesPreviewAPIService PoliciesPreviewAPI service
type PoliciesPreviewAPIService service

type PoliciesPreviewAPISettingsObjPolicyPropertiesGetRequest struct {
	ctx context.Context
	ApiService PoliciesPreviewAPI
}

func (r PoliciesPreviewAPISettingsObjPolicyPropertiesGetRequest) Execute() (*PolicyProperties, *http.Response, error) {
	return r.ApiService.SettingsObjPolicyPropertiesGetExecute(r)
}

/*
SettingsObjPolicyPropertiesGet Get Policy Properties object 

Gets `Policy Properties` object.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PoliciesPreviewAPISettingsObjPolicyPropertiesGetRequest

Deprecated
*/
func (a *PoliciesPreviewAPIService) SettingsObjPolicyPropertiesGet(ctx context.Context) PoliciesPreviewAPISettingsObjPolicyPropertiesGetRequest {
	return PoliciesPreviewAPISettingsObjPolicyPropertiesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PolicyProperties
// Deprecated
func (a *PoliciesPreviewAPIService) SettingsObjPolicyPropertiesGetExecute(r PoliciesPreviewAPISettingsObjPolicyPropertiesGetRequest) (*PolicyProperties, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PolicyProperties
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoliciesPreviewAPIService.SettingsObjPolicyPropertiesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/settings/obj/policyProperties"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PoliciesPreviewAPISettingsObjPolicyPropertiesPutRequest struct {
	ctx context.Context
	ApiService PoliciesPreviewAPI
	policyProperties *PolicyProperties
}

// Policy Properties object to update
func (r PoliciesPreviewAPISettingsObjPolicyPropertiesPutRequest) PolicyProperties(policyProperties PolicyProperties) PoliciesPreviewAPISettingsObjPolicyPropertiesPutRequest {
	r.policyProperties = &policyProperties
	return r
}

func (r PoliciesPreviewAPISettingsObjPolicyPropertiesPutRequest) Execute() (*PolicyProperties, *http.Response, error) {
	return r.ApiService.SettingsObjPolicyPropertiesPutExecute(r)
}

/*
SettingsObjPolicyPropertiesPut Update Policy Properties object 

Update Policy Properties object


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PoliciesPreviewAPISettingsObjPolicyPropertiesPutRequest

Deprecated
*/
func (a *PoliciesPreviewAPIService) SettingsObjPolicyPropertiesPut(ctx context.Context) PoliciesPreviewAPISettingsObjPolicyPropertiesPutRequest {
	return PoliciesPreviewAPISettingsObjPolicyPropertiesPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PolicyProperties
// Deprecated
func (a *PoliciesPreviewAPIService) SettingsObjPolicyPropertiesPutExecute(r PoliciesPreviewAPISettingsObjPolicyPropertiesPutRequest) (*PolicyProperties, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PolicyProperties
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoliciesPreviewAPIService.SettingsObjPolicyPropertiesPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/settings/obj/policyProperties"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.policyProperties == nil {
		return localVarReturnValue, nil, reportError("policyProperties is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.policyProperties
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PoliciesPreviewAPIV1PolicyPropertiesGetRequest struct {
	ctx context.Context
	ApiService PoliciesPreviewAPI
}

func (r PoliciesPreviewAPIV1PolicyPropertiesGetRequest) Execute() (*PolicyPropertiesV1, *http.Response, error) {
	return r.ApiService.V1PolicyPropertiesGetExecute(r)
}

/*
V1PolicyPropertiesGet Get Policy Properties object 

Gets `Policy Properties` object.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PoliciesPreviewAPIV1PolicyPropertiesGetRequest
*/
func (a *PoliciesPreviewAPIService) V1PolicyPropertiesGet(ctx context.Context) PoliciesPreviewAPIV1PolicyPropertiesGetRequest {
	return PoliciesPreviewAPIV1PolicyPropertiesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PolicyPropertiesV1
func (a *PoliciesPreviewAPIService) V1PolicyPropertiesGetExecute(r PoliciesPreviewAPIV1PolicyPropertiesGetRequest) (*PolicyPropertiesV1, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PolicyPropertiesV1
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoliciesPreviewAPIService.V1PolicyPropertiesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/policy-properties"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PoliciesPreviewAPIV1PolicyPropertiesPutRequest struct {
	ctx context.Context
	ApiService PoliciesPreviewAPI
	policyPropertiesV1 *PolicyPropertiesV1
}

// Policy Properties object to update
func (r PoliciesPreviewAPIV1PolicyPropertiesPutRequest) PolicyPropertiesV1(policyPropertiesV1 PolicyPropertiesV1) PoliciesPreviewAPIV1PolicyPropertiesPutRequest {
	r.policyPropertiesV1 = &policyPropertiesV1
	return r
}

func (r PoliciesPreviewAPIV1PolicyPropertiesPutRequest) Execute() (*PolicyPropertiesV1, *http.Response, error) {
	return r.ApiService.V1PolicyPropertiesPutExecute(r)
}

/*
V1PolicyPropertiesPut Update Policy Properties object 

Update Policy Properties object


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PoliciesPreviewAPIV1PolicyPropertiesPutRequest
*/
func (a *PoliciesPreviewAPIService) V1PolicyPropertiesPut(ctx context.Context) PoliciesPreviewAPIV1PolicyPropertiesPutRequest {
	return PoliciesPreviewAPIV1PolicyPropertiesPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PolicyPropertiesV1
func (a *PoliciesPreviewAPIService) V1PolicyPropertiesPutExecute(r PoliciesPreviewAPIV1PolicyPropertiesPutRequest) (*PolicyPropertiesV1, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PolicyPropertiesV1
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoliciesPreviewAPIService.V1PolicyPropertiesPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/policy-properties"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.policyPropertiesV1 == nil {
		return localVarReturnValue, nil, reportError("policyPropertiesV1 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.policyPropertiesV1
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
