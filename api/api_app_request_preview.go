/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type AppRequestPreviewAPI interface {

	/*
	V1AppRequestFormInputFieldsGet Search for Form Input Fields 

	Search for form input fields

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return AppRequestPreviewAPIV1AppRequestFormInputFieldsGetRequest
	*/
	V1AppRequestFormInputFieldsGet(ctx context.Context) AppRequestPreviewAPIV1AppRequestFormInputFieldsGetRequest

	// V1AppRequestFormInputFieldsGetExecute executes the request
	//  @return AppRequestFormInputFieldSearchResults
	V1AppRequestFormInputFieldsGetExecute(r AppRequestPreviewAPIV1AppRequestFormInputFieldsGetRequest) (*AppRequestFormInputFieldSearchResults, *http.Response, error)

	/*
	V1AppRequestFormInputFieldsIdDelete Remove specified Form Input Field record 

	Removes specified form input field record


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Instance id of form input field record
	@return AppRequestPreviewAPIV1AppRequestFormInputFieldsIdDeleteRequest
	*/
	V1AppRequestFormInputFieldsIdDelete(ctx context.Context, id int64) AppRequestPreviewAPIV1AppRequestFormInputFieldsIdDeleteRequest

	// V1AppRequestFormInputFieldsIdDeleteExecute executes the request
	V1AppRequestFormInputFieldsIdDeleteExecute(r AppRequestPreviewAPIV1AppRequestFormInputFieldsIdDeleteRequest) (*http.Response, error)

	/*
	V1AppRequestFormInputFieldsIdGet Get specified Form Input Field object 

	Gets specified form input field object


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Instance id of form input field record
	@return AppRequestPreviewAPIV1AppRequestFormInputFieldsIdGetRequest
	*/
	V1AppRequestFormInputFieldsIdGet(ctx context.Context, id int64) AppRequestPreviewAPIV1AppRequestFormInputFieldsIdGetRequest

	// V1AppRequestFormInputFieldsIdGetExecute executes the request
	//  @return AppRequestFormInputField
	V1AppRequestFormInputFieldsIdGetExecute(r AppRequestPreviewAPIV1AppRequestFormInputFieldsIdGetRequest) (*AppRequestFormInputField, *http.Response, error)

	/*
	V1AppRequestFormInputFieldsIdPut Update specified Form Input Field object 

	Update specified form input field object


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Instance id of form input field record
	@return AppRequestPreviewAPIV1AppRequestFormInputFieldsIdPutRequest
	*/
	V1AppRequestFormInputFieldsIdPut(ctx context.Context, id int64) AppRequestPreviewAPIV1AppRequestFormInputFieldsIdPutRequest

	// V1AppRequestFormInputFieldsIdPutExecute executes the request
	//  @return AppRequestFormInputField
	V1AppRequestFormInputFieldsIdPutExecute(r AppRequestPreviewAPIV1AppRequestFormInputFieldsIdPutRequest) (*AppRequestFormInputField, *http.Response, error)

	/*
	V1AppRequestFormInputFieldsPost Create Form Input Field record 

	Create form input field record


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return AppRequestPreviewAPIV1AppRequestFormInputFieldsPostRequest
	*/
	V1AppRequestFormInputFieldsPost(ctx context.Context) AppRequestPreviewAPIV1AppRequestFormInputFieldsPostRequest

	// V1AppRequestFormInputFieldsPostExecute executes the request
	//  @return AppRequestFormInputField
	V1AppRequestFormInputFieldsPostExecute(r AppRequestPreviewAPIV1AppRequestFormInputFieldsPostRequest) (*AppRequestFormInputField, *http.Response, error)

	/*
	V1AppRequestFormInputFieldsPut Replace all Form Input Fields 

	Replace all form input fields. Will delete, update, and create all input fields accordingly.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return AppRequestPreviewAPIV1AppRequestFormInputFieldsPutRequest
	*/
	V1AppRequestFormInputFieldsPut(ctx context.Context) AppRequestPreviewAPIV1AppRequestFormInputFieldsPutRequest

	// V1AppRequestFormInputFieldsPutExecute executes the request
	//  @return []AppRequestFormInputField
	V1AppRequestFormInputFieldsPutExecute(r AppRequestPreviewAPIV1AppRequestFormInputFieldsPutRequest) ([]AppRequestFormInputField, *http.Response, error)

	/*
	V1AppRequestSettingsGet Get Applicastion Request Settings 

	Get app request settings


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return AppRequestPreviewAPIV1AppRequestSettingsGetRequest
	*/
	V1AppRequestSettingsGet(ctx context.Context) AppRequestPreviewAPIV1AppRequestSettingsGetRequest

	// V1AppRequestSettingsGetExecute executes the request
	//  @return AppRequestSettings
	V1AppRequestSettingsGetExecute(r AppRequestPreviewAPIV1AppRequestSettingsGetRequest) (*AppRequestSettings, *http.Response, error)

	/*
	V1AppRequestSettingsPut Update Application Request Settings 

	Update app request settings


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return AppRequestPreviewAPIV1AppRequestSettingsPutRequest
	*/
	V1AppRequestSettingsPut(ctx context.Context) AppRequestPreviewAPIV1AppRequestSettingsPutRequest

	// V1AppRequestSettingsPutExecute executes the request
	//  @return AppRequestSettings
	V1AppRequestSettingsPutExecute(r AppRequestPreviewAPIV1AppRequestSettingsPutRequest) (*AppRequestSettings, *http.Response, error)
}

// AppRequestPreviewAPIService AppRequestPreviewAPI service
type AppRequestPreviewAPIService service

type AppRequestPreviewAPIV1AppRequestFormInputFieldsGetRequest struct {
	ctx context.Context
	ApiService AppRequestPreviewAPI
}

func (r AppRequestPreviewAPIV1AppRequestFormInputFieldsGetRequest) Execute() (*AppRequestFormInputFieldSearchResults, *http.Response, error) {
	return r.ApiService.V1AppRequestFormInputFieldsGetExecute(r)
}

/*
V1AppRequestFormInputFieldsGet Search for Form Input Fields 

Search for form input fields

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AppRequestPreviewAPIV1AppRequestFormInputFieldsGetRequest
*/
func (a *AppRequestPreviewAPIService) V1AppRequestFormInputFieldsGet(ctx context.Context) AppRequestPreviewAPIV1AppRequestFormInputFieldsGetRequest {
	return AppRequestPreviewAPIV1AppRequestFormInputFieldsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AppRequestFormInputFieldSearchResults
func (a *AppRequestPreviewAPIService) V1AppRequestFormInputFieldsGetExecute(r AppRequestPreviewAPIV1AppRequestFormInputFieldsGetRequest) (*AppRequestFormInputFieldSearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppRequestFormInputFieldSearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppRequestPreviewAPIService.V1AppRequestFormInputFieldsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/app-request/form-input-fields"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppRequestPreviewAPIV1AppRequestFormInputFieldsIdDeleteRequest struct {
	ctx context.Context
	ApiService AppRequestPreviewAPI
	id int64
}

func (r AppRequestPreviewAPIV1AppRequestFormInputFieldsIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1AppRequestFormInputFieldsIdDeleteExecute(r)
}

/*
V1AppRequestFormInputFieldsIdDelete Remove specified Form Input Field record 

Removes specified form input field record


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Instance id of form input field record
 @return AppRequestPreviewAPIV1AppRequestFormInputFieldsIdDeleteRequest
*/
func (a *AppRequestPreviewAPIService) V1AppRequestFormInputFieldsIdDelete(ctx context.Context, id int64) AppRequestPreviewAPIV1AppRequestFormInputFieldsIdDeleteRequest {
	return AppRequestPreviewAPIV1AppRequestFormInputFieldsIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AppRequestPreviewAPIService) V1AppRequestFormInputFieldsIdDeleteExecute(r AppRequestPreviewAPIV1AppRequestFormInputFieldsIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppRequestPreviewAPIService.V1AppRequestFormInputFieldsIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/app-request/form-input-fields/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AppRequestPreviewAPIV1AppRequestFormInputFieldsIdGetRequest struct {
	ctx context.Context
	ApiService AppRequestPreviewAPI
	id int64
}

func (r AppRequestPreviewAPIV1AppRequestFormInputFieldsIdGetRequest) Execute() (*AppRequestFormInputField, *http.Response, error) {
	return r.ApiService.V1AppRequestFormInputFieldsIdGetExecute(r)
}

/*
V1AppRequestFormInputFieldsIdGet Get specified Form Input Field object 

Gets specified form input field object


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Instance id of form input field record
 @return AppRequestPreviewAPIV1AppRequestFormInputFieldsIdGetRequest
*/
func (a *AppRequestPreviewAPIService) V1AppRequestFormInputFieldsIdGet(ctx context.Context, id int64) AppRequestPreviewAPIV1AppRequestFormInputFieldsIdGetRequest {
	return AppRequestPreviewAPIV1AppRequestFormInputFieldsIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppRequestFormInputField
func (a *AppRequestPreviewAPIService) V1AppRequestFormInputFieldsIdGetExecute(r AppRequestPreviewAPIV1AppRequestFormInputFieldsIdGetRequest) (*AppRequestFormInputField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppRequestFormInputField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppRequestPreviewAPIService.V1AppRequestFormInputFieldsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/app-request/form-input-fields/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppRequestPreviewAPIV1AppRequestFormInputFieldsIdPutRequest struct {
	ctx context.Context
	ApiService AppRequestPreviewAPI
	id int64
	appRequestFormInputField *AppRequestFormInputField
}

// form input field object to create. ids defined in this body will be ignored
func (r AppRequestPreviewAPIV1AppRequestFormInputFieldsIdPutRequest) AppRequestFormInputField(appRequestFormInputField AppRequestFormInputField) AppRequestPreviewAPIV1AppRequestFormInputFieldsIdPutRequest {
	r.appRequestFormInputField = &appRequestFormInputField
	return r
}

func (r AppRequestPreviewAPIV1AppRequestFormInputFieldsIdPutRequest) Execute() (*AppRequestFormInputField, *http.Response, error) {
	return r.ApiService.V1AppRequestFormInputFieldsIdPutExecute(r)
}

/*
V1AppRequestFormInputFieldsIdPut Update specified Form Input Field object 

Update specified form input field object


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Instance id of form input field record
 @return AppRequestPreviewAPIV1AppRequestFormInputFieldsIdPutRequest
*/
func (a *AppRequestPreviewAPIService) V1AppRequestFormInputFieldsIdPut(ctx context.Context, id int64) AppRequestPreviewAPIV1AppRequestFormInputFieldsIdPutRequest {
	return AppRequestPreviewAPIV1AppRequestFormInputFieldsIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppRequestFormInputField
func (a *AppRequestPreviewAPIService) V1AppRequestFormInputFieldsIdPutExecute(r AppRequestPreviewAPIV1AppRequestFormInputFieldsIdPutRequest) (*AppRequestFormInputField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppRequestFormInputField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppRequestPreviewAPIService.V1AppRequestFormInputFieldsIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/app-request/form-input-fields/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appRequestFormInputField == nil {
		return localVarReturnValue, nil, reportError("appRequestFormInputField is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appRequestFormInputField
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppRequestPreviewAPIV1AppRequestFormInputFieldsPostRequest struct {
	ctx context.Context
	ApiService AppRequestPreviewAPI
	appRequestFormInputField *AppRequestFormInputField
}

// form input field object to create. ids defined in this body will be ignored
func (r AppRequestPreviewAPIV1AppRequestFormInputFieldsPostRequest) AppRequestFormInputField(appRequestFormInputField AppRequestFormInputField) AppRequestPreviewAPIV1AppRequestFormInputFieldsPostRequest {
	r.appRequestFormInputField = &appRequestFormInputField
	return r
}

func (r AppRequestPreviewAPIV1AppRequestFormInputFieldsPostRequest) Execute() (*AppRequestFormInputField, *http.Response, error) {
	return r.ApiService.V1AppRequestFormInputFieldsPostExecute(r)
}

/*
V1AppRequestFormInputFieldsPost Create Form Input Field record 

Create form input field record


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AppRequestPreviewAPIV1AppRequestFormInputFieldsPostRequest
*/
func (a *AppRequestPreviewAPIService) V1AppRequestFormInputFieldsPost(ctx context.Context) AppRequestPreviewAPIV1AppRequestFormInputFieldsPostRequest {
	return AppRequestPreviewAPIV1AppRequestFormInputFieldsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AppRequestFormInputField
func (a *AppRequestPreviewAPIService) V1AppRequestFormInputFieldsPostExecute(r AppRequestPreviewAPIV1AppRequestFormInputFieldsPostRequest) (*AppRequestFormInputField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppRequestFormInputField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppRequestPreviewAPIService.V1AppRequestFormInputFieldsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/app-request/form-input-fields"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appRequestFormInputField == nil {
		return localVarReturnValue, nil, reportError("appRequestFormInputField is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appRequestFormInputField
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppRequestPreviewAPIV1AppRequestFormInputFieldsPutRequest struct {
	ctx context.Context
	ApiService AppRequestPreviewAPI
	appRequestFormInputField *[]AppRequestFormInputField
}

// list of form input fields to replace all existing fields. Will delete, update, and create all input fields accordingly.
func (r AppRequestPreviewAPIV1AppRequestFormInputFieldsPutRequest) AppRequestFormInputField(appRequestFormInputField []AppRequestFormInputField) AppRequestPreviewAPIV1AppRequestFormInputFieldsPutRequest {
	r.appRequestFormInputField = &appRequestFormInputField
	return r
}

func (r AppRequestPreviewAPIV1AppRequestFormInputFieldsPutRequest) Execute() ([]AppRequestFormInputField, *http.Response, error) {
	return r.ApiService.V1AppRequestFormInputFieldsPutExecute(r)
}

/*
V1AppRequestFormInputFieldsPut Replace all Form Input Fields 

Replace all form input fields. Will delete, update, and create all input fields accordingly.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AppRequestPreviewAPIV1AppRequestFormInputFieldsPutRequest
*/
func (a *AppRequestPreviewAPIService) V1AppRequestFormInputFieldsPut(ctx context.Context) AppRequestPreviewAPIV1AppRequestFormInputFieldsPutRequest {
	return AppRequestPreviewAPIV1AppRequestFormInputFieldsPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []AppRequestFormInputField
func (a *AppRequestPreviewAPIService) V1AppRequestFormInputFieldsPutExecute(r AppRequestPreviewAPIV1AppRequestFormInputFieldsPutRequest) ([]AppRequestFormInputField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AppRequestFormInputField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppRequestPreviewAPIService.V1AppRequestFormInputFieldsPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/app-request/form-input-fields"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appRequestFormInputField == nil {
		return localVarReturnValue, nil, reportError("appRequestFormInputField is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appRequestFormInputField
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppRequestPreviewAPIV1AppRequestSettingsGetRequest struct {
	ctx context.Context
	ApiService AppRequestPreviewAPI
}

func (r AppRequestPreviewAPIV1AppRequestSettingsGetRequest) Execute() (*AppRequestSettings, *http.Response, error) {
	return r.ApiService.V1AppRequestSettingsGetExecute(r)
}

/*
V1AppRequestSettingsGet Get Applicastion Request Settings 

Get app request settings


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AppRequestPreviewAPIV1AppRequestSettingsGetRequest
*/
func (a *AppRequestPreviewAPIService) V1AppRequestSettingsGet(ctx context.Context) AppRequestPreviewAPIV1AppRequestSettingsGetRequest {
	return AppRequestPreviewAPIV1AppRequestSettingsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AppRequestSettings
func (a *AppRequestPreviewAPIService) V1AppRequestSettingsGetExecute(r AppRequestPreviewAPIV1AppRequestSettingsGetRequest) (*AppRequestSettings, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppRequestSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppRequestPreviewAPIService.V1AppRequestSettingsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/app-request/settings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppRequestPreviewAPIV1AppRequestSettingsPutRequest struct {
	ctx context.Context
	ApiService AppRequestPreviewAPI
	appRequestSettings *AppRequestSettings
}

// App request settings object
func (r AppRequestPreviewAPIV1AppRequestSettingsPutRequest) AppRequestSettings(appRequestSettings AppRequestSettings) AppRequestPreviewAPIV1AppRequestSettingsPutRequest {
	r.appRequestSettings = &appRequestSettings
	return r
}

func (r AppRequestPreviewAPIV1AppRequestSettingsPutRequest) Execute() (*AppRequestSettings, *http.Response, error) {
	return r.ApiService.V1AppRequestSettingsPutExecute(r)
}

/*
V1AppRequestSettingsPut Update Application Request Settings 

Update app request settings


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AppRequestPreviewAPIV1AppRequestSettingsPutRequest
*/
func (a *AppRequestPreviewAPIService) V1AppRequestSettingsPut(ctx context.Context) AppRequestPreviewAPIV1AppRequestSettingsPutRequest {
	return AppRequestPreviewAPIV1AppRequestSettingsPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AppRequestSettings
func (a *AppRequestPreviewAPIService) V1AppRequestSettingsPutExecute(r AppRequestPreviewAPIV1AppRequestSettingsPutRequest) (*AppRequestSettings, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppRequestSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppRequestPreviewAPIService.V1AppRequestSettingsPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/app-request/settings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appRequestSettings == nil {
		return localVarReturnValue, nil, reportError("appRequestSettings is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appRequestSettings
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
