/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


type EnrollmentCustomizationPreviewApi interface {

	/*
	V1EnrollmentCustomizationIdAllGet Get all Panels for single Enrollment Customization 

	Get all panels for single enrollment customization

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Enrollment Customization identifier
	@return ApiV1EnrollmentCustomizationIdAllGetRequest
	*/
	V1EnrollmentCustomizationIdAllGet(ctx context.Context, id int32) ApiV1EnrollmentCustomizationIdAllGetRequest

	// V1EnrollmentCustomizationIdAllGetExecute executes the request
	//  @return EnrollmentCustomizationPanelList
	V1EnrollmentCustomizationIdAllGetExecute(r ApiV1EnrollmentCustomizationIdAllGetRequest) (*EnrollmentCustomizationPanelList, *http.Response, error)

	/*
	V1EnrollmentCustomizationIdAllPanelIdDelete Delete a single Panel from an Enrollment Customization 

	Delete a single panel from an Enrollment Customization

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Enrollment Customization identifier
	@param panelId Panel object identifier
	@return ApiV1EnrollmentCustomizationIdAllPanelIdDeleteRequest
	*/
	V1EnrollmentCustomizationIdAllPanelIdDelete(ctx context.Context, id int32, panelId int32) ApiV1EnrollmentCustomizationIdAllPanelIdDeleteRequest

	// V1EnrollmentCustomizationIdAllPanelIdDeleteExecute executes the request
	V1EnrollmentCustomizationIdAllPanelIdDeleteExecute(r ApiV1EnrollmentCustomizationIdAllPanelIdDeleteRequest) (*http.Response, error)

	/*
	V1EnrollmentCustomizationIdAllPanelIdGet Get a single Panel for a single Enrollment Customization 

	Get a single panel for a single enrollment customization

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Enrollment Customization identifier
	@param panelId Panel object identifier
	@return ApiV1EnrollmentCustomizationIdAllPanelIdGetRequest
	*/
	V1EnrollmentCustomizationIdAllPanelIdGet(ctx context.Context, id int32, panelId int32) ApiV1EnrollmentCustomizationIdAllPanelIdGetRequest

	// V1EnrollmentCustomizationIdAllPanelIdGetExecute executes the request
	//  @return GetEnrollmentCustomizationPanel
	V1EnrollmentCustomizationIdAllPanelIdGetExecute(r ApiV1EnrollmentCustomizationIdAllPanelIdGetRequest) (*GetEnrollmentCustomizationPanel, *http.Response, error)

	/*
	V1EnrollmentCustomizationIdLdapPanelIdDelete Delete an LDAP single panel from an Enrollment Customization 

	Delete an LDAP single Panel from an Enrollment Customization

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Enrollment Customization identifier
	@param panelId Panel object identifier
	@return ApiV1EnrollmentCustomizationIdLdapPanelIdDeleteRequest
	*/
	V1EnrollmentCustomizationIdLdapPanelIdDelete(ctx context.Context, id int32, panelId int32) ApiV1EnrollmentCustomizationIdLdapPanelIdDeleteRequest

	// V1EnrollmentCustomizationIdLdapPanelIdDeleteExecute executes the request
	V1EnrollmentCustomizationIdLdapPanelIdDeleteExecute(r ApiV1EnrollmentCustomizationIdLdapPanelIdDeleteRequest) (*http.Response, error)

	/*
	V1EnrollmentCustomizationIdLdapPanelIdGet Get a single LDAP panel for a single Enrollment Customization 

	Get a single LDAP panel for a single enrollment customization

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Enrollment Customization identifier
	@param panelId Panel object identifier
	@return ApiV1EnrollmentCustomizationIdLdapPanelIdGetRequest
	*/
	V1EnrollmentCustomizationIdLdapPanelIdGet(ctx context.Context, id int32, panelId int32) ApiV1EnrollmentCustomizationIdLdapPanelIdGetRequest

	// V1EnrollmentCustomizationIdLdapPanelIdGetExecute executes the request
	//  @return GetEnrollmentCustomizationPanelLdapAuth
	V1EnrollmentCustomizationIdLdapPanelIdGetExecute(r ApiV1EnrollmentCustomizationIdLdapPanelIdGetRequest) (*GetEnrollmentCustomizationPanelLdapAuth, *http.Response, error)

	/*
	V1EnrollmentCustomizationIdLdapPanelIdPut Update a single LDAP Panel for a single Enrollment Customization 

	Update a single LDAP panel for a single enrollment customization. If multiple LDAP access groups are defined with the same name and id, only one will be saved.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Enrollment Customization identifier
	@param panelId Panel object identifier
	@return ApiV1EnrollmentCustomizationIdLdapPanelIdPutRequest
	*/
	V1EnrollmentCustomizationIdLdapPanelIdPut(ctx context.Context, id int32, panelId int32) ApiV1EnrollmentCustomizationIdLdapPanelIdPutRequest

	// V1EnrollmentCustomizationIdLdapPanelIdPutExecute executes the request
	//  @return GetEnrollmentCustomizationPanelLdapAuth
	V1EnrollmentCustomizationIdLdapPanelIdPutExecute(r ApiV1EnrollmentCustomizationIdLdapPanelIdPutRequest) (*GetEnrollmentCustomizationPanelLdapAuth, *http.Response, error)

	/*
	V1EnrollmentCustomizationIdLdapPost Create an LDAP Panel for a single Enrollment Customization 

	Create an LDAP panel for a single enrollment customization. If multiple LDAP access groups are defined with the same name and id, only one will be saved.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Enrollment Customization identifier
	@return ApiV1EnrollmentCustomizationIdLdapPostRequest
	*/
	V1EnrollmentCustomizationIdLdapPost(ctx context.Context, id int32) ApiV1EnrollmentCustomizationIdLdapPostRequest

	// V1EnrollmentCustomizationIdLdapPostExecute executes the request
	//  @return GetEnrollmentCustomizationPanelLdapAuth
	V1EnrollmentCustomizationIdLdapPostExecute(r ApiV1EnrollmentCustomizationIdLdapPostRequest) (*GetEnrollmentCustomizationPanelLdapAuth, *http.Response, error)

	/*
	V1EnrollmentCustomizationIdSsoPanelIdDelete Delete a single SSO Panel from an Enrollment Customization 

	Delete a single SSO panel from an Enrollment Customization

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Enrollment Customization identifier
	@param panelId Panel object identifier
	@return ApiV1EnrollmentCustomizationIdSsoPanelIdDeleteRequest
	*/
	V1EnrollmentCustomizationIdSsoPanelIdDelete(ctx context.Context, id int32, panelId int32) ApiV1EnrollmentCustomizationIdSsoPanelIdDeleteRequest

	// V1EnrollmentCustomizationIdSsoPanelIdDeleteExecute executes the request
	V1EnrollmentCustomizationIdSsoPanelIdDeleteExecute(r ApiV1EnrollmentCustomizationIdSsoPanelIdDeleteRequest) (*http.Response, error)

	/*
	V1EnrollmentCustomizationIdSsoPanelIdGet Get a single SSO Panel for a single Enrollment Customization 

	Get a single SSO panel for a single enrollment customization

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Enrollment Customization identifier
	@param panelId Panel object identifier
	@return ApiV1EnrollmentCustomizationIdSsoPanelIdGetRequest
	*/
	V1EnrollmentCustomizationIdSsoPanelIdGet(ctx context.Context, id int32, panelId int32) ApiV1EnrollmentCustomizationIdSsoPanelIdGetRequest

	// V1EnrollmentCustomizationIdSsoPanelIdGetExecute executes the request
	//  @return GetEnrollmentCustomizationPanelSsoAuth
	V1EnrollmentCustomizationIdSsoPanelIdGetExecute(r ApiV1EnrollmentCustomizationIdSsoPanelIdGetRequest) (*GetEnrollmentCustomizationPanelSsoAuth, *http.Response, error)

	/*
	V1EnrollmentCustomizationIdSsoPanelIdPut Update a single SSO Panel for a single Enrollment Customization 

	Update a single SSO panel for a single enrollment customization

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Enrollment Customization identifier
	@param panelId Panel object identifier
	@return ApiV1EnrollmentCustomizationIdSsoPanelIdPutRequest
	*/
	V1EnrollmentCustomizationIdSsoPanelIdPut(ctx context.Context, id int32, panelId int32) ApiV1EnrollmentCustomizationIdSsoPanelIdPutRequest

	// V1EnrollmentCustomizationIdSsoPanelIdPutExecute executes the request
	//  @return GetEnrollmentCustomizationPanelSsoAuth
	V1EnrollmentCustomizationIdSsoPanelIdPutExecute(r ApiV1EnrollmentCustomizationIdSsoPanelIdPutRequest) (*GetEnrollmentCustomizationPanelSsoAuth, *http.Response, error)

	/*
	V1EnrollmentCustomizationIdSsoPost Create an SSO Panel for a single Enrollment Customization 

	Create an SSO panel for a single enrollment customization

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Enrollment Customization identifier
	@return ApiV1EnrollmentCustomizationIdSsoPostRequest
	*/
	V1EnrollmentCustomizationIdSsoPost(ctx context.Context, id int32) ApiV1EnrollmentCustomizationIdSsoPostRequest

	// V1EnrollmentCustomizationIdSsoPostExecute executes the request
	//  @return GetEnrollmentCustomizationPanelSsoAuth
	V1EnrollmentCustomizationIdSsoPostExecute(r ApiV1EnrollmentCustomizationIdSsoPostRequest) (*GetEnrollmentCustomizationPanelSsoAuth, *http.Response, error)

	/*
	V1EnrollmentCustomizationIdTextPanelIdDelete Delete a Text single Panel from an Enrollment Customization 

	Delete a Text single panel from an Enrollment Customization

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Enrollment Customization identifier
	@param panelId Panel object identifier
	@return ApiV1EnrollmentCustomizationIdTextPanelIdDeleteRequest
	*/
	V1EnrollmentCustomizationIdTextPanelIdDelete(ctx context.Context, id int32, panelId int32) ApiV1EnrollmentCustomizationIdTextPanelIdDeleteRequest

	// V1EnrollmentCustomizationIdTextPanelIdDeleteExecute executes the request
	V1EnrollmentCustomizationIdTextPanelIdDeleteExecute(r ApiV1EnrollmentCustomizationIdTextPanelIdDeleteRequest) (*http.Response, error)

	/*
	V1EnrollmentCustomizationIdTextPanelIdGet Get a single Text Panel for a single Enrollment Customization 

	Get a single Text panel for a single enrollment customization

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Enrollment Customization identifier
	@param panelId Panel object identifier
	@return ApiV1EnrollmentCustomizationIdTextPanelIdGetRequest
	*/
	V1EnrollmentCustomizationIdTextPanelIdGet(ctx context.Context, id int32, panelId int32) ApiV1EnrollmentCustomizationIdTextPanelIdGetRequest

	// V1EnrollmentCustomizationIdTextPanelIdGetExecute executes the request
	//  @return GetEnrollmentCustomizationPanelText
	V1EnrollmentCustomizationIdTextPanelIdGetExecute(r ApiV1EnrollmentCustomizationIdTextPanelIdGetRequest) (*GetEnrollmentCustomizationPanelText, *http.Response, error)

	/*
	V1EnrollmentCustomizationIdTextPanelIdMarkdownGet Get the markdown output of a single Text Panel for a single Enrollment 

	Get the markdown output of a single Text panel for a single enrollment customization

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Enrollment Customization identifier
	@param panelId Panel object identifier
	@return ApiV1EnrollmentCustomizationIdTextPanelIdMarkdownGetRequest
	*/
	V1EnrollmentCustomizationIdTextPanelIdMarkdownGet(ctx context.Context, id int32, panelId int32) ApiV1EnrollmentCustomizationIdTextPanelIdMarkdownGetRequest

	// V1EnrollmentCustomizationIdTextPanelIdMarkdownGetExecute executes the request
	//  @return Markdown
	V1EnrollmentCustomizationIdTextPanelIdMarkdownGetExecute(r ApiV1EnrollmentCustomizationIdTextPanelIdMarkdownGetRequest) (*Markdown, *http.Response, error)

	/*
	V1EnrollmentCustomizationIdTextPanelIdPut Update a single Text Panel for a single Enrollment Customization 

	Update a single Text panel for a single enrollment customization

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Enrollment Customization identifier
	@param panelId Panel object identifier
	@return ApiV1EnrollmentCustomizationIdTextPanelIdPutRequest
	*/
	V1EnrollmentCustomizationIdTextPanelIdPut(ctx context.Context, id int32, panelId int32) ApiV1EnrollmentCustomizationIdTextPanelIdPutRequest

	// V1EnrollmentCustomizationIdTextPanelIdPutExecute executes the request
	//  @return GetEnrollmentCustomizationPanelText
	V1EnrollmentCustomizationIdTextPanelIdPutExecute(r ApiV1EnrollmentCustomizationIdTextPanelIdPutRequest) (*GetEnrollmentCustomizationPanelText, *http.Response, error)

	/*
	V1EnrollmentCustomizationIdTextPost Create a Text Panel for a single Enrollment Customization 

	Create a Text panel for a single enrollment customization

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Enrollment Customization identifier
	@return ApiV1EnrollmentCustomizationIdTextPostRequest
	*/
	V1EnrollmentCustomizationIdTextPost(ctx context.Context, id int32) ApiV1EnrollmentCustomizationIdTextPostRequest

	// V1EnrollmentCustomizationIdTextPostExecute executes the request
	//  @return GetEnrollmentCustomizationPanelText
	V1EnrollmentCustomizationIdTextPostExecute(r ApiV1EnrollmentCustomizationIdTextPostRequest) (*GetEnrollmentCustomizationPanelText, *http.Response, error)

	/*
	V1EnrollmentCustomizationParseMarkdownPost Parse the given string as markdown text and return Html output 

	Parse the given string as markdown text and return Html output

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV1EnrollmentCustomizationParseMarkdownPostRequest
	*/
	V1EnrollmentCustomizationParseMarkdownPost(ctx context.Context) ApiV1EnrollmentCustomizationParseMarkdownPostRequest

	// V1EnrollmentCustomizationParseMarkdownPostExecute executes the request
	//  @return Markdown
	V1EnrollmentCustomizationParseMarkdownPostExecute(r ApiV1EnrollmentCustomizationParseMarkdownPostRequest) (*Markdown, *http.Response, error)
}

// EnrollmentCustomizationPreviewApiService EnrollmentCustomizationPreviewApi service
type EnrollmentCustomizationPreviewApiService service

type ApiV1EnrollmentCustomizationIdAllGetRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationPreviewApi
	id int32
}

func (r ApiV1EnrollmentCustomizationIdAllGetRequest) Execute() (*EnrollmentCustomizationPanelList, *http.Response, error) {
	return r.ApiService.V1EnrollmentCustomizationIdAllGetExecute(r)
}

/*
V1EnrollmentCustomizationIdAllGet Get all Panels for single Enrollment Customization 

Get all panels for single enrollment customization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Enrollment Customization identifier
 @return ApiV1EnrollmentCustomizationIdAllGetRequest
*/
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdAllGet(ctx context.Context, id int32) ApiV1EnrollmentCustomizationIdAllGetRequest {
	return ApiV1EnrollmentCustomizationIdAllGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return EnrollmentCustomizationPanelList
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdAllGetExecute(r ApiV1EnrollmentCustomizationIdAllGetRequest) (*EnrollmentCustomizationPanelList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnrollmentCustomizationPanelList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationPreviewApiService.V1EnrollmentCustomizationIdAllGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/enrollment-customization/{id}/all"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1EnrollmentCustomizationIdAllPanelIdDeleteRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationPreviewApi
	id int32
	panelId int32
}

func (r ApiV1EnrollmentCustomizationIdAllPanelIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnrollmentCustomizationIdAllPanelIdDeleteExecute(r)
}

/*
V1EnrollmentCustomizationIdAllPanelIdDelete Delete a single Panel from an Enrollment Customization 

Delete a single panel from an Enrollment Customization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Enrollment Customization identifier
 @param panelId Panel object identifier
 @return ApiV1EnrollmentCustomizationIdAllPanelIdDeleteRequest
*/
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdAllPanelIdDelete(ctx context.Context, id int32, panelId int32) ApiV1EnrollmentCustomizationIdAllPanelIdDeleteRequest {
	return ApiV1EnrollmentCustomizationIdAllPanelIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		panelId: panelId,
	}
}

// Execute executes the request
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdAllPanelIdDeleteExecute(r ApiV1EnrollmentCustomizationIdAllPanelIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationPreviewApiService.V1EnrollmentCustomizationIdAllPanelIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/enrollment-customization/{id}/all/{panel-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"panel-id"+"}", url.PathEscape(parameterToString(r.panelId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnrollmentCustomizationIdAllPanelIdGetRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationPreviewApi
	id int32
	panelId int32
}

func (r ApiV1EnrollmentCustomizationIdAllPanelIdGetRequest) Execute() (*GetEnrollmentCustomizationPanel, *http.Response, error) {
	return r.ApiService.V1EnrollmentCustomizationIdAllPanelIdGetExecute(r)
}

/*
V1EnrollmentCustomizationIdAllPanelIdGet Get a single Panel for a single Enrollment Customization 

Get a single panel for a single enrollment customization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Enrollment Customization identifier
 @param panelId Panel object identifier
 @return ApiV1EnrollmentCustomizationIdAllPanelIdGetRequest
*/
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdAllPanelIdGet(ctx context.Context, id int32, panelId int32) ApiV1EnrollmentCustomizationIdAllPanelIdGetRequest {
	return ApiV1EnrollmentCustomizationIdAllPanelIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		panelId: panelId,
	}
}

// Execute executes the request
//  @return GetEnrollmentCustomizationPanel
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdAllPanelIdGetExecute(r ApiV1EnrollmentCustomizationIdAllPanelIdGetRequest) (*GetEnrollmentCustomizationPanel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetEnrollmentCustomizationPanel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationPreviewApiService.V1EnrollmentCustomizationIdAllPanelIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/enrollment-customization/{id}/all/{panel-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"panel-id"+"}", url.PathEscape(parameterToString(r.panelId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1EnrollmentCustomizationIdLdapPanelIdDeleteRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationPreviewApi
	id int32
	panelId int32
}

func (r ApiV1EnrollmentCustomizationIdLdapPanelIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnrollmentCustomizationIdLdapPanelIdDeleteExecute(r)
}

/*
V1EnrollmentCustomizationIdLdapPanelIdDelete Delete an LDAP single panel from an Enrollment Customization 

Delete an LDAP single Panel from an Enrollment Customization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Enrollment Customization identifier
 @param panelId Panel object identifier
 @return ApiV1EnrollmentCustomizationIdLdapPanelIdDeleteRequest
*/
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdLdapPanelIdDelete(ctx context.Context, id int32, panelId int32) ApiV1EnrollmentCustomizationIdLdapPanelIdDeleteRequest {
	return ApiV1EnrollmentCustomizationIdLdapPanelIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		panelId: panelId,
	}
}

// Execute executes the request
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdLdapPanelIdDeleteExecute(r ApiV1EnrollmentCustomizationIdLdapPanelIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationPreviewApiService.V1EnrollmentCustomizationIdLdapPanelIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/enrollment-customization/{id}/ldap/{panel-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"panel-id"+"}", url.PathEscape(parameterToString(r.panelId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnrollmentCustomizationIdLdapPanelIdGetRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationPreviewApi
	id int32
	panelId int32
}

func (r ApiV1EnrollmentCustomizationIdLdapPanelIdGetRequest) Execute() (*GetEnrollmentCustomizationPanelLdapAuth, *http.Response, error) {
	return r.ApiService.V1EnrollmentCustomizationIdLdapPanelIdGetExecute(r)
}

/*
V1EnrollmentCustomizationIdLdapPanelIdGet Get a single LDAP panel for a single Enrollment Customization 

Get a single LDAP panel for a single enrollment customization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Enrollment Customization identifier
 @param panelId Panel object identifier
 @return ApiV1EnrollmentCustomizationIdLdapPanelIdGetRequest
*/
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdLdapPanelIdGet(ctx context.Context, id int32, panelId int32) ApiV1EnrollmentCustomizationIdLdapPanelIdGetRequest {
	return ApiV1EnrollmentCustomizationIdLdapPanelIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		panelId: panelId,
	}
}

// Execute executes the request
//  @return GetEnrollmentCustomizationPanelLdapAuth
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdLdapPanelIdGetExecute(r ApiV1EnrollmentCustomizationIdLdapPanelIdGetRequest) (*GetEnrollmentCustomizationPanelLdapAuth, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetEnrollmentCustomizationPanelLdapAuth
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationPreviewApiService.V1EnrollmentCustomizationIdLdapPanelIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/enrollment-customization/{id}/ldap/{panel-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"panel-id"+"}", url.PathEscape(parameterToString(r.panelId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1EnrollmentCustomizationIdLdapPanelIdPutRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationPreviewApi
	id int32
	panelId int32
	enrollmentCustomizationPanelLdapAuth *EnrollmentCustomizationPanelLdapAuth
}

// Enrollment Customization Panel to update
func (r ApiV1EnrollmentCustomizationIdLdapPanelIdPutRequest) EnrollmentCustomizationPanelLdapAuth(enrollmentCustomizationPanelLdapAuth EnrollmentCustomizationPanelLdapAuth) ApiV1EnrollmentCustomizationIdLdapPanelIdPutRequest {
	r.enrollmentCustomizationPanelLdapAuth = &enrollmentCustomizationPanelLdapAuth
	return r
}

func (r ApiV1EnrollmentCustomizationIdLdapPanelIdPutRequest) Execute() (*GetEnrollmentCustomizationPanelLdapAuth, *http.Response, error) {
	return r.ApiService.V1EnrollmentCustomizationIdLdapPanelIdPutExecute(r)
}

/*
V1EnrollmentCustomizationIdLdapPanelIdPut Update a single LDAP Panel for a single Enrollment Customization 

Update a single LDAP panel for a single enrollment customization. If multiple LDAP access groups are defined with the same name and id, only one will be saved.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Enrollment Customization identifier
 @param panelId Panel object identifier
 @return ApiV1EnrollmentCustomizationIdLdapPanelIdPutRequest
*/
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdLdapPanelIdPut(ctx context.Context, id int32, panelId int32) ApiV1EnrollmentCustomizationIdLdapPanelIdPutRequest {
	return ApiV1EnrollmentCustomizationIdLdapPanelIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		panelId: panelId,
	}
}

// Execute executes the request
//  @return GetEnrollmentCustomizationPanelLdapAuth
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdLdapPanelIdPutExecute(r ApiV1EnrollmentCustomizationIdLdapPanelIdPutRequest) (*GetEnrollmentCustomizationPanelLdapAuth, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetEnrollmentCustomizationPanelLdapAuth
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationPreviewApiService.V1EnrollmentCustomizationIdLdapPanelIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/enrollment-customization/{id}/ldap/{panel-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"panel-id"+"}", url.PathEscape(parameterToString(r.panelId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.enrollmentCustomizationPanelLdapAuth == nil {
		return localVarReturnValue, nil, reportError("enrollmentCustomizationPanelLdapAuth is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enrollmentCustomizationPanelLdapAuth
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1EnrollmentCustomizationIdLdapPostRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationPreviewApi
	id int32
	enrollmentCustomizationPanelLdapAuth *EnrollmentCustomizationPanelLdapAuth
}

// Enrollment Customization Panel to create
func (r ApiV1EnrollmentCustomizationIdLdapPostRequest) EnrollmentCustomizationPanelLdapAuth(enrollmentCustomizationPanelLdapAuth EnrollmentCustomizationPanelLdapAuth) ApiV1EnrollmentCustomizationIdLdapPostRequest {
	r.enrollmentCustomizationPanelLdapAuth = &enrollmentCustomizationPanelLdapAuth
	return r
}

func (r ApiV1EnrollmentCustomizationIdLdapPostRequest) Execute() (*GetEnrollmentCustomizationPanelLdapAuth, *http.Response, error) {
	return r.ApiService.V1EnrollmentCustomizationIdLdapPostExecute(r)
}

/*
V1EnrollmentCustomizationIdLdapPost Create an LDAP Panel for a single Enrollment Customization 

Create an LDAP panel for a single enrollment customization. If multiple LDAP access groups are defined with the same name and id, only one will be saved.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Enrollment Customization identifier
 @return ApiV1EnrollmentCustomizationIdLdapPostRequest
*/
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdLdapPost(ctx context.Context, id int32) ApiV1EnrollmentCustomizationIdLdapPostRequest {
	return ApiV1EnrollmentCustomizationIdLdapPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetEnrollmentCustomizationPanelLdapAuth
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdLdapPostExecute(r ApiV1EnrollmentCustomizationIdLdapPostRequest) (*GetEnrollmentCustomizationPanelLdapAuth, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetEnrollmentCustomizationPanelLdapAuth
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationPreviewApiService.V1EnrollmentCustomizationIdLdapPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/enrollment-customization/{id}/ldap"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.enrollmentCustomizationPanelLdapAuth == nil {
		return localVarReturnValue, nil, reportError("enrollmentCustomizationPanelLdapAuth is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enrollmentCustomizationPanelLdapAuth
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1EnrollmentCustomizationIdSsoPanelIdDeleteRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationPreviewApi
	id int32
	panelId int32
}

func (r ApiV1EnrollmentCustomizationIdSsoPanelIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnrollmentCustomizationIdSsoPanelIdDeleteExecute(r)
}

/*
V1EnrollmentCustomizationIdSsoPanelIdDelete Delete a single SSO Panel from an Enrollment Customization 

Delete a single SSO panel from an Enrollment Customization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Enrollment Customization identifier
 @param panelId Panel object identifier
 @return ApiV1EnrollmentCustomizationIdSsoPanelIdDeleteRequest
*/
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdSsoPanelIdDelete(ctx context.Context, id int32, panelId int32) ApiV1EnrollmentCustomizationIdSsoPanelIdDeleteRequest {
	return ApiV1EnrollmentCustomizationIdSsoPanelIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		panelId: panelId,
	}
}

// Execute executes the request
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdSsoPanelIdDeleteExecute(r ApiV1EnrollmentCustomizationIdSsoPanelIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationPreviewApiService.V1EnrollmentCustomizationIdSsoPanelIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/enrollment-customization/{id}/sso/{panel-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"panel-id"+"}", url.PathEscape(parameterToString(r.panelId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnrollmentCustomizationIdSsoPanelIdGetRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationPreviewApi
	id int32
	panelId int32
}

func (r ApiV1EnrollmentCustomizationIdSsoPanelIdGetRequest) Execute() (*GetEnrollmentCustomizationPanelSsoAuth, *http.Response, error) {
	return r.ApiService.V1EnrollmentCustomizationIdSsoPanelIdGetExecute(r)
}

/*
V1EnrollmentCustomizationIdSsoPanelIdGet Get a single SSO Panel for a single Enrollment Customization 

Get a single SSO panel for a single enrollment customization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Enrollment Customization identifier
 @param panelId Panel object identifier
 @return ApiV1EnrollmentCustomizationIdSsoPanelIdGetRequest
*/
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdSsoPanelIdGet(ctx context.Context, id int32, panelId int32) ApiV1EnrollmentCustomizationIdSsoPanelIdGetRequest {
	return ApiV1EnrollmentCustomizationIdSsoPanelIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		panelId: panelId,
	}
}

// Execute executes the request
//  @return GetEnrollmentCustomizationPanelSsoAuth
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdSsoPanelIdGetExecute(r ApiV1EnrollmentCustomizationIdSsoPanelIdGetRequest) (*GetEnrollmentCustomizationPanelSsoAuth, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetEnrollmentCustomizationPanelSsoAuth
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationPreviewApiService.V1EnrollmentCustomizationIdSsoPanelIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/enrollment-customization/{id}/sso/{panel-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"panel-id"+"}", url.PathEscape(parameterToString(r.panelId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1EnrollmentCustomizationIdSsoPanelIdPutRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationPreviewApi
	id int32
	panelId int32
	enrollmentCustomizationPanelSsoAuth *EnrollmentCustomizationPanelSsoAuth
}

// Enrollment Customization Panel to update
func (r ApiV1EnrollmentCustomizationIdSsoPanelIdPutRequest) EnrollmentCustomizationPanelSsoAuth(enrollmentCustomizationPanelSsoAuth EnrollmentCustomizationPanelSsoAuth) ApiV1EnrollmentCustomizationIdSsoPanelIdPutRequest {
	r.enrollmentCustomizationPanelSsoAuth = &enrollmentCustomizationPanelSsoAuth
	return r
}

func (r ApiV1EnrollmentCustomizationIdSsoPanelIdPutRequest) Execute() (*GetEnrollmentCustomizationPanelSsoAuth, *http.Response, error) {
	return r.ApiService.V1EnrollmentCustomizationIdSsoPanelIdPutExecute(r)
}

/*
V1EnrollmentCustomizationIdSsoPanelIdPut Update a single SSO Panel for a single Enrollment Customization 

Update a single SSO panel for a single enrollment customization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Enrollment Customization identifier
 @param panelId Panel object identifier
 @return ApiV1EnrollmentCustomizationIdSsoPanelIdPutRequest
*/
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdSsoPanelIdPut(ctx context.Context, id int32, panelId int32) ApiV1EnrollmentCustomizationIdSsoPanelIdPutRequest {
	return ApiV1EnrollmentCustomizationIdSsoPanelIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		panelId: panelId,
	}
}

// Execute executes the request
//  @return GetEnrollmentCustomizationPanelSsoAuth
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdSsoPanelIdPutExecute(r ApiV1EnrollmentCustomizationIdSsoPanelIdPutRequest) (*GetEnrollmentCustomizationPanelSsoAuth, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetEnrollmentCustomizationPanelSsoAuth
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationPreviewApiService.V1EnrollmentCustomizationIdSsoPanelIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/enrollment-customization/{id}/sso/{panel-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"panel-id"+"}", url.PathEscape(parameterToString(r.panelId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.enrollmentCustomizationPanelSsoAuth == nil {
		return localVarReturnValue, nil, reportError("enrollmentCustomizationPanelSsoAuth is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enrollmentCustomizationPanelSsoAuth
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1EnrollmentCustomizationIdSsoPostRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationPreviewApi
	id int32
	enrollmentCustomizationPanelSsoAuth *EnrollmentCustomizationPanelSsoAuth
}

// Enrollment Customization Panel to create
func (r ApiV1EnrollmentCustomizationIdSsoPostRequest) EnrollmentCustomizationPanelSsoAuth(enrollmentCustomizationPanelSsoAuth EnrollmentCustomizationPanelSsoAuth) ApiV1EnrollmentCustomizationIdSsoPostRequest {
	r.enrollmentCustomizationPanelSsoAuth = &enrollmentCustomizationPanelSsoAuth
	return r
}

func (r ApiV1EnrollmentCustomizationIdSsoPostRequest) Execute() (*GetEnrollmentCustomizationPanelSsoAuth, *http.Response, error) {
	return r.ApiService.V1EnrollmentCustomizationIdSsoPostExecute(r)
}

/*
V1EnrollmentCustomizationIdSsoPost Create an SSO Panel for a single Enrollment Customization 

Create an SSO panel for a single enrollment customization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Enrollment Customization identifier
 @return ApiV1EnrollmentCustomizationIdSsoPostRequest
*/
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdSsoPost(ctx context.Context, id int32) ApiV1EnrollmentCustomizationIdSsoPostRequest {
	return ApiV1EnrollmentCustomizationIdSsoPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetEnrollmentCustomizationPanelSsoAuth
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdSsoPostExecute(r ApiV1EnrollmentCustomizationIdSsoPostRequest) (*GetEnrollmentCustomizationPanelSsoAuth, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetEnrollmentCustomizationPanelSsoAuth
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationPreviewApiService.V1EnrollmentCustomizationIdSsoPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/enrollment-customization/{id}/sso"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.enrollmentCustomizationPanelSsoAuth == nil {
		return localVarReturnValue, nil, reportError("enrollmentCustomizationPanelSsoAuth is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enrollmentCustomizationPanelSsoAuth
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1EnrollmentCustomizationIdTextPanelIdDeleteRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationPreviewApi
	id int32
	panelId int32
}

func (r ApiV1EnrollmentCustomizationIdTextPanelIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnrollmentCustomizationIdTextPanelIdDeleteExecute(r)
}

/*
V1EnrollmentCustomizationIdTextPanelIdDelete Delete a Text single Panel from an Enrollment Customization 

Delete a Text single panel from an Enrollment Customization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Enrollment Customization identifier
 @param panelId Panel object identifier
 @return ApiV1EnrollmentCustomizationIdTextPanelIdDeleteRequest
*/
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdTextPanelIdDelete(ctx context.Context, id int32, panelId int32) ApiV1EnrollmentCustomizationIdTextPanelIdDeleteRequest {
	return ApiV1EnrollmentCustomizationIdTextPanelIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		panelId: panelId,
	}
}

// Execute executes the request
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdTextPanelIdDeleteExecute(r ApiV1EnrollmentCustomizationIdTextPanelIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationPreviewApiService.V1EnrollmentCustomizationIdTextPanelIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/enrollment-customization/{id}/text/{panel-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"panel-id"+"}", url.PathEscape(parameterToString(r.panelId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnrollmentCustomizationIdTextPanelIdGetRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationPreviewApi
	id int32
	panelId int32
}

func (r ApiV1EnrollmentCustomizationIdTextPanelIdGetRequest) Execute() (*GetEnrollmentCustomizationPanelText, *http.Response, error) {
	return r.ApiService.V1EnrollmentCustomizationIdTextPanelIdGetExecute(r)
}

/*
V1EnrollmentCustomizationIdTextPanelIdGet Get a single Text Panel for a single Enrollment Customization 

Get a single Text panel for a single enrollment customization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Enrollment Customization identifier
 @param panelId Panel object identifier
 @return ApiV1EnrollmentCustomizationIdTextPanelIdGetRequest
*/
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdTextPanelIdGet(ctx context.Context, id int32, panelId int32) ApiV1EnrollmentCustomizationIdTextPanelIdGetRequest {
	return ApiV1EnrollmentCustomizationIdTextPanelIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		panelId: panelId,
	}
}

// Execute executes the request
//  @return GetEnrollmentCustomizationPanelText
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdTextPanelIdGetExecute(r ApiV1EnrollmentCustomizationIdTextPanelIdGetRequest) (*GetEnrollmentCustomizationPanelText, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetEnrollmentCustomizationPanelText
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationPreviewApiService.V1EnrollmentCustomizationIdTextPanelIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/enrollment-customization/{id}/text/{panel-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"panel-id"+"}", url.PathEscape(parameterToString(r.panelId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1EnrollmentCustomizationIdTextPanelIdMarkdownGetRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationPreviewApi
	id int32
	panelId int32
}

func (r ApiV1EnrollmentCustomizationIdTextPanelIdMarkdownGetRequest) Execute() (*Markdown, *http.Response, error) {
	return r.ApiService.V1EnrollmentCustomizationIdTextPanelIdMarkdownGetExecute(r)
}

/*
V1EnrollmentCustomizationIdTextPanelIdMarkdownGet Get the markdown output of a single Text Panel for a single Enrollment 

Get the markdown output of a single Text panel for a single enrollment customization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Enrollment Customization identifier
 @param panelId Panel object identifier
 @return ApiV1EnrollmentCustomizationIdTextPanelIdMarkdownGetRequest
*/
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdTextPanelIdMarkdownGet(ctx context.Context, id int32, panelId int32) ApiV1EnrollmentCustomizationIdTextPanelIdMarkdownGetRequest {
	return ApiV1EnrollmentCustomizationIdTextPanelIdMarkdownGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		panelId: panelId,
	}
}

// Execute executes the request
//  @return Markdown
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdTextPanelIdMarkdownGetExecute(r ApiV1EnrollmentCustomizationIdTextPanelIdMarkdownGetRequest) (*Markdown, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Markdown
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationPreviewApiService.V1EnrollmentCustomizationIdTextPanelIdMarkdownGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/enrollment-customization/{id}/text/{panel-id}/markdown"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"panel-id"+"}", url.PathEscape(parameterToString(r.panelId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1EnrollmentCustomizationIdTextPanelIdPutRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationPreviewApi
	id int32
	panelId int32
	enrollmentCustomizationPanelText *EnrollmentCustomizationPanelText
}

// Enrollment Customization Panel to update
func (r ApiV1EnrollmentCustomizationIdTextPanelIdPutRequest) EnrollmentCustomizationPanelText(enrollmentCustomizationPanelText EnrollmentCustomizationPanelText) ApiV1EnrollmentCustomizationIdTextPanelIdPutRequest {
	r.enrollmentCustomizationPanelText = &enrollmentCustomizationPanelText
	return r
}

func (r ApiV1EnrollmentCustomizationIdTextPanelIdPutRequest) Execute() (*GetEnrollmentCustomizationPanelText, *http.Response, error) {
	return r.ApiService.V1EnrollmentCustomizationIdTextPanelIdPutExecute(r)
}

/*
V1EnrollmentCustomizationIdTextPanelIdPut Update a single Text Panel for a single Enrollment Customization 

Update a single Text panel for a single enrollment customization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Enrollment Customization identifier
 @param panelId Panel object identifier
 @return ApiV1EnrollmentCustomizationIdTextPanelIdPutRequest
*/
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdTextPanelIdPut(ctx context.Context, id int32, panelId int32) ApiV1EnrollmentCustomizationIdTextPanelIdPutRequest {
	return ApiV1EnrollmentCustomizationIdTextPanelIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		panelId: panelId,
	}
}

// Execute executes the request
//  @return GetEnrollmentCustomizationPanelText
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdTextPanelIdPutExecute(r ApiV1EnrollmentCustomizationIdTextPanelIdPutRequest) (*GetEnrollmentCustomizationPanelText, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetEnrollmentCustomizationPanelText
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationPreviewApiService.V1EnrollmentCustomizationIdTextPanelIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/enrollment-customization/{id}/text/{panel-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"panel-id"+"}", url.PathEscape(parameterToString(r.panelId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.enrollmentCustomizationPanelText == nil {
		return localVarReturnValue, nil, reportError("enrollmentCustomizationPanelText is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enrollmentCustomizationPanelText
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1EnrollmentCustomizationIdTextPostRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationPreviewApi
	id int32
	enrollmentCustomizationPanelText *EnrollmentCustomizationPanelText
}

// Enrollment Customization Panel to create
func (r ApiV1EnrollmentCustomizationIdTextPostRequest) EnrollmentCustomizationPanelText(enrollmentCustomizationPanelText EnrollmentCustomizationPanelText) ApiV1EnrollmentCustomizationIdTextPostRequest {
	r.enrollmentCustomizationPanelText = &enrollmentCustomizationPanelText
	return r
}

func (r ApiV1EnrollmentCustomizationIdTextPostRequest) Execute() (*GetEnrollmentCustomizationPanelText, *http.Response, error) {
	return r.ApiService.V1EnrollmentCustomizationIdTextPostExecute(r)
}

/*
V1EnrollmentCustomizationIdTextPost Create a Text Panel for a single Enrollment Customization 

Create a Text panel for a single enrollment customization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Enrollment Customization identifier
 @return ApiV1EnrollmentCustomizationIdTextPostRequest
*/
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdTextPost(ctx context.Context, id int32) ApiV1EnrollmentCustomizationIdTextPostRequest {
	return ApiV1EnrollmentCustomizationIdTextPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetEnrollmentCustomizationPanelText
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationIdTextPostExecute(r ApiV1EnrollmentCustomizationIdTextPostRequest) (*GetEnrollmentCustomizationPanelText, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetEnrollmentCustomizationPanelText
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationPreviewApiService.V1EnrollmentCustomizationIdTextPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/enrollment-customization/{id}/text"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.enrollmentCustomizationPanelText == nil {
		return localVarReturnValue, nil, reportError("enrollmentCustomizationPanelText is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enrollmentCustomizationPanelText
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1EnrollmentCustomizationParseMarkdownPostRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationPreviewApi
	markdown *Markdown
}

// Enrollment Customization Panel to create
func (r ApiV1EnrollmentCustomizationParseMarkdownPostRequest) Markdown(markdown Markdown) ApiV1EnrollmentCustomizationParseMarkdownPostRequest {
	r.markdown = &markdown
	return r
}

func (r ApiV1EnrollmentCustomizationParseMarkdownPostRequest) Execute() (*Markdown, *http.Response, error) {
	return r.ApiService.V1EnrollmentCustomizationParseMarkdownPostExecute(r)
}

/*
V1EnrollmentCustomizationParseMarkdownPost Parse the given string as markdown text and return Html output 

Parse the given string as markdown text and return Html output

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1EnrollmentCustomizationParseMarkdownPostRequest
*/
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationParseMarkdownPost(ctx context.Context) ApiV1EnrollmentCustomizationParseMarkdownPostRequest {
	return ApiV1EnrollmentCustomizationParseMarkdownPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Markdown
func (a *EnrollmentCustomizationPreviewApiService) V1EnrollmentCustomizationParseMarkdownPostExecute(r ApiV1EnrollmentCustomizationParseMarkdownPostRequest) (*Markdown, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Markdown
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationPreviewApiService.V1EnrollmentCustomizationParseMarkdownPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/enrollment-customization/parse-markdown"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.markdown == nil {
		return localVarReturnValue, nil, reportError("markdown is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.markdown
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
