/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the VppTokenSubscription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VppTokenSubscription{}

// VppTokenSubscription struct for VppTokenSubscription
type VppTokenSubscription struct {
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Recipients *Recipients `json:"recipients,omitempty"`
	AdminAccounts []AdminAccount `json:"adminAccounts,omitempty"`
	SiteID *int64 `json:"siteID,omitempty"`
	SiteName *string `json:"siteName,omitempty"`
}

// NewVppTokenSubscription instantiates a new VppTokenSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVppTokenSubscription() *VppTokenSubscription {
	this := VppTokenSubscription{}
	return &this
}

// NewVppTokenSubscriptionWithDefaults instantiates a new VppTokenSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVppTokenSubscriptionWithDefaults() *VppTokenSubscription {
	this := VppTokenSubscription{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VppTokenSubscription) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VppTokenSubscription) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VppTokenSubscription) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *VppTokenSubscription) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VppTokenSubscription) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VppTokenSubscription) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VppTokenSubscription) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VppTokenSubscription) SetName(v string) {
	o.Name = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *VppTokenSubscription) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VppTokenSubscription) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *VppTokenSubscription) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *VppTokenSubscription) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetRecipients returns the Recipients field value if set, zero value otherwise.
func (o *VppTokenSubscription) GetRecipients() Recipients {
	if o == nil || IsNil(o.Recipients) {
		var ret Recipients
		return ret
	}
	return *o.Recipients
}

// GetRecipientsOk returns a tuple with the Recipients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VppTokenSubscription) GetRecipientsOk() (*Recipients, bool) {
	if o == nil || IsNil(o.Recipients) {
		return nil, false
	}
	return o.Recipients, true
}

// HasRecipients returns a boolean if a field has been set.
func (o *VppTokenSubscription) HasRecipients() bool {
	if o != nil && !IsNil(o.Recipients) {
		return true
	}

	return false
}

// SetRecipients gets a reference to the given Recipients and assigns it to the Recipients field.
func (o *VppTokenSubscription) SetRecipients(v Recipients) {
	o.Recipients = &v
}

// GetAdminAccounts returns the AdminAccounts field value if set, zero value otherwise.
func (o *VppTokenSubscription) GetAdminAccounts() []AdminAccount {
	if o == nil || IsNil(o.AdminAccounts) {
		var ret []AdminAccount
		return ret
	}
	return o.AdminAccounts
}

// GetAdminAccountsOk returns a tuple with the AdminAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VppTokenSubscription) GetAdminAccountsOk() ([]AdminAccount, bool) {
	if o == nil || IsNil(o.AdminAccounts) {
		return nil, false
	}
	return o.AdminAccounts, true
}

// HasAdminAccounts returns a boolean if a field has been set.
func (o *VppTokenSubscription) HasAdminAccounts() bool {
	if o != nil && !IsNil(o.AdminAccounts) {
		return true
	}

	return false
}

// SetAdminAccounts gets a reference to the given []AdminAccount and assigns it to the AdminAccounts field.
func (o *VppTokenSubscription) SetAdminAccounts(v []AdminAccount) {
	o.AdminAccounts = v
}

// GetSiteID returns the SiteID field value if set, zero value otherwise.
func (o *VppTokenSubscription) GetSiteID() int64 {
	if o == nil || IsNil(o.SiteID) {
		var ret int64
		return ret
	}
	return *o.SiteID
}

// GetSiteIDOk returns a tuple with the SiteID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VppTokenSubscription) GetSiteIDOk() (*int64, bool) {
	if o == nil || IsNil(o.SiteID) {
		return nil, false
	}
	return o.SiteID, true
}

// HasSiteID returns a boolean if a field has been set.
func (o *VppTokenSubscription) HasSiteID() bool {
	if o != nil && !IsNil(o.SiteID) {
		return true
	}

	return false
}

// SetSiteID gets a reference to the given int64 and assigns it to the SiteID field.
func (o *VppTokenSubscription) SetSiteID(v int64) {
	o.SiteID = &v
}

// GetSiteName returns the SiteName field value if set, zero value otherwise.
func (o *VppTokenSubscription) GetSiteName() string {
	if o == nil || IsNil(o.SiteName) {
		var ret string
		return ret
	}
	return *o.SiteName
}

// GetSiteNameOk returns a tuple with the SiteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VppTokenSubscription) GetSiteNameOk() (*string, bool) {
	if o == nil || IsNil(o.SiteName) {
		return nil, false
	}
	return o.SiteName, true
}

// HasSiteName returns a boolean if a field has been set.
func (o *VppTokenSubscription) HasSiteName() bool {
	if o != nil && !IsNil(o.SiteName) {
		return true
	}

	return false
}

// SetSiteName gets a reference to the given string and assigns it to the SiteName field.
func (o *VppTokenSubscription) SetSiteName(v string) {
	o.SiteName = &v
}

func (o VppTokenSubscription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VppTokenSubscription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Recipients) {
		toSerialize["recipients"] = o.Recipients
	}
	if !IsNil(o.AdminAccounts) {
		toSerialize["adminAccounts"] = o.AdminAccounts
	}
	if !IsNil(o.SiteID) {
		toSerialize["siteID"] = o.SiteID
	}
	if !IsNil(o.SiteName) {
		toSerialize["siteName"] = o.SiteName
	}
	return toSerialize, nil
}

type NullableVppTokenSubscription struct {
	value *VppTokenSubscription
	isSet bool
}

func (v NullableVppTokenSubscription) Get() *VppTokenSubscription {
	return v.value
}

func (v *NullableVppTokenSubscription) Set(val *VppTokenSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableVppTokenSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableVppTokenSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVppTokenSubscription(val *VppTokenSubscription) *NullableVppTokenSubscription {
	return &NullableVppTokenSubscription{value: val, isSet: true}
}

func (v NullableVppTokenSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVppTokenSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


