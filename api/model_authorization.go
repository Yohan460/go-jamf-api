/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the Authorization type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Authorization{}

// Authorization struct for Authorization
type Authorization struct {
	Account *AuthAccount `json:"account,omitempty"`
	AccountGroups []AccountGroup `json:"accountGroups,omitempty"`
	Sites []Site `json:"sites,omitempty"`
	AuthenticationType *AuthenticationType `json:"authenticationType,omitempty"`
}

// NewAuthorization instantiates a new Authorization object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorization() *Authorization {
	this := Authorization{}
	return &this
}

// NewAuthorizationWithDefaults instantiates a new Authorization object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizationWithDefaults() *Authorization {
	this := Authorization{}
	return &this
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *Authorization) GetAccount() AuthAccount {
	if o == nil || IsNil(o.Account) {
		var ret AuthAccount
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Authorization) GetAccountOk() (*AuthAccount, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *Authorization) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given AuthAccount and assigns it to the Account field.
func (o *Authorization) SetAccount(v AuthAccount) {
	o.Account = &v
}

// GetAccountGroups returns the AccountGroups field value if set, zero value otherwise.
func (o *Authorization) GetAccountGroups() []AccountGroup {
	if o == nil || IsNil(o.AccountGroups) {
		var ret []AccountGroup
		return ret
	}
	return o.AccountGroups
}

// GetAccountGroupsOk returns a tuple with the AccountGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Authorization) GetAccountGroupsOk() ([]AccountGroup, bool) {
	if o == nil || IsNil(o.AccountGroups) {
		return nil, false
	}
	return o.AccountGroups, true
}

// HasAccountGroups returns a boolean if a field has been set.
func (o *Authorization) HasAccountGroups() bool {
	if o != nil && !IsNil(o.AccountGroups) {
		return true
	}

	return false
}

// SetAccountGroups gets a reference to the given []AccountGroup and assigns it to the AccountGroups field.
func (o *Authorization) SetAccountGroups(v []AccountGroup) {
	o.AccountGroups = v
}

// GetSites returns the Sites field value if set, zero value otherwise.
func (o *Authorization) GetSites() []Site {
	if o == nil || IsNil(o.Sites) {
		var ret []Site
		return ret
	}
	return o.Sites
}

// GetSitesOk returns a tuple with the Sites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Authorization) GetSitesOk() ([]Site, bool) {
	if o == nil || IsNil(o.Sites) {
		return nil, false
	}
	return o.Sites, true
}

// HasSites returns a boolean if a field has been set.
func (o *Authorization) HasSites() bool {
	if o != nil && !IsNil(o.Sites) {
		return true
	}

	return false
}

// SetSites gets a reference to the given []Site and assigns it to the Sites field.
func (o *Authorization) SetSites(v []Site) {
	o.Sites = v
}

// GetAuthenticationType returns the AuthenticationType field value if set, zero value otherwise.
func (o *Authorization) GetAuthenticationType() AuthenticationType {
	if o == nil || IsNil(o.AuthenticationType) {
		var ret AuthenticationType
		return ret
	}
	return *o.AuthenticationType
}

// GetAuthenticationTypeOk returns a tuple with the AuthenticationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Authorization) GetAuthenticationTypeOk() (*AuthenticationType, bool) {
	if o == nil || IsNil(o.AuthenticationType) {
		return nil, false
	}
	return o.AuthenticationType, true
}

// HasAuthenticationType returns a boolean if a field has been set.
func (o *Authorization) HasAuthenticationType() bool {
	if o != nil && !IsNil(o.AuthenticationType) {
		return true
	}

	return false
}

// SetAuthenticationType gets a reference to the given AuthenticationType and assigns it to the AuthenticationType field.
func (o *Authorization) SetAuthenticationType(v AuthenticationType) {
	o.AuthenticationType = &v
}

func (o Authorization) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Authorization) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !IsNil(o.AccountGroups) {
		toSerialize["accountGroups"] = o.AccountGroups
	}
	if !IsNil(o.Sites) {
		toSerialize["sites"] = o.Sites
	}
	if !IsNil(o.AuthenticationType) {
		toSerialize["authenticationType"] = o.AuthenticationType
	}
	return toSerialize, nil
}

type NullableAuthorization struct {
	value *Authorization
	isSet bool
}

func (v NullableAuthorization) Get() *Authorization {
	return v.value
}

func (v *NullableAuthorization) Set(val *Authorization) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorization) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorization(val *Authorization) *NullableAuthorization {
	return &NullableAuthorization{value: val, isSet: true}
}

func (v NullableAuthorization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


