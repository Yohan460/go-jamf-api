/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


type PatchesApi interface {

	/*
	PatchIdGet Return Active Patch Summary 

	Returns active patch summary.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id patch id
	@return ApiPatchIdGetRequest

	Deprecated
	*/
	PatchIdGet(ctx context.Context, id int32) ApiPatchIdGetRequest

	// PatchIdGetExecute executes the request
	//  @return ActivePatchSummary
	// Deprecated
	PatchIdGetExecute(r ApiPatchIdGetRequest) (*ActivePatchSummary, *http.Response, error)

	/*
	PatchIdPut Update patch report 

	Updates patch report.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id patch id
	@return ApiPatchIdPutRequest

	Deprecated
	*/
	PatchIdPut(ctx context.Context, id int32) ApiPatchIdPutRequest

	// PatchIdPutExecute executes the request
	//  @return ActivePatchSummary
	// Deprecated
	PatchIdPutExecute(r ApiPatchIdPutRequest) (*ActivePatchSummary, *http.Response, error)

	/*
	PatchIdVersionsGet Return patch versions 

	Returns patch versions.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id patch id
	@return ApiPatchIdVersionsGetRequest

	Deprecated
	*/
	PatchIdVersionsGet(ctx context.Context, id int32) ApiPatchIdVersionsGetRequest

	// PatchIdVersionsGetExecute executes the request
	//  @return []PatchVersion
	// Deprecated
	PatchIdVersionsGetExecute(r ApiPatchIdVersionsGetRequest) ([]PatchVersion, *http.Response, error)

	/*
	PatchObjPolicyIdGet Return Patch Policy Summary 

	Returns patch policy summary.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id patch policy id
	@return ApiPatchObjPolicyIdGetRequest

	Deprecated
	*/
	PatchObjPolicyIdGet(ctx context.Context, id int32) ApiPatchObjPolicyIdGetRequest

	// PatchObjPolicyIdGetExecute executes the request
	//  @return PatchPolicySummary
	// Deprecated
	PatchObjPolicyIdGetExecute(r ApiPatchObjPolicyIdGetRequest) (*PatchPolicySummary, *http.Response, error)

	/*
	PatchSvcDisclaimerAgreePost Accept Patch reporting disclaimer 

	Accept Patch reporting disclaimer

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPatchSvcDisclaimerAgreePostRequest

	Deprecated
	*/
	PatchSvcDisclaimerAgreePost(ctx context.Context) ApiPatchSvcDisclaimerAgreePostRequest

	// PatchSvcDisclaimerAgreePostExecute executes the request
	// Deprecated
	PatchSvcDisclaimerAgreePostExecute(r ApiPatchSvcDisclaimerAgreePostRequest) (*http.Response, error)
}

// PatchesApiService PatchesApi service
type PatchesApiService service

type ApiPatchIdGetRequest struct {
	ctx context.Context
	ApiService PatchesApi
	id int32
}

func (r ApiPatchIdGetRequest) Execute() (*ActivePatchSummary, *http.Response, error) {
	return r.ApiService.PatchIdGetExecute(r)
}

/*
PatchIdGet Return Active Patch Summary 

Returns active patch summary.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id patch id
 @return ApiPatchIdGetRequest

Deprecated
*/
func (a *PatchesApiService) PatchIdGet(ctx context.Context, id int32) ApiPatchIdGetRequest {
	return ApiPatchIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ActivePatchSummary
// Deprecated
func (a *PatchesApiService) PatchIdGetExecute(r ApiPatchIdGetRequest) (*ActivePatchSummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ActivePatchSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchesApiService.PatchIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/patch/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchIdPutRequest struct {
	ctx context.Context
	ApiService PatchesApi
	id int32
	activePatchSummary *ActivePatchSummary
}

// Active patch summary.
func (r ApiPatchIdPutRequest) ActivePatchSummary(activePatchSummary ActivePatchSummary) ApiPatchIdPutRequest {
	r.activePatchSummary = &activePatchSummary
	return r
}

func (r ApiPatchIdPutRequest) Execute() (*ActivePatchSummary, *http.Response, error) {
	return r.ApiService.PatchIdPutExecute(r)
}

/*
PatchIdPut Update patch report 

Updates patch report.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id patch id
 @return ApiPatchIdPutRequest

Deprecated
*/
func (a *PatchesApiService) PatchIdPut(ctx context.Context, id int32) ApiPatchIdPutRequest {
	return ApiPatchIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ActivePatchSummary
// Deprecated
func (a *PatchesApiService) PatchIdPutExecute(r ApiPatchIdPutRequest) (*ActivePatchSummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ActivePatchSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchesApiService.PatchIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/patch/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.activePatchSummary == nil {
		return localVarReturnValue, nil, reportError("activePatchSummary is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.activePatchSummary
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchIdVersionsGetRequest struct {
	ctx context.Context
	ApiService PatchesApi
	id int32
}

func (r ApiPatchIdVersionsGetRequest) Execute() ([]PatchVersion, *http.Response, error) {
	return r.ApiService.PatchIdVersionsGetExecute(r)
}

/*
PatchIdVersionsGet Return patch versions 

Returns patch versions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id patch id
 @return ApiPatchIdVersionsGetRequest

Deprecated
*/
func (a *PatchesApiService) PatchIdVersionsGet(ctx context.Context, id int32) ApiPatchIdVersionsGetRequest {
	return ApiPatchIdVersionsGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []PatchVersion
// Deprecated
func (a *PatchesApiService) PatchIdVersionsGetExecute(r ApiPatchIdVersionsGetRequest) ([]PatchVersion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PatchVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchesApiService.PatchIdVersionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/patch/{id}/versions"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchObjPolicyIdGetRequest struct {
	ctx context.Context
	ApiService PatchesApi
	id int32
}

func (r ApiPatchObjPolicyIdGetRequest) Execute() (*PatchPolicySummary, *http.Response, error) {
	return r.ApiService.PatchObjPolicyIdGetExecute(r)
}

/*
PatchObjPolicyIdGet Return Patch Policy Summary 

Returns patch policy summary.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id patch policy id
 @return ApiPatchObjPolicyIdGetRequest

Deprecated
*/
func (a *PatchesApiService) PatchObjPolicyIdGet(ctx context.Context, id int32) ApiPatchObjPolicyIdGetRequest {
	return ApiPatchObjPolicyIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PatchPolicySummary
// Deprecated
func (a *PatchesApiService) PatchObjPolicyIdGetExecute(r ApiPatchObjPolicyIdGetRequest) (*PatchPolicySummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PatchPolicySummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchesApiService.PatchObjPolicyIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/patch/obj/policy/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSvcDisclaimerAgreePostRequest struct {
	ctx context.Context
	ApiService PatchesApi
}

func (r ApiPatchSvcDisclaimerAgreePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.PatchSvcDisclaimerAgreePostExecute(r)
}

/*
PatchSvcDisclaimerAgreePost Accept Patch reporting disclaimer 

Accept Patch reporting disclaimer

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPatchSvcDisclaimerAgreePostRequest

Deprecated
*/
func (a *PatchesApiService) PatchSvcDisclaimerAgreePost(ctx context.Context) ApiPatchSvcDisclaimerAgreePostRequest {
	return ApiPatchSvcDisclaimerAgreePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
// Deprecated
func (a *PatchesApiService) PatchSvcDisclaimerAgreePostExecute(r ApiPatchSvcDisclaimerAgreePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchesApiService.PatchSvcDisclaimerAgreePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/patch/svc/disclaimerAgree"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
