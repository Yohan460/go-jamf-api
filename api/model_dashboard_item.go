/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the DashboardItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DashboardItem{}

// DashboardItem struct for DashboardItem
type DashboardItem struct {
	Id *string `json:"id,omitempty"`
	Title NullableString `json:"title,omitempty"`
	Subtitle NullableString `json:"subtitle,omitempty"`
	// Additional information such as identifiers for a specific policy within a software patch
	Info NullableString `json:"info,omitempty"`
	// Logical to decide whether widget should be enabled or disabled; i.e. Policy
	Enabled *bool `json:"enabled,omitempty"`
	Metrics []DashboardMetric `json:"metrics,omitempty"`
	Details []DashboardDetail `json:"details,omitempty"`
	Error *DashboardApiError `json:"error,omitempty"`
}

// NewDashboardItem instantiates a new DashboardItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardItem() *DashboardItem {
	this := DashboardItem{}
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// NewDashboardItemWithDefaults instantiates a new DashboardItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardItemWithDefaults() *DashboardItem {
	this := DashboardItem{}
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DashboardItem) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DashboardItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DashboardItem) SetId(v string) {
	o.Id = &v
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DashboardItem) GetTitle() string {
	if o == nil || IsNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DashboardItem) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *DashboardItem) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *DashboardItem) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *DashboardItem) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *DashboardItem) UnsetTitle() {
	o.Title.Unset()
}

// GetSubtitle returns the Subtitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DashboardItem) GetSubtitle() string {
	if o == nil || IsNil(o.Subtitle.Get()) {
		var ret string
		return ret
	}
	return *o.Subtitle.Get()
}

// GetSubtitleOk returns a tuple with the Subtitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DashboardItem) GetSubtitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subtitle.Get(), o.Subtitle.IsSet()
}

// HasSubtitle returns a boolean if a field has been set.
func (o *DashboardItem) HasSubtitle() bool {
	if o != nil && o.Subtitle.IsSet() {
		return true
	}

	return false
}

// SetSubtitle gets a reference to the given NullableString and assigns it to the Subtitle field.
func (o *DashboardItem) SetSubtitle(v string) {
	o.Subtitle.Set(&v)
}
// SetSubtitleNil sets the value for Subtitle to be an explicit nil
func (o *DashboardItem) SetSubtitleNil() {
	o.Subtitle.Set(nil)
}

// UnsetSubtitle ensures that no value is present for Subtitle, not even an explicit nil
func (o *DashboardItem) UnsetSubtitle() {
	o.Subtitle.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DashboardItem) GetInfo() string {
	if o == nil || IsNil(o.Info.Get()) {
		var ret string
		return ret
	}
	return *o.Info.Get()
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DashboardItem) GetInfoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Info.Get(), o.Info.IsSet()
}

// HasInfo returns a boolean if a field has been set.
func (o *DashboardItem) HasInfo() bool {
	if o != nil && o.Info.IsSet() {
		return true
	}

	return false
}

// SetInfo gets a reference to the given NullableString and assigns it to the Info field.
func (o *DashboardItem) SetInfo(v string) {
	o.Info.Set(&v)
}
// SetInfoNil sets the value for Info to be an explicit nil
func (o *DashboardItem) SetInfoNil() {
	o.Info.Set(nil)
}

// UnsetInfo ensures that no value is present for Info, not even an explicit nil
func (o *DashboardItem) UnsetInfo() {
	o.Info.Unset()
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *DashboardItem) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *DashboardItem) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *DashboardItem) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetMetrics returns the Metrics field value if set, zero value otherwise.
func (o *DashboardItem) GetMetrics() []DashboardMetric {
	if o == nil || IsNil(o.Metrics) {
		var ret []DashboardMetric
		return ret
	}
	return o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetMetricsOk() ([]DashboardMetric, bool) {
	if o == nil || IsNil(o.Metrics) {
		return nil, false
	}
	return o.Metrics, true
}

// HasMetrics returns a boolean if a field has been set.
func (o *DashboardItem) HasMetrics() bool {
	if o != nil && !IsNil(o.Metrics) {
		return true
	}

	return false
}

// SetMetrics gets a reference to the given []DashboardMetric and assigns it to the Metrics field.
func (o *DashboardItem) SetMetrics(v []DashboardMetric) {
	o.Metrics = v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *DashboardItem) GetDetails() []DashboardDetail {
	if o == nil || IsNil(o.Details) {
		var ret []DashboardDetail
		return ret
	}
	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetDetailsOk() ([]DashboardDetail, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *DashboardItem) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given []DashboardDetail and assigns it to the Details field.
func (o *DashboardItem) SetDetails(v []DashboardDetail) {
	o.Details = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *DashboardItem) GetError() DashboardApiError {
	if o == nil || IsNil(o.Error) {
		var ret DashboardApiError
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardItem) GetErrorOk() (*DashboardApiError, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *DashboardItem) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given DashboardApiError and assigns it to the Error field.
func (o *DashboardItem) SetError(v DashboardApiError) {
	o.Error = &v
}

func (o DashboardItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DashboardItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.Subtitle.IsSet() {
		toSerialize["subtitle"] = o.Subtitle.Get()
	}
	if o.Info.IsSet() {
		toSerialize["info"] = o.Info.Get()
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Metrics) {
		toSerialize["metrics"] = o.Metrics
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

type NullableDashboardItem struct {
	value *DashboardItem
	isSet bool
}

func (v NullableDashboardItem) Get() *DashboardItem {
	return v.value
}

func (v *NullableDashboardItem) Set(val *DashboardItem) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardItem) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardItem(val *DashboardItem) *NullableDashboardItem {
	return &NullableDashboardItem{value: val, isSet: true}
}

func (v NullableDashboardItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


