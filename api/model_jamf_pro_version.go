/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// JamfProVersion struct for JamfProVersion
type JamfProVersion struct {
	Version *string `json:"version,omitempty"`
}

// NewJamfProVersion instantiates a new JamfProVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJamfProVersion() *JamfProVersion {
	this := JamfProVersion{}
	return &this
}

// NewJamfProVersionWithDefaults instantiates a new JamfProVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJamfProVersionWithDefaults() *JamfProVersion {
	this := JamfProVersion{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *JamfProVersion) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JamfProVersion) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *JamfProVersion) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *JamfProVersion) SetVersion(v string) {
	o.Version = &v
}

func (o JamfProVersion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableJamfProVersion struct {
	value *JamfProVersion
	isSet bool
}

func (v NullableJamfProVersion) Get() *JamfProVersion {
	return v.value
}

func (v *NullableJamfProVersion) Set(val *JamfProVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableJamfProVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableJamfProVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJamfProVersion(val *JamfProVersion) *NullableJamfProVersion {
	return &NullableJamfProVersion{value: val, isSet: true}
}

func (v NullableJamfProVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJamfProVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


