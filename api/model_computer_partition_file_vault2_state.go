/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// ComputerPartitionFileVault2State the model 'ComputerPartitionFileVault2State'
type ComputerPartitionFileVault2State string

// List of ComputerPartitionFileVault2State
const (
	UNKNOWN ComputerPartitionFileVault2State = "UNKNOWN"
	UNENCRYPTED ComputerPartitionFileVault2State = "UNENCRYPTED"
	INELIGIBLE ComputerPartitionFileVault2State = "INELIGIBLE"
	DECRYPTED ComputerPartitionFileVault2State = "DECRYPTED"
	DECRYPTING ComputerPartitionFileVault2State = "DECRYPTING"
	ENCRYPTED ComputerPartitionFileVault2State = "ENCRYPTED"
	ENCRYPTING ComputerPartitionFileVault2State = "ENCRYPTING"
	RESTART_NEEDED ComputerPartitionFileVault2State = "RESTART_NEEDED"
	OPTIMIZING ComputerPartitionFileVault2State = "OPTIMIZING"
	DECRYPTING_PAUSED ComputerPartitionFileVault2State = "DECRYPTING_PAUSED"
	ENCRYPTING_PAUSED ComputerPartitionFileVault2State = "ENCRYPTING_PAUSED"
)

// All allowed values of ComputerPartitionFileVault2State enum
var AllowedComputerPartitionFileVault2StateEnumValues = []ComputerPartitionFileVault2State{
	"UNKNOWN",
	"UNENCRYPTED",
	"INELIGIBLE",
	"DECRYPTED",
	"DECRYPTING",
	"ENCRYPTED",
	"ENCRYPTING",
	"RESTART_NEEDED",
	"OPTIMIZING",
	"DECRYPTING_PAUSED",
	"ENCRYPTING_PAUSED",
}

func (v *ComputerPartitionFileVault2State) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ComputerPartitionFileVault2State(value)
	for _, existing := range AllowedComputerPartitionFileVault2StateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ComputerPartitionFileVault2State", value)
}

// NewComputerPartitionFileVault2StateFromValue returns a pointer to a valid ComputerPartitionFileVault2State
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewComputerPartitionFileVault2StateFromValue(v string) (*ComputerPartitionFileVault2State, error) {
	ev := ComputerPartitionFileVault2State(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ComputerPartitionFileVault2State: valid values are %v", v, AllowedComputerPartitionFileVault2StateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ComputerPartitionFileVault2State) IsValid() bool {
	for _, existing := range AllowedComputerPartitionFileVault2StateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ComputerPartitionFileVault2State value
func (v ComputerPartitionFileVault2State) Ptr() *ComputerPartitionFileVault2State {
	return &v
}

type NullableComputerPartitionFileVault2State struct {
	value *ComputerPartitionFileVault2State
	isSet bool
}

func (v NullableComputerPartitionFileVault2State) Get() *ComputerPartitionFileVault2State {
	return v.value
}

func (v *NullableComputerPartitionFileVault2State) Set(val *ComputerPartitionFileVault2State) {
	v.value = val
	v.isSet = true
}

func (v NullableComputerPartitionFileVault2State) IsSet() bool {
	return v.isSet
}

func (v *NullableComputerPartitionFileVault2State) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputerPartitionFileVault2State(val *ComputerPartitionFileVault2State) *NullableComputerPartitionFileVault2State {
	return &NullableComputerPartitionFileVault2State{value: val, isSet: true}
}

func (v NullableComputerPartitionFileVault2State) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputerPartitionFileVault2State) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

