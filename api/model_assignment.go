/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the Assignment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Assignment{}

// Assignment struct for Assignment
type Assignment struct {
	MobileDeviceId *string `json:"mobileDeviceId,omitempty"`
	// If true the device should be added to the group, if false should be removed from the group.
	Selected *bool `json:"selected,omitempty"`
}

// NewAssignment instantiates a new Assignment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssignment() *Assignment {
	this := Assignment{}
	return &this
}

// NewAssignmentWithDefaults instantiates a new Assignment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssignmentWithDefaults() *Assignment {
	this := Assignment{}
	return &this
}

// GetMobileDeviceId returns the MobileDeviceId field value if set, zero value otherwise.
func (o *Assignment) GetMobileDeviceId() string {
	if o == nil || IsNil(o.MobileDeviceId) {
		var ret string
		return ret
	}
	return *o.MobileDeviceId
}

// GetMobileDeviceIdOk returns a tuple with the MobileDeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assignment) GetMobileDeviceIdOk() (*string, bool) {
	if o == nil || IsNil(o.MobileDeviceId) {
		return nil, false
	}
	return o.MobileDeviceId, true
}

// HasMobileDeviceId returns a boolean if a field has been set.
func (o *Assignment) HasMobileDeviceId() bool {
	if o != nil && !IsNil(o.MobileDeviceId) {
		return true
	}

	return false
}

// SetMobileDeviceId gets a reference to the given string and assigns it to the MobileDeviceId field.
func (o *Assignment) SetMobileDeviceId(v string) {
	o.MobileDeviceId = &v
}

// GetSelected returns the Selected field value if set, zero value otherwise.
func (o *Assignment) GetSelected() bool {
	if o == nil || IsNil(o.Selected) {
		var ret bool
		return ret
	}
	return *o.Selected
}

// GetSelectedOk returns a tuple with the Selected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assignment) GetSelectedOk() (*bool, bool) {
	if o == nil || IsNil(o.Selected) {
		return nil, false
	}
	return o.Selected, true
}

// HasSelected returns a boolean if a field has been set.
func (o *Assignment) HasSelected() bool {
	if o != nil && !IsNil(o.Selected) {
		return true
	}

	return false
}

// SetSelected gets a reference to the given bool and assigns it to the Selected field.
func (o *Assignment) SetSelected(v bool) {
	o.Selected = &v
}

func (o Assignment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Assignment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MobileDeviceId) {
		toSerialize["mobileDeviceId"] = o.MobileDeviceId
	}
	if !IsNil(o.Selected) {
		toSerialize["selected"] = o.Selected
	}
	return toSerialize, nil
}

type NullableAssignment struct {
	value *Assignment
	isSet bool
}

func (v NullableAssignment) Get() *Assignment {
	return v.value
}

func (v *NullableAssignment) Set(val *Assignment) {
	v.value = val
	v.isSet = true
}

func (v NullableAssignment) IsSet() bool {
	return v.isSet
}

func (v *NullableAssignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssignment(val *Assignment) *NullableAssignment {
	return &NullableAssignment{value: val, isSet: true}
}

func (v NullableAssignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


