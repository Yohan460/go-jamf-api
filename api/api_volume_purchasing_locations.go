/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type VolumePurchasingLocationsAPI interface {

	/*
	V1VolumePurchasingLocationsGet Retrieve Volume Purchasing Locations

	Retrieves Volume Purchasing Locations

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VolumePurchasingLocationsAPIV1VolumePurchasingLocationsGetRequest
	*/
	V1VolumePurchasingLocationsGet(ctx context.Context) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsGetRequest

	// V1VolumePurchasingLocationsGetExecute executes the request
	//  @return VolumePurchasingLocations
	V1VolumePurchasingLocationsGetExecute(r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsGetRequest) (*VolumePurchasingLocations, *http.Response, error)

	/*
	V1VolumePurchasingLocationsIdContentGet Retrieve the Volume Purchasing Content for the Volume Purchasing Location with the supplied id

	Retrieves the Volume Purchasing Content for the Volume Purchasing Location with the supplied id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Volume Purchasing Location identifier
	@return VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdContentGetRequest
	*/
	V1VolumePurchasingLocationsIdContentGet(ctx context.Context, id string) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdContentGetRequest

	// V1VolumePurchasingLocationsIdContentGetExecute executes the request
	//  @return VolumePurchasingContentList
	V1VolumePurchasingLocationsIdContentGetExecute(r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdContentGetRequest) (*VolumePurchasingContentList, *http.Response, error)

	/*
	V1VolumePurchasingLocationsIdDelete Delete a Volume Purchasing Location with the supplied id

	Deletes a Volume Purchasing Location with the supplied id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Volume Purchasing Location identifier
	@return VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdDeleteRequest
	*/
	V1VolumePurchasingLocationsIdDelete(ctx context.Context, id string) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdDeleteRequest

	// V1VolumePurchasingLocationsIdDeleteExecute executes the request
	V1VolumePurchasingLocationsIdDeleteExecute(r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdDeleteRequest) (*http.Response, error)

	/*
	V1VolumePurchasingLocationsIdGet Retrieve a Volume Purchasing Location with the supplied id

	Retrieves a Volume Purchasing Location with the supplied id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Volume Purchasing Location identifier
	@return VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdGetRequest
	*/
	V1VolumePurchasingLocationsIdGet(ctx context.Context, id string) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdGetRequest

	// V1VolumePurchasingLocationsIdGetExecute executes the request
	//  @return VolumePurchasingLocation
	V1VolumePurchasingLocationsIdGetExecute(r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdGetRequest) (*VolumePurchasingLocation, *http.Response, error)

	/*
	V1VolumePurchasingLocationsIdHistoryGet Get specified Volume Purchasing Location history object 

	Gets specified Volume Purchasing Location history object


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id instance id of Volume Purchasing Location history record
	@return VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdHistoryGetRequest
	*/
	V1VolumePurchasingLocationsIdHistoryGet(ctx context.Context, id string) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdHistoryGetRequest

	// V1VolumePurchasingLocationsIdHistoryGetExecute executes the request
	//  @return HistorySearchResults
	V1VolumePurchasingLocationsIdHistoryGetExecute(r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdHistoryGetRequest) (*HistorySearchResults, *http.Response, error)

	/*
	V1VolumePurchasingLocationsIdHistoryPost Add specified Volume Purchasing Location history object notes 

	Adds specified Volume Purchasing Location history object notes


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id instance id of Volume Purchasing Location history record
	@return VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdHistoryPostRequest
	*/
	V1VolumePurchasingLocationsIdHistoryPost(ctx context.Context, id string) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdHistoryPostRequest

	// V1VolumePurchasingLocationsIdHistoryPostExecute executes the request
	//  @return ObjectHistory
	V1VolumePurchasingLocationsIdHistoryPostExecute(r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdHistoryPostRequest) (*ObjectHistory, *http.Response, error)

	/*
	V1VolumePurchasingLocationsIdPatch Update a Volume Purchasing Location

	Updates a Volume Purchasing Location

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Volume Purchasing Location identifier
	@return VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdPatchRequest
	*/
	V1VolumePurchasingLocationsIdPatch(ctx context.Context, id string) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdPatchRequest

	// V1VolumePurchasingLocationsIdPatchExecute executes the request
	//  @return VolumePurchasingLocation
	V1VolumePurchasingLocationsIdPatchExecute(r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdPatchRequest) (*VolumePurchasingLocation, *http.Response, error)

	/*
	V1VolumePurchasingLocationsIdReclaimPost Reclaim a Volume Purchasing Location with the supplied id

	Reclaims a Volume Purchasing Location with the supplied id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Volume Purchasing Location identifier
	@return VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdReclaimPostRequest
	*/
	V1VolumePurchasingLocationsIdReclaimPost(ctx context.Context, id string) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdReclaimPostRequest

	// V1VolumePurchasingLocationsIdReclaimPostExecute executes the request
	V1VolumePurchasingLocationsIdReclaimPostExecute(r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdReclaimPostRequest) (*http.Response, error)

	/*
	V1VolumePurchasingLocationsIdRevokeLicensesPost Revoke licenses for a Volume Purchasing Location with the supplied id

	Revokes licenses for a Volume Purchasing Location with the supplied id. The licenses must be revokable - any asset whose licenses are irrevocable will not be revoked.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Volume Purchasing Location identifier
	@return VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdRevokeLicensesPostRequest
	*/
	V1VolumePurchasingLocationsIdRevokeLicensesPost(ctx context.Context, id string) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdRevokeLicensesPostRequest

	// V1VolumePurchasingLocationsIdRevokeLicensesPostExecute executes the request
	V1VolumePurchasingLocationsIdRevokeLicensesPostExecute(r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdRevokeLicensesPostRequest) (*http.Response, error)

	/*
	V1VolumePurchasingLocationsPost Create a Volume Purchasing Location

	Creates a Volume Purchasing Location using an sToken

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VolumePurchasingLocationsAPIV1VolumePurchasingLocationsPostRequest
	*/
	V1VolumePurchasingLocationsPost(ctx context.Context) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsPostRequest

	// V1VolumePurchasingLocationsPostExecute executes the request
	//  @return HrefResponse
	V1VolumePurchasingLocationsPostExecute(r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsPostRequest) (*HrefResponse, *http.Response, error)
}

// VolumePurchasingLocationsAPIService VolumePurchasingLocationsAPI service
type VolumePurchasingLocationsAPIService service

type VolumePurchasingLocationsAPIV1VolumePurchasingLocationsGetRequest struct {
	ctx context.Context
	ApiService VolumePurchasingLocationsAPI
	page *int64
	pageSize *int64
	sort *[]string
	filter *string
}

func (r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsGetRequest) Page(page int64) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsGetRequest {
	r.page = &page
	return r
}

func (r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsGetRequest) PageSize(pageSize int64) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Default sort is id:asc. Multiple sort criteria are supported and must be separated with a comma.
func (r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsGetRequest) Sort(sort []string) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsGetRequest {
	r.sort = &sort
	return r
}

// Query in the RSQL format, allowing to filter Volume Purchasing Location collection. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: id, name, appleId, organizationName, tokenExpiration, countryCode, locationName, automaticallyPopulatePurchasedContent, sendNotificationWhenNoLongerAssigned, siteId and siteName. This param can be combined with paging and sorting.
func (r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsGetRequest) Filter(filter string) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsGetRequest {
	r.filter = &filter
	return r
}

func (r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsGetRequest) Execute() (*VolumePurchasingLocations, *http.Response, error) {
	return r.ApiService.V1VolumePurchasingLocationsGetExecute(r)
}

/*
V1VolumePurchasingLocationsGet Retrieve Volume Purchasing Locations

Retrieves Volume Purchasing Locations

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return VolumePurchasingLocationsAPIV1VolumePurchasingLocationsGetRequest
*/
func (a *VolumePurchasingLocationsAPIService) V1VolumePurchasingLocationsGet(ctx context.Context) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsGetRequest {
	return VolumePurchasingLocationsAPIV1VolumePurchasingLocationsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return VolumePurchasingLocations
func (a *VolumePurchasingLocationsAPIService) V1VolumePurchasingLocationsGetExecute(r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsGetRequest) (*VolumePurchasingLocations, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VolumePurchasingLocations
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VolumePurchasingLocationsAPIService.V1VolumePurchasingLocationsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/volume-purchasing-locations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int64 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int64 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		defaultValue := []string{"id:asc"}
		r.sort = &defaultValue
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	} else {
		var defaultValue string = ""
		r.filter = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdContentGetRequest struct {
	ctx context.Context
	ApiService VolumePurchasingLocationsAPI
	id string
	page *int64
	pageSize *int64
	sort *[]string
	filter *string
}

func (r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdContentGetRequest) Page(page int64) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdContentGetRequest {
	r.page = &page
	return r
}

func (r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdContentGetRequest) PageSize(pageSize int64) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdContentGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Default sort is name:asc. Multiple sort criteria are supported and must be separated with a comma.
func (r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdContentGetRequest) Sort(sort []string) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdContentGetRequest {
	r.sort = &sort
	return r
}

// Query in the RSQL format, allowing to filter Volume Purchasing Content collection. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: name, licenseCountTotal, licenseCountInUse, licenseCountReported, contentType, and pricingParam. This param can be combined with paging and sorting.
func (r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdContentGetRequest) Filter(filter string) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdContentGetRequest {
	r.filter = &filter
	return r
}

func (r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdContentGetRequest) Execute() (*VolumePurchasingContentList, *http.Response, error) {
	return r.ApiService.V1VolumePurchasingLocationsIdContentGetExecute(r)
}

/*
V1VolumePurchasingLocationsIdContentGet Retrieve the Volume Purchasing Content for the Volume Purchasing Location with the supplied id

Retrieves the Volume Purchasing Content for the Volume Purchasing Location with the supplied id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Volume Purchasing Location identifier
 @return VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdContentGetRequest
*/
func (a *VolumePurchasingLocationsAPIService) V1VolumePurchasingLocationsIdContentGet(ctx context.Context, id string) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdContentGetRequest {
	return VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdContentGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return VolumePurchasingContentList
func (a *VolumePurchasingLocationsAPIService) V1VolumePurchasingLocationsIdContentGetExecute(r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdContentGetRequest) (*VolumePurchasingContentList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VolumePurchasingContentList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VolumePurchasingLocationsAPIService.V1VolumePurchasingLocationsIdContentGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/volume-purchasing-locations/{id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int64 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int64 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		defaultValue := []string{"id:asc"}
		r.sort = &defaultValue
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	} else {
		var defaultValue string = ""
		r.filter = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdDeleteRequest struct {
	ctx context.Context
	ApiService VolumePurchasingLocationsAPI
	id string
}

func (r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1VolumePurchasingLocationsIdDeleteExecute(r)
}

/*
V1VolumePurchasingLocationsIdDelete Delete a Volume Purchasing Location with the supplied id

Deletes a Volume Purchasing Location with the supplied id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Volume Purchasing Location identifier
 @return VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdDeleteRequest
*/
func (a *VolumePurchasingLocationsAPIService) V1VolumePurchasingLocationsIdDelete(ctx context.Context, id string) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdDeleteRequest {
	return VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *VolumePurchasingLocationsAPIService) V1VolumePurchasingLocationsIdDeleteExecute(r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VolumePurchasingLocationsAPIService.V1VolumePurchasingLocationsIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/volume-purchasing-locations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdGetRequest struct {
	ctx context.Context
	ApiService VolumePurchasingLocationsAPI
	id string
}

func (r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdGetRequest) Execute() (*VolumePurchasingLocation, *http.Response, error) {
	return r.ApiService.V1VolumePurchasingLocationsIdGetExecute(r)
}

/*
V1VolumePurchasingLocationsIdGet Retrieve a Volume Purchasing Location with the supplied id

Retrieves a Volume Purchasing Location with the supplied id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Volume Purchasing Location identifier
 @return VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdGetRequest
*/
func (a *VolumePurchasingLocationsAPIService) V1VolumePurchasingLocationsIdGet(ctx context.Context, id string) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdGetRequest {
	return VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return VolumePurchasingLocation
func (a *VolumePurchasingLocationsAPIService) V1VolumePurchasingLocationsIdGetExecute(r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdGetRequest) (*VolumePurchasingLocation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VolumePurchasingLocation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VolumePurchasingLocationsAPIService.V1VolumePurchasingLocationsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/volume-purchasing-locations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdHistoryGetRequest struct {
	ctx context.Context
	ApiService VolumePurchasingLocationsAPI
	id string
	page *int64
	pageSize *int64
	sort *[]string
	filter *string
}

func (r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdHistoryGetRequest) Page(page int64) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdHistoryGetRequest {
	r.page = &page
	return r
}

func (r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdHistoryGetRequest) PageSize(pageSize int64) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdHistoryGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Default sort is date:desc. Multiple sort criteria are supported and must be separated with a comma. 
func (r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdHistoryGetRequest) Sort(sort []string) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdHistoryGetRequest {
	r.sort = &sort
	return r
}

// Query in the RSQL format, allowing to filter history notes collection. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: username, date, note, details. This param can be combined with paging and sorting. Example: filter&#x3D;username!&#x3D;admin and details&#x3D;&#x3D;*disabled* and date&lt;2019-12-15
func (r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdHistoryGetRequest) Filter(filter string) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdHistoryGetRequest {
	r.filter = &filter
	return r
}

func (r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdHistoryGetRequest) Execute() (*HistorySearchResults, *http.Response, error) {
	return r.ApiService.V1VolumePurchasingLocationsIdHistoryGetExecute(r)
}

/*
V1VolumePurchasingLocationsIdHistoryGet Get specified Volume Purchasing Location history object 

Gets specified Volume Purchasing Location history object


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id instance id of Volume Purchasing Location history record
 @return VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdHistoryGetRequest
*/
func (a *VolumePurchasingLocationsAPIService) V1VolumePurchasingLocationsIdHistoryGet(ctx context.Context, id string) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdHistoryGetRequest {
	return VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdHistoryGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return HistorySearchResults
func (a *VolumePurchasingLocationsAPIService) V1VolumePurchasingLocationsIdHistoryGetExecute(r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdHistoryGetRequest) (*HistorySearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HistorySearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VolumePurchasingLocationsAPIService.V1VolumePurchasingLocationsIdHistoryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/volume-purchasing-locations/{id}/history"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int64 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int64 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		defaultValue := []string{"date:desc"}
		r.sort = &defaultValue
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	} else {
		var defaultValue string = ""
		r.filter = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdHistoryPostRequest struct {
	ctx context.Context
	ApiService VolumePurchasingLocationsAPI
	id string
	objectHistoryNote *ObjectHistoryNote
}

// history note to create
func (r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdHistoryPostRequest) ObjectHistoryNote(objectHistoryNote ObjectHistoryNote) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdHistoryPostRequest {
	r.objectHistoryNote = &objectHistoryNote
	return r
}

func (r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdHistoryPostRequest) Execute() (*ObjectHistory, *http.Response, error) {
	return r.ApiService.V1VolumePurchasingLocationsIdHistoryPostExecute(r)
}

/*
V1VolumePurchasingLocationsIdHistoryPost Add specified Volume Purchasing Location history object notes 

Adds specified Volume Purchasing Location history object notes


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id instance id of Volume Purchasing Location history record
 @return VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdHistoryPostRequest
*/
func (a *VolumePurchasingLocationsAPIService) V1VolumePurchasingLocationsIdHistoryPost(ctx context.Context, id string) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdHistoryPostRequest {
	return VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdHistoryPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ObjectHistory
func (a *VolumePurchasingLocationsAPIService) V1VolumePurchasingLocationsIdHistoryPostExecute(r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdHistoryPostRequest) (*ObjectHistory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectHistory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VolumePurchasingLocationsAPIService.V1VolumePurchasingLocationsIdHistoryPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/volume-purchasing-locations/{id}/history"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.objectHistoryNote == nil {
		return localVarReturnValue, nil, reportError("objectHistoryNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.objectHistoryNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdPatchRequest struct {
	ctx context.Context
	ApiService VolumePurchasingLocationsAPI
	id string
	volumePurchasingLocationPatch *VolumePurchasingLocationPatch
}

// Volume Purchasing Location to update
func (r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdPatchRequest) VolumePurchasingLocationPatch(volumePurchasingLocationPatch VolumePurchasingLocationPatch) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdPatchRequest {
	r.volumePurchasingLocationPatch = &volumePurchasingLocationPatch
	return r
}

func (r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdPatchRequest) Execute() (*VolumePurchasingLocation, *http.Response, error) {
	return r.ApiService.V1VolumePurchasingLocationsIdPatchExecute(r)
}

/*
V1VolumePurchasingLocationsIdPatch Update a Volume Purchasing Location

Updates a Volume Purchasing Location

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Volume Purchasing Location identifier
 @return VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdPatchRequest
*/
func (a *VolumePurchasingLocationsAPIService) V1VolumePurchasingLocationsIdPatch(ctx context.Context, id string) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdPatchRequest {
	return VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdPatchRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return VolumePurchasingLocation
func (a *VolumePurchasingLocationsAPIService) V1VolumePurchasingLocationsIdPatchExecute(r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdPatchRequest) (*VolumePurchasingLocation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VolumePurchasingLocation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VolumePurchasingLocationsAPIService.V1VolumePurchasingLocationsIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/volume-purchasing-locations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumePurchasingLocationPatch == nil {
		return localVarReturnValue, nil, reportError("volumePurchasingLocationPatch is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.volumePurchasingLocationPatch
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdReclaimPostRequest struct {
	ctx context.Context
	ApiService VolumePurchasingLocationsAPI
	id string
}

func (r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdReclaimPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1VolumePurchasingLocationsIdReclaimPostExecute(r)
}

/*
V1VolumePurchasingLocationsIdReclaimPost Reclaim a Volume Purchasing Location with the supplied id

Reclaims a Volume Purchasing Location with the supplied id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Volume Purchasing Location identifier
 @return VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdReclaimPostRequest
*/
func (a *VolumePurchasingLocationsAPIService) V1VolumePurchasingLocationsIdReclaimPost(ctx context.Context, id string) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdReclaimPostRequest {
	return VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdReclaimPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *VolumePurchasingLocationsAPIService) V1VolumePurchasingLocationsIdReclaimPostExecute(r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdReclaimPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VolumePurchasingLocationsAPIService.V1VolumePurchasingLocationsIdReclaimPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/volume-purchasing-locations/{id}/reclaim"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdRevokeLicensesPostRequest struct {
	ctx context.Context
	ApiService VolumePurchasingLocationsAPI
	id string
}

func (r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdRevokeLicensesPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1VolumePurchasingLocationsIdRevokeLicensesPostExecute(r)
}

/*
V1VolumePurchasingLocationsIdRevokeLicensesPost Revoke licenses for a Volume Purchasing Location with the supplied id

Revokes licenses for a Volume Purchasing Location with the supplied id. The licenses must be revokable - any asset whose licenses are irrevocable will not be revoked.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Volume Purchasing Location identifier
 @return VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdRevokeLicensesPostRequest
*/
func (a *VolumePurchasingLocationsAPIService) V1VolumePurchasingLocationsIdRevokeLicensesPost(ctx context.Context, id string) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdRevokeLicensesPostRequest {
	return VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdRevokeLicensesPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *VolumePurchasingLocationsAPIService) V1VolumePurchasingLocationsIdRevokeLicensesPostExecute(r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsIdRevokeLicensesPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VolumePurchasingLocationsAPIService.V1VolumePurchasingLocationsIdRevokeLicensesPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/volume-purchasing-locations/{id}/revoke-licenses"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VolumePurchasingLocationsAPIV1VolumePurchasingLocationsPostRequest struct {
	ctx context.Context
	ApiService VolumePurchasingLocationsAPI
	volumePurchasingLocationPost *VolumePurchasingLocationPost
}

// Volume Purchasing Location to create
func (r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsPostRequest) VolumePurchasingLocationPost(volumePurchasingLocationPost VolumePurchasingLocationPost) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsPostRequest {
	r.volumePurchasingLocationPost = &volumePurchasingLocationPost
	return r
}

func (r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsPostRequest) Execute() (*HrefResponse, *http.Response, error) {
	return r.ApiService.V1VolumePurchasingLocationsPostExecute(r)
}

/*
V1VolumePurchasingLocationsPost Create a Volume Purchasing Location

Creates a Volume Purchasing Location using an sToken

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return VolumePurchasingLocationsAPIV1VolumePurchasingLocationsPostRequest
*/
func (a *VolumePurchasingLocationsAPIService) V1VolumePurchasingLocationsPost(ctx context.Context) VolumePurchasingLocationsAPIV1VolumePurchasingLocationsPostRequest {
	return VolumePurchasingLocationsAPIV1VolumePurchasingLocationsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HrefResponse
func (a *VolumePurchasingLocationsAPIService) V1VolumePurchasingLocationsPostExecute(r VolumePurchasingLocationsAPIV1VolumePurchasingLocationsPostRequest) (*HrefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HrefResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VolumePurchasingLocationsAPIService.V1VolumePurchasingLocationsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/volume-purchasing-locations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumePurchasingLocationPost == nil {
		return localVarReturnValue, nil, reportError("volumePurchasingLocationPost is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.volumePurchasingLocationPost
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
