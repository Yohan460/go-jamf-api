/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type JamfProUserAccountSettingsPreviewAPI interface {

	/*
	UserObjPreferenceKeyDelete Remove specified setting for authenticated user 

	Remove specified setting for authenticated user


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param key key of user setting to be persisted
	@return JamfProUserAccountSettingsPreviewAPIUserObjPreferenceKeyDeleteRequest

	Deprecated
	*/
	UserObjPreferenceKeyDelete(ctx context.Context, key string) JamfProUserAccountSettingsPreviewAPIUserObjPreferenceKeyDeleteRequest

	// UserObjPreferenceKeyDeleteExecute executes the request
	// Deprecated
	UserObjPreferenceKeyDeleteExecute(r JamfProUserAccountSettingsPreviewAPIUserObjPreferenceKeyDeleteRequest) (*http.Response, error)

	/*
	UserObjPreferenceKeyGet Get the user setting for the authenticated user and key 

	Gets the user setting for the authenticated user and key.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param key user setting to be retrieved
	@return JamfProUserAccountSettingsPreviewAPIUserObjPreferenceKeyGetRequest

	Deprecated
	*/
	UserObjPreferenceKeyGet(ctx context.Context, key string) JamfProUserAccountSettingsPreviewAPIUserObjPreferenceKeyGetRequest

	// UserObjPreferenceKeyGetExecute executes the request
	//  @return map[string]interface{}
	// Deprecated
	UserObjPreferenceKeyGetExecute(r JamfProUserAccountSettingsPreviewAPIUserObjPreferenceKeyGetRequest) (map[string]interface{}, *http.Response, error)

	/*
	UserObjPreferenceKeyPut Persist the user setting 

	Persists the user setting


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param key key of user setting to be persisted
	@return JamfProUserAccountSettingsPreviewAPIUserObjPreferenceKeyPutRequest

	Deprecated
	*/
	UserObjPreferenceKeyPut(ctx context.Context, key string) JamfProUserAccountSettingsPreviewAPIUserObjPreferenceKeyPutRequest

	// UserObjPreferenceKeyPutExecute executes the request
	//  @return map[string]interface{}
	// Deprecated
	UserObjPreferenceKeyPutExecute(r JamfProUserAccountSettingsPreviewAPIUserObjPreferenceKeyPutRequest) (map[string]interface{}, *http.Response, error)
}

// JamfProUserAccountSettingsPreviewAPIService JamfProUserAccountSettingsPreviewAPI service
type JamfProUserAccountSettingsPreviewAPIService service

type JamfProUserAccountSettingsPreviewAPIUserObjPreferenceKeyDeleteRequest struct {
	ctx context.Context
	ApiService JamfProUserAccountSettingsPreviewAPI
	key string
}

func (r JamfProUserAccountSettingsPreviewAPIUserObjPreferenceKeyDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.UserObjPreferenceKeyDeleteExecute(r)
}

/*
UserObjPreferenceKeyDelete Remove specified setting for authenticated user 

Remove specified setting for authenticated user


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param key key of user setting to be persisted
 @return JamfProUserAccountSettingsPreviewAPIUserObjPreferenceKeyDeleteRequest

Deprecated
*/
func (a *JamfProUserAccountSettingsPreviewAPIService) UserObjPreferenceKeyDelete(ctx context.Context, key string) JamfProUserAccountSettingsPreviewAPIUserObjPreferenceKeyDeleteRequest {
	return JamfProUserAccountSettingsPreviewAPIUserObjPreferenceKeyDeleteRequest{
		ApiService: a,
		ctx: ctx,
		key: key,
	}
}

// Execute executes the request
// Deprecated
func (a *JamfProUserAccountSettingsPreviewAPIService) UserObjPreferenceKeyDeleteExecute(r JamfProUserAccountSettingsPreviewAPIUserObjPreferenceKeyDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JamfProUserAccountSettingsPreviewAPIService.UserObjPreferenceKeyDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user/obj/preference/{key}"
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", url.PathEscape(parameterValueToString(r.key, "key")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type JamfProUserAccountSettingsPreviewAPIUserObjPreferenceKeyGetRequest struct {
	ctx context.Context
	ApiService JamfProUserAccountSettingsPreviewAPI
	key string
}

func (r JamfProUserAccountSettingsPreviewAPIUserObjPreferenceKeyGetRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.UserObjPreferenceKeyGetExecute(r)
}

/*
UserObjPreferenceKeyGet Get the user setting for the authenticated user and key 

Gets the user setting for the authenticated user and key.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param key user setting to be retrieved
 @return JamfProUserAccountSettingsPreviewAPIUserObjPreferenceKeyGetRequest

Deprecated
*/
func (a *JamfProUserAccountSettingsPreviewAPIService) UserObjPreferenceKeyGet(ctx context.Context, key string) JamfProUserAccountSettingsPreviewAPIUserObjPreferenceKeyGetRequest {
	return JamfProUserAccountSettingsPreviewAPIUserObjPreferenceKeyGetRequest{
		ApiService: a,
		ctx: ctx,
		key: key,
	}
}

// Execute executes the request
//  @return map[string]interface{}
// Deprecated
func (a *JamfProUserAccountSettingsPreviewAPIService) UserObjPreferenceKeyGetExecute(r JamfProUserAccountSettingsPreviewAPIUserObjPreferenceKeyGetRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JamfProUserAccountSettingsPreviewAPIService.UserObjPreferenceKeyGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user/obj/preference/{key}"
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", url.PathEscape(parameterValueToString(r.key, "key")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type JamfProUserAccountSettingsPreviewAPIUserObjPreferenceKeyPutRequest struct {
	ctx context.Context
	ApiService JamfProUserAccountSettingsPreviewAPI
	key string
	body *string
}

// user setting value to be persisted
func (r JamfProUserAccountSettingsPreviewAPIUserObjPreferenceKeyPutRequest) Body(body string) JamfProUserAccountSettingsPreviewAPIUserObjPreferenceKeyPutRequest {
	r.body = &body
	return r
}

func (r JamfProUserAccountSettingsPreviewAPIUserObjPreferenceKeyPutRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.UserObjPreferenceKeyPutExecute(r)
}

/*
UserObjPreferenceKeyPut Persist the user setting 

Persists the user setting


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param key key of user setting to be persisted
 @return JamfProUserAccountSettingsPreviewAPIUserObjPreferenceKeyPutRequest

Deprecated
*/
func (a *JamfProUserAccountSettingsPreviewAPIService) UserObjPreferenceKeyPut(ctx context.Context, key string) JamfProUserAccountSettingsPreviewAPIUserObjPreferenceKeyPutRequest {
	return JamfProUserAccountSettingsPreviewAPIUserObjPreferenceKeyPutRequest{
		ApiService: a,
		ctx: ctx,
		key: key,
	}
}

// Execute executes the request
//  @return map[string]interface{}
// Deprecated
func (a *JamfProUserAccountSettingsPreviewAPIService) UserObjPreferenceKeyPutExecute(r JamfProUserAccountSettingsPreviewAPIUserObjPreferenceKeyPutRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JamfProUserAccountSettingsPreviewAPIService.UserObjPreferenceKeyPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user/obj/preference/{key}"
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", url.PathEscape(parameterValueToString(r.key, "key")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
