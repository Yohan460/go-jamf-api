/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// checks if the PatchPolicyLogV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchPolicyLogV2{}

// PatchPolicyLogV2 struct for PatchPolicyLogV2
type PatchPolicyLogV2 struct {
	PatchPolicyId *string `json:"patchPolicyId,omitempty"`
	DeviceName *string `json:"deviceName,omitempty"`
	DeviceId *string `json:"deviceId,omitempty"`
	StatusCode *int64 `json:"statusCode,omitempty"`
	StatusDate *time.Time `json:"statusDate,omitempty"`
	StatusEnum *string `json:"statusEnum,omitempty"`
	AttemptNumber *int64 `json:"attemptNumber,omitempty"`
	IgnoredForPatchPolicyId *string `json:"ignoredForPatchPolicyId,omitempty"`
}

// NewPatchPolicyLogV2 instantiates a new PatchPolicyLogV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchPolicyLogV2() *PatchPolicyLogV2 {
	this := PatchPolicyLogV2{}
	return &this
}

// NewPatchPolicyLogV2WithDefaults instantiates a new PatchPolicyLogV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchPolicyLogV2WithDefaults() *PatchPolicyLogV2 {
	this := PatchPolicyLogV2{}
	return &this
}

// GetPatchPolicyId returns the PatchPolicyId field value if set, zero value otherwise.
func (o *PatchPolicyLogV2) GetPatchPolicyId() string {
	if o == nil || IsNil(o.PatchPolicyId) {
		var ret string
		return ret
	}
	return *o.PatchPolicyId
}

// GetPatchPolicyIdOk returns a tuple with the PatchPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyLogV2) GetPatchPolicyIdOk() (*string, bool) {
	if o == nil || IsNil(o.PatchPolicyId) {
		return nil, false
	}
	return o.PatchPolicyId, true
}

// HasPatchPolicyId returns a boolean if a field has been set.
func (o *PatchPolicyLogV2) HasPatchPolicyId() bool {
	if o != nil && !IsNil(o.PatchPolicyId) {
		return true
	}

	return false
}

// SetPatchPolicyId gets a reference to the given string and assigns it to the PatchPolicyId field.
func (o *PatchPolicyLogV2) SetPatchPolicyId(v string) {
	o.PatchPolicyId = &v
}

// GetDeviceName returns the DeviceName field value if set, zero value otherwise.
func (o *PatchPolicyLogV2) GetDeviceName() string {
	if o == nil || IsNil(o.DeviceName) {
		var ret string
		return ret
	}
	return *o.DeviceName
}

// GetDeviceNameOk returns a tuple with the DeviceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyLogV2) GetDeviceNameOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceName) {
		return nil, false
	}
	return o.DeviceName, true
}

// HasDeviceName returns a boolean if a field has been set.
func (o *PatchPolicyLogV2) HasDeviceName() bool {
	if o != nil && !IsNil(o.DeviceName) {
		return true
	}

	return false
}

// SetDeviceName gets a reference to the given string and assigns it to the DeviceName field.
func (o *PatchPolicyLogV2) SetDeviceName(v string) {
	o.DeviceName = &v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *PatchPolicyLogV2) GetDeviceId() string {
	if o == nil || IsNil(o.DeviceId) {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyLogV2) GetDeviceIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *PatchPolicyLogV2) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *PatchPolicyLogV2) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *PatchPolicyLogV2) GetStatusCode() int64 {
	if o == nil || IsNil(o.StatusCode) {
		var ret int64
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyLogV2) GetStatusCodeOk() (*int64, bool) {
	if o == nil || IsNil(o.StatusCode) {
		return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *PatchPolicyLogV2) HasStatusCode() bool {
	if o != nil && !IsNil(o.StatusCode) {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given int64 and assigns it to the StatusCode field.
func (o *PatchPolicyLogV2) SetStatusCode(v int64) {
	o.StatusCode = &v
}

// GetStatusDate returns the StatusDate field value if set, zero value otherwise.
func (o *PatchPolicyLogV2) GetStatusDate() time.Time {
	if o == nil || IsNil(o.StatusDate) {
		var ret time.Time
		return ret
	}
	return *o.StatusDate
}

// GetStatusDateOk returns a tuple with the StatusDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyLogV2) GetStatusDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StatusDate) {
		return nil, false
	}
	return o.StatusDate, true
}

// HasStatusDate returns a boolean if a field has been set.
func (o *PatchPolicyLogV2) HasStatusDate() bool {
	if o != nil && !IsNil(o.StatusDate) {
		return true
	}

	return false
}

// SetStatusDate gets a reference to the given time.Time and assigns it to the StatusDate field.
func (o *PatchPolicyLogV2) SetStatusDate(v time.Time) {
	o.StatusDate = &v
}

// GetStatusEnum returns the StatusEnum field value if set, zero value otherwise.
func (o *PatchPolicyLogV2) GetStatusEnum() string {
	if o == nil || IsNil(o.StatusEnum) {
		var ret string
		return ret
	}
	return *o.StatusEnum
}

// GetStatusEnumOk returns a tuple with the StatusEnum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyLogV2) GetStatusEnumOk() (*string, bool) {
	if o == nil || IsNil(o.StatusEnum) {
		return nil, false
	}
	return o.StatusEnum, true
}

// HasStatusEnum returns a boolean if a field has been set.
func (o *PatchPolicyLogV2) HasStatusEnum() bool {
	if o != nil && !IsNil(o.StatusEnum) {
		return true
	}

	return false
}

// SetStatusEnum gets a reference to the given string and assigns it to the StatusEnum field.
func (o *PatchPolicyLogV2) SetStatusEnum(v string) {
	o.StatusEnum = &v
}

// GetAttemptNumber returns the AttemptNumber field value if set, zero value otherwise.
func (o *PatchPolicyLogV2) GetAttemptNumber() int64 {
	if o == nil || IsNil(o.AttemptNumber) {
		var ret int64
		return ret
	}
	return *o.AttemptNumber
}

// GetAttemptNumberOk returns a tuple with the AttemptNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyLogV2) GetAttemptNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.AttemptNumber) {
		return nil, false
	}
	return o.AttemptNumber, true
}

// HasAttemptNumber returns a boolean if a field has been set.
func (o *PatchPolicyLogV2) HasAttemptNumber() bool {
	if o != nil && !IsNil(o.AttemptNumber) {
		return true
	}

	return false
}

// SetAttemptNumber gets a reference to the given int64 and assigns it to the AttemptNumber field.
func (o *PatchPolicyLogV2) SetAttemptNumber(v int64) {
	o.AttemptNumber = &v
}

// GetIgnoredForPatchPolicyId returns the IgnoredForPatchPolicyId field value if set, zero value otherwise.
func (o *PatchPolicyLogV2) GetIgnoredForPatchPolicyId() string {
	if o == nil || IsNil(o.IgnoredForPatchPolicyId) {
		var ret string
		return ret
	}
	return *o.IgnoredForPatchPolicyId
}

// GetIgnoredForPatchPolicyIdOk returns a tuple with the IgnoredForPatchPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyLogV2) GetIgnoredForPatchPolicyIdOk() (*string, bool) {
	if o == nil || IsNil(o.IgnoredForPatchPolicyId) {
		return nil, false
	}
	return o.IgnoredForPatchPolicyId, true
}

// HasIgnoredForPatchPolicyId returns a boolean if a field has been set.
func (o *PatchPolicyLogV2) HasIgnoredForPatchPolicyId() bool {
	if o != nil && !IsNil(o.IgnoredForPatchPolicyId) {
		return true
	}

	return false
}

// SetIgnoredForPatchPolicyId gets a reference to the given string and assigns it to the IgnoredForPatchPolicyId field.
func (o *PatchPolicyLogV2) SetIgnoredForPatchPolicyId(v string) {
	o.IgnoredForPatchPolicyId = &v
}

func (o PatchPolicyLogV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchPolicyLogV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PatchPolicyId) {
		toSerialize["patchPolicyId"] = o.PatchPolicyId
	}
	if !IsNil(o.DeviceName) {
		toSerialize["deviceName"] = o.DeviceName
	}
	if !IsNil(o.DeviceId) {
		toSerialize["deviceId"] = o.DeviceId
	}
	if !IsNil(o.StatusCode) {
		toSerialize["statusCode"] = o.StatusCode
	}
	if !IsNil(o.StatusDate) {
		toSerialize["statusDate"] = o.StatusDate
	}
	if !IsNil(o.StatusEnum) {
		toSerialize["statusEnum"] = o.StatusEnum
	}
	if !IsNil(o.AttemptNumber) {
		toSerialize["attemptNumber"] = o.AttemptNumber
	}
	if !IsNil(o.IgnoredForPatchPolicyId) {
		toSerialize["ignoredForPatchPolicyId"] = o.IgnoredForPatchPolicyId
	}
	return toSerialize, nil
}

type NullablePatchPolicyLogV2 struct {
	value *PatchPolicyLogV2
	isSet bool
}

func (v NullablePatchPolicyLogV2) Get() *PatchPolicyLogV2 {
	return v.value
}

func (v *NullablePatchPolicyLogV2) Set(val *PatchPolicyLogV2) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchPolicyLogV2) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchPolicyLogV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchPolicyLogV2(val *PatchPolicyLogV2) *NullablePatchPolicyLogV2 {
	return &NullablePatchPolicyLogV2{value: val, isSet: true}
}

func (v NullablePatchPolicyLogV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchPolicyLogV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


