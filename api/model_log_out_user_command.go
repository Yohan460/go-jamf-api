/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// LogOutUserCommand struct for LogOutUserCommand
type LogOutUserCommand struct {
	RequestType *string `json:"RequestType,omitempty"`
	RequestRequiresNetworkTether *bool `json:"RequestRequiresNetworkTether,omitempty"`
}

// NewLogOutUserCommand instantiates a new LogOutUserCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogOutUserCommand() *LogOutUserCommand {
	this := LogOutUserCommand{}
	return &this
}

// NewLogOutUserCommandWithDefaults instantiates a new LogOutUserCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogOutUserCommandWithDefaults() *LogOutUserCommand {
	this := LogOutUserCommand{}
	return &this
}

// GetRequestType returns the RequestType field value if set, zero value otherwise.
func (o *LogOutUserCommand) GetRequestType() string {
	if o == nil || o.RequestType == nil {
		var ret string
		return ret
	}
	return *o.RequestType
}

// GetRequestTypeOk returns a tuple with the RequestType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogOutUserCommand) GetRequestTypeOk() (*string, bool) {
	if o == nil || o.RequestType == nil {
		return nil, false
	}
	return o.RequestType, true
}

// HasRequestType returns a boolean if a field has been set.
func (o *LogOutUserCommand) HasRequestType() bool {
	if o != nil && o.RequestType != nil {
		return true
	}

	return false
}

// SetRequestType gets a reference to the given string and assigns it to the RequestType field.
func (o *LogOutUserCommand) SetRequestType(v string) {
	o.RequestType = &v
}

// GetRequestRequiresNetworkTether returns the RequestRequiresNetworkTether field value if set, zero value otherwise.
func (o *LogOutUserCommand) GetRequestRequiresNetworkTether() bool {
	if o == nil || o.RequestRequiresNetworkTether == nil {
		var ret bool
		return ret
	}
	return *o.RequestRequiresNetworkTether
}

// GetRequestRequiresNetworkTetherOk returns a tuple with the RequestRequiresNetworkTether field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogOutUserCommand) GetRequestRequiresNetworkTetherOk() (*bool, bool) {
	if o == nil || o.RequestRequiresNetworkTether == nil {
		return nil, false
	}
	return o.RequestRequiresNetworkTether, true
}

// HasRequestRequiresNetworkTether returns a boolean if a field has been set.
func (o *LogOutUserCommand) HasRequestRequiresNetworkTether() bool {
	if o != nil && o.RequestRequiresNetworkTether != nil {
		return true
	}

	return false
}

// SetRequestRequiresNetworkTether gets a reference to the given bool and assigns it to the RequestRequiresNetworkTether field.
func (o *LogOutUserCommand) SetRequestRequiresNetworkTether(v bool) {
	o.RequestRequiresNetworkTether = &v
}

func (o LogOutUserCommand) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RequestType != nil {
		toSerialize["RequestType"] = o.RequestType
	}
	if o.RequestRequiresNetworkTether != nil {
		toSerialize["RequestRequiresNetworkTether"] = o.RequestRequiresNetworkTether
	}
	return json.Marshal(toSerialize)
}

type NullableLogOutUserCommand struct {
	value *LogOutUserCommand
	isSet bool
}

func (v NullableLogOutUserCommand) Get() *LogOutUserCommand {
	return v.value
}

func (v *NullableLogOutUserCommand) Set(val *LogOutUserCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableLogOutUserCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableLogOutUserCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogOutUserCommand(val *LogOutUserCommand) *NullableLogOutUserCommand {
	return &NullableLogOutUserCommand{value: val, isSet: true}
}

func (v NullableLogOutUserCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogOutUserCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


