/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LogOutUserCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogOutUserCommand{}

// LogOutUserCommand struct for LogOutUserCommand
type LogOutUserCommand struct {
	CommandType MdmCommandType `json:"commandType"`
}

type _LogOutUserCommand LogOutUserCommand

// NewLogOutUserCommand instantiates a new LogOutUserCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogOutUserCommand(commandType MdmCommandType) *LogOutUserCommand {
	this := LogOutUserCommand{}
	this.CommandType = commandType
	return &this
}

// NewLogOutUserCommandWithDefaults instantiates a new LogOutUserCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogOutUserCommandWithDefaults() *LogOutUserCommand {
	this := LogOutUserCommand{}
	return &this
}

// GetCommandType returns the CommandType field value
func (o *LogOutUserCommand) GetCommandType() MdmCommandType {
	if o == nil {
		var ret MdmCommandType
		return ret
	}

	return o.CommandType
}

// GetCommandTypeOk returns a tuple with the CommandType field value
// and a boolean to check if the value has been set.
func (o *LogOutUserCommand) GetCommandTypeOk() (*MdmCommandType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommandType, true
}

// SetCommandType sets field value
func (o *LogOutUserCommand) SetCommandType(v MdmCommandType) {
	o.CommandType = v
}

func (o LogOutUserCommand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogOutUserCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["commandType"] = o.CommandType
	return toSerialize, nil
}

func (o *LogOutUserCommand) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"commandType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogOutUserCommand := _LogOutUserCommand{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLogOutUserCommand)

	if err != nil {
		return err
	}

	*o = LogOutUserCommand(varLogOutUserCommand)

	return err
}

type NullableLogOutUserCommand struct {
	value *LogOutUserCommand
	isSet bool
}

func (v NullableLogOutUserCommand) Get() *LogOutUserCommand {
	return v.value
}

func (v *NullableLogOutUserCommand) Set(val *LogOutUserCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableLogOutUserCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableLogOutUserCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogOutUserCommand(val *LogOutUserCommand) *NullableLogOutUserCommand {
	return &NullableLogOutUserCommand{value: val, isSet: true}
}

func (v NullableLogOutUserCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogOutUserCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


