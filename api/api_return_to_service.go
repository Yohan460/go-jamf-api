/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ReturnToServiceAPI interface {

	/*
	V1ReturnToServiceGet Get all Return to Service Configurations 

	Gets all return to service configurations.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ReturnToServiceAPIV1ReturnToServiceGetRequest
	*/
	V1ReturnToServiceGet(ctx context.Context) ReturnToServiceAPIV1ReturnToServiceGetRequest

	// V1ReturnToServiceGetExecute executes the request
	//  @return ReturnToServiceConfigurationSearchResults
	V1ReturnToServiceGetExecute(r ReturnToServiceAPIV1ReturnToServiceGetRequest) (*ReturnToServiceConfigurationSearchResults, *http.Response, error)

	/*
	V1ReturnToServiceIdDelete Delete a Return To Service Configuration with the supplied id 

	Deletes a Return To Service Configuration with the supplied id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Return To Service Configurations identifier
	@return ReturnToServiceAPIV1ReturnToServiceIdDeleteRequest
	*/
	V1ReturnToServiceIdDelete(ctx context.Context, id string) ReturnToServiceAPIV1ReturnToServiceIdDeleteRequest

	// V1ReturnToServiceIdDeleteExecute executes the request
	V1ReturnToServiceIdDeleteExecute(r ReturnToServiceAPIV1ReturnToServiceIdDeleteRequest) (*http.Response, error)

	/*
	V1ReturnToServiceIdGet Retrieve a Return to Service Configuration with the supplied id 

	Retrieves a Return to Service Configuration with the supplied id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Return to Service Configuration identifier
	@return ReturnToServiceAPIV1ReturnToServiceIdGetRequest
	*/
	V1ReturnToServiceIdGet(ctx context.Context, id string) ReturnToServiceAPIV1ReturnToServiceIdGetRequest

	// V1ReturnToServiceIdGetExecute executes the request
	//  @return ReturnToServiceConfiguration
	V1ReturnToServiceIdGetExecute(r ReturnToServiceAPIV1ReturnToServiceIdGetRequest) (*ReturnToServiceConfiguration, *http.Response, error)

	/*
	V1ReturnToServiceIdPut Update a Return to Service Configuration 

	Updates a Return to Service Configuration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Return to Service Configuration identifier
	@return ReturnToServiceAPIV1ReturnToServiceIdPutRequest
	*/
	V1ReturnToServiceIdPut(ctx context.Context, id string) ReturnToServiceAPIV1ReturnToServiceIdPutRequest

	// V1ReturnToServiceIdPutExecute executes the request
	//  @return ReturnToServiceConfiguration
	V1ReturnToServiceIdPutExecute(r ReturnToServiceAPIV1ReturnToServiceIdPutRequest) (*ReturnToServiceConfiguration, *http.Response, error)

	/*
	V1ReturnToServicePost Create a Return to Service Configuration 

	Create a return to service configuration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ReturnToServiceAPIV1ReturnToServicePostRequest
	*/
	V1ReturnToServicePost(ctx context.Context) ReturnToServiceAPIV1ReturnToServicePostRequest

	// V1ReturnToServicePostExecute executes the request
	//  @return HrefResponse
	V1ReturnToServicePostExecute(r ReturnToServiceAPIV1ReturnToServicePostRequest) (*HrefResponse, *http.Response, error)
}

// ReturnToServiceAPIService ReturnToServiceAPI service
type ReturnToServiceAPIService service

type ReturnToServiceAPIV1ReturnToServiceGetRequest struct {
	ctx context.Context
	ApiService ReturnToServiceAPI
}

func (r ReturnToServiceAPIV1ReturnToServiceGetRequest) Execute() (*ReturnToServiceConfigurationSearchResults, *http.Response, error) {
	return r.ApiService.V1ReturnToServiceGetExecute(r)
}

/*
V1ReturnToServiceGet Get all Return to Service Configurations 

Gets all return to service configurations.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReturnToServiceAPIV1ReturnToServiceGetRequest
*/
func (a *ReturnToServiceAPIService) V1ReturnToServiceGet(ctx context.Context) ReturnToServiceAPIV1ReturnToServiceGetRequest {
	return ReturnToServiceAPIV1ReturnToServiceGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ReturnToServiceConfigurationSearchResults
func (a *ReturnToServiceAPIService) V1ReturnToServiceGetExecute(r ReturnToServiceAPIV1ReturnToServiceGetRequest) (*ReturnToServiceConfigurationSearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReturnToServiceConfigurationSearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReturnToServiceAPIService.V1ReturnToServiceGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/return-to-service"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReturnToServiceAPIV1ReturnToServiceIdDeleteRequest struct {
	ctx context.Context
	ApiService ReturnToServiceAPI
	id string
}

func (r ReturnToServiceAPIV1ReturnToServiceIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1ReturnToServiceIdDeleteExecute(r)
}

/*
V1ReturnToServiceIdDelete Delete a Return To Service Configuration with the supplied id 

Deletes a Return To Service Configuration with the supplied id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Return To Service Configurations identifier
 @return ReturnToServiceAPIV1ReturnToServiceIdDeleteRequest
*/
func (a *ReturnToServiceAPIService) V1ReturnToServiceIdDelete(ctx context.Context, id string) ReturnToServiceAPIV1ReturnToServiceIdDeleteRequest {
	return ReturnToServiceAPIV1ReturnToServiceIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ReturnToServiceAPIService) V1ReturnToServiceIdDeleteExecute(r ReturnToServiceAPIV1ReturnToServiceIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReturnToServiceAPIService.V1ReturnToServiceIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/return-to-service/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ReturnToServiceAPIV1ReturnToServiceIdGetRequest struct {
	ctx context.Context
	ApiService ReturnToServiceAPI
	id string
}

func (r ReturnToServiceAPIV1ReturnToServiceIdGetRequest) Execute() (*ReturnToServiceConfiguration, *http.Response, error) {
	return r.ApiService.V1ReturnToServiceIdGetExecute(r)
}

/*
V1ReturnToServiceIdGet Retrieve a Return to Service Configuration with the supplied id 

Retrieves a Return to Service Configuration with the supplied id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Return to Service Configuration identifier
 @return ReturnToServiceAPIV1ReturnToServiceIdGetRequest
*/
func (a *ReturnToServiceAPIService) V1ReturnToServiceIdGet(ctx context.Context, id string) ReturnToServiceAPIV1ReturnToServiceIdGetRequest {
	return ReturnToServiceAPIV1ReturnToServiceIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ReturnToServiceConfiguration
func (a *ReturnToServiceAPIService) V1ReturnToServiceIdGetExecute(r ReturnToServiceAPIV1ReturnToServiceIdGetRequest) (*ReturnToServiceConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReturnToServiceConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReturnToServiceAPIService.V1ReturnToServiceIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/return-to-service/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReturnToServiceAPIV1ReturnToServiceIdPutRequest struct {
	ctx context.Context
	ApiService ReturnToServiceAPI
	id string
	returnToServiceConfigurationRequest *ReturnToServiceConfigurationRequest
}

// Return to Service Configuration to update
func (r ReturnToServiceAPIV1ReturnToServiceIdPutRequest) ReturnToServiceConfigurationRequest(returnToServiceConfigurationRequest ReturnToServiceConfigurationRequest) ReturnToServiceAPIV1ReturnToServiceIdPutRequest {
	r.returnToServiceConfigurationRequest = &returnToServiceConfigurationRequest
	return r
}

func (r ReturnToServiceAPIV1ReturnToServiceIdPutRequest) Execute() (*ReturnToServiceConfiguration, *http.Response, error) {
	return r.ApiService.V1ReturnToServiceIdPutExecute(r)
}

/*
V1ReturnToServiceIdPut Update a Return to Service Configuration 

Updates a Return to Service Configuration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Return to Service Configuration identifier
 @return ReturnToServiceAPIV1ReturnToServiceIdPutRequest
*/
func (a *ReturnToServiceAPIService) V1ReturnToServiceIdPut(ctx context.Context, id string) ReturnToServiceAPIV1ReturnToServiceIdPutRequest {
	return ReturnToServiceAPIV1ReturnToServiceIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ReturnToServiceConfiguration
func (a *ReturnToServiceAPIService) V1ReturnToServiceIdPutExecute(r ReturnToServiceAPIV1ReturnToServiceIdPutRequest) (*ReturnToServiceConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReturnToServiceConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReturnToServiceAPIService.V1ReturnToServiceIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/return-to-service/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.returnToServiceConfigurationRequest == nil {
		return localVarReturnValue, nil, reportError("returnToServiceConfigurationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.returnToServiceConfigurationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReturnToServiceAPIV1ReturnToServicePostRequest struct {
	ctx context.Context
	ApiService ReturnToServiceAPI
	returnToServiceConfigurationRequest *ReturnToServiceConfigurationRequest
}

// Return to Service Configuration to create. ids defined in this body will be ignored
func (r ReturnToServiceAPIV1ReturnToServicePostRequest) ReturnToServiceConfigurationRequest(returnToServiceConfigurationRequest ReturnToServiceConfigurationRequest) ReturnToServiceAPIV1ReturnToServicePostRequest {
	r.returnToServiceConfigurationRequest = &returnToServiceConfigurationRequest
	return r
}

func (r ReturnToServiceAPIV1ReturnToServicePostRequest) Execute() (*HrefResponse, *http.Response, error) {
	return r.ApiService.V1ReturnToServicePostExecute(r)
}

/*
V1ReturnToServicePost Create a Return to Service Configuration 

Create a return to service configuration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReturnToServiceAPIV1ReturnToServicePostRequest
*/
func (a *ReturnToServiceAPIService) V1ReturnToServicePost(ctx context.Context) ReturnToServiceAPIV1ReturnToServicePostRequest {
	return ReturnToServiceAPIV1ReturnToServicePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HrefResponse
func (a *ReturnToServiceAPIService) V1ReturnToServicePostExecute(r ReturnToServiceAPIV1ReturnToServicePostRequest) (*HrefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HrefResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReturnToServiceAPIService.V1ReturnToServicePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/return-to-service"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.returnToServiceConfigurationRequest == nil {
		return localVarReturnValue, nil, reportError("returnToServiceConfigurationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.returnToServiceConfigurationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
