/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the AvailableOsUpdates type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AvailableOsUpdates{}

// AvailableOsUpdates struct for AvailableOsUpdates
type AvailableOsUpdates struct {
	AvailableUpdates *AvailableOsUpdatesAvailableUpdates `json:"availableUpdates,omitempty"`
}

// NewAvailableOsUpdates instantiates a new AvailableOsUpdates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailableOsUpdates() *AvailableOsUpdates {
	this := AvailableOsUpdates{}
	return &this
}

// NewAvailableOsUpdatesWithDefaults instantiates a new AvailableOsUpdates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailableOsUpdatesWithDefaults() *AvailableOsUpdates {
	this := AvailableOsUpdates{}
	return &this
}

// GetAvailableUpdates returns the AvailableUpdates field value if set, zero value otherwise.
func (o *AvailableOsUpdates) GetAvailableUpdates() AvailableOsUpdatesAvailableUpdates {
	if o == nil || IsNil(o.AvailableUpdates) {
		var ret AvailableOsUpdatesAvailableUpdates
		return ret
	}
	return *o.AvailableUpdates
}

// GetAvailableUpdatesOk returns a tuple with the AvailableUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableOsUpdates) GetAvailableUpdatesOk() (*AvailableOsUpdatesAvailableUpdates, bool) {
	if o == nil || IsNil(o.AvailableUpdates) {
		return nil, false
	}
	return o.AvailableUpdates, true
}

// HasAvailableUpdates returns a boolean if a field has been set.
func (o *AvailableOsUpdates) HasAvailableUpdates() bool {
	if o != nil && !IsNil(o.AvailableUpdates) {
		return true
	}

	return false
}

// SetAvailableUpdates gets a reference to the given AvailableOsUpdatesAvailableUpdates and assigns it to the AvailableUpdates field.
func (o *AvailableOsUpdates) SetAvailableUpdates(v AvailableOsUpdatesAvailableUpdates) {
	o.AvailableUpdates = &v
}

func (o AvailableOsUpdates) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AvailableOsUpdates) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AvailableUpdates) {
		toSerialize["availableUpdates"] = o.AvailableUpdates
	}
	return toSerialize, nil
}

type NullableAvailableOsUpdates struct {
	value *AvailableOsUpdates
	isSet bool
}

func (v NullableAvailableOsUpdates) Get() *AvailableOsUpdates {
	return v.value
}

func (v *NullableAvailableOsUpdates) Set(val *AvailableOsUpdates) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailableOsUpdates) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailableOsUpdates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailableOsUpdates(val *AvailableOsUpdates) *NullableAvailableOsUpdates {
	return &NullableAvailableOsUpdates{value: val, isSet: true}
}

func (v NullableAvailableOsUpdates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailableOsUpdates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


