/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the EbookScope type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EbookScope{}

// EbookScope struct for EbookScope
type EbookScope struct {
	AllComputers *bool `json:"allComputers,omitempty"`
	AllMobileDevices *bool `json:"allMobileDevices,omitempty"`
	AllUsers *bool `json:"allUsers,omitempty"`
	ComputerIds []string `json:"computerIds,omitempty"`
	ComputerGroupIds []string `json:"computerGroupIds,omitempty"`
	MobileDeviceIds []string `json:"mobileDeviceIds,omitempty"`
	MobileDeviceGroupIds []string `json:"mobileDeviceGroupIds,omitempty"`
	BuildingIds []string `json:"buildingIds,omitempty"`
	DepartmentIds []string `json:"departmentIds,omitempty"`
	UserIds []string `json:"userIds,omitempty"`
	UserGroupIds []string `json:"userGroupIds,omitempty"`
	ClassroomIds []string `json:"classroomIds,omitempty"`
	Limitations *EbookLimitations `json:"limitations,omitempty"`
	Exclusions *EbookExclusions `json:"exclusions,omitempty"`
}

// NewEbookScope instantiates a new EbookScope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEbookScope() *EbookScope {
	this := EbookScope{}
	return &this
}

// NewEbookScopeWithDefaults instantiates a new EbookScope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEbookScopeWithDefaults() *EbookScope {
	this := EbookScope{}
	return &this
}

// GetAllComputers returns the AllComputers field value if set, zero value otherwise.
func (o *EbookScope) GetAllComputers() bool {
	if o == nil || IsNil(o.AllComputers) {
		var ret bool
		return ret
	}
	return *o.AllComputers
}

// GetAllComputersOk returns a tuple with the AllComputers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EbookScope) GetAllComputersOk() (*bool, bool) {
	if o == nil || IsNil(o.AllComputers) {
		return nil, false
	}
	return o.AllComputers, true
}

// HasAllComputers returns a boolean if a field has been set.
func (o *EbookScope) HasAllComputers() bool {
	if o != nil && !IsNil(o.AllComputers) {
		return true
	}

	return false
}

// SetAllComputers gets a reference to the given bool and assigns it to the AllComputers field.
func (o *EbookScope) SetAllComputers(v bool) {
	o.AllComputers = &v
}

// GetAllMobileDevices returns the AllMobileDevices field value if set, zero value otherwise.
func (o *EbookScope) GetAllMobileDevices() bool {
	if o == nil || IsNil(o.AllMobileDevices) {
		var ret bool
		return ret
	}
	return *o.AllMobileDevices
}

// GetAllMobileDevicesOk returns a tuple with the AllMobileDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EbookScope) GetAllMobileDevicesOk() (*bool, bool) {
	if o == nil || IsNil(o.AllMobileDevices) {
		return nil, false
	}
	return o.AllMobileDevices, true
}

// HasAllMobileDevices returns a boolean if a field has been set.
func (o *EbookScope) HasAllMobileDevices() bool {
	if o != nil && !IsNil(o.AllMobileDevices) {
		return true
	}

	return false
}

// SetAllMobileDevices gets a reference to the given bool and assigns it to the AllMobileDevices field.
func (o *EbookScope) SetAllMobileDevices(v bool) {
	o.AllMobileDevices = &v
}

// GetAllUsers returns the AllUsers field value if set, zero value otherwise.
func (o *EbookScope) GetAllUsers() bool {
	if o == nil || IsNil(o.AllUsers) {
		var ret bool
		return ret
	}
	return *o.AllUsers
}

// GetAllUsersOk returns a tuple with the AllUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EbookScope) GetAllUsersOk() (*bool, bool) {
	if o == nil || IsNil(o.AllUsers) {
		return nil, false
	}
	return o.AllUsers, true
}

// HasAllUsers returns a boolean if a field has been set.
func (o *EbookScope) HasAllUsers() bool {
	if o != nil && !IsNil(o.AllUsers) {
		return true
	}

	return false
}

// SetAllUsers gets a reference to the given bool and assigns it to the AllUsers field.
func (o *EbookScope) SetAllUsers(v bool) {
	o.AllUsers = &v
}

// GetComputerIds returns the ComputerIds field value if set, zero value otherwise.
func (o *EbookScope) GetComputerIds() []string {
	if o == nil || IsNil(o.ComputerIds) {
		var ret []string
		return ret
	}
	return o.ComputerIds
}

// GetComputerIdsOk returns a tuple with the ComputerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EbookScope) GetComputerIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ComputerIds) {
		return nil, false
	}
	return o.ComputerIds, true
}

// HasComputerIds returns a boolean if a field has been set.
func (o *EbookScope) HasComputerIds() bool {
	if o != nil && !IsNil(o.ComputerIds) {
		return true
	}

	return false
}

// SetComputerIds gets a reference to the given []string and assigns it to the ComputerIds field.
func (o *EbookScope) SetComputerIds(v []string) {
	o.ComputerIds = v
}

// GetComputerGroupIds returns the ComputerGroupIds field value if set, zero value otherwise.
func (o *EbookScope) GetComputerGroupIds() []string {
	if o == nil || IsNil(o.ComputerGroupIds) {
		var ret []string
		return ret
	}
	return o.ComputerGroupIds
}

// GetComputerGroupIdsOk returns a tuple with the ComputerGroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EbookScope) GetComputerGroupIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ComputerGroupIds) {
		return nil, false
	}
	return o.ComputerGroupIds, true
}

// HasComputerGroupIds returns a boolean if a field has been set.
func (o *EbookScope) HasComputerGroupIds() bool {
	if o != nil && !IsNil(o.ComputerGroupIds) {
		return true
	}

	return false
}

// SetComputerGroupIds gets a reference to the given []string and assigns it to the ComputerGroupIds field.
func (o *EbookScope) SetComputerGroupIds(v []string) {
	o.ComputerGroupIds = v
}

// GetMobileDeviceIds returns the MobileDeviceIds field value if set, zero value otherwise.
func (o *EbookScope) GetMobileDeviceIds() []string {
	if o == nil || IsNil(o.MobileDeviceIds) {
		var ret []string
		return ret
	}
	return o.MobileDeviceIds
}

// GetMobileDeviceIdsOk returns a tuple with the MobileDeviceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EbookScope) GetMobileDeviceIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.MobileDeviceIds) {
		return nil, false
	}
	return o.MobileDeviceIds, true
}

// HasMobileDeviceIds returns a boolean if a field has been set.
func (o *EbookScope) HasMobileDeviceIds() bool {
	if o != nil && !IsNil(o.MobileDeviceIds) {
		return true
	}

	return false
}

// SetMobileDeviceIds gets a reference to the given []string and assigns it to the MobileDeviceIds field.
func (o *EbookScope) SetMobileDeviceIds(v []string) {
	o.MobileDeviceIds = v
}

// GetMobileDeviceGroupIds returns the MobileDeviceGroupIds field value if set, zero value otherwise.
func (o *EbookScope) GetMobileDeviceGroupIds() []string {
	if o == nil || IsNil(o.MobileDeviceGroupIds) {
		var ret []string
		return ret
	}
	return o.MobileDeviceGroupIds
}

// GetMobileDeviceGroupIdsOk returns a tuple with the MobileDeviceGroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EbookScope) GetMobileDeviceGroupIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.MobileDeviceGroupIds) {
		return nil, false
	}
	return o.MobileDeviceGroupIds, true
}

// HasMobileDeviceGroupIds returns a boolean if a field has been set.
func (o *EbookScope) HasMobileDeviceGroupIds() bool {
	if o != nil && !IsNil(o.MobileDeviceGroupIds) {
		return true
	}

	return false
}

// SetMobileDeviceGroupIds gets a reference to the given []string and assigns it to the MobileDeviceGroupIds field.
func (o *EbookScope) SetMobileDeviceGroupIds(v []string) {
	o.MobileDeviceGroupIds = v
}

// GetBuildingIds returns the BuildingIds field value if set, zero value otherwise.
func (o *EbookScope) GetBuildingIds() []string {
	if o == nil || IsNil(o.BuildingIds) {
		var ret []string
		return ret
	}
	return o.BuildingIds
}

// GetBuildingIdsOk returns a tuple with the BuildingIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EbookScope) GetBuildingIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.BuildingIds) {
		return nil, false
	}
	return o.BuildingIds, true
}

// HasBuildingIds returns a boolean if a field has been set.
func (o *EbookScope) HasBuildingIds() bool {
	if o != nil && !IsNil(o.BuildingIds) {
		return true
	}

	return false
}

// SetBuildingIds gets a reference to the given []string and assigns it to the BuildingIds field.
func (o *EbookScope) SetBuildingIds(v []string) {
	o.BuildingIds = v
}

// GetDepartmentIds returns the DepartmentIds field value if set, zero value otherwise.
func (o *EbookScope) GetDepartmentIds() []string {
	if o == nil || IsNil(o.DepartmentIds) {
		var ret []string
		return ret
	}
	return o.DepartmentIds
}

// GetDepartmentIdsOk returns a tuple with the DepartmentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EbookScope) GetDepartmentIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.DepartmentIds) {
		return nil, false
	}
	return o.DepartmentIds, true
}

// HasDepartmentIds returns a boolean if a field has been set.
func (o *EbookScope) HasDepartmentIds() bool {
	if o != nil && !IsNil(o.DepartmentIds) {
		return true
	}

	return false
}

// SetDepartmentIds gets a reference to the given []string and assigns it to the DepartmentIds field.
func (o *EbookScope) SetDepartmentIds(v []string) {
	o.DepartmentIds = v
}

// GetUserIds returns the UserIds field value if set, zero value otherwise.
func (o *EbookScope) GetUserIds() []string {
	if o == nil || IsNil(o.UserIds) {
		var ret []string
		return ret
	}
	return o.UserIds
}

// GetUserIdsOk returns a tuple with the UserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EbookScope) GetUserIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.UserIds) {
		return nil, false
	}
	return o.UserIds, true
}

// HasUserIds returns a boolean if a field has been set.
func (o *EbookScope) HasUserIds() bool {
	if o != nil && !IsNil(o.UserIds) {
		return true
	}

	return false
}

// SetUserIds gets a reference to the given []string and assigns it to the UserIds field.
func (o *EbookScope) SetUserIds(v []string) {
	o.UserIds = v
}

// GetUserGroupIds returns the UserGroupIds field value if set, zero value otherwise.
func (o *EbookScope) GetUserGroupIds() []string {
	if o == nil || IsNil(o.UserGroupIds) {
		var ret []string
		return ret
	}
	return o.UserGroupIds
}

// GetUserGroupIdsOk returns a tuple with the UserGroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EbookScope) GetUserGroupIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.UserGroupIds) {
		return nil, false
	}
	return o.UserGroupIds, true
}

// HasUserGroupIds returns a boolean if a field has been set.
func (o *EbookScope) HasUserGroupIds() bool {
	if o != nil && !IsNil(o.UserGroupIds) {
		return true
	}

	return false
}

// SetUserGroupIds gets a reference to the given []string and assigns it to the UserGroupIds field.
func (o *EbookScope) SetUserGroupIds(v []string) {
	o.UserGroupIds = v
}

// GetClassroomIds returns the ClassroomIds field value if set, zero value otherwise.
func (o *EbookScope) GetClassroomIds() []string {
	if o == nil || IsNil(o.ClassroomIds) {
		var ret []string
		return ret
	}
	return o.ClassroomIds
}

// GetClassroomIdsOk returns a tuple with the ClassroomIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EbookScope) GetClassroomIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ClassroomIds) {
		return nil, false
	}
	return o.ClassroomIds, true
}

// HasClassroomIds returns a boolean if a field has been set.
func (o *EbookScope) HasClassroomIds() bool {
	if o != nil && !IsNil(o.ClassroomIds) {
		return true
	}

	return false
}

// SetClassroomIds gets a reference to the given []string and assigns it to the ClassroomIds field.
func (o *EbookScope) SetClassroomIds(v []string) {
	o.ClassroomIds = v
}

// GetLimitations returns the Limitations field value if set, zero value otherwise.
func (o *EbookScope) GetLimitations() EbookLimitations {
	if o == nil || IsNil(o.Limitations) {
		var ret EbookLimitations
		return ret
	}
	return *o.Limitations
}

// GetLimitationsOk returns a tuple with the Limitations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EbookScope) GetLimitationsOk() (*EbookLimitations, bool) {
	if o == nil || IsNil(o.Limitations) {
		return nil, false
	}
	return o.Limitations, true
}

// HasLimitations returns a boolean if a field has been set.
func (o *EbookScope) HasLimitations() bool {
	if o != nil && !IsNil(o.Limitations) {
		return true
	}

	return false
}

// SetLimitations gets a reference to the given EbookLimitations and assigns it to the Limitations field.
func (o *EbookScope) SetLimitations(v EbookLimitations) {
	o.Limitations = &v
}

// GetExclusions returns the Exclusions field value if set, zero value otherwise.
func (o *EbookScope) GetExclusions() EbookExclusions {
	if o == nil || IsNil(o.Exclusions) {
		var ret EbookExclusions
		return ret
	}
	return *o.Exclusions
}

// GetExclusionsOk returns a tuple with the Exclusions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EbookScope) GetExclusionsOk() (*EbookExclusions, bool) {
	if o == nil || IsNil(o.Exclusions) {
		return nil, false
	}
	return o.Exclusions, true
}

// HasExclusions returns a boolean if a field has been set.
func (o *EbookScope) HasExclusions() bool {
	if o != nil && !IsNil(o.Exclusions) {
		return true
	}

	return false
}

// SetExclusions gets a reference to the given EbookExclusions and assigns it to the Exclusions field.
func (o *EbookScope) SetExclusions(v EbookExclusions) {
	o.Exclusions = &v
}

func (o EbookScope) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EbookScope) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllComputers) {
		toSerialize["allComputers"] = o.AllComputers
	}
	if !IsNil(o.AllMobileDevices) {
		toSerialize["allMobileDevices"] = o.AllMobileDevices
	}
	if !IsNil(o.AllUsers) {
		toSerialize["allUsers"] = o.AllUsers
	}
	if !IsNil(o.ComputerIds) {
		toSerialize["computerIds"] = o.ComputerIds
	}
	if !IsNil(o.ComputerGroupIds) {
		toSerialize["computerGroupIds"] = o.ComputerGroupIds
	}
	if !IsNil(o.MobileDeviceIds) {
		toSerialize["mobileDeviceIds"] = o.MobileDeviceIds
	}
	if !IsNil(o.MobileDeviceGroupIds) {
		toSerialize["mobileDeviceGroupIds"] = o.MobileDeviceGroupIds
	}
	if !IsNil(o.BuildingIds) {
		toSerialize["buildingIds"] = o.BuildingIds
	}
	if !IsNil(o.DepartmentIds) {
		toSerialize["departmentIds"] = o.DepartmentIds
	}
	if !IsNil(o.UserIds) {
		toSerialize["userIds"] = o.UserIds
	}
	if !IsNil(o.UserGroupIds) {
		toSerialize["userGroupIds"] = o.UserGroupIds
	}
	if !IsNil(o.ClassroomIds) {
		toSerialize["classroomIds"] = o.ClassroomIds
	}
	if !IsNil(o.Limitations) {
		toSerialize["limitations"] = o.Limitations
	}
	if !IsNil(o.Exclusions) {
		toSerialize["exclusions"] = o.Exclusions
	}
	return toSerialize, nil
}

type NullableEbookScope struct {
	value *EbookScope
	isSet bool
}

func (v NullableEbookScope) Get() *EbookScope {
	return v.value
}

func (v *NullableEbookScope) Set(val *EbookScope) {
	v.value = val
	v.isSet = true
}

func (v NullableEbookScope) IsSet() bool {
	return v.isSet
}

func (v *NullableEbookScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEbookScope(val *EbookScope) *NullableEbookScope {
	return &NullableEbookScope{value: val, isSet: true}
}

func (v NullableEbookScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEbookScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


