/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProtectRegistrationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProtectRegistrationRequest{}

// ProtectRegistrationRequest Create an API Client in the Jamf Protect web console to obtain these values.
type ProtectRegistrationRequest struct {
	ProtectUrl string `json:"protectUrl"`
	ClientId string `json:"clientId"`
	Password string `json:"password"`
}

type _ProtectRegistrationRequest ProtectRegistrationRequest

// NewProtectRegistrationRequest instantiates a new ProtectRegistrationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtectRegistrationRequest(protectUrl string, clientId string, password string) *ProtectRegistrationRequest {
	this := ProtectRegistrationRequest{}
	this.ProtectUrl = protectUrl
	this.ClientId = clientId
	this.Password = password
	return &this
}

// NewProtectRegistrationRequestWithDefaults instantiates a new ProtectRegistrationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtectRegistrationRequestWithDefaults() *ProtectRegistrationRequest {
	this := ProtectRegistrationRequest{}
	return &this
}

// GetProtectUrl returns the ProtectUrl field value
func (o *ProtectRegistrationRequest) GetProtectUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProtectUrl
}

// GetProtectUrlOk returns a tuple with the ProtectUrl field value
// and a boolean to check if the value has been set.
func (o *ProtectRegistrationRequest) GetProtectUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProtectUrl, true
}

// SetProtectUrl sets field value
func (o *ProtectRegistrationRequest) SetProtectUrl(v string) {
	o.ProtectUrl = v
}

// GetClientId returns the ClientId field value
func (o *ProtectRegistrationRequest) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *ProtectRegistrationRequest) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *ProtectRegistrationRequest) SetClientId(v string) {
	o.ClientId = v
}

// GetPassword returns the Password field value
func (o *ProtectRegistrationRequest) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *ProtectRegistrationRequest) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *ProtectRegistrationRequest) SetPassword(v string) {
	o.Password = v
}

func (o ProtectRegistrationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProtectRegistrationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["protectUrl"] = o.ProtectUrl
	toSerialize["clientId"] = o.ClientId
	toSerialize["password"] = o.Password
	return toSerialize, nil
}

func (o *ProtectRegistrationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"protectUrl",
		"clientId",
		"password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProtectRegistrationRequest := _ProtectRegistrationRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProtectRegistrationRequest)

	if err != nil {
		return err
	}

	*o = ProtectRegistrationRequest(varProtectRegistrationRequest)

	return err
}

type NullableProtectRegistrationRequest struct {
	value *ProtectRegistrationRequest
	isSet bool
}

func (v NullableProtectRegistrationRequest) Get() *ProtectRegistrationRequest {
	return v.value
}

func (v *NullableProtectRegistrationRequest) Set(val *ProtectRegistrationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableProtectRegistrationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableProtectRegistrationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtectRegistrationRequest(val *ProtectRegistrationRequest) *NullableProtectRegistrationRequest {
	return &NullableProtectRegistrationRequest{value: val, isSet: true}
}

func (v NullableProtectRegistrationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtectRegistrationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


