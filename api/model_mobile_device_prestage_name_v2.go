/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// MobileDevicePrestageNameV2 struct for MobileDevicePrestageNameV2
type MobileDevicePrestageNameV2 struct {
	Id *string `json:"id,omitempty"`
	DeviceName *string `json:"deviceName,omitempty"`
	Used *bool `json:"used,omitempty"`
}

// NewMobileDevicePrestageNameV2 instantiates a new MobileDevicePrestageNameV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMobileDevicePrestageNameV2() *MobileDevicePrestageNameV2 {
	this := MobileDevicePrestageNameV2{}
	return &this
}

// NewMobileDevicePrestageNameV2WithDefaults instantiates a new MobileDevicePrestageNameV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMobileDevicePrestageNameV2WithDefaults() *MobileDevicePrestageNameV2 {
	this := MobileDevicePrestageNameV2{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MobileDevicePrestageNameV2) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDevicePrestageNameV2) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MobileDevicePrestageNameV2) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MobileDevicePrestageNameV2) SetId(v string) {
	o.Id = &v
}

// GetDeviceName returns the DeviceName field value if set, zero value otherwise.
func (o *MobileDevicePrestageNameV2) GetDeviceName() string {
	if o == nil || o.DeviceName == nil {
		var ret string
		return ret
	}
	return *o.DeviceName
}

// GetDeviceNameOk returns a tuple with the DeviceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDevicePrestageNameV2) GetDeviceNameOk() (*string, bool) {
	if o == nil || o.DeviceName == nil {
		return nil, false
	}
	return o.DeviceName, true
}

// HasDeviceName returns a boolean if a field has been set.
func (o *MobileDevicePrestageNameV2) HasDeviceName() bool {
	if o != nil && o.DeviceName != nil {
		return true
	}

	return false
}

// SetDeviceName gets a reference to the given string and assigns it to the DeviceName field.
func (o *MobileDevicePrestageNameV2) SetDeviceName(v string) {
	o.DeviceName = &v
}

// GetUsed returns the Used field value if set, zero value otherwise.
func (o *MobileDevicePrestageNameV2) GetUsed() bool {
	if o == nil || o.Used == nil {
		var ret bool
		return ret
	}
	return *o.Used
}

// GetUsedOk returns a tuple with the Used field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDevicePrestageNameV2) GetUsedOk() (*bool, bool) {
	if o == nil || o.Used == nil {
		return nil, false
	}
	return o.Used, true
}

// HasUsed returns a boolean if a field has been set.
func (o *MobileDevicePrestageNameV2) HasUsed() bool {
	if o != nil && o.Used != nil {
		return true
	}

	return false
}

// SetUsed gets a reference to the given bool and assigns it to the Used field.
func (o *MobileDevicePrestageNameV2) SetUsed(v bool) {
	o.Used = &v
}

func (o MobileDevicePrestageNameV2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.DeviceName != nil {
		toSerialize["deviceName"] = o.DeviceName
	}
	if o.Used != nil {
		toSerialize["used"] = o.Used
	}
	return json.Marshal(toSerialize)
}

type NullableMobileDevicePrestageNameV2 struct {
	value *MobileDevicePrestageNameV2
	isSet bool
}

func (v NullableMobileDevicePrestageNameV2) Get() *MobileDevicePrestageNameV2 {
	return v.value
}

func (v *NullableMobileDevicePrestageNameV2) Set(val *MobileDevicePrestageNameV2) {
	v.value = val
	v.isSet = true
}

func (v NullableMobileDevicePrestageNameV2) IsSet() bool {
	return v.isSet
}

func (v *NullableMobileDevicePrestageNameV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMobileDevicePrestageNameV2(val *MobileDevicePrestageNameV2) *NullableMobileDevicePrestageNameV2 {
	return &NullableMobileDevicePrestageNameV2{value: val, isSet: true}
}

func (v NullableMobileDevicePrestageNameV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMobileDevicePrestageNameV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


