/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// DiagnosticSubmissionSetting the model 'DiagnosticSubmissionSetting'
type DiagnosticSubmissionSetting string

// List of DiagnosticSubmissionSetting
const (
	DIAGNOSTICSUBMISSIONSETTING_ENABLE_DIAGNOSTIC_SUBMISSION DiagnosticSubmissionSetting = "ENABLE_DIAGNOSTIC_SUBMISSION"
	DIAGNOSTICSUBMISSIONSETTING_DISABLE_DIAGNOSTIC_SUBMISSION DiagnosticSubmissionSetting = "DISABLE_DIAGNOSTIC_SUBMISSION"
)

// All allowed values of DiagnosticSubmissionSetting enum
var AllowedDiagnosticSubmissionSettingEnumValues = []DiagnosticSubmissionSetting{
	"ENABLE_DIAGNOSTIC_SUBMISSION",
	"DISABLE_DIAGNOSTIC_SUBMISSION",
}

func (v *DiagnosticSubmissionSetting) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DiagnosticSubmissionSetting(value)
	for _, existing := range AllowedDiagnosticSubmissionSettingEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DiagnosticSubmissionSetting", value)
}

// NewDiagnosticSubmissionSettingFromValue returns a pointer to a valid DiagnosticSubmissionSetting
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDiagnosticSubmissionSettingFromValue(v string) (*DiagnosticSubmissionSetting, error) {
	ev := DiagnosticSubmissionSetting(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DiagnosticSubmissionSetting: valid values are %v", v, AllowedDiagnosticSubmissionSettingEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DiagnosticSubmissionSetting) IsValid() bool {
	for _, existing := range AllowedDiagnosticSubmissionSettingEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DiagnosticSubmissionSetting value
func (v DiagnosticSubmissionSetting) Ptr() *DiagnosticSubmissionSetting {
	return &v
}

type NullableDiagnosticSubmissionSetting struct {
	value *DiagnosticSubmissionSetting
	isSet bool
}

func (v NullableDiagnosticSubmissionSetting) Get() *DiagnosticSubmissionSetting {
	return v.value
}

func (v *NullableDiagnosticSubmissionSetting) Set(val *DiagnosticSubmissionSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableDiagnosticSubmissionSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableDiagnosticSubmissionSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiagnosticSubmissionSetting(val *DiagnosticSubmissionSetting) *NullableDiagnosticSubmissionSetting {
	return &NullableDiagnosticSubmissionSetting{value: val, isSet: true}
}

func (v NullableDiagnosticSubmissionSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiagnosticSubmissionSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

