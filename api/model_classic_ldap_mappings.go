/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClassicLdapMappings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClassicLdapMappings{}

// ClassicLdapMappings Classic Ldap mappings configuration
type ClassicLdapMappings struct {
	UserObjectMapIdTo string `json:"userObjectMapIdTo"`
	UserObjectMapUsernameTo string `json:"userObjectMapUsernameTo"`
	UserObjectMapRealNameTo string `json:"userObjectMapRealNameTo"`
	UserObjectMapEmailTo string `json:"userObjectMapEmailTo"`
	UserObjectMapDepartmentTo string `json:"userObjectMapDepartmentTo"`
	UserObjectMapBuildingTo string `json:"userObjectMapBuildingTo"`
	UserObjectMapRoomTo string `json:"userObjectMapRoomTo"`
	UserObjectMapPhoneTo string `json:"userObjectMapPhoneTo"`
	UserObjectMapPositionTo string `json:"userObjectMapPositionTo"`
	UserObjectMapUuidTo string `json:"userObjectMapUuidTo"`
	UserGroupObjectMapIdTo string `json:"userGroupObjectMapIdTo"`
	UserGroupObjectMapGroupNameTo string `json:"userGroupObjectMapGroupNameTo"`
	UserGroupObjectMapUuidTo string `json:"userGroupObjectMapUuidTo"`
}

type _ClassicLdapMappings ClassicLdapMappings

// NewClassicLdapMappings instantiates a new ClassicLdapMappings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClassicLdapMappings(userObjectMapIdTo string, userObjectMapUsernameTo string, userObjectMapRealNameTo string, userObjectMapEmailTo string, userObjectMapDepartmentTo string, userObjectMapBuildingTo string, userObjectMapRoomTo string, userObjectMapPhoneTo string, userObjectMapPositionTo string, userObjectMapUuidTo string, userGroupObjectMapIdTo string, userGroupObjectMapGroupNameTo string, userGroupObjectMapUuidTo string) *ClassicLdapMappings {
	this := ClassicLdapMappings{}
	this.UserObjectMapIdTo = userObjectMapIdTo
	this.UserObjectMapUsernameTo = userObjectMapUsernameTo
	this.UserObjectMapRealNameTo = userObjectMapRealNameTo
	this.UserObjectMapEmailTo = userObjectMapEmailTo
	this.UserObjectMapDepartmentTo = userObjectMapDepartmentTo
	this.UserObjectMapBuildingTo = userObjectMapBuildingTo
	this.UserObjectMapRoomTo = userObjectMapRoomTo
	this.UserObjectMapPhoneTo = userObjectMapPhoneTo
	this.UserObjectMapPositionTo = userObjectMapPositionTo
	this.UserObjectMapUuidTo = userObjectMapUuidTo
	this.UserGroupObjectMapIdTo = userGroupObjectMapIdTo
	this.UserGroupObjectMapGroupNameTo = userGroupObjectMapGroupNameTo
	this.UserGroupObjectMapUuidTo = userGroupObjectMapUuidTo
	return &this
}

// NewClassicLdapMappingsWithDefaults instantiates a new ClassicLdapMappings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClassicLdapMappingsWithDefaults() *ClassicLdapMappings {
	this := ClassicLdapMappings{}
	var userObjectMapBuildingTo string = ""
	this.UserObjectMapBuildingTo = userObjectMapBuildingTo
	var userObjectMapRoomTo string = ""
	this.UserObjectMapRoomTo = userObjectMapRoomTo
	var userObjectMapPhoneTo string = ""
	this.UserObjectMapPhoneTo = userObjectMapPhoneTo
	return &this
}

// GetUserObjectMapIdTo returns the UserObjectMapIdTo field value
func (o *ClassicLdapMappings) GetUserObjectMapIdTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserObjectMapIdTo
}

// GetUserObjectMapIdToOk returns a tuple with the UserObjectMapIdTo field value
// and a boolean to check if the value has been set.
func (o *ClassicLdapMappings) GetUserObjectMapIdToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserObjectMapIdTo, true
}

// SetUserObjectMapIdTo sets field value
func (o *ClassicLdapMappings) SetUserObjectMapIdTo(v string) {
	o.UserObjectMapIdTo = v
}

// GetUserObjectMapUsernameTo returns the UserObjectMapUsernameTo field value
func (o *ClassicLdapMappings) GetUserObjectMapUsernameTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserObjectMapUsernameTo
}

// GetUserObjectMapUsernameToOk returns a tuple with the UserObjectMapUsernameTo field value
// and a boolean to check if the value has been set.
func (o *ClassicLdapMappings) GetUserObjectMapUsernameToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserObjectMapUsernameTo, true
}

// SetUserObjectMapUsernameTo sets field value
func (o *ClassicLdapMappings) SetUserObjectMapUsernameTo(v string) {
	o.UserObjectMapUsernameTo = v
}

// GetUserObjectMapRealNameTo returns the UserObjectMapRealNameTo field value
func (o *ClassicLdapMappings) GetUserObjectMapRealNameTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserObjectMapRealNameTo
}

// GetUserObjectMapRealNameToOk returns a tuple with the UserObjectMapRealNameTo field value
// and a boolean to check if the value has been set.
func (o *ClassicLdapMappings) GetUserObjectMapRealNameToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserObjectMapRealNameTo, true
}

// SetUserObjectMapRealNameTo sets field value
func (o *ClassicLdapMappings) SetUserObjectMapRealNameTo(v string) {
	o.UserObjectMapRealNameTo = v
}

// GetUserObjectMapEmailTo returns the UserObjectMapEmailTo field value
func (o *ClassicLdapMappings) GetUserObjectMapEmailTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserObjectMapEmailTo
}

// GetUserObjectMapEmailToOk returns a tuple with the UserObjectMapEmailTo field value
// and a boolean to check if the value has been set.
func (o *ClassicLdapMappings) GetUserObjectMapEmailToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserObjectMapEmailTo, true
}

// SetUserObjectMapEmailTo sets field value
func (o *ClassicLdapMappings) SetUserObjectMapEmailTo(v string) {
	o.UserObjectMapEmailTo = v
}

// GetUserObjectMapDepartmentTo returns the UserObjectMapDepartmentTo field value
func (o *ClassicLdapMappings) GetUserObjectMapDepartmentTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserObjectMapDepartmentTo
}

// GetUserObjectMapDepartmentToOk returns a tuple with the UserObjectMapDepartmentTo field value
// and a boolean to check if the value has been set.
func (o *ClassicLdapMappings) GetUserObjectMapDepartmentToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserObjectMapDepartmentTo, true
}

// SetUserObjectMapDepartmentTo sets field value
func (o *ClassicLdapMappings) SetUserObjectMapDepartmentTo(v string) {
	o.UserObjectMapDepartmentTo = v
}

// GetUserObjectMapBuildingTo returns the UserObjectMapBuildingTo field value
func (o *ClassicLdapMappings) GetUserObjectMapBuildingTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserObjectMapBuildingTo
}

// GetUserObjectMapBuildingToOk returns a tuple with the UserObjectMapBuildingTo field value
// and a boolean to check if the value has been set.
func (o *ClassicLdapMappings) GetUserObjectMapBuildingToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserObjectMapBuildingTo, true
}

// SetUserObjectMapBuildingTo sets field value
func (o *ClassicLdapMappings) SetUserObjectMapBuildingTo(v string) {
	o.UserObjectMapBuildingTo = v
}

// GetUserObjectMapRoomTo returns the UserObjectMapRoomTo field value
func (o *ClassicLdapMappings) GetUserObjectMapRoomTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserObjectMapRoomTo
}

// GetUserObjectMapRoomToOk returns a tuple with the UserObjectMapRoomTo field value
// and a boolean to check if the value has been set.
func (o *ClassicLdapMappings) GetUserObjectMapRoomToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserObjectMapRoomTo, true
}

// SetUserObjectMapRoomTo sets field value
func (o *ClassicLdapMappings) SetUserObjectMapRoomTo(v string) {
	o.UserObjectMapRoomTo = v
}

// GetUserObjectMapPhoneTo returns the UserObjectMapPhoneTo field value
func (o *ClassicLdapMappings) GetUserObjectMapPhoneTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserObjectMapPhoneTo
}

// GetUserObjectMapPhoneToOk returns a tuple with the UserObjectMapPhoneTo field value
// and a boolean to check if the value has been set.
func (o *ClassicLdapMappings) GetUserObjectMapPhoneToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserObjectMapPhoneTo, true
}

// SetUserObjectMapPhoneTo sets field value
func (o *ClassicLdapMappings) SetUserObjectMapPhoneTo(v string) {
	o.UserObjectMapPhoneTo = v
}

// GetUserObjectMapPositionTo returns the UserObjectMapPositionTo field value
func (o *ClassicLdapMappings) GetUserObjectMapPositionTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserObjectMapPositionTo
}

// GetUserObjectMapPositionToOk returns a tuple with the UserObjectMapPositionTo field value
// and a boolean to check if the value has been set.
func (o *ClassicLdapMappings) GetUserObjectMapPositionToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserObjectMapPositionTo, true
}

// SetUserObjectMapPositionTo sets field value
func (o *ClassicLdapMappings) SetUserObjectMapPositionTo(v string) {
	o.UserObjectMapPositionTo = v
}

// GetUserObjectMapUuidTo returns the UserObjectMapUuidTo field value
func (o *ClassicLdapMappings) GetUserObjectMapUuidTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserObjectMapUuidTo
}

// GetUserObjectMapUuidToOk returns a tuple with the UserObjectMapUuidTo field value
// and a boolean to check if the value has been set.
func (o *ClassicLdapMappings) GetUserObjectMapUuidToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserObjectMapUuidTo, true
}

// SetUserObjectMapUuidTo sets field value
func (o *ClassicLdapMappings) SetUserObjectMapUuidTo(v string) {
	o.UserObjectMapUuidTo = v
}

// GetUserGroupObjectMapIdTo returns the UserGroupObjectMapIdTo field value
func (o *ClassicLdapMappings) GetUserGroupObjectMapIdTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserGroupObjectMapIdTo
}

// GetUserGroupObjectMapIdToOk returns a tuple with the UserGroupObjectMapIdTo field value
// and a boolean to check if the value has been set.
func (o *ClassicLdapMappings) GetUserGroupObjectMapIdToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserGroupObjectMapIdTo, true
}

// SetUserGroupObjectMapIdTo sets field value
func (o *ClassicLdapMappings) SetUserGroupObjectMapIdTo(v string) {
	o.UserGroupObjectMapIdTo = v
}

// GetUserGroupObjectMapGroupNameTo returns the UserGroupObjectMapGroupNameTo field value
func (o *ClassicLdapMappings) GetUserGroupObjectMapGroupNameTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserGroupObjectMapGroupNameTo
}

// GetUserGroupObjectMapGroupNameToOk returns a tuple with the UserGroupObjectMapGroupNameTo field value
// and a boolean to check if the value has been set.
func (o *ClassicLdapMappings) GetUserGroupObjectMapGroupNameToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserGroupObjectMapGroupNameTo, true
}

// SetUserGroupObjectMapGroupNameTo sets field value
func (o *ClassicLdapMappings) SetUserGroupObjectMapGroupNameTo(v string) {
	o.UserGroupObjectMapGroupNameTo = v
}

// GetUserGroupObjectMapUuidTo returns the UserGroupObjectMapUuidTo field value
func (o *ClassicLdapMappings) GetUserGroupObjectMapUuidTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserGroupObjectMapUuidTo
}

// GetUserGroupObjectMapUuidToOk returns a tuple with the UserGroupObjectMapUuidTo field value
// and a boolean to check if the value has been set.
func (o *ClassicLdapMappings) GetUserGroupObjectMapUuidToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserGroupObjectMapUuidTo, true
}

// SetUserGroupObjectMapUuidTo sets field value
func (o *ClassicLdapMappings) SetUserGroupObjectMapUuidTo(v string) {
	o.UserGroupObjectMapUuidTo = v
}

func (o ClassicLdapMappings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClassicLdapMappings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userObjectMapIdTo"] = o.UserObjectMapIdTo
	toSerialize["userObjectMapUsernameTo"] = o.UserObjectMapUsernameTo
	toSerialize["userObjectMapRealNameTo"] = o.UserObjectMapRealNameTo
	toSerialize["userObjectMapEmailTo"] = o.UserObjectMapEmailTo
	toSerialize["userObjectMapDepartmentTo"] = o.UserObjectMapDepartmentTo
	toSerialize["userObjectMapBuildingTo"] = o.UserObjectMapBuildingTo
	toSerialize["userObjectMapRoomTo"] = o.UserObjectMapRoomTo
	toSerialize["userObjectMapPhoneTo"] = o.UserObjectMapPhoneTo
	toSerialize["userObjectMapPositionTo"] = o.UserObjectMapPositionTo
	toSerialize["userObjectMapUuidTo"] = o.UserObjectMapUuidTo
	toSerialize["userGroupObjectMapIdTo"] = o.UserGroupObjectMapIdTo
	toSerialize["userGroupObjectMapGroupNameTo"] = o.UserGroupObjectMapGroupNameTo
	toSerialize["userGroupObjectMapUuidTo"] = o.UserGroupObjectMapUuidTo
	return toSerialize, nil
}

func (o *ClassicLdapMappings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userObjectMapIdTo",
		"userObjectMapUsernameTo",
		"userObjectMapRealNameTo",
		"userObjectMapEmailTo",
		"userObjectMapDepartmentTo",
		"userObjectMapBuildingTo",
		"userObjectMapRoomTo",
		"userObjectMapPhoneTo",
		"userObjectMapPositionTo",
		"userObjectMapUuidTo",
		"userGroupObjectMapIdTo",
		"userGroupObjectMapGroupNameTo",
		"userGroupObjectMapUuidTo",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClassicLdapMappings := _ClassicLdapMappings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClassicLdapMappings)

	if err != nil {
		return err
	}

	*o = ClassicLdapMappings(varClassicLdapMappings)

	return err
}

type NullableClassicLdapMappings struct {
	value *ClassicLdapMappings
	isSet bool
}

func (v NullableClassicLdapMappings) Get() *ClassicLdapMappings {
	return v.value
}

func (v *NullableClassicLdapMappings) Set(val *ClassicLdapMappings) {
	v.value = val
	v.isSet = true
}

func (v NullableClassicLdapMappings) IsSet() bool {
	return v.isSet
}

func (v *NullableClassicLdapMappings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClassicLdapMappings(val *ClassicLdapMappings) *NullableClassicLdapMappings {
	return &NullableClassicLdapMappings{value: val, isSet: true}
}

func (v NullableClassicLdapMappings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClassicLdapMappings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


