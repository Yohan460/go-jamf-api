/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InstallPackage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstallPackage{}

// InstallPackage Either devices or groupId must be provided
type InstallPackage struct {
	Manifest PackageManifest `json:"manifest"`
	InstallAsManaged *bool `json:"installAsManaged,omitempty"`
	Devices []int64 `json:"devices,omitempty"`
	GroupId *string `json:"groupId,omitempty"`
}

type _InstallPackage InstallPackage

// NewInstallPackage instantiates a new InstallPackage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstallPackage(manifest PackageManifest) *InstallPackage {
	this := InstallPackage{}
	this.Manifest = manifest
	return &this
}

// NewInstallPackageWithDefaults instantiates a new InstallPackage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstallPackageWithDefaults() *InstallPackage {
	this := InstallPackage{}
	return &this
}

// GetManifest returns the Manifest field value
func (o *InstallPackage) GetManifest() PackageManifest {
	if o == nil {
		var ret PackageManifest
		return ret
	}

	return o.Manifest
}

// GetManifestOk returns a tuple with the Manifest field value
// and a boolean to check if the value has been set.
func (o *InstallPackage) GetManifestOk() (*PackageManifest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Manifest, true
}

// SetManifest sets field value
func (o *InstallPackage) SetManifest(v PackageManifest) {
	o.Manifest = v
}

// GetInstallAsManaged returns the InstallAsManaged field value if set, zero value otherwise.
func (o *InstallPackage) GetInstallAsManaged() bool {
	if o == nil || IsNil(o.InstallAsManaged) {
		var ret bool
		return ret
	}
	return *o.InstallAsManaged
}

// GetInstallAsManagedOk returns a tuple with the InstallAsManaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallPackage) GetInstallAsManagedOk() (*bool, bool) {
	if o == nil || IsNil(o.InstallAsManaged) {
		return nil, false
	}
	return o.InstallAsManaged, true
}

// HasInstallAsManaged returns a boolean if a field has been set.
func (o *InstallPackage) HasInstallAsManaged() bool {
	if o != nil && !IsNil(o.InstallAsManaged) {
		return true
	}

	return false
}

// SetInstallAsManaged gets a reference to the given bool and assigns it to the InstallAsManaged field.
func (o *InstallPackage) SetInstallAsManaged(v bool) {
	o.InstallAsManaged = &v
}

// GetDevices returns the Devices field value if set, zero value otherwise.
func (o *InstallPackage) GetDevices() []int64 {
	if o == nil || IsNil(o.Devices) {
		var ret []int64
		return ret
	}
	return o.Devices
}

// GetDevicesOk returns a tuple with the Devices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallPackage) GetDevicesOk() ([]int64, bool) {
	if o == nil || IsNil(o.Devices) {
		return nil, false
	}
	return o.Devices, true
}

// HasDevices returns a boolean if a field has been set.
func (o *InstallPackage) HasDevices() bool {
	if o != nil && !IsNil(o.Devices) {
		return true
	}

	return false
}

// SetDevices gets a reference to the given []int64 and assigns it to the Devices field.
func (o *InstallPackage) SetDevices(v []int64) {
	o.Devices = v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *InstallPackage) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallPackage) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *InstallPackage) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *InstallPackage) SetGroupId(v string) {
	o.GroupId = &v
}

func (o InstallPackage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstallPackage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["manifest"] = o.Manifest
	if !IsNil(o.InstallAsManaged) {
		toSerialize["installAsManaged"] = o.InstallAsManaged
	}
	if !IsNil(o.Devices) {
		toSerialize["devices"] = o.Devices
	}
	if !IsNil(o.GroupId) {
		toSerialize["groupId"] = o.GroupId
	}
	return toSerialize, nil
}

func (o *InstallPackage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"manifest",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstallPackage := _InstallPackage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInstallPackage)

	if err != nil {
		return err
	}

	*o = InstallPackage(varInstallPackage)

	return err
}

type NullableInstallPackage struct {
	value *InstallPackage
	isSet bool
}

func (v NullableInstallPackage) Get() *InstallPackage {
	return v.value
}

func (v *NullableInstallPackage) Set(val *InstallPackage) {
	v.value = val
	v.isSet = true
}

func (v NullableInstallPackage) IsSet() bool {
	return v.isSet
}

func (v *NullableInstallPackage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstallPackage(val *InstallPackage) *NullableInstallPackage {
	return &NullableInstallPackage{value: val, isSet: true}
}

func (v NullableInstallPackage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstallPackage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


