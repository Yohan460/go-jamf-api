/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the DashboardDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DashboardDetail{}

// DashboardDetail Additional details that will be found in a legend of the widgets on the dashboard
type DashboardDetail struct {
	Label *string `json:"label,omitempty"`
	Value *string `json:"value,omitempty"`
}

// NewDashboardDetail instantiates a new DashboardDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardDetail() *DashboardDetail {
	this := DashboardDetail{}
	return &this
}

// NewDashboardDetailWithDefaults instantiates a new DashboardDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardDetailWithDefaults() *DashboardDetail {
	this := DashboardDetail{}
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *DashboardDetail) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardDetail) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *DashboardDetail) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *DashboardDetail) SetLabel(v string) {
	o.Label = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *DashboardDetail) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardDetail) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *DashboardDetail) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *DashboardDetail) SetValue(v string) {
	o.Value = &v
}

func (o DashboardDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DashboardDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableDashboardDetail struct {
	value *DashboardDetail
	isSet bool
}

func (v NullableDashboardDetail) Get() *DashboardDetail {
	return v.value
}

func (v *NullableDashboardDetail) Set(val *DashboardDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardDetail(val *DashboardDetail) *NullableDashboardDetail {
	return &NullableDashboardDetail{value: val, isSet: true}
}

func (v NullableDashboardDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


