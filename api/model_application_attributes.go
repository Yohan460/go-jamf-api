/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ApplicationAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationAttributes{}

// ApplicationAttributes struct for ApplicationAttributes
type ApplicationAttributes struct {
	Identifier *string `json:"identifier,omitempty"`
	Attributes *Attributes `json:"attributes,omitempty"`
}

// NewApplicationAttributes instantiates a new ApplicationAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationAttributes() *ApplicationAttributes {
	this := ApplicationAttributes{}
	return &this
}

// NewApplicationAttributesWithDefaults instantiates a new ApplicationAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationAttributesWithDefaults() *ApplicationAttributes {
	this := ApplicationAttributes{}
	return &this
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *ApplicationAttributes) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationAttributes) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *ApplicationAttributes) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *ApplicationAttributes) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *ApplicationAttributes) GetAttributes() Attributes {
	if o == nil || IsNil(o.Attributes) {
		var ret Attributes
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationAttributes) GetAttributesOk() (*Attributes, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *ApplicationAttributes) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given Attributes and assigns it to the Attributes field.
func (o *ApplicationAttributes) SetAttributes(v Attributes) {
	o.Attributes = &v
}

func (o ApplicationAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	return toSerialize, nil
}

type NullableApplicationAttributes struct {
	value *ApplicationAttributes
	isSet bool
}

func (v NullableApplicationAttributes) Get() *ApplicationAttributes {
	return v.value
}

func (v *NullableApplicationAttributes) Set(val *ApplicationAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationAttributes(val *ApplicationAttributes) *NullableApplicationAttributes {
	return &NullableApplicationAttributes{value: val, isSet: true}
}

func (v NullableApplicationAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


