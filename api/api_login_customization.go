/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type LoginCustomizationAPI interface {

	/*
	V1LoginCustomizationGet Get current login disclaimer settings

	Returns knob whether disclaimer is enabled and if saved, its contents.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LoginCustomizationAPIV1LoginCustomizationGetRequest
	*/
	V1LoginCustomizationGet(ctx context.Context) LoginCustomizationAPIV1LoginCustomizationGetRequest

	// V1LoginCustomizationGetExecute executes the request
	//  @return LoginContent
	V1LoginCustomizationGetExecute(r LoginCustomizationAPIV1LoginCustomizationGetRequest) (*LoginContent, *http.Response, error)

	/*
	V1LoginCustomizationPut Update current login disclaimer settings.

	Update current login disclaimer settings.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LoginCustomizationAPIV1LoginCustomizationPutRequest
	*/
	V1LoginCustomizationPut(ctx context.Context) LoginCustomizationAPIV1LoginCustomizationPutRequest

	// V1LoginCustomizationPutExecute executes the request
	//  @return LoginContentPut
	V1LoginCustomizationPutExecute(r LoginCustomizationAPIV1LoginCustomizationPutRequest) (*LoginContentPut, *http.Response, error)
}

// LoginCustomizationAPIService LoginCustomizationAPI service
type LoginCustomizationAPIService service

type LoginCustomizationAPIV1LoginCustomizationGetRequest struct {
	ctx context.Context
	ApiService LoginCustomizationAPI
}

func (r LoginCustomizationAPIV1LoginCustomizationGetRequest) Execute() (*LoginContent, *http.Response, error) {
	return r.ApiService.V1LoginCustomizationGetExecute(r)
}

/*
V1LoginCustomizationGet Get current login disclaimer settings

Returns knob whether disclaimer is enabled and if saved, its contents.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LoginCustomizationAPIV1LoginCustomizationGetRequest
*/
func (a *LoginCustomizationAPIService) V1LoginCustomizationGet(ctx context.Context) LoginCustomizationAPIV1LoginCustomizationGetRequest {
	return LoginCustomizationAPIV1LoginCustomizationGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return LoginContent
func (a *LoginCustomizationAPIService) V1LoginCustomizationGetExecute(r LoginCustomizationAPIV1LoginCustomizationGetRequest) (*LoginContent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LoginContent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LoginCustomizationAPIService.V1LoginCustomizationGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/login-customization"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LoginCustomizationAPIV1LoginCustomizationPutRequest struct {
	ctx context.Context
	ApiService LoginCustomizationAPI
	loginContentPut *LoginContentPut
}

// Login disclaimer settings to save.
func (r LoginCustomizationAPIV1LoginCustomizationPutRequest) LoginContentPut(loginContentPut LoginContentPut) LoginCustomizationAPIV1LoginCustomizationPutRequest {
	r.loginContentPut = &loginContentPut
	return r
}

func (r LoginCustomizationAPIV1LoginCustomizationPutRequest) Execute() (*LoginContentPut, *http.Response, error) {
	return r.ApiService.V1LoginCustomizationPutExecute(r)
}

/*
V1LoginCustomizationPut Update current login disclaimer settings.

Update current login disclaimer settings.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LoginCustomizationAPIV1LoginCustomizationPutRequest
*/
func (a *LoginCustomizationAPIService) V1LoginCustomizationPut(ctx context.Context) LoginCustomizationAPIV1LoginCustomizationPutRequest {
	return LoginCustomizationAPIV1LoginCustomizationPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return LoginContentPut
func (a *LoginCustomizationAPIService) V1LoginCustomizationPutExecute(r LoginCustomizationAPIV1LoginCustomizationPutRequest) (*LoginContentPut, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LoginContentPut
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LoginCustomizationAPIService.V1LoginCustomizationPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/login-customization"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.loginContentPut == nil {
		return localVarReturnValue, nil, reportError("loginContentPut is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.loginContentPut
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
