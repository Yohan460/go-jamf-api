/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the Initialize type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Initialize{}

// Initialize Initial Jamf Pro setup data
type Initialize struct {
	ActivationCode string `json:"activationCode"`
	InstitutionName string `json:"institutionName"`
	IsEulaAccepted bool `json:"isEulaAccepted"`
	Username string `json:"username"`
	Password string `json:"password"`
	Email *string `json:"email,omitempty"`
	JssUrl string `json:"jssUrl"`
}

// NewInitialize instantiates a new Initialize object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInitialize(activationCode string, institutionName string, isEulaAccepted bool, username string, password string, jssUrl string) *Initialize {
	this := Initialize{}
	this.ActivationCode = activationCode
	this.InstitutionName = institutionName
	this.IsEulaAccepted = isEulaAccepted
	this.Username = username
	this.Password = password
	this.JssUrl = jssUrl
	return &this
}

// NewInitializeWithDefaults instantiates a new Initialize object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInitializeWithDefaults() *Initialize {
	this := Initialize{}
	return &this
}

// GetActivationCode returns the ActivationCode field value
func (o *Initialize) GetActivationCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActivationCode
}

// GetActivationCodeOk returns a tuple with the ActivationCode field value
// and a boolean to check if the value has been set.
func (o *Initialize) GetActivationCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActivationCode, true
}

// SetActivationCode sets field value
func (o *Initialize) SetActivationCode(v string) {
	o.ActivationCode = v
}

// GetInstitutionName returns the InstitutionName field value
func (o *Initialize) GetInstitutionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstitutionName
}

// GetInstitutionNameOk returns a tuple with the InstitutionName field value
// and a boolean to check if the value has been set.
func (o *Initialize) GetInstitutionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstitutionName, true
}

// SetInstitutionName sets field value
func (o *Initialize) SetInstitutionName(v string) {
	o.InstitutionName = v
}

// GetIsEulaAccepted returns the IsEulaAccepted field value
func (o *Initialize) GetIsEulaAccepted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsEulaAccepted
}

// GetIsEulaAcceptedOk returns a tuple with the IsEulaAccepted field value
// and a boolean to check if the value has been set.
func (o *Initialize) GetIsEulaAcceptedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsEulaAccepted, true
}

// SetIsEulaAccepted sets field value
func (o *Initialize) SetIsEulaAccepted(v bool) {
	o.IsEulaAccepted = v
}

// GetUsername returns the Username field value
func (o *Initialize) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *Initialize) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *Initialize) SetUsername(v string) {
	o.Username = v
}

// GetPassword returns the Password field value
func (o *Initialize) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *Initialize) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *Initialize) SetPassword(v string) {
	o.Password = v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *Initialize) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Initialize) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *Initialize) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *Initialize) SetEmail(v string) {
	o.Email = &v
}

// GetJssUrl returns the JssUrl field value
func (o *Initialize) GetJssUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JssUrl
}

// GetJssUrlOk returns a tuple with the JssUrl field value
// and a boolean to check if the value has been set.
func (o *Initialize) GetJssUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JssUrl, true
}

// SetJssUrl sets field value
func (o *Initialize) SetJssUrl(v string) {
	o.JssUrl = v
}

func (o Initialize) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Initialize) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["activationCode"] = o.ActivationCode
	toSerialize["institutionName"] = o.InstitutionName
	toSerialize["isEulaAccepted"] = o.IsEulaAccepted
	toSerialize["username"] = o.Username
	toSerialize["password"] = o.Password
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	toSerialize["jssUrl"] = o.JssUrl
	return toSerialize, nil
}

type NullableInitialize struct {
	value *Initialize
	isSet bool
}

func (v NullableInitialize) Get() *Initialize {
	return v.value
}

func (v *NullableInitialize) Set(val *Initialize) {
	v.value = val
	v.isSet = true
}

func (v NullableInitialize) IsSet() bool {
	return v.isSet
}

func (v *NullableInitialize) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInitialize(val *Initialize) *NullableInitialize {
	return &NullableInitialize{value: val, isSet: true}
}

func (v NullableInitialize) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInitialize) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


