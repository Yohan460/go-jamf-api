/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


type ReEnrollmentPreviewAPI interface {

	/*
	V1ReenrollmentGet Get Re-enrollment object 

	Gets Re-enrollment object


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ReEnrollmentPreviewAPIV1ReenrollmentGetRequest
	*/
	V1ReenrollmentGet(ctx context.Context) ReEnrollmentPreviewAPIV1ReenrollmentGetRequest

	// V1ReenrollmentGetExecute executes the request
	//  @return Reenrollment
	V1ReenrollmentGetExecute(r ReEnrollmentPreviewAPIV1ReenrollmentGetRequest) (*Reenrollment, *http.Response, error)

	/*
	V1ReenrollmentHistoryExportPost Export reenrollment history collection 

	Export reenrollment history collection


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ReEnrollmentPreviewAPIV1ReenrollmentHistoryExportPostRequest
	*/
	V1ReenrollmentHistoryExportPost(ctx context.Context) ReEnrollmentPreviewAPIV1ReenrollmentHistoryExportPostRequest

	// V1ReenrollmentHistoryExportPostExecute executes the request
	//  @return interface{}
	V1ReenrollmentHistoryExportPostExecute(r ReEnrollmentPreviewAPIV1ReenrollmentHistoryExportPostRequest) (interface{}, *http.Response, error)

	/*
	V1ReenrollmentHistoryGet Get Re-enrollment history object 

	Gets Re-enrollment history object


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ReEnrollmentPreviewAPIV1ReenrollmentHistoryGetRequest
	*/
	V1ReenrollmentHistoryGet(ctx context.Context) ReEnrollmentPreviewAPIV1ReenrollmentHistoryGetRequest

	// V1ReenrollmentHistoryGetExecute executes the request
	//  @return HistorySearchResults
	V1ReenrollmentHistoryGetExecute(r ReEnrollmentPreviewAPIV1ReenrollmentHistoryGetRequest) (*HistorySearchResults, *http.Response, error)

	/*
	V1ReenrollmentHistoryPost Add specified Re-enrollment history object notes 

	Adds specified Re-enrollment history object notes


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ReEnrollmentPreviewAPIV1ReenrollmentHistoryPostRequest
	*/
	V1ReenrollmentHistoryPost(ctx context.Context) ReEnrollmentPreviewAPIV1ReenrollmentHistoryPostRequest

	// V1ReenrollmentHistoryPostExecute executes the request
	//  @return ObjectHistory
	V1ReenrollmentHistoryPostExecute(r ReEnrollmentPreviewAPIV1ReenrollmentHistoryPostRequest) (*ObjectHistory, *http.Response, error)

	/*
	V1ReenrollmentPut Update the Re-enrollment object 

	Update the Re-enrollment object


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ReEnrollmentPreviewAPIV1ReenrollmentPutRequest
	*/
	V1ReenrollmentPut(ctx context.Context) ReEnrollmentPreviewAPIV1ReenrollmentPutRequest

	// V1ReenrollmentPutExecute executes the request
	//  @return Reenrollment
	V1ReenrollmentPutExecute(r ReEnrollmentPreviewAPIV1ReenrollmentPutRequest) (*Reenrollment, *http.Response, error)
}

// ReEnrollmentPreviewAPIService ReEnrollmentPreviewAPI service
type ReEnrollmentPreviewAPIService service

type ReEnrollmentPreviewAPIV1ReenrollmentGetRequest struct {
	ctx context.Context
	ApiService ReEnrollmentPreviewAPI
}

func (r ReEnrollmentPreviewAPIV1ReenrollmentGetRequest) Execute() (*Reenrollment, *http.Response, error) {
	return r.ApiService.V1ReenrollmentGetExecute(r)
}

/*
V1ReenrollmentGet Get Re-enrollment object 

Gets Re-enrollment object


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReEnrollmentPreviewAPIV1ReenrollmentGetRequest
*/
func (a *ReEnrollmentPreviewAPIService) V1ReenrollmentGet(ctx context.Context) ReEnrollmentPreviewAPIV1ReenrollmentGetRequest {
	return ReEnrollmentPreviewAPIV1ReenrollmentGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Reenrollment
func (a *ReEnrollmentPreviewAPIService) V1ReenrollmentGetExecute(r ReEnrollmentPreviewAPIV1ReenrollmentGetRequest) (*Reenrollment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Reenrollment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReEnrollmentPreviewAPIService.V1ReenrollmentGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/reenrollment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReEnrollmentPreviewAPIV1ReenrollmentHistoryExportPostRequest struct {
	ctx context.Context
	ApiService ReEnrollmentPreviewAPI
	exportFields *[]string
	exportLabels *[]string
	page *int64
	pageSize *int64
	sort *[]string
	filter *string
	exportParameters *ExportParameters
}

// Export fields parameter, used to change default order or ignore some of the response properties. Default is empty array, which means that all fields of the response entity will be serialized. Example: export-fields&#x3D;id,username
func (r ReEnrollmentPreviewAPIV1ReenrollmentHistoryExportPostRequest) ExportFields(exportFields []string) ReEnrollmentPreviewAPIV1ReenrollmentHistoryExportPostRequest {
	r.exportFields = &exportFields
	return r
}

// Export labels parameter, used to customize fieldnames/columns in the exported file. Default is empty array, which means that response properties names will be used. Number of the provided labels must match the number of export-fields Example: export-labels&#x3D;identifier,name with matching: export-fields&#x3D;id,username
func (r ReEnrollmentPreviewAPIV1ReenrollmentHistoryExportPostRequest) ExportLabels(exportLabels []string) ReEnrollmentPreviewAPIV1ReenrollmentHistoryExportPostRequest {
	r.exportLabels = &exportLabels
	return r
}

func (r ReEnrollmentPreviewAPIV1ReenrollmentHistoryExportPostRequest) Page(page int64) ReEnrollmentPreviewAPIV1ReenrollmentHistoryExportPostRequest {
	r.page = &page
	return r
}

func (r ReEnrollmentPreviewAPIV1ReenrollmentHistoryExportPostRequest) PageSize(pageSize int64) ReEnrollmentPreviewAPIV1ReenrollmentHistoryExportPostRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Default sort is id:desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;id:desc,name:asc 
func (r ReEnrollmentPreviewAPIV1ReenrollmentHistoryExportPostRequest) Sort(sort []string) ReEnrollmentPreviewAPIV1ReenrollmentHistoryExportPostRequest {
	r.sort = &sort
	return r
}

// Query in the RSQL format, allowing to filter history notes collection. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: id, name. This param can be combined with paging and sorting. Example: name&#x3D;&#x3D;\&quot;*script*\&quot;
func (r ReEnrollmentPreviewAPIV1ReenrollmentHistoryExportPostRequest) Filter(filter string) ReEnrollmentPreviewAPIV1ReenrollmentHistoryExportPostRequest {
	r.filter = &filter
	return r
}

// Optional. Override query parameters since they can make URI exceed 2,000 character limit.
func (r ReEnrollmentPreviewAPIV1ReenrollmentHistoryExportPostRequest) ExportParameters(exportParameters ExportParameters) ReEnrollmentPreviewAPIV1ReenrollmentHistoryExportPostRequest {
	r.exportParameters = &exportParameters
	return r
}

func (r ReEnrollmentPreviewAPIV1ReenrollmentHistoryExportPostRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.V1ReenrollmentHistoryExportPostExecute(r)
}

/*
V1ReenrollmentHistoryExportPost Export reenrollment history collection 

Export reenrollment history collection


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReEnrollmentPreviewAPIV1ReenrollmentHistoryExportPostRequest
*/
func (a *ReEnrollmentPreviewAPIService) V1ReenrollmentHistoryExportPost(ctx context.Context) ReEnrollmentPreviewAPIV1ReenrollmentHistoryExportPostRequest {
	return ReEnrollmentPreviewAPIV1ReenrollmentHistoryExportPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return interface{}
func (a *ReEnrollmentPreviewAPIService) V1ReenrollmentHistoryExportPostExecute(r ReEnrollmentPreviewAPIV1ReenrollmentHistoryExportPostRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReEnrollmentPreviewAPIService.V1ReenrollmentHistoryExportPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/reenrollment/history/export"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.exportFields != nil {
		t := *r.exportFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "export-fields", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "export-fields", t, "multi")
		}
	} else {
		defaultValue := []string{}
		r.exportFields = &defaultValue
	}
	if r.exportLabels != nil {
		t := *r.exportLabels
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "export-labels", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "export-labels", t, "multi")
		}
	} else {
		defaultValue := []string{}
		r.exportLabels = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int64 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int64 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		defaultValue := []string{"id:asc"}
		r.sort = &defaultValue
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	} else {
		var defaultValue string = ""
		r.filter = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/csv,application/json", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.exportParameters
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReEnrollmentPreviewAPIV1ReenrollmentHistoryGetRequest struct {
	ctx context.Context
	ApiService ReEnrollmentPreviewAPI
	page *int64
	size *int64
	pagesize *int64
	pageSize *int64
	sort *string
}

func (r ReEnrollmentPreviewAPIV1ReenrollmentHistoryGetRequest) Page(page int64) ReEnrollmentPreviewAPIV1ReenrollmentHistoryGetRequest {
	r.page = &page
	return r
}

// Deprecated
func (r ReEnrollmentPreviewAPIV1ReenrollmentHistoryGetRequest) Size(size int64) ReEnrollmentPreviewAPIV1ReenrollmentHistoryGetRequest {
	r.size = &size
	return r
}

// Deprecated
func (r ReEnrollmentPreviewAPIV1ReenrollmentHistoryGetRequest) Pagesize(pagesize int64) ReEnrollmentPreviewAPIV1ReenrollmentHistoryGetRequest {
	r.pagesize = &pagesize
	return r
}

func (r ReEnrollmentPreviewAPIV1ReenrollmentHistoryGetRequest) PageSize(pageSize int64) ReEnrollmentPreviewAPIV1ReenrollmentHistoryGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Default sort is date:desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc 
func (r ReEnrollmentPreviewAPIV1ReenrollmentHistoryGetRequest) Sort(sort string) ReEnrollmentPreviewAPIV1ReenrollmentHistoryGetRequest {
	r.sort = &sort
	return r
}

func (r ReEnrollmentPreviewAPIV1ReenrollmentHistoryGetRequest) Execute() (*HistorySearchResults, *http.Response, error) {
	return r.ApiService.V1ReenrollmentHistoryGetExecute(r)
}

/*
V1ReenrollmentHistoryGet Get Re-enrollment history object 

Gets Re-enrollment history object


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReEnrollmentPreviewAPIV1ReenrollmentHistoryGetRequest
*/
func (a *ReEnrollmentPreviewAPIService) V1ReenrollmentHistoryGet(ctx context.Context) ReEnrollmentPreviewAPIV1ReenrollmentHistoryGetRequest {
	return ReEnrollmentPreviewAPIV1ReenrollmentHistoryGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HistorySearchResults
func (a *ReEnrollmentPreviewAPIService) V1ReenrollmentHistoryGetExecute(r ReEnrollmentPreviewAPIV1ReenrollmentHistoryGetRequest) (*HistorySearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HistorySearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReEnrollmentPreviewAPIService.V1ReenrollmentHistoryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/reenrollment/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int64 = 0
		r.page = &defaultValue
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	} else {
		var defaultValue int64 = 100
		r.size = &defaultValue
	}
	if r.pagesize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pagesize", r.pagesize, "")
	} else {
		var defaultValue int64 = 100
		r.pagesize = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int64 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	} else {
		var defaultValue string = "date:desc"
		r.sort = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReEnrollmentPreviewAPIV1ReenrollmentHistoryPostRequest struct {
	ctx context.Context
	ApiService ReEnrollmentPreviewAPI
	objectHistoryNote *ObjectHistoryNote
}

// history notes to create
func (r ReEnrollmentPreviewAPIV1ReenrollmentHistoryPostRequest) ObjectHistoryNote(objectHistoryNote ObjectHistoryNote) ReEnrollmentPreviewAPIV1ReenrollmentHistoryPostRequest {
	r.objectHistoryNote = &objectHistoryNote
	return r
}

func (r ReEnrollmentPreviewAPIV1ReenrollmentHistoryPostRequest) Execute() (*ObjectHistory, *http.Response, error) {
	return r.ApiService.V1ReenrollmentHistoryPostExecute(r)
}

/*
V1ReenrollmentHistoryPost Add specified Re-enrollment history object notes 

Adds specified Re-enrollment history object notes


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReEnrollmentPreviewAPIV1ReenrollmentHistoryPostRequest
*/
func (a *ReEnrollmentPreviewAPIService) V1ReenrollmentHistoryPost(ctx context.Context) ReEnrollmentPreviewAPIV1ReenrollmentHistoryPostRequest {
	return ReEnrollmentPreviewAPIV1ReenrollmentHistoryPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ObjectHistory
func (a *ReEnrollmentPreviewAPIService) V1ReenrollmentHistoryPostExecute(r ReEnrollmentPreviewAPIV1ReenrollmentHistoryPostRequest) (*ObjectHistory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectHistory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReEnrollmentPreviewAPIService.V1ReenrollmentHistoryPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/reenrollment/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.objectHistoryNote == nil {
		return localVarReturnValue, nil, reportError("objectHistoryNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.objectHistoryNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReEnrollmentPreviewAPIV1ReenrollmentPutRequest struct {
	ctx context.Context
	ApiService ReEnrollmentPreviewAPI
	reenrollment *Reenrollment
}

// Re-enrollment object to update
func (r ReEnrollmentPreviewAPIV1ReenrollmentPutRequest) Reenrollment(reenrollment Reenrollment) ReEnrollmentPreviewAPIV1ReenrollmentPutRequest {
	r.reenrollment = &reenrollment
	return r
}

func (r ReEnrollmentPreviewAPIV1ReenrollmentPutRequest) Execute() (*Reenrollment, *http.Response, error) {
	return r.ApiService.V1ReenrollmentPutExecute(r)
}

/*
V1ReenrollmentPut Update the Re-enrollment object 

Update the Re-enrollment object


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReEnrollmentPreviewAPIV1ReenrollmentPutRequest
*/
func (a *ReEnrollmentPreviewAPIService) V1ReenrollmentPut(ctx context.Context) ReEnrollmentPreviewAPIV1ReenrollmentPutRequest {
	return ReEnrollmentPreviewAPIV1ReenrollmentPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Reenrollment
func (a *ReEnrollmentPreviewAPIService) V1ReenrollmentPutExecute(r ReEnrollmentPreviewAPIV1ReenrollmentPutRequest) (*Reenrollment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Reenrollment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReEnrollmentPreviewAPIService.V1ReenrollmentPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/reenrollment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.reenrollment == nil {
		return localVarReturnValue, nil, reportError("reenrollment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.reenrollment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
