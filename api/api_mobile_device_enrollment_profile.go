/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


type MobileDeviceEnrollmentProfileAPI interface {

	/*
	V1MobileDeviceEnrollmentProfileIdDownloadProfileGet Retrieve the MDM Enrollment Profile 

	Retrieve the MDM Enrollment Profile

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id MDM Enrollment Profile identifier
	@return MobileDeviceEnrollmentProfileAPIV1MobileDeviceEnrollmentProfileIdDownloadProfileGetRequest
	*/
	V1MobileDeviceEnrollmentProfileIdDownloadProfileGet(ctx context.Context, id string) MobileDeviceEnrollmentProfileAPIV1MobileDeviceEnrollmentProfileIdDownloadProfileGetRequest

	// V1MobileDeviceEnrollmentProfileIdDownloadProfileGetExecute executes the request
	//  @return *os.File
	V1MobileDeviceEnrollmentProfileIdDownloadProfileGetExecute(r MobileDeviceEnrollmentProfileAPIV1MobileDeviceEnrollmentProfileIdDownloadProfileGetRequest) (*os.File, *http.Response, error)
}

// MobileDeviceEnrollmentProfileAPIService MobileDeviceEnrollmentProfileAPI service
type MobileDeviceEnrollmentProfileAPIService service

type MobileDeviceEnrollmentProfileAPIV1MobileDeviceEnrollmentProfileIdDownloadProfileGetRequest struct {
	ctx context.Context
	ApiService MobileDeviceEnrollmentProfileAPI
	id string
}

func (r MobileDeviceEnrollmentProfileAPIV1MobileDeviceEnrollmentProfileIdDownloadProfileGetRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.V1MobileDeviceEnrollmentProfileIdDownloadProfileGetExecute(r)
}

/*
V1MobileDeviceEnrollmentProfileIdDownloadProfileGet Retrieve the MDM Enrollment Profile 

Retrieve the MDM Enrollment Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id MDM Enrollment Profile identifier
 @return MobileDeviceEnrollmentProfileAPIV1MobileDeviceEnrollmentProfileIdDownloadProfileGetRequest
*/
func (a *MobileDeviceEnrollmentProfileAPIService) V1MobileDeviceEnrollmentProfileIdDownloadProfileGet(ctx context.Context, id string) MobileDeviceEnrollmentProfileAPIV1MobileDeviceEnrollmentProfileIdDownloadProfileGetRequest {
	return MobileDeviceEnrollmentProfileAPIV1MobileDeviceEnrollmentProfileIdDownloadProfileGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return *os.File
func (a *MobileDeviceEnrollmentProfileAPIService) V1MobileDeviceEnrollmentProfileIdDownloadProfileGetExecute(r MobileDeviceEnrollmentProfileAPIV1MobileDeviceEnrollmentProfileIdDownloadProfileGetRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDeviceEnrollmentProfileAPIService.V1MobileDeviceEnrollmentProfileIdDownloadProfileGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/mobile-device-enrollment-profile/{id}/download-profile"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/x-apple-aspen-config"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
