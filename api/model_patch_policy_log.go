/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// PatchPolicyLog struct for PatchPolicyLog
type PatchPolicyLog struct {
	PatchPolicyId *int32 `json:"patchPolicyId,omitempty"`
	DeviceId *int32 `json:"deviceId,omitempty"`
	DeviceName *string `json:"deviceName,omitempty"`
	StatusCode *int32 `json:"statusCode,omitempty"`
	StatusMessage *string `json:"statusMessage,omitempty"`
	StatusDate *time.Time `json:"statusDate,omitempty"`
	Attempt *int32 `json:"attempt,omitempty"`
	Ignored *int32 `json:"ignored,omitempty"`
}

// NewPatchPolicyLog instantiates a new PatchPolicyLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchPolicyLog() *PatchPolicyLog {
	this := PatchPolicyLog{}
	return &this
}

// NewPatchPolicyLogWithDefaults instantiates a new PatchPolicyLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchPolicyLogWithDefaults() *PatchPolicyLog {
	this := PatchPolicyLog{}
	return &this
}

// GetPatchPolicyId returns the PatchPolicyId field value if set, zero value otherwise.
func (o *PatchPolicyLog) GetPatchPolicyId() int32 {
	if o == nil || o.PatchPolicyId == nil {
		var ret int32
		return ret
	}
	return *o.PatchPolicyId
}

// GetPatchPolicyIdOk returns a tuple with the PatchPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyLog) GetPatchPolicyIdOk() (*int32, bool) {
	if o == nil || o.PatchPolicyId == nil {
		return nil, false
	}
	return o.PatchPolicyId, true
}

// HasPatchPolicyId returns a boolean if a field has been set.
func (o *PatchPolicyLog) HasPatchPolicyId() bool {
	if o != nil && o.PatchPolicyId != nil {
		return true
	}

	return false
}

// SetPatchPolicyId gets a reference to the given int32 and assigns it to the PatchPolicyId field.
func (o *PatchPolicyLog) SetPatchPolicyId(v int32) {
	o.PatchPolicyId = &v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *PatchPolicyLog) GetDeviceId() int32 {
	if o == nil || o.DeviceId == nil {
		var ret int32
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyLog) GetDeviceIdOk() (*int32, bool) {
	if o == nil || o.DeviceId == nil {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *PatchPolicyLog) HasDeviceId() bool {
	if o != nil && o.DeviceId != nil {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given int32 and assigns it to the DeviceId field.
func (o *PatchPolicyLog) SetDeviceId(v int32) {
	o.DeviceId = &v
}

// GetDeviceName returns the DeviceName field value if set, zero value otherwise.
func (o *PatchPolicyLog) GetDeviceName() string {
	if o == nil || o.DeviceName == nil {
		var ret string
		return ret
	}
	return *o.DeviceName
}

// GetDeviceNameOk returns a tuple with the DeviceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyLog) GetDeviceNameOk() (*string, bool) {
	if o == nil || o.DeviceName == nil {
		return nil, false
	}
	return o.DeviceName, true
}

// HasDeviceName returns a boolean if a field has been set.
func (o *PatchPolicyLog) HasDeviceName() bool {
	if o != nil && o.DeviceName != nil {
		return true
	}

	return false
}

// SetDeviceName gets a reference to the given string and assigns it to the DeviceName field.
func (o *PatchPolicyLog) SetDeviceName(v string) {
	o.DeviceName = &v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *PatchPolicyLog) GetStatusCode() int32 {
	if o == nil || o.StatusCode == nil {
		var ret int32
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyLog) GetStatusCodeOk() (*int32, bool) {
	if o == nil || o.StatusCode == nil {
		return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *PatchPolicyLog) HasStatusCode() bool {
	if o != nil && o.StatusCode != nil {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given int32 and assigns it to the StatusCode field.
func (o *PatchPolicyLog) SetStatusCode(v int32) {
	o.StatusCode = &v
}

// GetStatusMessage returns the StatusMessage field value if set, zero value otherwise.
func (o *PatchPolicyLog) GetStatusMessage() string {
	if o == nil || o.StatusMessage == nil {
		var ret string
		return ret
	}
	return *o.StatusMessage
}

// GetStatusMessageOk returns a tuple with the StatusMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyLog) GetStatusMessageOk() (*string, bool) {
	if o == nil || o.StatusMessage == nil {
		return nil, false
	}
	return o.StatusMessage, true
}

// HasStatusMessage returns a boolean if a field has been set.
func (o *PatchPolicyLog) HasStatusMessage() bool {
	if o != nil && o.StatusMessage != nil {
		return true
	}

	return false
}

// SetStatusMessage gets a reference to the given string and assigns it to the StatusMessage field.
func (o *PatchPolicyLog) SetStatusMessage(v string) {
	o.StatusMessage = &v
}

// GetStatusDate returns the StatusDate field value if set, zero value otherwise.
func (o *PatchPolicyLog) GetStatusDate() time.Time {
	if o == nil || o.StatusDate == nil {
		var ret time.Time
		return ret
	}
	return *o.StatusDate
}

// GetStatusDateOk returns a tuple with the StatusDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyLog) GetStatusDateOk() (*time.Time, bool) {
	if o == nil || o.StatusDate == nil {
		return nil, false
	}
	return o.StatusDate, true
}

// HasStatusDate returns a boolean if a field has been set.
func (o *PatchPolicyLog) HasStatusDate() bool {
	if o != nil && o.StatusDate != nil {
		return true
	}

	return false
}

// SetStatusDate gets a reference to the given time.Time and assigns it to the StatusDate field.
func (o *PatchPolicyLog) SetStatusDate(v time.Time) {
	o.StatusDate = &v
}

// GetAttempt returns the Attempt field value if set, zero value otherwise.
func (o *PatchPolicyLog) GetAttempt() int32 {
	if o == nil || o.Attempt == nil {
		var ret int32
		return ret
	}
	return *o.Attempt
}

// GetAttemptOk returns a tuple with the Attempt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyLog) GetAttemptOk() (*int32, bool) {
	if o == nil || o.Attempt == nil {
		return nil, false
	}
	return o.Attempt, true
}

// HasAttempt returns a boolean if a field has been set.
func (o *PatchPolicyLog) HasAttempt() bool {
	if o != nil && o.Attempt != nil {
		return true
	}

	return false
}

// SetAttempt gets a reference to the given int32 and assigns it to the Attempt field.
func (o *PatchPolicyLog) SetAttempt(v int32) {
	o.Attempt = &v
}

// GetIgnored returns the Ignored field value if set, zero value otherwise.
func (o *PatchPolicyLog) GetIgnored() int32 {
	if o == nil || o.Ignored == nil {
		var ret int32
		return ret
	}
	return *o.Ignored
}

// GetIgnoredOk returns a tuple with the Ignored field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyLog) GetIgnoredOk() (*int32, bool) {
	if o == nil || o.Ignored == nil {
		return nil, false
	}
	return o.Ignored, true
}

// HasIgnored returns a boolean if a field has been set.
func (o *PatchPolicyLog) HasIgnored() bool {
	if o != nil && o.Ignored != nil {
		return true
	}

	return false
}

// SetIgnored gets a reference to the given int32 and assigns it to the Ignored field.
func (o *PatchPolicyLog) SetIgnored(v int32) {
	o.Ignored = &v
}

func (o PatchPolicyLog) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PatchPolicyId != nil {
		toSerialize["patchPolicyId"] = o.PatchPolicyId
	}
	if o.DeviceId != nil {
		toSerialize["deviceId"] = o.DeviceId
	}
	if o.DeviceName != nil {
		toSerialize["deviceName"] = o.DeviceName
	}
	if o.StatusCode != nil {
		toSerialize["statusCode"] = o.StatusCode
	}
	if o.StatusMessage != nil {
		toSerialize["statusMessage"] = o.StatusMessage
	}
	if o.StatusDate != nil {
		toSerialize["statusDate"] = o.StatusDate
	}
	if o.Attempt != nil {
		toSerialize["attempt"] = o.Attempt
	}
	if o.Ignored != nil {
		toSerialize["ignored"] = o.Ignored
	}
	return json.Marshal(toSerialize)
}

type NullablePatchPolicyLog struct {
	value *PatchPolicyLog
	isSet bool
}

func (v NullablePatchPolicyLog) Get() *PatchPolicyLog {
	return v.value
}

func (v *NullablePatchPolicyLog) Set(val *PatchPolicyLog) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchPolicyLog) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchPolicyLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchPolicyLog(val *PatchPolicyLog) *NullablePatchPolicyLog {
	return &NullablePatchPolicyLog{value: val, isSet: true}
}

func (v NullablePatchPolicyLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchPolicyLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


