/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SupervisionIdentityCertificateUpload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupervisionIdentityCertificateUpload{}

// SupervisionIdentityCertificateUpload struct for SupervisionIdentityCertificateUpload
type SupervisionIdentityCertificateUpload struct {
	DisplayName string `json:"displayName"`
	Password string `json:"password"`
	// The base 64 encoded supervision identity certificate data
	CertificateData *string `json:"certificateData,omitempty"`
}

type _SupervisionIdentityCertificateUpload SupervisionIdentityCertificateUpload

// NewSupervisionIdentityCertificateUpload instantiates a new SupervisionIdentityCertificateUpload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupervisionIdentityCertificateUpload(displayName string, password string) *SupervisionIdentityCertificateUpload {
	this := SupervisionIdentityCertificateUpload{}
	this.DisplayName = displayName
	this.Password = password
	return &this
}

// NewSupervisionIdentityCertificateUploadWithDefaults instantiates a new SupervisionIdentityCertificateUpload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupervisionIdentityCertificateUploadWithDefaults() *SupervisionIdentityCertificateUpload {
	this := SupervisionIdentityCertificateUpload{}
	return &this
}

// GetDisplayName returns the DisplayName field value
func (o *SupervisionIdentityCertificateUpload) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *SupervisionIdentityCertificateUpload) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *SupervisionIdentityCertificateUpload) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetPassword returns the Password field value
func (o *SupervisionIdentityCertificateUpload) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *SupervisionIdentityCertificateUpload) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *SupervisionIdentityCertificateUpload) SetPassword(v string) {
	o.Password = v
}

// GetCertificateData returns the CertificateData field value if set, zero value otherwise.
func (o *SupervisionIdentityCertificateUpload) GetCertificateData() string {
	if o == nil || IsNil(o.CertificateData) {
		var ret string
		return ret
	}
	return *o.CertificateData
}

// GetCertificateDataOk returns a tuple with the CertificateData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupervisionIdentityCertificateUpload) GetCertificateDataOk() (*string, bool) {
	if o == nil || IsNil(o.CertificateData) {
		return nil, false
	}
	return o.CertificateData, true
}

// HasCertificateData returns a boolean if a field has been set.
func (o *SupervisionIdentityCertificateUpload) HasCertificateData() bool {
	if o != nil && !IsNil(o.CertificateData) {
		return true
	}

	return false
}

// SetCertificateData gets a reference to the given string and assigns it to the CertificateData field.
func (o *SupervisionIdentityCertificateUpload) SetCertificateData(v string) {
	o.CertificateData = &v
}

func (o SupervisionIdentityCertificateUpload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupervisionIdentityCertificateUpload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["displayName"] = o.DisplayName
	toSerialize["password"] = o.Password
	if !IsNil(o.CertificateData) {
		toSerialize["certificateData"] = o.CertificateData
	}
	return toSerialize, nil
}

func (o *SupervisionIdentityCertificateUpload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"displayName",
		"password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSupervisionIdentityCertificateUpload := _SupervisionIdentityCertificateUpload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSupervisionIdentityCertificateUpload)

	if err != nil {
		return err
	}

	*o = SupervisionIdentityCertificateUpload(varSupervisionIdentityCertificateUpload)

	return err
}

type NullableSupervisionIdentityCertificateUpload struct {
	value *SupervisionIdentityCertificateUpload
	isSet bool
}

func (v NullableSupervisionIdentityCertificateUpload) Get() *SupervisionIdentityCertificateUpload {
	return v.value
}

func (v *NullableSupervisionIdentityCertificateUpload) Set(val *SupervisionIdentityCertificateUpload) {
	v.value = val
	v.isSet = true
}

func (v NullableSupervisionIdentityCertificateUpload) IsSet() bool {
	return v.isSet
}

func (v *NullableSupervisionIdentityCertificateUpload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupervisionIdentityCertificateUpload(val *SupervisionIdentityCertificateUpload) *NullableSupervisionIdentityCertificateUpload {
	return &NullableSupervisionIdentityCertificateUpload{value: val, isSet: true}
}

func (v NullableSupervisionIdentityCertificateUpload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupervisionIdentityCertificateUpload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


