/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ExportField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportField{}

// ExportField Field to be included in the export operation.
type ExportField struct {
	// English name of the field to be exported.
	FieldName *string `json:"fieldName,omitempty"`
	// Name which should be used for the label in the response - can be in any language. When null the fieldName itself will be used as the label.
	FieldLabelOverride NullableString `json:"fieldLabelOverride,omitempty"`
}

// NewExportField instantiates a new ExportField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportField() *ExportField {
	this := ExportField{}
	return &this
}

// NewExportFieldWithDefaults instantiates a new ExportField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportFieldWithDefaults() *ExportField {
	this := ExportField{}
	return &this
}

// GetFieldName returns the FieldName field value if set, zero value otherwise.
func (o *ExportField) GetFieldName() string {
	if o == nil || IsNil(o.FieldName) {
		var ret string
		return ret
	}
	return *o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportField) GetFieldNameOk() (*string, bool) {
	if o == nil || IsNil(o.FieldName) {
		return nil, false
	}
	return o.FieldName, true
}

// HasFieldName returns a boolean if a field has been set.
func (o *ExportField) HasFieldName() bool {
	if o != nil && !IsNil(o.FieldName) {
		return true
	}

	return false
}

// SetFieldName gets a reference to the given string and assigns it to the FieldName field.
func (o *ExportField) SetFieldName(v string) {
	o.FieldName = &v
}

// GetFieldLabelOverride returns the FieldLabelOverride field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExportField) GetFieldLabelOverride() string {
	if o == nil || IsNil(o.FieldLabelOverride.Get()) {
		var ret string
		return ret
	}
	return *o.FieldLabelOverride.Get()
}

// GetFieldLabelOverrideOk returns a tuple with the FieldLabelOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExportField) GetFieldLabelOverrideOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FieldLabelOverride.Get(), o.FieldLabelOverride.IsSet()
}

// HasFieldLabelOverride returns a boolean if a field has been set.
func (o *ExportField) HasFieldLabelOverride() bool {
	if o != nil && o.FieldLabelOverride.IsSet() {
		return true
	}

	return false
}

// SetFieldLabelOverride gets a reference to the given NullableString and assigns it to the FieldLabelOverride field.
func (o *ExportField) SetFieldLabelOverride(v string) {
	o.FieldLabelOverride.Set(&v)
}
// SetFieldLabelOverrideNil sets the value for FieldLabelOverride to be an explicit nil
func (o *ExportField) SetFieldLabelOverrideNil() {
	o.FieldLabelOverride.Set(nil)
}

// UnsetFieldLabelOverride ensures that no value is present for FieldLabelOverride, not even an explicit nil
func (o *ExportField) UnsetFieldLabelOverride() {
	o.FieldLabelOverride.Unset()
}

func (o ExportField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FieldName) {
		toSerialize["fieldName"] = o.FieldName
	}
	if o.FieldLabelOverride.IsSet() {
		toSerialize["fieldLabelOverride"] = o.FieldLabelOverride.Get()
	}
	return toSerialize, nil
}

type NullableExportField struct {
	value *ExportField
	isSet bool
}

func (v NullableExportField) Get() *ExportField {
	return v.value
}

func (v *NullableExportField) Set(val *ExportField) {
	v.value = val
	v.isSet = true
}

func (v NullableExportField) IsSet() bool {
	return v.isSet
}

func (v *NullableExportField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportField(val *ExportField) *NullableExportField {
	return &NullableExportField{value: val, isSet: true}
}

func (v NullableExportField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


