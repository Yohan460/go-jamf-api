/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// Security struct for Security
type Security struct {
	IsDataProtected *bool `json:"isDataProtected,omitempty"`
	IsBlockLevelEncryptionCapable *bool `json:"isBlockLevelEncryptionCapable,omitempty"`
	IsFileLevelEncryptionCapable *bool `json:"isFileLevelEncryptionCapable,omitempty"`
	IsPasscodePresent *bool `json:"isPasscodePresent,omitempty"`
	IsPasscodeCompliant *bool `json:"isPasscodeCompliant,omitempty"`
	IsPasscodeCompliantWithProfile *bool `json:"isPasscodeCompliantWithProfile,omitempty"`
	HardwareEncryption *int32 `json:"hardwareEncryption,omitempty"`
	IsActivationLockEnabled *bool `json:"isActivationLockEnabled,omitempty"`
	IsJailBreakDetected *bool `json:"isJailBreakDetected,omitempty"`
}

// NewSecurity instantiates a new Security object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurity() *Security {
	this := Security{}
	return &this
}

// NewSecurityWithDefaults instantiates a new Security object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityWithDefaults() *Security {
	this := Security{}
	return &this
}

// GetIsDataProtected returns the IsDataProtected field value if set, zero value otherwise.
func (o *Security) GetIsDataProtected() bool {
	if o == nil || o.IsDataProtected == nil {
		var ret bool
		return ret
	}
	return *o.IsDataProtected
}

// GetIsDataProtectedOk returns a tuple with the IsDataProtected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Security) GetIsDataProtectedOk() (*bool, bool) {
	if o == nil || o.IsDataProtected == nil {
		return nil, false
	}
	return o.IsDataProtected, true
}

// HasIsDataProtected returns a boolean if a field has been set.
func (o *Security) HasIsDataProtected() bool {
	if o != nil && o.IsDataProtected != nil {
		return true
	}

	return false
}

// SetIsDataProtected gets a reference to the given bool and assigns it to the IsDataProtected field.
func (o *Security) SetIsDataProtected(v bool) {
	o.IsDataProtected = &v
}

// GetIsBlockLevelEncryptionCapable returns the IsBlockLevelEncryptionCapable field value if set, zero value otherwise.
func (o *Security) GetIsBlockLevelEncryptionCapable() bool {
	if o == nil || o.IsBlockLevelEncryptionCapable == nil {
		var ret bool
		return ret
	}
	return *o.IsBlockLevelEncryptionCapable
}

// GetIsBlockLevelEncryptionCapableOk returns a tuple with the IsBlockLevelEncryptionCapable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Security) GetIsBlockLevelEncryptionCapableOk() (*bool, bool) {
	if o == nil || o.IsBlockLevelEncryptionCapable == nil {
		return nil, false
	}
	return o.IsBlockLevelEncryptionCapable, true
}

// HasIsBlockLevelEncryptionCapable returns a boolean if a field has been set.
func (o *Security) HasIsBlockLevelEncryptionCapable() bool {
	if o != nil && o.IsBlockLevelEncryptionCapable != nil {
		return true
	}

	return false
}

// SetIsBlockLevelEncryptionCapable gets a reference to the given bool and assigns it to the IsBlockLevelEncryptionCapable field.
func (o *Security) SetIsBlockLevelEncryptionCapable(v bool) {
	o.IsBlockLevelEncryptionCapable = &v
}

// GetIsFileLevelEncryptionCapable returns the IsFileLevelEncryptionCapable field value if set, zero value otherwise.
func (o *Security) GetIsFileLevelEncryptionCapable() bool {
	if o == nil || o.IsFileLevelEncryptionCapable == nil {
		var ret bool
		return ret
	}
	return *o.IsFileLevelEncryptionCapable
}

// GetIsFileLevelEncryptionCapableOk returns a tuple with the IsFileLevelEncryptionCapable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Security) GetIsFileLevelEncryptionCapableOk() (*bool, bool) {
	if o == nil || o.IsFileLevelEncryptionCapable == nil {
		return nil, false
	}
	return o.IsFileLevelEncryptionCapable, true
}

// HasIsFileLevelEncryptionCapable returns a boolean if a field has been set.
func (o *Security) HasIsFileLevelEncryptionCapable() bool {
	if o != nil && o.IsFileLevelEncryptionCapable != nil {
		return true
	}

	return false
}

// SetIsFileLevelEncryptionCapable gets a reference to the given bool and assigns it to the IsFileLevelEncryptionCapable field.
func (o *Security) SetIsFileLevelEncryptionCapable(v bool) {
	o.IsFileLevelEncryptionCapable = &v
}

// GetIsPasscodePresent returns the IsPasscodePresent field value if set, zero value otherwise.
func (o *Security) GetIsPasscodePresent() bool {
	if o == nil || o.IsPasscodePresent == nil {
		var ret bool
		return ret
	}
	return *o.IsPasscodePresent
}

// GetIsPasscodePresentOk returns a tuple with the IsPasscodePresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Security) GetIsPasscodePresentOk() (*bool, bool) {
	if o == nil || o.IsPasscodePresent == nil {
		return nil, false
	}
	return o.IsPasscodePresent, true
}

// HasIsPasscodePresent returns a boolean if a field has been set.
func (o *Security) HasIsPasscodePresent() bool {
	if o != nil && o.IsPasscodePresent != nil {
		return true
	}

	return false
}

// SetIsPasscodePresent gets a reference to the given bool and assigns it to the IsPasscodePresent field.
func (o *Security) SetIsPasscodePresent(v bool) {
	o.IsPasscodePresent = &v
}

// GetIsPasscodeCompliant returns the IsPasscodeCompliant field value if set, zero value otherwise.
func (o *Security) GetIsPasscodeCompliant() bool {
	if o == nil || o.IsPasscodeCompliant == nil {
		var ret bool
		return ret
	}
	return *o.IsPasscodeCompliant
}

// GetIsPasscodeCompliantOk returns a tuple with the IsPasscodeCompliant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Security) GetIsPasscodeCompliantOk() (*bool, bool) {
	if o == nil || o.IsPasscodeCompliant == nil {
		return nil, false
	}
	return o.IsPasscodeCompliant, true
}

// HasIsPasscodeCompliant returns a boolean if a field has been set.
func (o *Security) HasIsPasscodeCompliant() bool {
	if o != nil && o.IsPasscodeCompliant != nil {
		return true
	}

	return false
}

// SetIsPasscodeCompliant gets a reference to the given bool and assigns it to the IsPasscodeCompliant field.
func (o *Security) SetIsPasscodeCompliant(v bool) {
	o.IsPasscodeCompliant = &v
}

// GetIsPasscodeCompliantWithProfile returns the IsPasscodeCompliantWithProfile field value if set, zero value otherwise.
func (o *Security) GetIsPasscodeCompliantWithProfile() bool {
	if o == nil || o.IsPasscodeCompliantWithProfile == nil {
		var ret bool
		return ret
	}
	return *o.IsPasscodeCompliantWithProfile
}

// GetIsPasscodeCompliantWithProfileOk returns a tuple with the IsPasscodeCompliantWithProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Security) GetIsPasscodeCompliantWithProfileOk() (*bool, bool) {
	if o == nil || o.IsPasscodeCompliantWithProfile == nil {
		return nil, false
	}
	return o.IsPasscodeCompliantWithProfile, true
}

// HasIsPasscodeCompliantWithProfile returns a boolean if a field has been set.
func (o *Security) HasIsPasscodeCompliantWithProfile() bool {
	if o != nil && o.IsPasscodeCompliantWithProfile != nil {
		return true
	}

	return false
}

// SetIsPasscodeCompliantWithProfile gets a reference to the given bool and assigns it to the IsPasscodeCompliantWithProfile field.
func (o *Security) SetIsPasscodeCompliantWithProfile(v bool) {
	o.IsPasscodeCompliantWithProfile = &v
}

// GetHardwareEncryption returns the HardwareEncryption field value if set, zero value otherwise.
func (o *Security) GetHardwareEncryption() int32 {
	if o == nil || o.HardwareEncryption == nil {
		var ret int32
		return ret
	}
	return *o.HardwareEncryption
}

// GetHardwareEncryptionOk returns a tuple with the HardwareEncryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Security) GetHardwareEncryptionOk() (*int32, bool) {
	if o == nil || o.HardwareEncryption == nil {
		return nil, false
	}
	return o.HardwareEncryption, true
}

// HasHardwareEncryption returns a boolean if a field has been set.
func (o *Security) HasHardwareEncryption() bool {
	if o != nil && o.HardwareEncryption != nil {
		return true
	}

	return false
}

// SetHardwareEncryption gets a reference to the given int32 and assigns it to the HardwareEncryption field.
func (o *Security) SetHardwareEncryption(v int32) {
	o.HardwareEncryption = &v
}

// GetIsActivationLockEnabled returns the IsActivationLockEnabled field value if set, zero value otherwise.
func (o *Security) GetIsActivationLockEnabled() bool {
	if o == nil || o.IsActivationLockEnabled == nil {
		var ret bool
		return ret
	}
	return *o.IsActivationLockEnabled
}

// GetIsActivationLockEnabledOk returns a tuple with the IsActivationLockEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Security) GetIsActivationLockEnabledOk() (*bool, bool) {
	if o == nil || o.IsActivationLockEnabled == nil {
		return nil, false
	}
	return o.IsActivationLockEnabled, true
}

// HasIsActivationLockEnabled returns a boolean if a field has been set.
func (o *Security) HasIsActivationLockEnabled() bool {
	if o != nil && o.IsActivationLockEnabled != nil {
		return true
	}

	return false
}

// SetIsActivationLockEnabled gets a reference to the given bool and assigns it to the IsActivationLockEnabled field.
func (o *Security) SetIsActivationLockEnabled(v bool) {
	o.IsActivationLockEnabled = &v
}

// GetIsJailBreakDetected returns the IsJailBreakDetected field value if set, zero value otherwise.
func (o *Security) GetIsJailBreakDetected() bool {
	if o == nil || o.IsJailBreakDetected == nil {
		var ret bool
		return ret
	}
	return *o.IsJailBreakDetected
}

// GetIsJailBreakDetectedOk returns a tuple with the IsJailBreakDetected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Security) GetIsJailBreakDetectedOk() (*bool, bool) {
	if o == nil || o.IsJailBreakDetected == nil {
		return nil, false
	}
	return o.IsJailBreakDetected, true
}

// HasIsJailBreakDetected returns a boolean if a field has been set.
func (o *Security) HasIsJailBreakDetected() bool {
	if o != nil && o.IsJailBreakDetected != nil {
		return true
	}

	return false
}

// SetIsJailBreakDetected gets a reference to the given bool and assigns it to the IsJailBreakDetected field.
func (o *Security) SetIsJailBreakDetected(v bool) {
	o.IsJailBreakDetected = &v
}

func (o Security) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsDataProtected != nil {
		toSerialize["isDataProtected"] = o.IsDataProtected
	}
	if o.IsBlockLevelEncryptionCapable != nil {
		toSerialize["isBlockLevelEncryptionCapable"] = o.IsBlockLevelEncryptionCapable
	}
	if o.IsFileLevelEncryptionCapable != nil {
		toSerialize["isFileLevelEncryptionCapable"] = o.IsFileLevelEncryptionCapable
	}
	if o.IsPasscodePresent != nil {
		toSerialize["isPasscodePresent"] = o.IsPasscodePresent
	}
	if o.IsPasscodeCompliant != nil {
		toSerialize["isPasscodeCompliant"] = o.IsPasscodeCompliant
	}
	if o.IsPasscodeCompliantWithProfile != nil {
		toSerialize["isPasscodeCompliantWithProfile"] = o.IsPasscodeCompliantWithProfile
	}
	if o.HardwareEncryption != nil {
		toSerialize["hardwareEncryption"] = o.HardwareEncryption
	}
	if o.IsActivationLockEnabled != nil {
		toSerialize["isActivationLockEnabled"] = o.IsActivationLockEnabled
	}
	if o.IsJailBreakDetected != nil {
		toSerialize["isJailBreakDetected"] = o.IsJailBreakDetected
	}
	return json.Marshal(toSerialize)
}

type NullableSecurity struct {
	value *Security
	isSet bool
}

func (v NullableSecurity) Get() *Security {
	return v.value
}

func (v *NullableSecurity) Set(val *Security) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurity) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurity(val *Security) *NullableSecurity {
	return &NullableSecurity{value: val, isSet: true}
}

func (v NullableSecurity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


