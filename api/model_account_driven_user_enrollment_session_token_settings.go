/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the AccountDrivenUserEnrollmentSessionTokenSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountDrivenUserEnrollmentSessionTokenSettings{}

// AccountDrivenUserEnrollmentSessionTokenSettings Settings for Account Driven User Enrollment. Only 1 of expirationIntervalDays or expirationIntervalSeconds can be supplied.
type AccountDrivenUserEnrollmentSessionTokenSettings struct {
	Enabled *bool `json:"enabled,omitempty"`
	ExpirationIntervalDays *int64 `json:"expirationIntervalDays,omitempty"`
	ExpirationIntervalSeconds *int64 `json:"expirationIntervalSeconds,omitempty"`
}

// NewAccountDrivenUserEnrollmentSessionTokenSettings instantiates a new AccountDrivenUserEnrollmentSessionTokenSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountDrivenUserEnrollmentSessionTokenSettings() *AccountDrivenUserEnrollmentSessionTokenSettings {
	this := AccountDrivenUserEnrollmentSessionTokenSettings{}
	return &this
}

// NewAccountDrivenUserEnrollmentSessionTokenSettingsWithDefaults instantiates a new AccountDrivenUserEnrollmentSessionTokenSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountDrivenUserEnrollmentSessionTokenSettingsWithDefaults() *AccountDrivenUserEnrollmentSessionTokenSettings {
	this := AccountDrivenUserEnrollmentSessionTokenSettings{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *AccountDrivenUserEnrollmentSessionTokenSettings) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountDrivenUserEnrollmentSessionTokenSettings) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *AccountDrivenUserEnrollmentSessionTokenSettings) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *AccountDrivenUserEnrollmentSessionTokenSettings) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetExpirationIntervalDays returns the ExpirationIntervalDays field value if set, zero value otherwise.
func (o *AccountDrivenUserEnrollmentSessionTokenSettings) GetExpirationIntervalDays() int64 {
	if o == nil || IsNil(o.ExpirationIntervalDays) {
		var ret int64
		return ret
	}
	return *o.ExpirationIntervalDays
}

// GetExpirationIntervalDaysOk returns a tuple with the ExpirationIntervalDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountDrivenUserEnrollmentSessionTokenSettings) GetExpirationIntervalDaysOk() (*int64, bool) {
	if o == nil || IsNil(o.ExpirationIntervalDays) {
		return nil, false
	}
	return o.ExpirationIntervalDays, true
}

// HasExpirationIntervalDays returns a boolean if a field has been set.
func (o *AccountDrivenUserEnrollmentSessionTokenSettings) HasExpirationIntervalDays() bool {
	if o != nil && !IsNil(o.ExpirationIntervalDays) {
		return true
	}

	return false
}

// SetExpirationIntervalDays gets a reference to the given int64 and assigns it to the ExpirationIntervalDays field.
func (o *AccountDrivenUserEnrollmentSessionTokenSettings) SetExpirationIntervalDays(v int64) {
	o.ExpirationIntervalDays = &v
}

// GetExpirationIntervalSeconds returns the ExpirationIntervalSeconds field value if set, zero value otherwise.
func (o *AccountDrivenUserEnrollmentSessionTokenSettings) GetExpirationIntervalSeconds() int64 {
	if o == nil || IsNil(o.ExpirationIntervalSeconds) {
		var ret int64
		return ret
	}
	return *o.ExpirationIntervalSeconds
}

// GetExpirationIntervalSecondsOk returns a tuple with the ExpirationIntervalSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountDrivenUserEnrollmentSessionTokenSettings) GetExpirationIntervalSecondsOk() (*int64, bool) {
	if o == nil || IsNil(o.ExpirationIntervalSeconds) {
		return nil, false
	}
	return o.ExpirationIntervalSeconds, true
}

// HasExpirationIntervalSeconds returns a boolean if a field has been set.
func (o *AccountDrivenUserEnrollmentSessionTokenSettings) HasExpirationIntervalSeconds() bool {
	if o != nil && !IsNil(o.ExpirationIntervalSeconds) {
		return true
	}

	return false
}

// SetExpirationIntervalSeconds gets a reference to the given int64 and assigns it to the ExpirationIntervalSeconds field.
func (o *AccountDrivenUserEnrollmentSessionTokenSettings) SetExpirationIntervalSeconds(v int64) {
	o.ExpirationIntervalSeconds = &v
}

func (o AccountDrivenUserEnrollmentSessionTokenSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountDrivenUserEnrollmentSessionTokenSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.ExpirationIntervalDays) {
		toSerialize["expirationIntervalDays"] = o.ExpirationIntervalDays
	}
	if !IsNil(o.ExpirationIntervalSeconds) {
		toSerialize["expirationIntervalSeconds"] = o.ExpirationIntervalSeconds
	}
	return toSerialize, nil
}

type NullableAccountDrivenUserEnrollmentSessionTokenSettings struct {
	value *AccountDrivenUserEnrollmentSessionTokenSettings
	isSet bool
}

func (v NullableAccountDrivenUserEnrollmentSessionTokenSettings) Get() *AccountDrivenUserEnrollmentSessionTokenSettings {
	return v.value
}

func (v *NullableAccountDrivenUserEnrollmentSessionTokenSettings) Set(val *AccountDrivenUserEnrollmentSessionTokenSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountDrivenUserEnrollmentSessionTokenSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountDrivenUserEnrollmentSessionTokenSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountDrivenUserEnrollmentSessionTokenSettings(val *AccountDrivenUserEnrollmentSessionTokenSettings) *NullableAccountDrivenUserEnrollmentSessionTokenSettings {
	return &NullableAccountDrivenUserEnrollmentSessionTokenSettings{value: val, isSet: true}
}

func (v NullableAccountDrivenUserEnrollmentSessionTokenSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountDrivenUserEnrollmentSessionTokenSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


