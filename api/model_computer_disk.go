/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ComputerDisk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComputerDisk{}

// ComputerDisk struct for ComputerDisk
type ComputerDisk struct {
	Id *string `json:"id,omitempty"`
	Device *string `json:"device,omitempty"`
	Model *string `json:"model,omitempty"`
	Revision *string `json:"revision,omitempty"`
	SerialNumber *string `json:"serialNumber,omitempty"`
	// Disk Size in MB.
	SizeMegabytes *int64 `json:"sizeMegabytes,omitempty"`
	// S.M.A.R.T Status
	SmartStatus *string `json:"smartStatus,omitempty"`
	// Connection type attribute.
	Type *string `json:"type,omitempty"`
	Partitions []ComputerPartition `json:"partitions,omitempty"`
}

// NewComputerDisk instantiates a new ComputerDisk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputerDisk() *ComputerDisk {
	this := ComputerDisk{}
	return &this
}

// NewComputerDiskWithDefaults instantiates a new ComputerDisk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputerDiskWithDefaults() *ComputerDisk {
	this := ComputerDisk{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ComputerDisk) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerDisk) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ComputerDisk) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ComputerDisk) SetId(v string) {
	o.Id = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *ComputerDisk) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerDisk) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *ComputerDisk) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *ComputerDisk) SetDevice(v string) {
	o.Device = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *ComputerDisk) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerDisk) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *ComputerDisk) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *ComputerDisk) SetModel(v string) {
	o.Model = &v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *ComputerDisk) GetRevision() string {
	if o == nil || IsNil(o.Revision) {
		var ret string
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerDisk) GetRevisionOk() (*string, bool) {
	if o == nil || IsNil(o.Revision) {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *ComputerDisk) HasRevision() bool {
	if o != nil && !IsNil(o.Revision) {
		return true
	}

	return false
}

// SetRevision gets a reference to the given string and assigns it to the Revision field.
func (o *ComputerDisk) SetRevision(v string) {
	o.Revision = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *ComputerDisk) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerDisk) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *ComputerDisk) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *ComputerDisk) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetSizeMegabytes returns the SizeMegabytes field value if set, zero value otherwise.
func (o *ComputerDisk) GetSizeMegabytes() int64 {
	if o == nil || IsNil(o.SizeMegabytes) {
		var ret int64
		return ret
	}
	return *o.SizeMegabytes
}

// GetSizeMegabytesOk returns a tuple with the SizeMegabytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerDisk) GetSizeMegabytesOk() (*int64, bool) {
	if o == nil || IsNil(o.SizeMegabytes) {
		return nil, false
	}
	return o.SizeMegabytes, true
}

// HasSizeMegabytes returns a boolean if a field has been set.
func (o *ComputerDisk) HasSizeMegabytes() bool {
	if o != nil && !IsNil(o.SizeMegabytes) {
		return true
	}

	return false
}

// SetSizeMegabytes gets a reference to the given int64 and assigns it to the SizeMegabytes field.
func (o *ComputerDisk) SetSizeMegabytes(v int64) {
	o.SizeMegabytes = &v
}

// GetSmartStatus returns the SmartStatus field value if set, zero value otherwise.
func (o *ComputerDisk) GetSmartStatus() string {
	if o == nil || IsNil(o.SmartStatus) {
		var ret string
		return ret
	}
	return *o.SmartStatus
}

// GetSmartStatusOk returns a tuple with the SmartStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerDisk) GetSmartStatusOk() (*string, bool) {
	if o == nil || IsNil(o.SmartStatus) {
		return nil, false
	}
	return o.SmartStatus, true
}

// HasSmartStatus returns a boolean if a field has been set.
func (o *ComputerDisk) HasSmartStatus() bool {
	if o != nil && !IsNil(o.SmartStatus) {
		return true
	}

	return false
}

// SetSmartStatus gets a reference to the given string and assigns it to the SmartStatus field.
func (o *ComputerDisk) SetSmartStatus(v string) {
	o.SmartStatus = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ComputerDisk) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerDisk) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ComputerDisk) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ComputerDisk) SetType(v string) {
	o.Type = &v
}

// GetPartitions returns the Partitions field value if set, zero value otherwise.
func (o *ComputerDisk) GetPartitions() []ComputerPartition {
	if o == nil || IsNil(o.Partitions) {
		var ret []ComputerPartition
		return ret
	}
	return o.Partitions
}

// GetPartitionsOk returns a tuple with the Partitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerDisk) GetPartitionsOk() ([]ComputerPartition, bool) {
	if o == nil || IsNil(o.Partitions) {
		return nil, false
	}
	return o.Partitions, true
}

// HasPartitions returns a boolean if a field has been set.
func (o *ComputerDisk) HasPartitions() bool {
	if o != nil && !IsNil(o.Partitions) {
		return true
	}

	return false
}

// SetPartitions gets a reference to the given []ComputerPartition and assigns it to the Partitions field.
func (o *ComputerDisk) SetPartitions(v []ComputerPartition) {
	o.Partitions = v
}

func (o ComputerDisk) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComputerDisk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.Revision) {
		toSerialize["revision"] = o.Revision
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	if !IsNil(o.SizeMegabytes) {
		toSerialize["sizeMegabytes"] = o.SizeMegabytes
	}
	if !IsNil(o.SmartStatus) {
		toSerialize["smartStatus"] = o.SmartStatus
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Partitions) {
		toSerialize["partitions"] = o.Partitions
	}
	return toSerialize, nil
}

type NullableComputerDisk struct {
	value *ComputerDisk
	isSet bool
}

func (v NullableComputerDisk) Get() *ComputerDisk {
	return v.value
}

func (v *NullableComputerDisk) Set(val *ComputerDisk) {
	v.value = val
	v.isSet = true
}

func (v NullableComputerDisk) IsSet() bool {
	return v.isSet
}

func (v *NullableComputerDisk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputerDisk(val *ComputerDisk) *NullableComputerDisk {
	return &NullableComputerDisk{value: val, isSet: true}
}

func (v NullableComputerDisk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputerDisk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


