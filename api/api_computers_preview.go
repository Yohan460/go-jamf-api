/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type ComputersPreviewAPI interface {

	/*
	PreviewComputersGet Return a list of Computers 

	Returns a list of computers.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ComputersPreviewAPIPreviewComputersGetRequest
	*/
	PreviewComputersGet(ctx context.Context) ComputersPreviewAPIPreviewComputersGetRequest

	// PreviewComputersGetExecute executes the request
	//  @return ComputersSearchResults
	PreviewComputersGetExecute(r ComputersPreviewAPIPreviewComputersGetRequest) (*ComputersSearchResults, *http.Response, error)
}

// ComputersPreviewAPIService ComputersPreviewAPI service
type ComputersPreviewAPIService service

type ComputersPreviewAPIPreviewComputersGetRequest struct {
	ctx context.Context
	ApiService ComputersPreviewAPI
	page *int32
	size *int32
	pagesize *int32
	pageSize *int32
	sort *string
}

func (r ComputersPreviewAPIPreviewComputersGetRequest) Page(page int32) ComputersPreviewAPIPreviewComputersGetRequest {
	r.page = &page
	return r
}

// Deprecated
func (r ComputersPreviewAPIPreviewComputersGetRequest) Size(size int32) ComputersPreviewAPIPreviewComputersGetRequest {
	r.size = &size
	return r
}

// Deprecated
func (r ComputersPreviewAPIPreviewComputersGetRequest) Pagesize(pagesize int32) ComputersPreviewAPIPreviewComputersGetRequest {
	r.pagesize = &pagesize
	return r
}

func (r ComputersPreviewAPIPreviewComputersGetRequest) PageSize(pageSize int32) ComputersPreviewAPIPreviewComputersGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Default sort is name:asc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc
func (r ComputersPreviewAPIPreviewComputersGetRequest) Sort(sort string) ComputersPreviewAPIPreviewComputersGetRequest {
	r.sort = &sort
	return r
}

func (r ComputersPreviewAPIPreviewComputersGetRequest) Execute() (*ComputersSearchResults, *http.Response, error) {
	return r.ApiService.PreviewComputersGetExecute(r)
}

/*
PreviewComputersGet Return a list of Computers 

Returns a list of computers.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ComputersPreviewAPIPreviewComputersGetRequest
*/
func (a *ComputersPreviewAPIService) PreviewComputersGet(ctx context.Context) ComputersPreviewAPIPreviewComputersGetRequest {
	return ComputersPreviewAPIPreviewComputersGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ComputersSearchResults
func (a *ComputersPreviewAPIService) PreviewComputersGetExecute(r ComputersPreviewAPIPreviewComputersGetRequest) (*ComputersSearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComputersSearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComputersPreviewAPIService.PreviewComputersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/preview/computers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	} else {
		var defaultValue int32 = 100
		r.size = &defaultValue
	}
	if r.pagesize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pagesize", r.pagesize, "")
	} else {
		var defaultValue int32 = 100
		r.pagesize = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	} else {
		var defaultValue string = "name:asc"
		r.sort = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
