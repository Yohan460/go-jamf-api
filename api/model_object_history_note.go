/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ObjectHistoryNote struct for ObjectHistoryNote
type ObjectHistoryNote struct {
	Note string `json:"note"`
}

// NewObjectHistoryNote instantiates a new ObjectHistoryNote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectHistoryNote(note string) *ObjectHistoryNote {
	this := ObjectHistoryNote{}
	this.Note = note
	return &this
}

// NewObjectHistoryNoteWithDefaults instantiates a new ObjectHistoryNote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectHistoryNoteWithDefaults() *ObjectHistoryNote {
	this := ObjectHistoryNote{}
	return &this
}

// GetNote returns the Note field value
func (o *ObjectHistoryNote) GetNote() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Note
}

// GetNoteOk returns a tuple with the Note field value
// and a boolean to check if the value has been set.
func (o *ObjectHistoryNote) GetNoteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Note, true
}

// SetNote sets field value
func (o *ObjectHistoryNote) SetNote(v string) {
	o.Note = v
}

func (o ObjectHistoryNote) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["note"] = o.Note
	}
	return json.Marshal(toSerialize)
}

type NullableObjectHistoryNote struct {
	value *ObjectHistoryNote
	isSet bool
}

func (v NullableObjectHistoryNote) Get() *ObjectHistoryNote {
	return v.value
}

func (v *NullableObjectHistoryNote) Set(val *ObjectHistoryNote) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectHistoryNote) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectHistoryNote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectHistoryNote(val *ObjectHistoryNote) *NullableObjectHistoryNote {
	return &NullableObjectHistoryNote{value: val, isSet: true}
}

func (v NullableObjectHistoryNote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectHistoryNote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


