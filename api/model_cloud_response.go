/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the CloudResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudResponse{}

// CloudResponse struct for CloudResponse
type CloudResponse struct {
	CloudInstance *bool `json:"cloudInstance,omitempty"`
	RampInstance *bool `json:"rampInstance,omitempty"`
}

// NewCloudResponse instantiates a new CloudResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudResponse() *CloudResponse {
	this := CloudResponse{}
	return &this
}

// NewCloudResponseWithDefaults instantiates a new CloudResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudResponseWithDefaults() *CloudResponse {
	this := CloudResponse{}
	return &this
}

// GetCloudInstance returns the CloudInstance field value if set, zero value otherwise.
func (o *CloudResponse) GetCloudInstance() bool {
	if o == nil || IsNil(o.CloudInstance) {
		var ret bool
		return ret
	}
	return *o.CloudInstance
}

// GetCloudInstanceOk returns a tuple with the CloudInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudResponse) GetCloudInstanceOk() (*bool, bool) {
	if o == nil || IsNil(o.CloudInstance) {
		return nil, false
	}
	return o.CloudInstance, true
}

// HasCloudInstance returns a boolean if a field has been set.
func (o *CloudResponse) HasCloudInstance() bool {
	if o != nil && !IsNil(o.CloudInstance) {
		return true
	}

	return false
}

// SetCloudInstance gets a reference to the given bool and assigns it to the CloudInstance field.
func (o *CloudResponse) SetCloudInstance(v bool) {
	o.CloudInstance = &v
}

// GetRampInstance returns the RampInstance field value if set, zero value otherwise.
func (o *CloudResponse) GetRampInstance() bool {
	if o == nil || IsNil(o.RampInstance) {
		var ret bool
		return ret
	}
	return *o.RampInstance
}

// GetRampInstanceOk returns a tuple with the RampInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudResponse) GetRampInstanceOk() (*bool, bool) {
	if o == nil || IsNil(o.RampInstance) {
		return nil, false
	}
	return o.RampInstance, true
}

// HasRampInstance returns a boolean if a field has been set.
func (o *CloudResponse) HasRampInstance() bool {
	if o != nil && !IsNil(o.RampInstance) {
		return true
	}

	return false
}

// SetRampInstance gets a reference to the given bool and assigns it to the RampInstance field.
func (o *CloudResponse) SetRampInstance(v bool) {
	o.RampInstance = &v
}

func (o CloudResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloudResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CloudInstance) {
		toSerialize["cloudInstance"] = o.CloudInstance
	}
	if !IsNil(o.RampInstance) {
		toSerialize["rampInstance"] = o.RampInstance
	}
	return toSerialize, nil
}

type NullableCloudResponse struct {
	value *CloudResponse
	isSet bool
}

func (v NullableCloudResponse) Get() *CloudResponse {
	return v.value
}

func (v *NullableCloudResponse) Set(val *CloudResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudResponse(val *CloudResponse) *NullableCloudResponse {
	return &NullableCloudResponse{value: val, isSet: true}
}

func (v NullableCloudResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


