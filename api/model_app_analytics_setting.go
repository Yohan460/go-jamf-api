/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// AppAnalyticsSetting the model 'AppAnalyticsSetting'
type AppAnalyticsSetting string

// List of AppAnalyticsSetting
const (
	APPANALYTICSSETTING_ENABLE_APP_ANALYTICS AppAnalyticsSetting = "ENABLE_APP_ANALYTICS"
	APPANALYTICSSETTING_DISABLE_APP_ANALYTICS AppAnalyticsSetting = "DISABLE_APP_ANALYTICS"
)

// All allowed values of AppAnalyticsSetting enum
var AllowedAppAnalyticsSettingEnumValues = []AppAnalyticsSetting{
	"ENABLE_APP_ANALYTICS",
	"DISABLE_APP_ANALYTICS",
}

func (v *AppAnalyticsSetting) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AppAnalyticsSetting(value)
	for _, existing := range AllowedAppAnalyticsSettingEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AppAnalyticsSetting", value)
}

// NewAppAnalyticsSettingFromValue returns a pointer to a valid AppAnalyticsSetting
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAppAnalyticsSettingFromValue(v string) (*AppAnalyticsSetting, error) {
	ev := AppAnalyticsSetting(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AppAnalyticsSetting: valid values are %v", v, AllowedAppAnalyticsSettingEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AppAnalyticsSetting) IsValid() bool {
	for _, existing := range AllowedAppAnalyticsSettingEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AppAnalyticsSetting value
func (v AppAnalyticsSetting) Ptr() *AppAnalyticsSetting {
	return &v
}

type NullableAppAnalyticsSetting struct {
	value *AppAnalyticsSetting
	isSet bool
}

func (v NullableAppAnalyticsSetting) Get() *AppAnalyticsSetting {
	return v.value
}

func (v *NullableAppAnalyticsSetting) Set(val *AppAnalyticsSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableAppAnalyticsSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableAppAnalyticsSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppAnalyticsSetting(val *AppAnalyticsSetting) *NullableAppAnalyticsSetting {
	return &NullableAppAnalyticsSetting{value: val, isSet: true}
}

func (v NullableAppAnalyticsSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppAnalyticsSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

