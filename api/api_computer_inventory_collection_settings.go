/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


type ComputerInventoryCollectionSettingsApi interface {

	/*
	V1ComputerInventoryCollectionSettingsCustomPathIdDelete Delete Custom Path from Computer Inventory Collection Settings

	Delete Custom Path from Computer Inventory Collection Settings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id id of Custom Path
	@return ApiV1ComputerInventoryCollectionSettingsCustomPathIdDeleteRequest
	*/
	V1ComputerInventoryCollectionSettingsCustomPathIdDelete(ctx context.Context, id string) ApiV1ComputerInventoryCollectionSettingsCustomPathIdDeleteRequest

	// V1ComputerInventoryCollectionSettingsCustomPathIdDeleteExecute executes the request
	V1ComputerInventoryCollectionSettingsCustomPathIdDeleteExecute(r ApiV1ComputerInventoryCollectionSettingsCustomPathIdDeleteRequest) (*http.Response, error)

	/*
	V1ComputerInventoryCollectionSettingsCustomPathPost Create Computer Inventory Collection Settings Custom Path

	Creates a custom search path to use when collecting applications, fonts, and plug-ins.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV1ComputerInventoryCollectionSettingsCustomPathPostRequest
	*/
	V1ComputerInventoryCollectionSettingsCustomPathPost(ctx context.Context) ApiV1ComputerInventoryCollectionSettingsCustomPathPostRequest

	// V1ComputerInventoryCollectionSettingsCustomPathPostExecute executes the request
	//  @return HrefResponse
	V1ComputerInventoryCollectionSettingsCustomPathPostExecute(r ApiV1ComputerInventoryCollectionSettingsCustomPathPostRequest) (*HrefResponse, *http.Response, error)

	/*
	V1ComputerInventoryCollectionSettingsGet Returns computer inventory settings

	Returns computer inventory settings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV1ComputerInventoryCollectionSettingsGetRequest
	*/
	V1ComputerInventoryCollectionSettingsGet(ctx context.Context) ApiV1ComputerInventoryCollectionSettingsGetRequest

	// V1ComputerInventoryCollectionSettingsGetExecute executes the request
	//  @return ComputerInventoryCollectionSettings
	V1ComputerInventoryCollectionSettingsGetExecute(r ApiV1ComputerInventoryCollectionSettingsGetRequest) (*ComputerInventoryCollectionSettings, *http.Response, error)

	/*
	V1ComputerInventoryCollectionSettingsPatch Update computer inventory settings

	Update computer inventory settings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV1ComputerInventoryCollectionSettingsPatchRequest
	*/
	V1ComputerInventoryCollectionSettingsPatch(ctx context.Context) ApiV1ComputerInventoryCollectionSettingsPatchRequest

	// V1ComputerInventoryCollectionSettingsPatchExecute executes the request
	//  @return ComputerInventoryCollectionSettings
	V1ComputerInventoryCollectionSettingsPatchExecute(r ApiV1ComputerInventoryCollectionSettingsPatchRequest) (*ComputerInventoryCollectionSettings, *http.Response, error)
}

// ComputerInventoryCollectionSettingsApiService ComputerInventoryCollectionSettingsApi service
type ComputerInventoryCollectionSettingsApiService service

type ApiV1ComputerInventoryCollectionSettingsCustomPathIdDeleteRequest struct {
	ctx context.Context
	ApiService ComputerInventoryCollectionSettingsApi
	id string
}

func (r ApiV1ComputerInventoryCollectionSettingsCustomPathIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1ComputerInventoryCollectionSettingsCustomPathIdDeleteExecute(r)
}

/*
V1ComputerInventoryCollectionSettingsCustomPathIdDelete Delete Custom Path from Computer Inventory Collection Settings

Delete Custom Path from Computer Inventory Collection Settings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id id of Custom Path
 @return ApiV1ComputerInventoryCollectionSettingsCustomPathIdDeleteRequest
*/
func (a *ComputerInventoryCollectionSettingsApiService) V1ComputerInventoryCollectionSettingsCustomPathIdDelete(ctx context.Context, id string) ApiV1ComputerInventoryCollectionSettingsCustomPathIdDeleteRequest {
	return ApiV1ComputerInventoryCollectionSettingsCustomPathIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ComputerInventoryCollectionSettingsApiService) V1ComputerInventoryCollectionSettingsCustomPathIdDeleteExecute(r ApiV1ComputerInventoryCollectionSettingsCustomPathIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComputerInventoryCollectionSettingsApiService.V1ComputerInventoryCollectionSettingsCustomPathIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/computer-inventory-collection-settings/custom-path/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1ComputerInventoryCollectionSettingsCustomPathPostRequest struct {
	ctx context.Context
	ApiService ComputerInventoryCollectionSettingsApi
	createPath *CreatePath
}

// Computer inventory settings to update
func (r ApiV1ComputerInventoryCollectionSettingsCustomPathPostRequest) CreatePath(createPath CreatePath) ApiV1ComputerInventoryCollectionSettingsCustomPathPostRequest {
	r.createPath = &createPath
	return r
}

func (r ApiV1ComputerInventoryCollectionSettingsCustomPathPostRequest) Execute() (*HrefResponse, *http.Response, error) {
	return r.ApiService.V1ComputerInventoryCollectionSettingsCustomPathPostExecute(r)
}

/*
V1ComputerInventoryCollectionSettingsCustomPathPost Create Computer Inventory Collection Settings Custom Path

Creates a custom search path to use when collecting applications, fonts, and plug-ins.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1ComputerInventoryCollectionSettingsCustomPathPostRequest
*/
func (a *ComputerInventoryCollectionSettingsApiService) V1ComputerInventoryCollectionSettingsCustomPathPost(ctx context.Context) ApiV1ComputerInventoryCollectionSettingsCustomPathPostRequest {
	return ApiV1ComputerInventoryCollectionSettingsCustomPathPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HrefResponse
func (a *ComputerInventoryCollectionSettingsApiService) V1ComputerInventoryCollectionSettingsCustomPathPostExecute(r ApiV1ComputerInventoryCollectionSettingsCustomPathPostRequest) (*HrefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HrefResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComputerInventoryCollectionSettingsApiService.V1ComputerInventoryCollectionSettingsCustomPathPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/computer-inventory-collection-settings/custom-path"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createPath == nil {
		return localVarReturnValue, nil, reportError("createPath is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createPath
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ComputerInventoryCollectionSettingsGetRequest struct {
	ctx context.Context
	ApiService ComputerInventoryCollectionSettingsApi
}

func (r ApiV1ComputerInventoryCollectionSettingsGetRequest) Execute() (*ComputerInventoryCollectionSettings, *http.Response, error) {
	return r.ApiService.V1ComputerInventoryCollectionSettingsGetExecute(r)
}

/*
V1ComputerInventoryCollectionSettingsGet Returns computer inventory settings

Returns computer inventory settings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1ComputerInventoryCollectionSettingsGetRequest
*/
func (a *ComputerInventoryCollectionSettingsApiService) V1ComputerInventoryCollectionSettingsGet(ctx context.Context) ApiV1ComputerInventoryCollectionSettingsGetRequest {
	return ApiV1ComputerInventoryCollectionSettingsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ComputerInventoryCollectionSettings
func (a *ComputerInventoryCollectionSettingsApiService) V1ComputerInventoryCollectionSettingsGetExecute(r ApiV1ComputerInventoryCollectionSettingsGetRequest) (*ComputerInventoryCollectionSettings, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComputerInventoryCollectionSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComputerInventoryCollectionSettingsApiService.V1ComputerInventoryCollectionSettingsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/computer-inventory-collection-settings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ComputerInventoryCollectionSettingsPatchRequest struct {
	ctx context.Context
	ApiService ComputerInventoryCollectionSettingsApi
	computerInventoryCollectionSettings *ComputerInventoryCollectionSettings
}

// Computer inventory settings to update
func (r ApiV1ComputerInventoryCollectionSettingsPatchRequest) ComputerInventoryCollectionSettings(computerInventoryCollectionSettings ComputerInventoryCollectionSettings) ApiV1ComputerInventoryCollectionSettingsPatchRequest {
	r.computerInventoryCollectionSettings = &computerInventoryCollectionSettings
	return r
}

func (r ApiV1ComputerInventoryCollectionSettingsPatchRequest) Execute() (*ComputerInventoryCollectionSettings, *http.Response, error) {
	return r.ApiService.V1ComputerInventoryCollectionSettingsPatchExecute(r)
}

/*
V1ComputerInventoryCollectionSettingsPatch Update computer inventory settings

Update computer inventory settings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1ComputerInventoryCollectionSettingsPatchRequest
*/
func (a *ComputerInventoryCollectionSettingsApiService) V1ComputerInventoryCollectionSettingsPatch(ctx context.Context) ApiV1ComputerInventoryCollectionSettingsPatchRequest {
	return ApiV1ComputerInventoryCollectionSettingsPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ComputerInventoryCollectionSettings
func (a *ComputerInventoryCollectionSettingsApiService) V1ComputerInventoryCollectionSettingsPatchExecute(r ApiV1ComputerInventoryCollectionSettingsPatchRequest) (*ComputerInventoryCollectionSettings, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComputerInventoryCollectionSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComputerInventoryCollectionSettingsApiService.V1ComputerInventoryCollectionSettingsPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/computer-inventory-collection-settings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.computerInventoryCollectionSettings == nil {
		return localVarReturnValue, nil, reportError("computerInventoryCollectionSettings is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.computerInventoryCollectionSettings
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
