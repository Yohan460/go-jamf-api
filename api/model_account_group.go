/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// AccountGroup struct for AccountGroup
type AccountGroup struct {
	AccessLevel *string `json:"accessLevel,omitempty"`
	PrivilegeSet *string `json:"privilegeSet,omitempty"`
	SiteId *int32 `json:"siteId,omitempty"`
	Privileges []string `json:"privileges,omitempty"`
	MemberUserIds []int32 `json:"memberUserIds,omitempty"`
}

// NewAccountGroup instantiates a new AccountGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountGroup() *AccountGroup {
	this := AccountGroup{}
	return &this
}

// NewAccountGroupWithDefaults instantiates a new AccountGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountGroupWithDefaults() *AccountGroup {
	this := AccountGroup{}
	return &this
}

// GetAccessLevel returns the AccessLevel field value if set, zero value otherwise.
func (o *AccountGroup) GetAccessLevel() string {
	if o == nil || o.AccessLevel == nil {
		var ret string
		return ret
	}
	return *o.AccessLevel
}

// GetAccessLevelOk returns a tuple with the AccessLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountGroup) GetAccessLevelOk() (*string, bool) {
	if o == nil || o.AccessLevel == nil {
		return nil, false
	}
	return o.AccessLevel, true
}

// HasAccessLevel returns a boolean if a field has been set.
func (o *AccountGroup) HasAccessLevel() bool {
	if o != nil && o.AccessLevel != nil {
		return true
	}

	return false
}

// SetAccessLevel gets a reference to the given string and assigns it to the AccessLevel field.
func (o *AccountGroup) SetAccessLevel(v string) {
	o.AccessLevel = &v
}

// GetPrivilegeSet returns the PrivilegeSet field value if set, zero value otherwise.
func (o *AccountGroup) GetPrivilegeSet() string {
	if o == nil || o.PrivilegeSet == nil {
		var ret string
		return ret
	}
	return *o.PrivilegeSet
}

// GetPrivilegeSetOk returns a tuple with the PrivilegeSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountGroup) GetPrivilegeSetOk() (*string, bool) {
	if o == nil || o.PrivilegeSet == nil {
		return nil, false
	}
	return o.PrivilegeSet, true
}

// HasPrivilegeSet returns a boolean if a field has been set.
func (o *AccountGroup) HasPrivilegeSet() bool {
	if o != nil && o.PrivilegeSet != nil {
		return true
	}

	return false
}

// SetPrivilegeSet gets a reference to the given string and assigns it to the PrivilegeSet field.
func (o *AccountGroup) SetPrivilegeSet(v string) {
	o.PrivilegeSet = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *AccountGroup) GetSiteId() int32 {
	if o == nil || o.SiteId == nil {
		var ret int32
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountGroup) GetSiteIdOk() (*int32, bool) {
	if o == nil || o.SiteId == nil {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *AccountGroup) HasSiteId() bool {
	if o != nil && o.SiteId != nil {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given int32 and assigns it to the SiteId field.
func (o *AccountGroup) SetSiteId(v int32) {
	o.SiteId = &v
}

// GetPrivileges returns the Privileges field value if set, zero value otherwise.
func (o *AccountGroup) GetPrivileges() []string {
	if o == nil || o.Privileges == nil {
		var ret []string
		return ret
	}
	return o.Privileges
}

// GetPrivilegesOk returns a tuple with the Privileges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountGroup) GetPrivilegesOk() ([]string, bool) {
	if o == nil || o.Privileges == nil {
		return nil, false
	}
	return o.Privileges, true
}

// HasPrivileges returns a boolean if a field has been set.
func (o *AccountGroup) HasPrivileges() bool {
	if o != nil && o.Privileges != nil {
		return true
	}

	return false
}

// SetPrivileges gets a reference to the given []string and assigns it to the Privileges field.
func (o *AccountGroup) SetPrivileges(v []string) {
	o.Privileges = v
}

// GetMemberUserIds returns the MemberUserIds field value if set, zero value otherwise.
func (o *AccountGroup) GetMemberUserIds() []int32 {
	if o == nil || o.MemberUserIds == nil {
		var ret []int32
		return ret
	}
	return o.MemberUserIds
}

// GetMemberUserIdsOk returns a tuple with the MemberUserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountGroup) GetMemberUserIdsOk() ([]int32, bool) {
	if o == nil || o.MemberUserIds == nil {
		return nil, false
	}
	return o.MemberUserIds, true
}

// HasMemberUserIds returns a boolean if a field has been set.
func (o *AccountGroup) HasMemberUserIds() bool {
	if o != nil && o.MemberUserIds != nil {
		return true
	}

	return false
}

// SetMemberUserIds gets a reference to the given []int32 and assigns it to the MemberUserIds field.
func (o *AccountGroup) SetMemberUserIds(v []int32) {
	o.MemberUserIds = v
}

func (o AccountGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessLevel != nil {
		toSerialize["accessLevel"] = o.AccessLevel
	}
	if o.PrivilegeSet != nil {
		toSerialize["privilegeSet"] = o.PrivilegeSet
	}
	if o.SiteId != nil {
		toSerialize["siteId"] = o.SiteId
	}
	if o.Privileges != nil {
		toSerialize["privileges"] = o.Privileges
	}
	if o.MemberUserIds != nil {
		toSerialize["memberUserIds"] = o.MemberUserIds
	}
	return json.Marshal(toSerialize)
}

type NullableAccountGroup struct {
	value *AccountGroup
	isSet bool
}

func (v NullableAccountGroup) Get() *AccountGroup {
	return v.value
}

func (v *NullableAccountGroup) Set(val *AccountGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountGroup(val *AccountGroup) *NullableAccountGroup {
	return &NullableAccountGroup{value: val, isSet: true}
}

func (v NullableAccountGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


