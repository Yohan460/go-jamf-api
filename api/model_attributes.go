/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// Attributes struct for Attributes
type Attributes struct {
	VpnUuid *string `json:"vpnUuid,omitempty"`
	AssociatedDomains []string `json:"associatedDomains,omitempty"`
	Removable *bool `json:"removable,omitempty"`
	EnableDirectDownloads *bool `json:"enableDirectDownloads,omitempty"`
}

// NewAttributes instantiates a new Attributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttributes() *Attributes {
	this := Attributes{}
	return &this
}

// NewAttributesWithDefaults instantiates a new Attributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttributesWithDefaults() *Attributes {
	this := Attributes{}
	return &this
}

// GetVpnUuid returns the VpnUuid field value if set, zero value otherwise.
func (o *Attributes) GetVpnUuid() string {
	if o == nil || o.VpnUuid == nil {
		var ret string
		return ret
	}
	return *o.VpnUuid
}

// GetVpnUuidOk returns a tuple with the VpnUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attributes) GetVpnUuidOk() (*string, bool) {
	if o == nil || o.VpnUuid == nil {
		return nil, false
	}
	return o.VpnUuid, true
}

// HasVpnUuid returns a boolean if a field has been set.
func (o *Attributes) HasVpnUuid() bool {
	if o != nil && o.VpnUuid != nil {
		return true
	}

	return false
}

// SetVpnUuid gets a reference to the given string and assigns it to the VpnUuid field.
func (o *Attributes) SetVpnUuid(v string) {
	o.VpnUuid = &v
}

// GetAssociatedDomains returns the AssociatedDomains field value if set, zero value otherwise.
func (o *Attributes) GetAssociatedDomains() []string {
	if o == nil || o.AssociatedDomains == nil {
		var ret []string
		return ret
	}
	return o.AssociatedDomains
}

// GetAssociatedDomainsOk returns a tuple with the AssociatedDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attributes) GetAssociatedDomainsOk() ([]string, bool) {
	if o == nil || o.AssociatedDomains == nil {
		return nil, false
	}
	return o.AssociatedDomains, true
}

// HasAssociatedDomains returns a boolean if a field has been set.
func (o *Attributes) HasAssociatedDomains() bool {
	if o != nil && o.AssociatedDomains != nil {
		return true
	}

	return false
}

// SetAssociatedDomains gets a reference to the given []string and assigns it to the AssociatedDomains field.
func (o *Attributes) SetAssociatedDomains(v []string) {
	o.AssociatedDomains = v
}

// GetRemovable returns the Removable field value if set, zero value otherwise.
func (o *Attributes) GetRemovable() bool {
	if o == nil || o.Removable == nil {
		var ret bool
		return ret
	}
	return *o.Removable
}

// GetRemovableOk returns a tuple with the Removable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attributes) GetRemovableOk() (*bool, bool) {
	if o == nil || o.Removable == nil {
		return nil, false
	}
	return o.Removable, true
}

// HasRemovable returns a boolean if a field has been set.
func (o *Attributes) HasRemovable() bool {
	if o != nil && o.Removable != nil {
		return true
	}

	return false
}

// SetRemovable gets a reference to the given bool and assigns it to the Removable field.
func (o *Attributes) SetRemovable(v bool) {
	o.Removable = &v
}

// GetEnableDirectDownloads returns the EnableDirectDownloads field value if set, zero value otherwise.
func (o *Attributes) GetEnableDirectDownloads() bool {
	if o == nil || o.EnableDirectDownloads == nil {
		var ret bool
		return ret
	}
	return *o.EnableDirectDownloads
}

// GetEnableDirectDownloadsOk returns a tuple with the EnableDirectDownloads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attributes) GetEnableDirectDownloadsOk() (*bool, bool) {
	if o == nil || o.EnableDirectDownloads == nil {
		return nil, false
	}
	return o.EnableDirectDownloads, true
}

// HasEnableDirectDownloads returns a boolean if a field has been set.
func (o *Attributes) HasEnableDirectDownloads() bool {
	if o != nil && o.EnableDirectDownloads != nil {
		return true
	}

	return false
}

// SetEnableDirectDownloads gets a reference to the given bool and assigns it to the EnableDirectDownloads field.
func (o *Attributes) SetEnableDirectDownloads(v bool) {
	o.EnableDirectDownloads = &v
}

func (o Attributes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.VpnUuid != nil {
		toSerialize["vpnUuid"] = o.VpnUuid
	}
	if o.AssociatedDomains != nil {
		toSerialize["associatedDomains"] = o.AssociatedDomains
	}
	if o.Removable != nil {
		toSerialize["removable"] = o.Removable
	}
	if o.EnableDirectDownloads != nil {
		toSerialize["enableDirectDownloads"] = o.EnableDirectDownloads
	}
	return json.Marshal(toSerialize)
}

type NullableAttributes struct {
	value *Attributes
	isSet bool
}

func (v NullableAttributes) Get() *Attributes {
	return v.value
}

func (v *NullableAttributes) Set(val *Attributes) {
	v.value = val
	v.isSet = true
}

func (v NullableAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttributes(val *Attributes) *NullableAttributes {
	return &NullableAttributes{value: val, isSet: true}
}

func (v NullableAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


