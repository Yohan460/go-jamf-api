/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// LdapGroup An LDAP group.
type LdapGroup struct {
	Id *string `json:"id,omitempty"`
	Uuid *string `json:"uuid,omitempty"`
	LdapServerId *int32 `json:"ldapServerId,omitempty"`
	Name *string `json:"name,omitempty"`
	DistinguishedName *string `json:"distinguishedName,omitempty"`
}

// NewLdapGroup instantiates a new LdapGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLdapGroup() *LdapGroup {
	this := LdapGroup{}
	return &this
}

// NewLdapGroupWithDefaults instantiates a new LdapGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLdapGroupWithDefaults() *LdapGroup {
	this := LdapGroup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LdapGroup) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapGroup) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LdapGroup) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *LdapGroup) SetId(v string) {
	o.Id = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *LdapGroup) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapGroup) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *LdapGroup) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *LdapGroup) SetUuid(v string) {
	o.Uuid = &v
}

// GetLdapServerId returns the LdapServerId field value if set, zero value otherwise.
func (o *LdapGroup) GetLdapServerId() int32 {
	if o == nil || o.LdapServerId == nil {
		var ret int32
		return ret
	}
	return *o.LdapServerId
}

// GetLdapServerIdOk returns a tuple with the LdapServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapGroup) GetLdapServerIdOk() (*int32, bool) {
	if o == nil || o.LdapServerId == nil {
		return nil, false
	}
	return o.LdapServerId, true
}

// HasLdapServerId returns a boolean if a field has been set.
func (o *LdapGroup) HasLdapServerId() bool {
	if o != nil && o.LdapServerId != nil {
		return true
	}

	return false
}

// SetLdapServerId gets a reference to the given int32 and assigns it to the LdapServerId field.
func (o *LdapGroup) SetLdapServerId(v int32) {
	o.LdapServerId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LdapGroup) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapGroup) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LdapGroup) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LdapGroup) SetName(v string) {
	o.Name = &v
}

// GetDistinguishedName returns the DistinguishedName field value if set, zero value otherwise.
func (o *LdapGroup) GetDistinguishedName() string {
	if o == nil || o.DistinguishedName == nil {
		var ret string
		return ret
	}
	return *o.DistinguishedName
}

// GetDistinguishedNameOk returns a tuple with the DistinguishedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapGroup) GetDistinguishedNameOk() (*string, bool) {
	if o == nil || o.DistinguishedName == nil {
		return nil, false
	}
	return o.DistinguishedName, true
}

// HasDistinguishedName returns a boolean if a field has been set.
func (o *LdapGroup) HasDistinguishedName() bool {
	if o != nil && o.DistinguishedName != nil {
		return true
	}

	return false
}

// SetDistinguishedName gets a reference to the given string and assigns it to the DistinguishedName field.
func (o *LdapGroup) SetDistinguishedName(v string) {
	o.DistinguishedName = &v
}

func (o LdapGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Uuid != nil {
		toSerialize["uuid"] = o.Uuid
	}
	if o.LdapServerId != nil {
		toSerialize["ldapServerId"] = o.LdapServerId
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.DistinguishedName != nil {
		toSerialize["distinguishedName"] = o.DistinguishedName
	}
	return json.Marshal(toSerialize)
}

type NullableLdapGroup struct {
	value *LdapGroup
	isSet bool
}

func (v NullableLdapGroup) Get() *LdapGroup {
	return v.value
}

func (v *NullableLdapGroup) Set(val *LdapGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableLdapGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableLdapGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLdapGroup(val *LdapGroup) *NullableLdapGroup {
	return &NullableLdapGroup{value: val, isSet: true}
}

func (v NullableLdapGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLdapGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


