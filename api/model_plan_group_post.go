/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the PlanGroupPost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanGroupPost{}

// PlanGroupPost struct for PlanGroupPost
type PlanGroupPost struct {
	GroupId string `json:"groupId"`
	ObjectType string `json:"objectType"`
}

// NewPlanGroupPost instantiates a new PlanGroupPost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanGroupPost(groupId string, objectType string) *PlanGroupPost {
	this := PlanGroupPost{}
	this.GroupId = groupId
	this.ObjectType = objectType
	return &this
}

// NewPlanGroupPostWithDefaults instantiates a new PlanGroupPost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanGroupPostWithDefaults() *PlanGroupPost {
	this := PlanGroupPost{}
	return &this
}

// GetGroupId returns the GroupId field value
func (o *PlanGroupPost) GetGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *PlanGroupPost) GetGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *PlanGroupPost) SetGroupId(v string) {
	o.GroupId = v
}

// GetObjectType returns the ObjectType field value
func (o *PlanGroupPost) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *PlanGroupPost) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *PlanGroupPost) SetObjectType(v string) {
	o.ObjectType = v
}

func (o PlanGroupPost) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanGroupPost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["groupId"] = o.GroupId
	toSerialize["objectType"] = o.ObjectType
	return toSerialize, nil
}

type NullablePlanGroupPost struct {
	value *PlanGroupPost
	isSet bool
}

func (v NullablePlanGroupPost) Get() *PlanGroupPost {
	return v.value
}

func (v *NullablePlanGroupPost) Set(val *PlanGroupPost) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanGroupPost) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanGroupPost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanGroupPost(val *PlanGroupPost) *NullablePlanGroupPost {
	return &NullablePlanGroupPost{value: val, isSet: true}
}

func (v NullablePlanGroupPost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanGroupPost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


