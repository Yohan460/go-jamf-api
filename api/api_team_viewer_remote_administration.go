/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type TeamViewerRemoteAdministrationAPI interface {

	/*
	PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsGet Get a paginated list of sessions 

	Returns a paginated list of sessions for a given configuration ID

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param configurationId ID of the Team Viewer connection configuration
	@return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsGetRequest
	*/
	PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsGet(ctx context.Context, configurationId string) TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsGetRequest

	// PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsGetExecute executes the request
	//  @return SessionDetailsSearchResults
	PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsGetExecute(r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsGetRequest) (*SessionDetailsSearchResults, *http.Response, error)

	/*
	PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsPost Create a new session

	Creates a new Team Viewer session to be used to establish a remote connection

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param configurationId ID of the Team Viewer connection configuration
	@return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsPostRequest
	*/
	PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsPost(ctx context.Context, configurationId string) TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsPostRequest

	// PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsPostExecute executes the request
	//  @return HrefResponse
	PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsPostExecute(r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsPostRequest) (*HrefResponse, *http.Response, error)

	/*
	PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdClosePost Close a session

	Changes the session state from open to close. Closing a session means it is not possible to establish new remote connection between devices

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param configurationId ID of the Team Viewer connection configuration
	@param sessionId ID of the Team Viewer session
	@return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdClosePostRequest
	*/
	PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdClosePost(ctx context.Context, configurationId string, sessionId string) TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdClosePostRequest

	// PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdClosePostExecute executes the request
	PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdClosePostExecute(r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdClosePostRequest) (*http.Response, error)

	/*
	PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdGet Get a session by its ID 

	Returns a session details if found.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param configurationId ID of the Team Viewer connection configuration
	@param sessionId ID of the Team Viewer session
	@return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdGetRequest
	*/
	PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdGet(ctx context.Context, configurationId string, sessionId string) TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdGetRequest

	// PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdGetExecute executes the request
	//  @return SessionDetails
	PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdGetExecute(r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdGetRequest) (*SessionDetails, *http.Response, error)

	/*
	PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationPost Resend nofications for a session

	Resends configured notifications (e.g. Self Service push notifications).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param configurationId ID of the Team Viewer connection configuration
	@param sessionId ID of the Team Viewer session
	@return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationPostRequest
	*/
	PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationPost(ctx context.Context, configurationId string, sessionId string) TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationPostRequest

	// PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationPostExecute executes the request
	PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationPostExecute(r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationPostRequest) (*http.Response, error)

	/*
	PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusGet Get a session status by its ID 

	Returns a session status if found.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param configurationId ID of the Team Viewer connection configuration
	@param sessionId ID of the Team Viewer session
	@return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusGetRequest
	*/
	PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusGet(ctx context.Context, configurationId string, sessionId string) TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusGetRequest

	// PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusGetExecute executes the request
	//  @return SessionStatus
	PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusGetExecute(r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusGetRequest) (*SessionStatus, *http.Response, error)

	/*
	PreviewRemoteAdministrationConfigurationsTeamViewerIdDelete Delete Team Viewer Remote Administration connection configuration

	Deletes Team Viewer Remote Administration connection configuration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID of the Team Viewer connection configuration
	@return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdDeleteRequest
	*/
	PreviewRemoteAdministrationConfigurationsTeamViewerIdDelete(ctx context.Context, id string) TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdDeleteRequest

	// PreviewRemoteAdministrationConfigurationsTeamViewerIdDeleteExecute executes the request
	PreviewRemoteAdministrationConfigurationsTeamViewerIdDeleteExecute(r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdDeleteRequest) (*http.Response, error)

	/*
	PreviewRemoteAdministrationConfigurationsTeamViewerIdGet Get Team Viewer Remote Administration connection configuration

	Returns Team Viewer Remote Administration connection configuration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID of the Team Viewer connection configuration
	@return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdGetRequest
	*/
	PreviewRemoteAdministrationConfigurationsTeamViewerIdGet(ctx context.Context, id string) TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdGetRequest

	// PreviewRemoteAdministrationConfigurationsTeamViewerIdGetExecute executes the request
	//  @return ConnectionConfigurationResponse
	PreviewRemoteAdministrationConfigurationsTeamViewerIdGetExecute(r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdGetRequest) (*ConnectionConfigurationResponse, *http.Response, error)

	/*
	PreviewRemoteAdministrationConfigurationsTeamViewerIdPatch Update Team Viewer Remote Administration connection configuration

	Updates Team Viewer Remote Administration connection configuration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID of the Team Viewer connection configuration
	@return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdPatchRequest
	*/
	PreviewRemoteAdministrationConfigurationsTeamViewerIdPatch(ctx context.Context, id string) TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdPatchRequest

	// PreviewRemoteAdministrationConfigurationsTeamViewerIdPatchExecute executes the request
	//  @return ConnectionConfigurationResponse
	PreviewRemoteAdministrationConfigurationsTeamViewerIdPatchExecute(r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdPatchRequest) (*ConnectionConfigurationResponse, *http.Response, error)

	/*
	PreviewRemoteAdministrationConfigurationsTeamViewerIdStatusGet Get Team Viewer Remote Administration connection status

	Returns Team Viewer Remote Administration connection status

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID of the Team Viewer connection configuration
	@return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdStatusGetRequest
	*/
	PreviewRemoteAdministrationConfigurationsTeamViewerIdStatusGet(ctx context.Context, id string) TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdStatusGetRequest

	// PreviewRemoteAdministrationConfigurationsTeamViewerIdStatusGetExecute executes the request
	//  @return ConnectionConfigurationStatusResponse
	PreviewRemoteAdministrationConfigurationsTeamViewerIdStatusGetExecute(r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdStatusGetRequest) (*ConnectionConfigurationStatusResponse, *http.Response, error)

	/*
	PreviewRemoteAdministrationConfigurationsTeamViewerPost Create Team Viewer Remote Administration connection configuration

	Creates Team Viewer Remote Administration connection configuration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerPostRequest
	*/
	PreviewRemoteAdministrationConfigurationsTeamViewerPost(ctx context.Context) TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerPostRequest

	// PreviewRemoteAdministrationConfigurationsTeamViewerPostExecute executes the request
	//  @return HrefResponse
	PreviewRemoteAdministrationConfigurationsTeamViewerPostExecute(r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerPostRequest) (*HrefResponse, *http.Response, error)
}

// TeamViewerRemoteAdministrationAPIService TeamViewerRemoteAdministrationAPI service
type TeamViewerRemoteAdministrationAPIService service

type TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsGetRequest struct {
	ctx context.Context
	ApiService TeamViewerRemoteAdministrationAPI
	configurationId string
	page *int64
	pageSize *int64
	filter *string
}

func (r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsGetRequest) Page(page int64) TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsGetRequest {
	r.page = &page
	return r
}

func (r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsGetRequest) PageSize(pageSize int64) TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsGetRequest {
	r.pageSize = &pageSize
	return r
}

// Query in the RSQL format, allowing to filter sessions collection. Default filter is empty query - returning all results for the requested page.  Fields allowed in the query: &#x60;deviceId&#x60;, &#x60;deviceType&#x60;, &#x60;state&#x60;  This param can be combined with paging. 
func (r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsGetRequest) Filter(filter string) TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsGetRequest {
	r.filter = &filter
	return r
}

func (r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsGetRequest) Execute() (*SessionDetailsSearchResults, *http.Response, error) {
	return r.ApiService.PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsGetExecute(r)
}

/*
PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsGet Get a paginated list of sessions 

Returns a paginated list of sessions for a given configuration ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configurationId ID of the Team Viewer connection configuration
 @return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsGetRequest
*/
func (a *TeamViewerRemoteAdministrationAPIService) PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsGet(ctx context.Context, configurationId string) TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsGetRequest {
	return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsGetRequest{
		ApiService: a,
		ctx: ctx,
		configurationId: configurationId,
	}
}

// Execute executes the request
//  @return SessionDetailsSearchResults
func (a *TeamViewerRemoteAdministrationAPIService) PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsGetExecute(r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsGetRequest) (*SessionDetailsSearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SessionDetailsSearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamViewerRemoteAdministrationAPIService.PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/preview/remote-administration-configurations/team-viewer/{configurationId}/sessions"
	localVarPath = strings.Replace(localVarPath, "{"+"configurationId"+"}", url.PathEscape(parameterValueToString(r.configurationId, "configurationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int64 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int64 = 100
		r.pageSize = &defaultValue
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	} else {
		var defaultValue string = ""
		r.filter = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsPostRequest struct {
	ctx context.Context
	ApiService TeamViewerRemoteAdministrationAPI
	configurationId string
	sessionCandidateRequest *SessionCandidateRequest
}

// Team Viewer session attributes
func (r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsPostRequest) SessionCandidateRequest(sessionCandidateRequest SessionCandidateRequest) TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsPostRequest {
	r.sessionCandidateRequest = &sessionCandidateRequest
	return r
}

func (r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsPostRequest) Execute() (*HrefResponse, *http.Response, error) {
	return r.ApiService.PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsPostExecute(r)
}

/*
PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsPost Create a new session

Creates a new Team Viewer session to be used to establish a remote connection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configurationId ID of the Team Viewer connection configuration
 @return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsPostRequest
*/
func (a *TeamViewerRemoteAdministrationAPIService) PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsPost(ctx context.Context, configurationId string) TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsPostRequest {
	return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsPostRequest{
		ApiService: a,
		ctx: ctx,
		configurationId: configurationId,
	}
}

// Execute executes the request
//  @return HrefResponse
func (a *TeamViewerRemoteAdministrationAPIService) PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsPostExecute(r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsPostRequest) (*HrefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HrefResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamViewerRemoteAdministrationAPIService.PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/preview/remote-administration-configurations/team-viewer/{configurationId}/sessions"
	localVarPath = strings.Replace(localVarPath, "{"+"configurationId"+"}", url.PathEscape(parameterValueToString(r.configurationId, "configurationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sessionCandidateRequest == nil {
		return localVarReturnValue, nil, reportError("sessionCandidateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.sessionCandidateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdClosePostRequest struct {
	ctx context.Context
	ApiService TeamViewerRemoteAdministrationAPI
	configurationId string
	sessionId string
}

func (r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdClosePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdClosePostExecute(r)
}

/*
PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdClosePost Close a session

Changes the session state from open to close. Closing a session means it is not possible to establish new remote connection between devices

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configurationId ID of the Team Viewer connection configuration
 @param sessionId ID of the Team Viewer session
 @return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdClosePostRequest
*/
func (a *TeamViewerRemoteAdministrationAPIService) PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdClosePost(ctx context.Context, configurationId string, sessionId string) TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdClosePostRequest {
	return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdClosePostRequest{
		ApiService: a,
		ctx: ctx,
		configurationId: configurationId,
		sessionId: sessionId,
	}
}

// Execute executes the request
func (a *TeamViewerRemoteAdministrationAPIService) PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdClosePostExecute(r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdClosePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamViewerRemoteAdministrationAPIService.PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdClosePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/preview/remote-administration-configurations/team-viewer/{configurationId}/sessions/{sessionId}/close"
	localVarPath = strings.Replace(localVarPath, "{"+"configurationId"+"}", url.PathEscape(parameterValueToString(r.configurationId, "configurationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sessionId"+"}", url.PathEscape(parameterValueToString(r.sessionId, "sessionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdGetRequest struct {
	ctx context.Context
	ApiService TeamViewerRemoteAdministrationAPI
	configurationId string
	sessionId string
}

func (r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdGetRequest) Execute() (*SessionDetails, *http.Response, error) {
	return r.ApiService.PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdGetExecute(r)
}

/*
PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdGet Get a session by its ID 

Returns a session details if found.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configurationId ID of the Team Viewer connection configuration
 @param sessionId ID of the Team Viewer session
 @return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdGetRequest
*/
func (a *TeamViewerRemoteAdministrationAPIService) PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdGet(ctx context.Context, configurationId string, sessionId string) TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdGetRequest {
	return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdGetRequest{
		ApiService: a,
		ctx: ctx,
		configurationId: configurationId,
		sessionId: sessionId,
	}
}

// Execute executes the request
//  @return SessionDetails
func (a *TeamViewerRemoteAdministrationAPIService) PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdGetExecute(r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdGetRequest) (*SessionDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SessionDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamViewerRemoteAdministrationAPIService.PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/preview/remote-administration-configurations/team-viewer/{configurationId}/sessions/{sessionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"configurationId"+"}", url.PathEscape(parameterValueToString(r.configurationId, "configurationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sessionId"+"}", url.PathEscape(parameterValueToString(r.sessionId, "sessionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationPostRequest struct {
	ctx context.Context
	ApiService TeamViewerRemoteAdministrationAPI
	configurationId string
	sessionId string
}

func (r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationPostExecute(r)
}

/*
PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationPost Resend nofications for a session

Resends configured notifications (e.g. Self Service push notifications).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configurationId ID of the Team Viewer connection configuration
 @param sessionId ID of the Team Viewer session
 @return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationPostRequest
*/
func (a *TeamViewerRemoteAdministrationAPIService) PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationPost(ctx context.Context, configurationId string, sessionId string) TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationPostRequest {
	return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationPostRequest{
		ApiService: a,
		ctx: ctx,
		configurationId: configurationId,
		sessionId: sessionId,
	}
}

// Execute executes the request
func (a *TeamViewerRemoteAdministrationAPIService) PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationPostExecute(r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamViewerRemoteAdministrationAPIService.PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/preview/remote-administration-configurations/team-viewer/{configurationId}/sessions/{sessionId}/resend-notification"
	localVarPath = strings.Replace(localVarPath, "{"+"configurationId"+"}", url.PathEscape(parameterValueToString(r.configurationId, "configurationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sessionId"+"}", url.PathEscape(parameterValueToString(r.sessionId, "sessionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusGetRequest struct {
	ctx context.Context
	ApiService TeamViewerRemoteAdministrationAPI
	configurationId string
	sessionId string
}

func (r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusGetRequest) Execute() (*SessionStatus, *http.Response, error) {
	return r.ApiService.PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusGetExecute(r)
}

/*
PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusGet Get a session status by its ID 

Returns a session status if found.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configurationId ID of the Team Viewer connection configuration
 @param sessionId ID of the Team Viewer session
 @return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusGetRequest
*/
func (a *TeamViewerRemoteAdministrationAPIService) PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusGet(ctx context.Context, configurationId string, sessionId string) TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusGetRequest {
	return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusGetRequest{
		ApiService: a,
		ctx: ctx,
		configurationId: configurationId,
		sessionId: sessionId,
	}
}

// Execute executes the request
//  @return SessionStatus
func (a *TeamViewerRemoteAdministrationAPIService) PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusGetExecute(r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusGetRequest) (*SessionStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SessionStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamViewerRemoteAdministrationAPIService.PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/preview/remote-administration-configurations/team-viewer/{configurationId}/sessions/{sessionId}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"configurationId"+"}", url.PathEscape(parameterValueToString(r.configurationId, "configurationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sessionId"+"}", url.PathEscape(parameterValueToString(r.sessionId, "sessionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdDeleteRequest struct {
	ctx context.Context
	ApiService TeamViewerRemoteAdministrationAPI
	id string
}

func (r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.PreviewRemoteAdministrationConfigurationsTeamViewerIdDeleteExecute(r)
}

/*
PreviewRemoteAdministrationConfigurationsTeamViewerIdDelete Delete Team Viewer Remote Administration connection configuration

Deletes Team Viewer Remote Administration connection configuration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of the Team Viewer connection configuration
 @return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdDeleteRequest
*/
func (a *TeamViewerRemoteAdministrationAPIService) PreviewRemoteAdministrationConfigurationsTeamViewerIdDelete(ctx context.Context, id string) TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdDeleteRequest {
	return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *TeamViewerRemoteAdministrationAPIService) PreviewRemoteAdministrationConfigurationsTeamViewerIdDeleteExecute(r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamViewerRemoteAdministrationAPIService.PreviewRemoteAdministrationConfigurationsTeamViewerIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/preview/remote-administration-configurations/team-viewer/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdGetRequest struct {
	ctx context.Context
	ApiService TeamViewerRemoteAdministrationAPI
	id string
}

func (r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdGetRequest) Execute() (*ConnectionConfigurationResponse, *http.Response, error) {
	return r.ApiService.PreviewRemoteAdministrationConfigurationsTeamViewerIdGetExecute(r)
}

/*
PreviewRemoteAdministrationConfigurationsTeamViewerIdGet Get Team Viewer Remote Administration connection configuration

Returns Team Viewer Remote Administration connection configuration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of the Team Viewer connection configuration
 @return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdGetRequest
*/
func (a *TeamViewerRemoteAdministrationAPIService) PreviewRemoteAdministrationConfigurationsTeamViewerIdGet(ctx context.Context, id string) TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdGetRequest {
	return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConnectionConfigurationResponse
func (a *TeamViewerRemoteAdministrationAPIService) PreviewRemoteAdministrationConfigurationsTeamViewerIdGetExecute(r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdGetRequest) (*ConnectionConfigurationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConnectionConfigurationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamViewerRemoteAdministrationAPIService.PreviewRemoteAdministrationConfigurationsTeamViewerIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/preview/remote-administration-configurations/team-viewer/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdPatchRequest struct {
	ctx context.Context
	ApiService TeamViewerRemoteAdministrationAPI
	id string
	connectionConfigurationUpdateRequest *ConnectionConfigurationUpdateRequest
}

// Team Viewer connection configuration update request
func (r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdPatchRequest) ConnectionConfigurationUpdateRequest(connectionConfigurationUpdateRequest ConnectionConfigurationUpdateRequest) TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdPatchRequest {
	r.connectionConfigurationUpdateRequest = &connectionConfigurationUpdateRequest
	return r
}

func (r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdPatchRequest) Execute() (*ConnectionConfigurationResponse, *http.Response, error) {
	return r.ApiService.PreviewRemoteAdministrationConfigurationsTeamViewerIdPatchExecute(r)
}

/*
PreviewRemoteAdministrationConfigurationsTeamViewerIdPatch Update Team Viewer Remote Administration connection configuration

Updates Team Viewer Remote Administration connection configuration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of the Team Viewer connection configuration
 @return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdPatchRequest
*/
func (a *TeamViewerRemoteAdministrationAPIService) PreviewRemoteAdministrationConfigurationsTeamViewerIdPatch(ctx context.Context, id string) TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdPatchRequest {
	return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdPatchRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConnectionConfigurationResponse
func (a *TeamViewerRemoteAdministrationAPIService) PreviewRemoteAdministrationConfigurationsTeamViewerIdPatchExecute(r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdPatchRequest) (*ConnectionConfigurationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConnectionConfigurationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamViewerRemoteAdministrationAPIService.PreviewRemoteAdministrationConfigurationsTeamViewerIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/preview/remote-administration-configurations/team-viewer/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.connectionConfigurationUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("connectionConfigurationUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.connectionConfigurationUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdStatusGetRequest struct {
	ctx context.Context
	ApiService TeamViewerRemoteAdministrationAPI
	id string
}

func (r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdStatusGetRequest) Execute() (*ConnectionConfigurationStatusResponse, *http.Response, error) {
	return r.ApiService.PreviewRemoteAdministrationConfigurationsTeamViewerIdStatusGetExecute(r)
}

/*
PreviewRemoteAdministrationConfigurationsTeamViewerIdStatusGet Get Team Viewer Remote Administration connection status

Returns Team Viewer Remote Administration connection status

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of the Team Viewer connection configuration
 @return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdStatusGetRequest
*/
func (a *TeamViewerRemoteAdministrationAPIService) PreviewRemoteAdministrationConfigurationsTeamViewerIdStatusGet(ctx context.Context, id string) TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdStatusGetRequest {
	return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdStatusGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConnectionConfigurationStatusResponse
func (a *TeamViewerRemoteAdministrationAPIService) PreviewRemoteAdministrationConfigurationsTeamViewerIdStatusGetExecute(r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerIdStatusGetRequest) (*ConnectionConfigurationStatusResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConnectionConfigurationStatusResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamViewerRemoteAdministrationAPIService.PreviewRemoteAdministrationConfigurationsTeamViewerIdStatusGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/preview/remote-administration-configurations/team-viewer/{id}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerPostRequest struct {
	ctx context.Context
	ApiService TeamViewerRemoteAdministrationAPI
	connectionConfigurationCandidateRequest *ConnectionConfigurationCandidateRequest
}

// Team Viewer connection configuration create definition
func (r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerPostRequest) ConnectionConfigurationCandidateRequest(connectionConfigurationCandidateRequest ConnectionConfigurationCandidateRequest) TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerPostRequest {
	r.connectionConfigurationCandidateRequest = &connectionConfigurationCandidateRequest
	return r
}

func (r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerPostRequest) Execute() (*HrefResponse, *http.Response, error) {
	return r.ApiService.PreviewRemoteAdministrationConfigurationsTeamViewerPostExecute(r)
}

/*
PreviewRemoteAdministrationConfigurationsTeamViewerPost Create Team Viewer Remote Administration connection configuration

Creates Team Viewer Remote Administration connection configuration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerPostRequest
*/
func (a *TeamViewerRemoteAdministrationAPIService) PreviewRemoteAdministrationConfigurationsTeamViewerPost(ctx context.Context) TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerPostRequest {
	return TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HrefResponse
func (a *TeamViewerRemoteAdministrationAPIService) PreviewRemoteAdministrationConfigurationsTeamViewerPostExecute(r TeamViewerRemoteAdministrationAPIPreviewRemoteAdministrationConfigurationsTeamViewerPostRequest) (*HrefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HrefResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamViewerRemoteAdministrationAPIService.PreviewRemoteAdministrationConfigurationsTeamViewerPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/preview/remote-administration-configurations/team-viewer"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.connectionConfigurationCandidateRequest == nil {
		return localVarReturnValue, nil, reportError("connectionConfigurationCandidateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.connectionConfigurationCandidateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
