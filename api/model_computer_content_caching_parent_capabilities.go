/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ComputerContentCachingParentCapabilities type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComputerContentCachingParentCapabilities{}

// ComputerContentCachingParentCapabilities struct for ComputerContentCachingParentCapabilities
type ComputerContentCachingParentCapabilities struct {
	ContentCachingParentCapabilitiesId *string `json:"contentCachingParentCapabilitiesId,omitempty"`
	Imports *bool `json:"imports,omitempty"`
	Namespaces *bool `json:"namespaces,omitempty"`
	PersonalContent *bool `json:"personalContent,omitempty"`
	QueryParameters *bool `json:"queryParameters,omitempty"`
	SharedContent *bool `json:"sharedContent,omitempty"`
	Prioritization *bool `json:"prioritization,omitempty"`
}

// NewComputerContentCachingParentCapabilities instantiates a new ComputerContentCachingParentCapabilities object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputerContentCachingParentCapabilities() *ComputerContentCachingParentCapabilities {
	this := ComputerContentCachingParentCapabilities{}
	return &this
}

// NewComputerContentCachingParentCapabilitiesWithDefaults instantiates a new ComputerContentCachingParentCapabilities object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputerContentCachingParentCapabilitiesWithDefaults() *ComputerContentCachingParentCapabilities {
	this := ComputerContentCachingParentCapabilities{}
	return &this
}

// GetContentCachingParentCapabilitiesId returns the ContentCachingParentCapabilitiesId field value if set, zero value otherwise.
func (o *ComputerContentCachingParentCapabilities) GetContentCachingParentCapabilitiesId() string {
	if o == nil || IsNil(o.ContentCachingParentCapabilitiesId) {
		var ret string
		return ret
	}
	return *o.ContentCachingParentCapabilitiesId
}

// GetContentCachingParentCapabilitiesIdOk returns a tuple with the ContentCachingParentCapabilitiesId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCachingParentCapabilities) GetContentCachingParentCapabilitiesIdOk() (*string, bool) {
	if o == nil || IsNil(o.ContentCachingParentCapabilitiesId) {
		return nil, false
	}
	return o.ContentCachingParentCapabilitiesId, true
}

// HasContentCachingParentCapabilitiesId returns a boolean if a field has been set.
func (o *ComputerContentCachingParentCapabilities) HasContentCachingParentCapabilitiesId() bool {
	if o != nil && !IsNil(o.ContentCachingParentCapabilitiesId) {
		return true
	}

	return false
}

// SetContentCachingParentCapabilitiesId gets a reference to the given string and assigns it to the ContentCachingParentCapabilitiesId field.
func (o *ComputerContentCachingParentCapabilities) SetContentCachingParentCapabilitiesId(v string) {
	o.ContentCachingParentCapabilitiesId = &v
}

// GetImports returns the Imports field value if set, zero value otherwise.
func (o *ComputerContentCachingParentCapabilities) GetImports() bool {
	if o == nil || IsNil(o.Imports) {
		var ret bool
		return ret
	}
	return *o.Imports
}

// GetImportsOk returns a tuple with the Imports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCachingParentCapabilities) GetImportsOk() (*bool, bool) {
	if o == nil || IsNil(o.Imports) {
		return nil, false
	}
	return o.Imports, true
}

// HasImports returns a boolean if a field has been set.
func (o *ComputerContentCachingParentCapabilities) HasImports() bool {
	if o != nil && !IsNil(o.Imports) {
		return true
	}

	return false
}

// SetImports gets a reference to the given bool and assigns it to the Imports field.
func (o *ComputerContentCachingParentCapabilities) SetImports(v bool) {
	o.Imports = &v
}

// GetNamespaces returns the Namespaces field value if set, zero value otherwise.
func (o *ComputerContentCachingParentCapabilities) GetNamespaces() bool {
	if o == nil || IsNil(o.Namespaces) {
		var ret bool
		return ret
	}
	return *o.Namespaces
}

// GetNamespacesOk returns a tuple with the Namespaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCachingParentCapabilities) GetNamespacesOk() (*bool, bool) {
	if o == nil || IsNil(o.Namespaces) {
		return nil, false
	}
	return o.Namespaces, true
}

// HasNamespaces returns a boolean if a field has been set.
func (o *ComputerContentCachingParentCapabilities) HasNamespaces() bool {
	if o != nil && !IsNil(o.Namespaces) {
		return true
	}

	return false
}

// SetNamespaces gets a reference to the given bool and assigns it to the Namespaces field.
func (o *ComputerContentCachingParentCapabilities) SetNamespaces(v bool) {
	o.Namespaces = &v
}

// GetPersonalContent returns the PersonalContent field value if set, zero value otherwise.
func (o *ComputerContentCachingParentCapabilities) GetPersonalContent() bool {
	if o == nil || IsNil(o.PersonalContent) {
		var ret bool
		return ret
	}
	return *o.PersonalContent
}

// GetPersonalContentOk returns a tuple with the PersonalContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCachingParentCapabilities) GetPersonalContentOk() (*bool, bool) {
	if o == nil || IsNil(o.PersonalContent) {
		return nil, false
	}
	return o.PersonalContent, true
}

// HasPersonalContent returns a boolean if a field has been set.
func (o *ComputerContentCachingParentCapabilities) HasPersonalContent() bool {
	if o != nil && !IsNil(o.PersonalContent) {
		return true
	}

	return false
}

// SetPersonalContent gets a reference to the given bool and assigns it to the PersonalContent field.
func (o *ComputerContentCachingParentCapabilities) SetPersonalContent(v bool) {
	o.PersonalContent = &v
}

// GetQueryParameters returns the QueryParameters field value if set, zero value otherwise.
func (o *ComputerContentCachingParentCapabilities) GetQueryParameters() bool {
	if o == nil || IsNil(o.QueryParameters) {
		var ret bool
		return ret
	}
	return *o.QueryParameters
}

// GetQueryParametersOk returns a tuple with the QueryParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCachingParentCapabilities) GetQueryParametersOk() (*bool, bool) {
	if o == nil || IsNil(o.QueryParameters) {
		return nil, false
	}
	return o.QueryParameters, true
}

// HasQueryParameters returns a boolean if a field has been set.
func (o *ComputerContentCachingParentCapabilities) HasQueryParameters() bool {
	if o != nil && !IsNil(o.QueryParameters) {
		return true
	}

	return false
}

// SetQueryParameters gets a reference to the given bool and assigns it to the QueryParameters field.
func (o *ComputerContentCachingParentCapabilities) SetQueryParameters(v bool) {
	o.QueryParameters = &v
}

// GetSharedContent returns the SharedContent field value if set, zero value otherwise.
func (o *ComputerContentCachingParentCapabilities) GetSharedContent() bool {
	if o == nil || IsNil(o.SharedContent) {
		var ret bool
		return ret
	}
	return *o.SharedContent
}

// GetSharedContentOk returns a tuple with the SharedContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCachingParentCapabilities) GetSharedContentOk() (*bool, bool) {
	if o == nil || IsNil(o.SharedContent) {
		return nil, false
	}
	return o.SharedContent, true
}

// HasSharedContent returns a boolean if a field has been set.
func (o *ComputerContentCachingParentCapabilities) HasSharedContent() bool {
	if o != nil && !IsNil(o.SharedContent) {
		return true
	}

	return false
}

// SetSharedContent gets a reference to the given bool and assigns it to the SharedContent field.
func (o *ComputerContentCachingParentCapabilities) SetSharedContent(v bool) {
	o.SharedContent = &v
}

// GetPrioritization returns the Prioritization field value if set, zero value otherwise.
func (o *ComputerContentCachingParentCapabilities) GetPrioritization() bool {
	if o == nil || IsNil(o.Prioritization) {
		var ret bool
		return ret
	}
	return *o.Prioritization
}

// GetPrioritizationOk returns a tuple with the Prioritization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCachingParentCapabilities) GetPrioritizationOk() (*bool, bool) {
	if o == nil || IsNil(o.Prioritization) {
		return nil, false
	}
	return o.Prioritization, true
}

// HasPrioritization returns a boolean if a field has been set.
func (o *ComputerContentCachingParentCapabilities) HasPrioritization() bool {
	if o != nil && !IsNil(o.Prioritization) {
		return true
	}

	return false
}

// SetPrioritization gets a reference to the given bool and assigns it to the Prioritization field.
func (o *ComputerContentCachingParentCapabilities) SetPrioritization(v bool) {
	o.Prioritization = &v
}

func (o ComputerContentCachingParentCapabilities) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComputerContentCachingParentCapabilities) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContentCachingParentCapabilitiesId) {
		toSerialize["contentCachingParentCapabilitiesId"] = o.ContentCachingParentCapabilitiesId
	}
	if !IsNil(o.Imports) {
		toSerialize["imports"] = o.Imports
	}
	if !IsNil(o.Namespaces) {
		toSerialize["namespaces"] = o.Namespaces
	}
	if !IsNil(o.PersonalContent) {
		toSerialize["personalContent"] = o.PersonalContent
	}
	if !IsNil(o.QueryParameters) {
		toSerialize["queryParameters"] = o.QueryParameters
	}
	if !IsNil(o.SharedContent) {
		toSerialize["sharedContent"] = o.SharedContent
	}
	if !IsNil(o.Prioritization) {
		toSerialize["prioritization"] = o.Prioritization
	}
	return toSerialize, nil
}

type NullableComputerContentCachingParentCapabilities struct {
	value *ComputerContentCachingParentCapabilities
	isSet bool
}

func (v NullableComputerContentCachingParentCapabilities) Get() *ComputerContentCachingParentCapabilities {
	return v.value
}

func (v *NullableComputerContentCachingParentCapabilities) Set(val *ComputerContentCachingParentCapabilities) {
	v.value = val
	v.isSet = true
}

func (v NullableComputerContentCachingParentCapabilities) IsSet() bool {
	return v.isSet
}

func (v *NullableComputerContentCachingParentCapabilities) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputerContentCachingParentCapabilities(val *ComputerContentCachingParentCapabilities) *NullableComputerContentCachingParentCapabilities {
	return &NullableComputerContentCachingParentCapabilities{value: val, isSet: true}
}

func (v NullableComputerContentCachingParentCapabilities) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputerContentCachingParentCapabilities) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


