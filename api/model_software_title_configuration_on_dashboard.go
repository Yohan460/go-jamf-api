/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the SoftwareTitleConfigurationOnDashboard type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SoftwareTitleConfigurationOnDashboard{}

// SoftwareTitleConfigurationOnDashboard struct for SoftwareTitleConfigurationOnDashboard
type SoftwareTitleConfigurationOnDashboard struct {
	OnDashboard *bool `json:"onDashboard,omitempty"`
}

// NewSoftwareTitleConfigurationOnDashboard instantiates a new SoftwareTitleConfigurationOnDashboard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSoftwareTitleConfigurationOnDashboard() *SoftwareTitleConfigurationOnDashboard {
	this := SoftwareTitleConfigurationOnDashboard{}
	return &this
}

// NewSoftwareTitleConfigurationOnDashboardWithDefaults instantiates a new SoftwareTitleConfigurationOnDashboard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSoftwareTitleConfigurationOnDashboardWithDefaults() *SoftwareTitleConfigurationOnDashboard {
	this := SoftwareTitleConfigurationOnDashboard{}
	return &this
}

// GetOnDashboard returns the OnDashboard field value if set, zero value otherwise.
func (o *SoftwareTitleConfigurationOnDashboard) GetOnDashboard() bool {
	if o == nil || IsNil(o.OnDashboard) {
		var ret bool
		return ret
	}
	return *o.OnDashboard
}

// GetOnDashboardOk returns a tuple with the OnDashboard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareTitleConfigurationOnDashboard) GetOnDashboardOk() (*bool, bool) {
	if o == nil || IsNil(o.OnDashboard) {
		return nil, false
	}
	return o.OnDashboard, true
}

// HasOnDashboard returns a boolean if a field has been set.
func (o *SoftwareTitleConfigurationOnDashboard) HasOnDashboard() bool {
	if o != nil && !IsNil(o.OnDashboard) {
		return true
	}

	return false
}

// SetOnDashboard gets a reference to the given bool and assigns it to the OnDashboard field.
func (o *SoftwareTitleConfigurationOnDashboard) SetOnDashboard(v bool) {
	o.OnDashboard = &v
}

func (o SoftwareTitleConfigurationOnDashboard) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SoftwareTitleConfigurationOnDashboard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OnDashboard) {
		toSerialize["onDashboard"] = o.OnDashboard
	}
	return toSerialize, nil
}

type NullableSoftwareTitleConfigurationOnDashboard struct {
	value *SoftwareTitleConfigurationOnDashboard
	isSet bool
}

func (v NullableSoftwareTitleConfigurationOnDashboard) Get() *SoftwareTitleConfigurationOnDashboard {
	return v.value
}

func (v *NullableSoftwareTitleConfigurationOnDashboard) Set(val *SoftwareTitleConfigurationOnDashboard) {
	v.value = val
	v.isSet = true
}

func (v NullableSoftwareTitleConfigurationOnDashboard) IsSet() bool {
	return v.isSet
}

func (v *NullableSoftwareTitleConfigurationOnDashboard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSoftwareTitleConfigurationOnDashboard(val *SoftwareTitleConfigurationOnDashboard) *NullableSoftwareTitleConfigurationOnDashboard {
	return &NullableSoftwareTitleConfigurationOnDashboard{value: val, isSet: true}
}

func (v NullableSoftwareTitleConfigurationOnDashboard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSoftwareTitleConfigurationOnDashboard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


