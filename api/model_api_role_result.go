/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ApiRoleResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiRoleResult{}

// ApiRoleResult struct for ApiRoleResult
type ApiRoleResult struct {
	TotalCount int32 `json:"totalCount"`
	Results []ApiRole `json:"results"`
}

// NewApiRoleResult instantiates a new ApiRoleResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiRoleResult(totalCount int32, results []ApiRole) *ApiRoleResult {
	this := ApiRoleResult{}
	this.TotalCount = totalCount
	this.Results = results
	return &this
}

// NewApiRoleResultWithDefaults instantiates a new ApiRoleResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiRoleResultWithDefaults() *ApiRoleResult {
	this := ApiRoleResult{}
	return &this
}

// GetTotalCount returns the TotalCount field value
func (o *ApiRoleResult) GetTotalCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value
// and a boolean to check if the value has been set.
func (o *ApiRoleResult) GetTotalCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCount, true
}

// SetTotalCount sets field value
func (o *ApiRoleResult) SetTotalCount(v int32) {
	o.TotalCount = v
}

// GetResults returns the Results field value
func (o *ApiRoleResult) GetResults() []ApiRole {
	if o == nil {
		var ret []ApiRole
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *ApiRoleResult) GetResultsOk() ([]ApiRole, bool) {
	if o == nil {
		return nil, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *ApiRoleResult) SetResults(v []ApiRole) {
	o.Results = v
}

func (o ApiRoleResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiRoleResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["totalCount"] = o.TotalCount
	toSerialize["results"] = o.Results
	return toSerialize, nil
}

type NullableApiRoleResult struct {
	value *ApiRoleResult
	isSet bool
}

func (v NullableApiRoleResult) Get() *ApiRoleResult {
	return v.value
}

func (v *NullableApiRoleResult) Set(val *ApiRoleResult) {
	v.value = val
	v.isSet = true
}

func (v NullableApiRoleResult) IsSet() bool {
	return v.isSet
}

func (v *NullableApiRoleResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiRoleResult(val *ApiRoleResult) *NullableApiRoleResult {
	return &NullableApiRoleResult{value: val, isSet: true}
}

func (v NullableApiRoleResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiRoleResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


