/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the PatchPolicyLogRetry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchPolicyLogRetry{}

// PatchPolicyLogRetry struct for PatchPolicyLogRetry
type PatchPolicyLogRetry struct {
	DeviceIds []string `json:"deviceIds,omitempty"`
}

// NewPatchPolicyLogRetry instantiates a new PatchPolicyLogRetry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchPolicyLogRetry() *PatchPolicyLogRetry {
	this := PatchPolicyLogRetry{}
	return &this
}

// NewPatchPolicyLogRetryWithDefaults instantiates a new PatchPolicyLogRetry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchPolicyLogRetryWithDefaults() *PatchPolicyLogRetry {
	this := PatchPolicyLogRetry{}
	return &this
}

// GetDeviceIds returns the DeviceIds field value if set, zero value otherwise.
func (o *PatchPolicyLogRetry) GetDeviceIds() []string {
	if o == nil || IsNil(o.DeviceIds) {
		var ret []string
		return ret
	}
	return o.DeviceIds
}

// GetDeviceIdsOk returns a tuple with the DeviceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyLogRetry) GetDeviceIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.DeviceIds) {
		return nil, false
	}
	return o.DeviceIds, true
}

// HasDeviceIds returns a boolean if a field has been set.
func (o *PatchPolicyLogRetry) HasDeviceIds() bool {
	if o != nil && !IsNil(o.DeviceIds) {
		return true
	}

	return false
}

// SetDeviceIds gets a reference to the given []string and assigns it to the DeviceIds field.
func (o *PatchPolicyLogRetry) SetDeviceIds(v []string) {
	o.DeviceIds = v
}

func (o PatchPolicyLogRetry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchPolicyLogRetry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeviceIds) {
		toSerialize["deviceIds"] = o.DeviceIds
	}
	return toSerialize, nil
}

type NullablePatchPolicyLogRetry struct {
	value *PatchPolicyLogRetry
	isSet bool
}

func (v NullablePatchPolicyLogRetry) Get() *PatchPolicyLogRetry {
	return v.value
}

func (v *NullablePatchPolicyLogRetry) Set(val *PatchPolicyLogRetry) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchPolicyLogRetry) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchPolicyLogRetry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchPolicyLogRetry(val *PatchPolicyLogRetry) *NullablePatchPolicyLogRetry {
	return &NullablePatchPolicyLogRetry{value: val, isSet: true}
}

func (v NullablePatchPolicyLogRetry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchPolicyLogRetry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


