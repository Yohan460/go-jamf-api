/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LoginContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoginContent{}

// LoginContent struct for LoginContent
type LoginContent struct {
	RampInstance *bool `json:"rampInstance,omitempty"`
	IncludeCustomDisclaimer bool `json:"includeCustomDisclaimer"`
	DisclaimerHeading *string `json:"disclaimerHeading,omitempty"`
	DisclaimerMainText *string `json:"disclaimerMainText,omitempty"`
	ActionText *string `json:"actionText,omitempty"`
}

type _LoginContent LoginContent

// NewLoginContent instantiates a new LoginContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoginContent(includeCustomDisclaimer bool) *LoginContent {
	this := LoginContent{}
	this.IncludeCustomDisclaimer = includeCustomDisclaimer
	return &this
}

// NewLoginContentWithDefaults instantiates a new LoginContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoginContentWithDefaults() *LoginContent {
	this := LoginContent{}
	return &this
}

// GetRampInstance returns the RampInstance field value if set, zero value otherwise.
func (o *LoginContent) GetRampInstance() bool {
	if o == nil || IsNil(o.RampInstance) {
		var ret bool
		return ret
	}
	return *o.RampInstance
}

// GetRampInstanceOk returns a tuple with the RampInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginContent) GetRampInstanceOk() (*bool, bool) {
	if o == nil || IsNil(o.RampInstance) {
		return nil, false
	}
	return o.RampInstance, true
}

// HasRampInstance returns a boolean if a field has been set.
func (o *LoginContent) HasRampInstance() bool {
	if o != nil && !IsNil(o.RampInstance) {
		return true
	}

	return false
}

// SetRampInstance gets a reference to the given bool and assigns it to the RampInstance field.
func (o *LoginContent) SetRampInstance(v bool) {
	o.RampInstance = &v
}

// GetIncludeCustomDisclaimer returns the IncludeCustomDisclaimer field value
func (o *LoginContent) GetIncludeCustomDisclaimer() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IncludeCustomDisclaimer
}

// GetIncludeCustomDisclaimerOk returns a tuple with the IncludeCustomDisclaimer field value
// and a boolean to check if the value has been set.
func (o *LoginContent) GetIncludeCustomDisclaimerOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IncludeCustomDisclaimer, true
}

// SetIncludeCustomDisclaimer sets field value
func (o *LoginContent) SetIncludeCustomDisclaimer(v bool) {
	o.IncludeCustomDisclaimer = v
}

// GetDisclaimerHeading returns the DisclaimerHeading field value if set, zero value otherwise.
func (o *LoginContent) GetDisclaimerHeading() string {
	if o == nil || IsNil(o.DisclaimerHeading) {
		var ret string
		return ret
	}
	return *o.DisclaimerHeading
}

// GetDisclaimerHeadingOk returns a tuple with the DisclaimerHeading field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginContent) GetDisclaimerHeadingOk() (*string, bool) {
	if o == nil || IsNil(o.DisclaimerHeading) {
		return nil, false
	}
	return o.DisclaimerHeading, true
}

// HasDisclaimerHeading returns a boolean if a field has been set.
func (o *LoginContent) HasDisclaimerHeading() bool {
	if o != nil && !IsNil(o.DisclaimerHeading) {
		return true
	}

	return false
}

// SetDisclaimerHeading gets a reference to the given string and assigns it to the DisclaimerHeading field.
func (o *LoginContent) SetDisclaimerHeading(v string) {
	o.DisclaimerHeading = &v
}

// GetDisclaimerMainText returns the DisclaimerMainText field value if set, zero value otherwise.
func (o *LoginContent) GetDisclaimerMainText() string {
	if o == nil || IsNil(o.DisclaimerMainText) {
		var ret string
		return ret
	}
	return *o.DisclaimerMainText
}

// GetDisclaimerMainTextOk returns a tuple with the DisclaimerMainText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginContent) GetDisclaimerMainTextOk() (*string, bool) {
	if o == nil || IsNil(o.DisclaimerMainText) {
		return nil, false
	}
	return o.DisclaimerMainText, true
}

// HasDisclaimerMainText returns a boolean if a field has been set.
func (o *LoginContent) HasDisclaimerMainText() bool {
	if o != nil && !IsNil(o.DisclaimerMainText) {
		return true
	}

	return false
}

// SetDisclaimerMainText gets a reference to the given string and assigns it to the DisclaimerMainText field.
func (o *LoginContent) SetDisclaimerMainText(v string) {
	o.DisclaimerMainText = &v
}

// GetActionText returns the ActionText field value if set, zero value otherwise.
func (o *LoginContent) GetActionText() string {
	if o == nil || IsNil(o.ActionText) {
		var ret string
		return ret
	}
	return *o.ActionText
}

// GetActionTextOk returns a tuple with the ActionText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginContent) GetActionTextOk() (*string, bool) {
	if o == nil || IsNil(o.ActionText) {
		return nil, false
	}
	return o.ActionText, true
}

// HasActionText returns a boolean if a field has been set.
func (o *LoginContent) HasActionText() bool {
	if o != nil && !IsNil(o.ActionText) {
		return true
	}

	return false
}

// SetActionText gets a reference to the given string and assigns it to the ActionText field.
func (o *LoginContent) SetActionText(v string) {
	o.ActionText = &v
}

func (o LoginContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoginContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RampInstance) {
		toSerialize["rampInstance"] = o.RampInstance
	}
	toSerialize["includeCustomDisclaimer"] = o.IncludeCustomDisclaimer
	if !IsNil(o.DisclaimerHeading) {
		toSerialize["disclaimerHeading"] = o.DisclaimerHeading
	}
	if !IsNil(o.DisclaimerMainText) {
		toSerialize["disclaimerMainText"] = o.DisclaimerMainText
	}
	if !IsNil(o.ActionText) {
		toSerialize["actionText"] = o.ActionText
	}
	return toSerialize, nil
}

func (o *LoginContent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"includeCustomDisclaimer",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLoginContent := _LoginContent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLoginContent)

	if err != nil {
		return err
	}

	*o = LoginContent(varLoginContent)

	return err
}

type NullableLoginContent struct {
	value *LoginContent
	isSet bool
}

func (v NullableLoginContent) Get() *LoginContent {
	return v.value
}

func (v *NullableLoginContent) Set(val *LoginContent) {
	v.value = val
	v.isSet = true
}

func (v NullableLoginContent) IsSet() bool {
	return v.isSet
}

func (v *NullableLoginContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoginContent(val *LoginContent) *NullableLoginContent {
	return &NullableLoginContent{value: val, isSet: true}
}

func (v NullableLoginContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoginContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


