/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the CloudLdapKeystoreFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudLdapKeystoreFile{}

// CloudLdapKeystoreFile Request with the Base64-encoded keystore file
type CloudLdapKeystoreFile struct {
	Password string `json:"password"`
	FileBytes string `json:"fileBytes"`
	FileName string `json:"fileName"`
}

// NewCloudLdapKeystoreFile instantiates a new CloudLdapKeystoreFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudLdapKeystoreFile(password string, fileBytes string, fileName string) *CloudLdapKeystoreFile {
	this := CloudLdapKeystoreFile{}
	this.Password = password
	this.FileBytes = fileBytes
	this.FileName = fileName
	return &this
}

// NewCloudLdapKeystoreFileWithDefaults instantiates a new CloudLdapKeystoreFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudLdapKeystoreFileWithDefaults() *CloudLdapKeystoreFile {
	this := CloudLdapKeystoreFile{}
	return &this
}

// GetPassword returns the Password field value
func (o *CloudLdapKeystoreFile) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *CloudLdapKeystoreFile) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *CloudLdapKeystoreFile) SetPassword(v string) {
	o.Password = v
}

// GetFileBytes returns the FileBytes field value
func (o *CloudLdapKeystoreFile) GetFileBytes() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileBytes
}

// GetFileBytesOk returns a tuple with the FileBytes field value
// and a boolean to check if the value has been set.
func (o *CloudLdapKeystoreFile) GetFileBytesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileBytes, true
}

// SetFileBytes sets field value
func (o *CloudLdapKeystoreFile) SetFileBytes(v string) {
	o.FileBytes = v
}

// GetFileName returns the FileName field value
func (o *CloudLdapKeystoreFile) GetFileName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value
// and a boolean to check if the value has been set.
func (o *CloudLdapKeystoreFile) GetFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileName, true
}

// SetFileName sets field value
func (o *CloudLdapKeystoreFile) SetFileName(v string) {
	o.FileName = v
}

func (o CloudLdapKeystoreFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloudLdapKeystoreFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["password"] = o.Password
	toSerialize["fileBytes"] = o.FileBytes
	toSerialize["fileName"] = o.FileName
	return toSerialize, nil
}

type NullableCloudLdapKeystoreFile struct {
	value *CloudLdapKeystoreFile
	isSet bool
}

func (v NullableCloudLdapKeystoreFile) Get() *CloudLdapKeystoreFile {
	return v.value
}

func (v *NullableCloudLdapKeystoreFile) Set(val *CloudLdapKeystoreFile) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudLdapKeystoreFile) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudLdapKeystoreFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudLdapKeystoreFile(val *CloudLdapKeystoreFile) *NullableCloudLdapKeystoreFile {
	return &NullableCloudLdapKeystoreFile{value: val, isSet: true}
}

func (v NullableCloudLdapKeystoreFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudLdapKeystoreFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


