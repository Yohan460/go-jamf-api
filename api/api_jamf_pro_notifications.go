/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type JamfProNotificationsAPI interface {

	/*
	V1NotificationsGet Get Notifications for user and site 

	Gets notifications for user and site


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return JamfProNotificationsAPIV1NotificationsGetRequest
	*/
	V1NotificationsGet(ctx context.Context) JamfProNotificationsAPIV1NotificationsGetRequest

	// V1NotificationsGetExecute executes the request
	//  @return []NotificationV1
	V1NotificationsGetExecute(r JamfProNotificationsAPIV1NotificationsGetRequest) ([]NotificationV1, *http.Response, error)

	/*
	V1NotificationsTypeIdDelete Delete Notifications 

	Deletes notifications with given type and id.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id instance ID of the notification
	@param type_ type of the notification
	@return JamfProNotificationsAPIV1NotificationsTypeIdDeleteRequest
	*/
	V1NotificationsTypeIdDelete(ctx context.Context, id string, type_ NotificationType) JamfProNotificationsAPIV1NotificationsTypeIdDeleteRequest

	// V1NotificationsTypeIdDeleteExecute executes the request
	V1NotificationsTypeIdDeleteExecute(r JamfProNotificationsAPIV1NotificationsTypeIdDeleteRequest) (*http.Response, error)
}

// JamfProNotificationsAPIService JamfProNotificationsAPI service
type JamfProNotificationsAPIService service

type JamfProNotificationsAPIV1NotificationsGetRequest struct {
	ctx context.Context
	ApiService JamfProNotificationsAPI
}

func (r JamfProNotificationsAPIV1NotificationsGetRequest) Execute() ([]NotificationV1, *http.Response, error) {
	return r.ApiService.V1NotificationsGetExecute(r)
}

/*
V1NotificationsGet Get Notifications for user and site 

Gets notifications for user and site


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return JamfProNotificationsAPIV1NotificationsGetRequest
*/
func (a *JamfProNotificationsAPIService) V1NotificationsGet(ctx context.Context) JamfProNotificationsAPIV1NotificationsGetRequest {
	return JamfProNotificationsAPIV1NotificationsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []NotificationV1
func (a *JamfProNotificationsAPIService) V1NotificationsGetExecute(r JamfProNotificationsAPIV1NotificationsGetRequest) ([]NotificationV1, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []NotificationV1
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JamfProNotificationsAPIService.V1NotificationsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/notifications"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type JamfProNotificationsAPIV1NotificationsTypeIdDeleteRequest struct {
	ctx context.Context
	ApiService JamfProNotificationsAPI
	id string
	type_ NotificationType
}

func (r JamfProNotificationsAPIV1NotificationsTypeIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1NotificationsTypeIdDeleteExecute(r)
}

/*
V1NotificationsTypeIdDelete Delete Notifications 

Deletes notifications with given type and id.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id instance ID of the notification
 @param type_ type of the notification
 @return JamfProNotificationsAPIV1NotificationsTypeIdDeleteRequest
*/
func (a *JamfProNotificationsAPIService) V1NotificationsTypeIdDelete(ctx context.Context, id string, type_ NotificationType) JamfProNotificationsAPIV1NotificationsTypeIdDeleteRequest {
	return JamfProNotificationsAPIV1NotificationsTypeIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		type_: type_,
	}
}

// Execute executes the request
func (a *JamfProNotificationsAPIService) V1NotificationsTypeIdDeleteExecute(r JamfProNotificationsAPIV1NotificationsTypeIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JamfProNotificationsAPIService.V1NotificationsTypeIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/notifications/{type}/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
