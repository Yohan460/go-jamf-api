/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type ApiRolePrivilegesAPI interface {

	/*
	V1ApiRolePrivilegesGet Get the current Jamf API Role Privileges

	Get role privileges

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiRolePrivilegesAPIV1ApiRolePrivilegesGetRequest
	*/
	V1ApiRolePrivilegesGet(ctx context.Context) ApiRolePrivilegesAPIV1ApiRolePrivilegesGetRequest

	// V1ApiRolePrivilegesGetExecute executes the request
	//  @return ApiRolePrivileges
	V1ApiRolePrivilegesGetExecute(r ApiRolePrivilegesAPIV1ApiRolePrivilegesGetRequest) (*ApiRolePrivileges, *http.Response, error)

	/*
	V1ApiRolePrivilegesSearchGet Search the current Jamf API Role Privileges

	Search role privileges

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiRolePrivilegesAPIV1ApiRolePrivilegesSearchGetRequest
	*/
	V1ApiRolePrivilegesSearchGet(ctx context.Context) ApiRolePrivilegesAPIV1ApiRolePrivilegesSearchGetRequest

	// V1ApiRolePrivilegesSearchGetExecute executes the request
	//  @return ApiRolePrivileges
	V1ApiRolePrivilegesSearchGetExecute(r ApiRolePrivilegesAPIV1ApiRolePrivilegesSearchGetRequest) (*ApiRolePrivileges, *http.Response, error)
}

// ApiRolePrivilegesAPIService ApiRolePrivilegesAPI service
type ApiRolePrivilegesAPIService service

type ApiRolePrivilegesAPIV1ApiRolePrivilegesGetRequest struct {
	ctx context.Context
	ApiService ApiRolePrivilegesAPI
}

func (r ApiRolePrivilegesAPIV1ApiRolePrivilegesGetRequest) Execute() (*ApiRolePrivileges, *http.Response, error) {
	return r.ApiService.V1ApiRolePrivilegesGetExecute(r)
}

/*
V1ApiRolePrivilegesGet Get the current Jamf API Role Privileges

Get role privileges

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRolePrivilegesAPIV1ApiRolePrivilegesGetRequest
*/
func (a *ApiRolePrivilegesAPIService) V1ApiRolePrivilegesGet(ctx context.Context) ApiRolePrivilegesAPIV1ApiRolePrivilegesGetRequest {
	return ApiRolePrivilegesAPIV1ApiRolePrivilegesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiRolePrivileges
func (a *ApiRolePrivilegesAPIService) V1ApiRolePrivilegesGetExecute(r ApiRolePrivilegesAPIV1ApiRolePrivilegesGetRequest) (*ApiRolePrivileges, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiRolePrivileges
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApiRolePrivilegesAPIService.V1ApiRolePrivilegesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/api-role-privileges"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRolePrivilegesAPIV1ApiRolePrivilegesSearchGetRequest struct {
	ctx context.Context
	ApiService ApiRolePrivilegesAPI
	name *string
	limit *string
}

// The partial or complete privilege name we are searching for
func (r ApiRolePrivilegesAPIV1ApiRolePrivilegesSearchGetRequest) Name(name string) ApiRolePrivilegesAPIV1ApiRolePrivilegesSearchGetRequest {
	r.name = &name
	return r
}

// Limit the query results, defaults to 15
func (r ApiRolePrivilegesAPIV1ApiRolePrivilegesSearchGetRequest) Limit(limit string) ApiRolePrivilegesAPIV1ApiRolePrivilegesSearchGetRequest {
	r.limit = &limit
	return r
}

func (r ApiRolePrivilegesAPIV1ApiRolePrivilegesSearchGetRequest) Execute() (*ApiRolePrivileges, *http.Response, error) {
	return r.ApiService.V1ApiRolePrivilegesSearchGetExecute(r)
}

/*
V1ApiRolePrivilegesSearchGet Search the current Jamf API Role Privileges

Search role privileges

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRolePrivilegesAPIV1ApiRolePrivilegesSearchGetRequest
*/
func (a *ApiRolePrivilegesAPIService) V1ApiRolePrivilegesSearchGet(ctx context.Context) ApiRolePrivilegesAPIV1ApiRolePrivilegesSearchGetRequest {
	return ApiRolePrivilegesAPIV1ApiRolePrivilegesSearchGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiRolePrivileges
func (a *ApiRolePrivilegesAPIService) V1ApiRolePrivilegesSearchGetExecute(r ApiRolePrivilegesAPIV1ApiRolePrivilegesSearchGetRequest) (*ApiRolePrivileges, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiRolePrivileges
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApiRolePrivilegesAPIService.V1ApiRolePrivilegesSearchGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/api-role-privileges/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.name == nil {
		return localVarReturnValue, nil, reportError("name is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue string = "15"
		r.limit = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
