/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
	"os"
)


type VenafiPreviewAPI interface {

	/*
	V1PkiVenafiIdConnectionStatusGet Tests the communication between Jamf Pro and a Jamf Pro PKI Proxy Server 

	Tests the communication between Jamf Pro and a Jamf Pro PKI Proxy Server


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID of the Venafi configuration
	@return VenafiPreviewAPIV1PkiVenafiIdConnectionStatusGetRequest
	*/
	V1PkiVenafiIdConnectionStatusGet(ctx context.Context, id string) VenafiPreviewAPIV1PkiVenafiIdConnectionStatusGetRequest

	// V1PkiVenafiIdConnectionStatusGetExecute executes the request
	//  @return VenafiServiceStatus
	V1PkiVenafiIdConnectionStatusGetExecute(r VenafiPreviewAPIV1PkiVenafiIdConnectionStatusGetRequest) (*VenafiServiceStatus, *http.Response, error)

	/*
	V1PkiVenafiIdDelete Delete a Venafi PKI configuration from Jamf Pro 

	Delete a Venafi PKI configuration from Jamf Pro


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID of the Venafi configuration
	@return VenafiPreviewAPIV1PkiVenafiIdDeleteRequest
	*/
	V1PkiVenafiIdDelete(ctx context.Context, id string) VenafiPreviewAPIV1PkiVenafiIdDeleteRequest

	// V1PkiVenafiIdDeleteExecute executes the request
	V1PkiVenafiIdDeleteExecute(r VenafiPreviewAPIV1PkiVenafiIdDeleteRequest) (*http.Response, error)

	/*
	V1PkiVenafiIdDependentProfilesGet Get configuration profile data using specified Venafi CA object 

	Get configuration profile data using specified Venafi CA object


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID of the Venafi configuration
	@return VenafiPreviewAPIV1PkiVenafiIdDependentProfilesGetRequest
	*/
	V1PkiVenafiIdDependentProfilesGet(ctx context.Context, id string) VenafiPreviewAPIV1PkiVenafiIdDependentProfilesGetRequest

	// V1PkiVenafiIdDependentProfilesGetExecute executes the request
	//  @return VenafiPkiPayloadRecordSearchResults
	V1PkiVenafiIdDependentProfilesGetExecute(r VenafiPreviewAPIV1PkiVenafiIdDependentProfilesGetRequest) (*VenafiPkiPayloadRecordSearchResults, *http.Response, error)

	/*
	V1PkiVenafiIdGet Retrieve a Venafi PKI configuration from Jamf Pro 

	Retrieve a Venafi PKI configuration from Jamf Pro


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID of the Venafi configuration
	@return VenafiPreviewAPIV1PkiVenafiIdGetRequest
	*/
	V1PkiVenafiIdGet(ctx context.Context, id string) VenafiPreviewAPIV1PkiVenafiIdGetRequest

	// V1PkiVenafiIdGetExecute executes the request
	//  @return VenafiCaRecord
	V1PkiVenafiIdGetExecute(r VenafiPreviewAPIV1PkiVenafiIdGetRequest) (*VenafiCaRecord, *http.Response, error)

	/*
	V1PkiVenafiIdHistoryGet Get specified Venafi CA history object 

	Get specified Venafi CA history object


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID of the Venafi configuration
	@return VenafiPreviewAPIV1PkiVenafiIdHistoryGetRequest
	*/
	V1PkiVenafiIdHistoryGet(ctx context.Context, id string) VenafiPreviewAPIV1PkiVenafiIdHistoryGetRequest

	// V1PkiVenafiIdHistoryGetExecute executes the request
	//  @return HistorySearchResults
	V1PkiVenafiIdHistoryGetExecute(r VenafiPreviewAPIV1PkiVenafiIdHistoryGetRequest) (*HistorySearchResults, *http.Response, error)

	/*
	V1PkiVenafiIdHistoryPost Add specified Venafi CA Object Note 

	Adds specified Venafi CA Object Note


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id instance id of Venafi CA history record
	@return VenafiPreviewAPIV1PkiVenafiIdHistoryPostRequest
	*/
	V1PkiVenafiIdHistoryPost(ctx context.Context, id string) VenafiPreviewAPIV1PkiVenafiIdHistoryPostRequest

	// V1PkiVenafiIdHistoryPostExecute executes the request
	//  @return HrefResponse
	V1PkiVenafiIdHistoryPostExecute(r VenafiPreviewAPIV1PkiVenafiIdHistoryPostRequest) (*HrefResponse, *http.Response, error)

	/*
	V1PkiVenafiIdJamfPublicKeyGet Downloads a certificate used to secure communication between Jamf Pro and a Jamf Pro PKI Proxy Server 

	Downloads a certificate for an existing Venafi configuration that can be used to secure communication between Jamf Pro and a Jamf Pro PKI Proxy Server


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID of the Venafi configuration
	@return VenafiPreviewAPIV1PkiVenafiIdJamfPublicKeyGetRequest
	*/
	V1PkiVenafiIdJamfPublicKeyGet(ctx context.Context, id string) VenafiPreviewAPIV1PkiVenafiIdJamfPublicKeyGetRequest

	// V1PkiVenafiIdJamfPublicKeyGetExecute executes the request
	//  @return *os.File
	V1PkiVenafiIdJamfPublicKeyGetExecute(r VenafiPreviewAPIV1PkiVenafiIdJamfPublicKeyGetRequest) (*os.File, *http.Response, error)

	/*
	V1PkiVenafiIdJamfPublicKeyRegeneratePost Regenerates a certificate used to secure communication between Jamf Pro and a Jamf Pro PKI Proxy Server 

	Regenerates a certificate for an existing Venafi configuration that can be used to secure communication between Jamf Pro and a Jamf Pro PKI Proxy Server


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID of the Venafi configuration
	@return VenafiPreviewAPIV1PkiVenafiIdJamfPublicKeyRegeneratePostRequest
	*/
	V1PkiVenafiIdJamfPublicKeyRegeneratePost(ctx context.Context, id string) VenafiPreviewAPIV1PkiVenafiIdJamfPublicKeyRegeneratePostRequest

	// V1PkiVenafiIdJamfPublicKeyRegeneratePostExecute executes the request
	V1PkiVenafiIdJamfPublicKeyRegeneratePostExecute(r VenafiPreviewAPIV1PkiVenafiIdJamfPublicKeyRegeneratePostRequest) (*http.Response, error)

	/*
	V1PkiVenafiIdPatch Update a Venafi PKI configuration in Jamf Pro 

	Update a Venafi PKI configuration in Jamf Pro


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID of the Venafi configuration
	@return VenafiPreviewAPIV1PkiVenafiIdPatchRequest
	*/
	V1PkiVenafiIdPatch(ctx context.Context, id string) VenafiPreviewAPIV1PkiVenafiIdPatchRequest

	// V1PkiVenafiIdPatchExecute executes the request
	//  @return VenafiCaRecord
	V1PkiVenafiIdPatchExecute(r VenafiPreviewAPIV1PkiVenafiIdPatchRequest) (*VenafiCaRecord, *http.Response, error)

	/*
	V1PkiVenafiIdProxyTrustStoreDelete Removes the PKI Proxy Server public key used to secure communication between Jamf Pro and a Jamf Pro PKI Proxy Server 

	Removes the uploaded PKI Proxy Server public key to do basic TLS certificate validation between Jamf Pro and a Jamf Pro PKI Proxy Server


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID of the Venafi configuration
	@return VenafiPreviewAPIV1PkiVenafiIdProxyTrustStoreDeleteRequest
	*/
	V1PkiVenafiIdProxyTrustStoreDelete(ctx context.Context, id string) VenafiPreviewAPIV1PkiVenafiIdProxyTrustStoreDeleteRequest

	// V1PkiVenafiIdProxyTrustStoreDeleteExecute executes the request
	V1PkiVenafiIdProxyTrustStoreDeleteExecute(r VenafiPreviewAPIV1PkiVenafiIdProxyTrustStoreDeleteRequest) (*http.Response, error)

	/*
	V1PkiVenafiIdProxyTrustStoreGet Downloads the PKI Proxy Server public key to secure communication between Jamf Pro and a Jamf Pro PKI Proxy Server 

	Downloads the uploaded PKI Proxy Server public key to do basic TLS certificate validation between Jamf Pro and a Jamf Pro PKI Proxy Server


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID of the Venafi configuration
	@return VenafiPreviewAPIV1PkiVenafiIdProxyTrustStoreGetRequest
	*/
	V1PkiVenafiIdProxyTrustStoreGet(ctx context.Context, id string) VenafiPreviewAPIV1PkiVenafiIdProxyTrustStoreGetRequest

	// V1PkiVenafiIdProxyTrustStoreGetExecute executes the request
	//  @return *os.File
	V1PkiVenafiIdProxyTrustStoreGetExecute(r VenafiPreviewAPIV1PkiVenafiIdProxyTrustStoreGetRequest) (*os.File, *http.Response, error)

	/*
	V1PkiVenafiIdProxyTrustStorePost Uploads the PKI Proxy Server public key to secure communication between Jamf Pro and a Jamf Pro PKI Proxy Server 

	Uploads the PKI Proxy Server public key to do basic TLS certificate validation between Jamf Pro and a Jamf Pro PKI Proxy Server


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID of the Venafi configuration
	@return VenafiPreviewAPIV1PkiVenafiIdProxyTrustStorePostRequest
	*/
	V1PkiVenafiIdProxyTrustStorePost(ctx context.Context, id string) VenafiPreviewAPIV1PkiVenafiIdProxyTrustStorePostRequest

	// V1PkiVenafiIdProxyTrustStorePostExecute executes the request
	V1PkiVenafiIdProxyTrustStorePostExecute(r VenafiPreviewAPIV1PkiVenafiIdProxyTrustStorePostRequest) (*http.Response, error)

	/*
	V1PkiVenafiPost Create a PKI configuration in Jamf Pro for Venafi 

	Creates a Venafi PKI configuration in Jamf Pro, which can be used to issue certificates


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VenafiPreviewAPIV1PkiVenafiPostRequest
	*/
	V1PkiVenafiPost(ctx context.Context) VenafiPreviewAPIV1PkiVenafiPostRequest

	// V1PkiVenafiPostExecute executes the request
	//  @return HrefResponse
	V1PkiVenafiPostExecute(r VenafiPreviewAPIV1PkiVenafiPostRequest) (*HrefResponse, *http.Response, error)
}

// VenafiPreviewAPIService VenafiPreviewAPI service
type VenafiPreviewAPIService service

type VenafiPreviewAPIV1PkiVenafiIdConnectionStatusGetRequest struct {
	ctx context.Context
	ApiService VenafiPreviewAPI
	id string
}

func (r VenafiPreviewAPIV1PkiVenafiIdConnectionStatusGetRequest) Execute() (*VenafiServiceStatus, *http.Response, error) {
	return r.ApiService.V1PkiVenafiIdConnectionStatusGetExecute(r)
}

/*
V1PkiVenafiIdConnectionStatusGet Tests the communication between Jamf Pro and a Jamf Pro PKI Proxy Server 

Tests the communication between Jamf Pro and a Jamf Pro PKI Proxy Server


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of the Venafi configuration
 @return VenafiPreviewAPIV1PkiVenafiIdConnectionStatusGetRequest
*/
func (a *VenafiPreviewAPIService) V1PkiVenafiIdConnectionStatusGet(ctx context.Context, id string) VenafiPreviewAPIV1PkiVenafiIdConnectionStatusGetRequest {
	return VenafiPreviewAPIV1PkiVenafiIdConnectionStatusGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return VenafiServiceStatus
func (a *VenafiPreviewAPIService) V1PkiVenafiIdConnectionStatusGetExecute(r VenafiPreviewAPIV1PkiVenafiIdConnectionStatusGetRequest) (*VenafiServiceStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VenafiServiceStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VenafiPreviewAPIService.V1PkiVenafiIdConnectionStatusGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/pki/venafi/{id}/connection-status"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VenafiPreviewAPIV1PkiVenafiIdDeleteRequest struct {
	ctx context.Context
	ApiService VenafiPreviewAPI
	id string
}

func (r VenafiPreviewAPIV1PkiVenafiIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1PkiVenafiIdDeleteExecute(r)
}

/*
V1PkiVenafiIdDelete Delete a Venafi PKI configuration from Jamf Pro 

Delete a Venafi PKI configuration from Jamf Pro


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of the Venafi configuration
 @return VenafiPreviewAPIV1PkiVenafiIdDeleteRequest
*/
func (a *VenafiPreviewAPIService) V1PkiVenafiIdDelete(ctx context.Context, id string) VenafiPreviewAPIV1PkiVenafiIdDeleteRequest {
	return VenafiPreviewAPIV1PkiVenafiIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *VenafiPreviewAPIService) V1PkiVenafiIdDeleteExecute(r VenafiPreviewAPIV1PkiVenafiIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VenafiPreviewAPIService.V1PkiVenafiIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/pki/venafi/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VenafiPreviewAPIV1PkiVenafiIdDependentProfilesGetRequest struct {
	ctx context.Context
	ApiService VenafiPreviewAPI
	id string
}

func (r VenafiPreviewAPIV1PkiVenafiIdDependentProfilesGetRequest) Execute() (*VenafiPkiPayloadRecordSearchResults, *http.Response, error) {
	return r.ApiService.V1PkiVenafiIdDependentProfilesGetExecute(r)
}

/*
V1PkiVenafiIdDependentProfilesGet Get configuration profile data using specified Venafi CA object 

Get configuration profile data using specified Venafi CA object


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of the Venafi configuration
 @return VenafiPreviewAPIV1PkiVenafiIdDependentProfilesGetRequest
*/
func (a *VenafiPreviewAPIService) V1PkiVenafiIdDependentProfilesGet(ctx context.Context, id string) VenafiPreviewAPIV1PkiVenafiIdDependentProfilesGetRequest {
	return VenafiPreviewAPIV1PkiVenafiIdDependentProfilesGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return VenafiPkiPayloadRecordSearchResults
func (a *VenafiPreviewAPIService) V1PkiVenafiIdDependentProfilesGetExecute(r VenafiPreviewAPIV1PkiVenafiIdDependentProfilesGetRequest) (*VenafiPkiPayloadRecordSearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VenafiPkiPayloadRecordSearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VenafiPreviewAPIService.V1PkiVenafiIdDependentProfilesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/pki/venafi/{id}/dependent-profiles"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VenafiPreviewAPIV1PkiVenafiIdGetRequest struct {
	ctx context.Context
	ApiService VenafiPreviewAPI
	id string
}

func (r VenafiPreviewAPIV1PkiVenafiIdGetRequest) Execute() (*VenafiCaRecord, *http.Response, error) {
	return r.ApiService.V1PkiVenafiIdGetExecute(r)
}

/*
V1PkiVenafiIdGet Retrieve a Venafi PKI configuration from Jamf Pro 

Retrieve a Venafi PKI configuration from Jamf Pro


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of the Venafi configuration
 @return VenafiPreviewAPIV1PkiVenafiIdGetRequest
*/
func (a *VenafiPreviewAPIService) V1PkiVenafiIdGet(ctx context.Context, id string) VenafiPreviewAPIV1PkiVenafiIdGetRequest {
	return VenafiPreviewAPIV1PkiVenafiIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return VenafiCaRecord
func (a *VenafiPreviewAPIService) V1PkiVenafiIdGetExecute(r VenafiPreviewAPIV1PkiVenafiIdGetRequest) (*VenafiCaRecord, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VenafiCaRecord
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VenafiPreviewAPIService.V1PkiVenafiIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/pki/venafi/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VenafiPreviewAPIV1PkiVenafiIdHistoryGetRequest struct {
	ctx context.Context
	ApiService VenafiPreviewAPI
	id string
	page *int64
	pageSize *int64
	sort *[]string
	filter *string
}

func (r VenafiPreviewAPIV1PkiVenafiIdHistoryGetRequest) Page(page int64) VenafiPreviewAPIV1PkiVenafiIdHistoryGetRequest {
	r.page = &page
	return r
}

func (r VenafiPreviewAPIV1PkiVenafiIdHistoryGetRequest) PageSize(pageSize int64) VenafiPreviewAPIV1PkiVenafiIdHistoryGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Default sort is date:desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc 
func (r VenafiPreviewAPIV1PkiVenafiIdHistoryGetRequest) Sort(sort []string) VenafiPreviewAPIV1PkiVenafiIdHistoryGetRequest {
	r.sort = &sort
	return r
}

// Query in the RSQL format, allowing to filter history notes collection. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: username, date, note, details. This param can be combined with paging and sorting. Example: filter&#x3D;username!&#x3D;admin and details&#x3D;&#x3D;*disabled* and date&lt;2019-12-15
func (r VenafiPreviewAPIV1PkiVenafiIdHistoryGetRequest) Filter(filter string) VenafiPreviewAPIV1PkiVenafiIdHistoryGetRequest {
	r.filter = &filter
	return r
}

func (r VenafiPreviewAPIV1PkiVenafiIdHistoryGetRequest) Execute() (*HistorySearchResults, *http.Response, error) {
	return r.ApiService.V1PkiVenafiIdHistoryGetExecute(r)
}

/*
V1PkiVenafiIdHistoryGet Get specified Venafi CA history object 

Get specified Venafi CA history object


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of the Venafi configuration
 @return VenafiPreviewAPIV1PkiVenafiIdHistoryGetRequest
*/
func (a *VenafiPreviewAPIService) V1PkiVenafiIdHistoryGet(ctx context.Context, id string) VenafiPreviewAPIV1PkiVenafiIdHistoryGetRequest {
	return VenafiPreviewAPIV1PkiVenafiIdHistoryGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return HistorySearchResults
func (a *VenafiPreviewAPIService) V1PkiVenafiIdHistoryGetExecute(r VenafiPreviewAPIV1PkiVenafiIdHistoryGetRequest) (*HistorySearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HistorySearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VenafiPreviewAPIService.V1PkiVenafiIdHistoryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/pki/venafi/{id}/history"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int64 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int64 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		defaultValue := []string{"date:desc"}
		r.sort = &defaultValue
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	} else {
		var defaultValue string = ""
		r.filter = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VenafiPreviewAPIV1PkiVenafiIdHistoryPostRequest struct {
	ctx context.Context
	ApiService VenafiPreviewAPI
	id string
	objectHistoryNote *ObjectHistoryNote
}

// venafi ca history notes to create
func (r VenafiPreviewAPIV1PkiVenafiIdHistoryPostRequest) ObjectHistoryNote(objectHistoryNote ObjectHistoryNote) VenafiPreviewAPIV1PkiVenafiIdHistoryPostRequest {
	r.objectHistoryNote = &objectHistoryNote
	return r
}

func (r VenafiPreviewAPIV1PkiVenafiIdHistoryPostRequest) Execute() (*HrefResponse, *http.Response, error) {
	return r.ApiService.V1PkiVenafiIdHistoryPostExecute(r)
}

/*
V1PkiVenafiIdHistoryPost Add specified Venafi CA Object Note 

Adds specified Venafi CA Object Note


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id instance id of Venafi CA history record
 @return VenafiPreviewAPIV1PkiVenafiIdHistoryPostRequest
*/
func (a *VenafiPreviewAPIService) V1PkiVenafiIdHistoryPost(ctx context.Context, id string) VenafiPreviewAPIV1PkiVenafiIdHistoryPostRequest {
	return VenafiPreviewAPIV1PkiVenafiIdHistoryPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return HrefResponse
func (a *VenafiPreviewAPIService) V1PkiVenafiIdHistoryPostExecute(r VenafiPreviewAPIV1PkiVenafiIdHistoryPostRequest) (*HrefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HrefResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VenafiPreviewAPIService.V1PkiVenafiIdHistoryPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/pki/venafi/{id}/history"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.objectHistoryNote == nil {
		return localVarReturnValue, nil, reportError("objectHistoryNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.objectHistoryNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VenafiPreviewAPIV1PkiVenafiIdJamfPublicKeyGetRequest struct {
	ctx context.Context
	ApiService VenafiPreviewAPI
	id string
}

func (r VenafiPreviewAPIV1PkiVenafiIdJamfPublicKeyGetRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.V1PkiVenafiIdJamfPublicKeyGetExecute(r)
}

/*
V1PkiVenafiIdJamfPublicKeyGet Downloads a certificate used to secure communication between Jamf Pro and a Jamf Pro PKI Proxy Server 

Downloads a certificate for an existing Venafi configuration that can be used to secure communication between Jamf Pro and a Jamf Pro PKI Proxy Server


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of the Venafi configuration
 @return VenafiPreviewAPIV1PkiVenafiIdJamfPublicKeyGetRequest
*/
func (a *VenafiPreviewAPIService) V1PkiVenafiIdJamfPublicKeyGet(ctx context.Context, id string) VenafiPreviewAPIV1PkiVenafiIdJamfPublicKeyGetRequest {
	return VenafiPreviewAPIV1PkiVenafiIdJamfPublicKeyGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return *os.File
func (a *VenafiPreviewAPIService) V1PkiVenafiIdJamfPublicKeyGetExecute(r VenafiPreviewAPIV1PkiVenafiIdJamfPublicKeyGetRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VenafiPreviewAPIService.V1PkiVenafiIdJamfPublicKeyGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/pki/venafi/{id}/jamf-public-key"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/pem-certificate-chain", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VenafiPreviewAPIV1PkiVenafiIdJamfPublicKeyRegeneratePostRequest struct {
	ctx context.Context
	ApiService VenafiPreviewAPI
	id string
}

func (r VenafiPreviewAPIV1PkiVenafiIdJamfPublicKeyRegeneratePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1PkiVenafiIdJamfPublicKeyRegeneratePostExecute(r)
}

/*
V1PkiVenafiIdJamfPublicKeyRegeneratePost Regenerates a certificate used to secure communication between Jamf Pro and a Jamf Pro PKI Proxy Server 

Regenerates a certificate for an existing Venafi configuration that can be used to secure communication between Jamf Pro and a Jamf Pro PKI Proxy Server


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of the Venafi configuration
 @return VenafiPreviewAPIV1PkiVenafiIdJamfPublicKeyRegeneratePostRequest
*/
func (a *VenafiPreviewAPIService) V1PkiVenafiIdJamfPublicKeyRegeneratePost(ctx context.Context, id string) VenafiPreviewAPIV1PkiVenafiIdJamfPublicKeyRegeneratePostRequest {
	return VenafiPreviewAPIV1PkiVenafiIdJamfPublicKeyRegeneratePostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *VenafiPreviewAPIService) V1PkiVenafiIdJamfPublicKeyRegeneratePostExecute(r VenafiPreviewAPIV1PkiVenafiIdJamfPublicKeyRegeneratePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VenafiPreviewAPIService.V1PkiVenafiIdJamfPublicKeyRegeneratePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/pki/venafi/{id}/jamf-public-key/regenerate"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VenafiPreviewAPIV1PkiVenafiIdPatchRequest struct {
	ctx context.Context
	ApiService VenafiPreviewAPI
	id string
	venafiCaRecord *VenafiCaRecord
}

func (r VenafiPreviewAPIV1PkiVenafiIdPatchRequest) VenafiCaRecord(venafiCaRecord VenafiCaRecord) VenafiPreviewAPIV1PkiVenafiIdPatchRequest {
	r.venafiCaRecord = &venafiCaRecord
	return r
}

func (r VenafiPreviewAPIV1PkiVenafiIdPatchRequest) Execute() (*VenafiCaRecord, *http.Response, error) {
	return r.ApiService.V1PkiVenafiIdPatchExecute(r)
}

/*
V1PkiVenafiIdPatch Update a Venafi PKI configuration in Jamf Pro 

Update a Venafi PKI configuration in Jamf Pro


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of the Venafi configuration
 @return VenafiPreviewAPIV1PkiVenafiIdPatchRequest
*/
func (a *VenafiPreviewAPIService) V1PkiVenafiIdPatch(ctx context.Context, id string) VenafiPreviewAPIV1PkiVenafiIdPatchRequest {
	return VenafiPreviewAPIV1PkiVenafiIdPatchRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return VenafiCaRecord
func (a *VenafiPreviewAPIService) V1PkiVenafiIdPatchExecute(r VenafiPreviewAPIV1PkiVenafiIdPatchRequest) (*VenafiCaRecord, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VenafiCaRecord
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VenafiPreviewAPIService.V1PkiVenafiIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/pki/venafi/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.venafiCaRecord == nil {
		return localVarReturnValue, nil, reportError("venafiCaRecord is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.venafiCaRecord
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VenafiPreviewAPIV1PkiVenafiIdProxyTrustStoreDeleteRequest struct {
	ctx context.Context
	ApiService VenafiPreviewAPI
	id string
}

func (r VenafiPreviewAPIV1PkiVenafiIdProxyTrustStoreDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1PkiVenafiIdProxyTrustStoreDeleteExecute(r)
}

/*
V1PkiVenafiIdProxyTrustStoreDelete Removes the PKI Proxy Server public key used to secure communication between Jamf Pro and a Jamf Pro PKI Proxy Server 

Removes the uploaded PKI Proxy Server public key to do basic TLS certificate validation between Jamf Pro and a Jamf Pro PKI Proxy Server


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of the Venafi configuration
 @return VenafiPreviewAPIV1PkiVenafiIdProxyTrustStoreDeleteRequest
*/
func (a *VenafiPreviewAPIService) V1PkiVenafiIdProxyTrustStoreDelete(ctx context.Context, id string) VenafiPreviewAPIV1PkiVenafiIdProxyTrustStoreDeleteRequest {
	return VenafiPreviewAPIV1PkiVenafiIdProxyTrustStoreDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *VenafiPreviewAPIService) V1PkiVenafiIdProxyTrustStoreDeleteExecute(r VenafiPreviewAPIV1PkiVenafiIdProxyTrustStoreDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VenafiPreviewAPIService.V1PkiVenafiIdProxyTrustStoreDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/pki/venafi/{id}/proxy-trust-store"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VenafiPreviewAPIV1PkiVenafiIdProxyTrustStoreGetRequest struct {
	ctx context.Context
	ApiService VenafiPreviewAPI
	id string
}

func (r VenafiPreviewAPIV1PkiVenafiIdProxyTrustStoreGetRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.V1PkiVenafiIdProxyTrustStoreGetExecute(r)
}

/*
V1PkiVenafiIdProxyTrustStoreGet Downloads the PKI Proxy Server public key to secure communication between Jamf Pro and a Jamf Pro PKI Proxy Server 

Downloads the uploaded PKI Proxy Server public key to do basic TLS certificate validation between Jamf Pro and a Jamf Pro PKI Proxy Server


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of the Venafi configuration
 @return VenafiPreviewAPIV1PkiVenafiIdProxyTrustStoreGetRequest
*/
func (a *VenafiPreviewAPIService) V1PkiVenafiIdProxyTrustStoreGet(ctx context.Context, id string) VenafiPreviewAPIV1PkiVenafiIdProxyTrustStoreGetRequest {
	return VenafiPreviewAPIV1PkiVenafiIdProxyTrustStoreGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return *os.File
func (a *VenafiPreviewAPIService) V1PkiVenafiIdProxyTrustStoreGetExecute(r VenafiPreviewAPIV1PkiVenafiIdProxyTrustStoreGetRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VenafiPreviewAPIService.V1PkiVenafiIdProxyTrustStoreGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/pki/venafi/{id}/proxy-trust-store"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/pem-certificate-chain", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VenafiPreviewAPIV1PkiVenafiIdProxyTrustStorePostRequest struct {
	ctx context.Context
	ApiService VenafiPreviewAPI
	id string
	body *os.File
}

func (r VenafiPreviewAPIV1PkiVenafiIdProxyTrustStorePostRequest) Body(body *os.File) VenafiPreviewAPIV1PkiVenafiIdProxyTrustStorePostRequest {
	r.body = body
	return r
}

func (r VenafiPreviewAPIV1PkiVenafiIdProxyTrustStorePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1PkiVenafiIdProxyTrustStorePostExecute(r)
}

/*
V1PkiVenafiIdProxyTrustStorePost Uploads the PKI Proxy Server public key to secure communication between Jamf Pro and a Jamf Pro PKI Proxy Server 

Uploads the PKI Proxy Server public key to do basic TLS certificate validation between Jamf Pro and a Jamf Pro PKI Proxy Server


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of the Venafi configuration
 @return VenafiPreviewAPIV1PkiVenafiIdProxyTrustStorePostRequest
*/
func (a *VenafiPreviewAPIService) V1PkiVenafiIdProxyTrustStorePost(ctx context.Context, id string) VenafiPreviewAPIV1PkiVenafiIdProxyTrustStorePostRequest {
	return VenafiPreviewAPIV1PkiVenafiIdProxyTrustStorePostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *VenafiPreviewAPIService) V1PkiVenafiIdProxyTrustStorePostExecute(r VenafiPreviewAPIV1PkiVenafiIdProxyTrustStorePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VenafiPreviewAPIService.V1PkiVenafiIdProxyTrustStorePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/pki/venafi/{id}/proxy-trust-store"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/pem-certificate-chain"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VenafiPreviewAPIV1PkiVenafiPostRequest struct {
	ctx context.Context
	ApiService VenafiPreviewAPI
	venafiCaRecord *VenafiCaRecord
}

func (r VenafiPreviewAPIV1PkiVenafiPostRequest) VenafiCaRecord(venafiCaRecord VenafiCaRecord) VenafiPreviewAPIV1PkiVenafiPostRequest {
	r.venafiCaRecord = &venafiCaRecord
	return r
}

func (r VenafiPreviewAPIV1PkiVenafiPostRequest) Execute() (*HrefResponse, *http.Response, error) {
	return r.ApiService.V1PkiVenafiPostExecute(r)
}

/*
V1PkiVenafiPost Create a PKI configuration in Jamf Pro for Venafi 

Creates a Venafi PKI configuration in Jamf Pro, which can be used to issue certificates


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return VenafiPreviewAPIV1PkiVenafiPostRequest
*/
func (a *VenafiPreviewAPIService) V1PkiVenafiPost(ctx context.Context) VenafiPreviewAPIV1PkiVenafiPostRequest {
	return VenafiPreviewAPIV1PkiVenafiPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HrefResponse
func (a *VenafiPreviewAPIService) V1PkiVenafiPostExecute(r VenafiPreviewAPIV1PkiVenafiPostRequest) (*HrefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HrefResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VenafiPreviewAPIService.V1PkiVenafiPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/pki/venafi"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.venafiCaRecord == nil {
		return localVarReturnValue, nil, reportError("venafiCaRecord is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.venafiCaRecord
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
