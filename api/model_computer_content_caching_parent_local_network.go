/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ComputerContentCachingParentLocalNetwork struct for ComputerContentCachingParentLocalNetwork
type ComputerContentCachingParentLocalNetwork struct {
	ContentCachingParentLocalNetworkId *string `json:"contentCachingParentLocalNetworkId,omitempty"`
	Speed *int64 `json:"speed,omitempty"`
	Wired *bool `json:"wired,omitempty"`
}

// NewComputerContentCachingParentLocalNetwork instantiates a new ComputerContentCachingParentLocalNetwork object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputerContentCachingParentLocalNetwork() *ComputerContentCachingParentLocalNetwork {
	this := ComputerContentCachingParentLocalNetwork{}
	return &this
}

// NewComputerContentCachingParentLocalNetworkWithDefaults instantiates a new ComputerContentCachingParentLocalNetwork object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputerContentCachingParentLocalNetworkWithDefaults() *ComputerContentCachingParentLocalNetwork {
	this := ComputerContentCachingParentLocalNetwork{}
	return &this
}

// GetContentCachingParentLocalNetworkId returns the ContentCachingParentLocalNetworkId field value if set, zero value otherwise.
func (o *ComputerContentCachingParentLocalNetwork) GetContentCachingParentLocalNetworkId() string {
	if o == nil || o.ContentCachingParentLocalNetworkId == nil {
		var ret string
		return ret
	}
	return *o.ContentCachingParentLocalNetworkId
}

// GetContentCachingParentLocalNetworkIdOk returns a tuple with the ContentCachingParentLocalNetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCachingParentLocalNetwork) GetContentCachingParentLocalNetworkIdOk() (*string, bool) {
	if o == nil || o.ContentCachingParentLocalNetworkId == nil {
		return nil, false
	}
	return o.ContentCachingParentLocalNetworkId, true
}

// HasContentCachingParentLocalNetworkId returns a boolean if a field has been set.
func (o *ComputerContentCachingParentLocalNetwork) HasContentCachingParentLocalNetworkId() bool {
	if o != nil && o.ContentCachingParentLocalNetworkId != nil {
		return true
	}

	return false
}

// SetContentCachingParentLocalNetworkId gets a reference to the given string and assigns it to the ContentCachingParentLocalNetworkId field.
func (o *ComputerContentCachingParentLocalNetwork) SetContentCachingParentLocalNetworkId(v string) {
	o.ContentCachingParentLocalNetworkId = &v
}

// GetSpeed returns the Speed field value if set, zero value otherwise.
func (o *ComputerContentCachingParentLocalNetwork) GetSpeed() int64 {
	if o == nil || o.Speed == nil {
		var ret int64
		return ret
	}
	return *o.Speed
}

// GetSpeedOk returns a tuple with the Speed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCachingParentLocalNetwork) GetSpeedOk() (*int64, bool) {
	if o == nil || o.Speed == nil {
		return nil, false
	}
	return o.Speed, true
}

// HasSpeed returns a boolean if a field has been set.
func (o *ComputerContentCachingParentLocalNetwork) HasSpeed() bool {
	if o != nil && o.Speed != nil {
		return true
	}

	return false
}

// SetSpeed gets a reference to the given int64 and assigns it to the Speed field.
func (o *ComputerContentCachingParentLocalNetwork) SetSpeed(v int64) {
	o.Speed = &v
}

// GetWired returns the Wired field value if set, zero value otherwise.
func (o *ComputerContentCachingParentLocalNetwork) GetWired() bool {
	if o == nil || o.Wired == nil {
		var ret bool
		return ret
	}
	return *o.Wired
}

// GetWiredOk returns a tuple with the Wired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCachingParentLocalNetwork) GetWiredOk() (*bool, bool) {
	if o == nil || o.Wired == nil {
		return nil, false
	}
	return o.Wired, true
}

// HasWired returns a boolean if a field has been set.
func (o *ComputerContentCachingParentLocalNetwork) HasWired() bool {
	if o != nil && o.Wired != nil {
		return true
	}

	return false
}

// SetWired gets a reference to the given bool and assigns it to the Wired field.
func (o *ComputerContentCachingParentLocalNetwork) SetWired(v bool) {
	o.Wired = &v
}

func (o ComputerContentCachingParentLocalNetwork) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ContentCachingParentLocalNetworkId != nil {
		toSerialize["contentCachingParentLocalNetworkId"] = o.ContentCachingParentLocalNetworkId
	}
	if o.Speed != nil {
		toSerialize["speed"] = o.Speed
	}
	if o.Wired != nil {
		toSerialize["wired"] = o.Wired
	}
	return json.Marshal(toSerialize)
}

type NullableComputerContentCachingParentLocalNetwork struct {
	value *ComputerContentCachingParentLocalNetwork
	isSet bool
}

func (v NullableComputerContentCachingParentLocalNetwork) Get() *ComputerContentCachingParentLocalNetwork {
	return v.value
}

func (v *NullableComputerContentCachingParentLocalNetwork) Set(val *ComputerContentCachingParentLocalNetwork) {
	v.value = val
	v.isSet = true
}

func (v NullableComputerContentCachingParentLocalNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableComputerContentCachingParentLocalNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputerContentCachingParentLocalNetwork(val *ComputerContentCachingParentLocalNetwork) *NullableComputerContentCachingParentLocalNetwork {
	return &NullableComputerContentCachingParentLocalNetwork{value: val, isSet: true}
}

func (v NullableComputerContentCachingParentLocalNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputerContentCachingParentLocalNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


