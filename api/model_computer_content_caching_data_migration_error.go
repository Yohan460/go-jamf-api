/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ComputerContentCachingDataMigrationError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComputerContentCachingDataMigrationError{}

// ComputerContentCachingDataMigrationError struct for ComputerContentCachingDataMigrationError
type ComputerContentCachingDataMigrationError struct {
	Code *int64 `json:"code,omitempty"`
	Domain *string `json:"domain,omitempty"`
	UserInfo []ComputerContentCachingDataMigrationErrorUserInfo `json:"userInfo,omitempty"`
}

// NewComputerContentCachingDataMigrationError instantiates a new ComputerContentCachingDataMigrationError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputerContentCachingDataMigrationError() *ComputerContentCachingDataMigrationError {
	this := ComputerContentCachingDataMigrationError{}
	return &this
}

// NewComputerContentCachingDataMigrationErrorWithDefaults instantiates a new ComputerContentCachingDataMigrationError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputerContentCachingDataMigrationErrorWithDefaults() *ComputerContentCachingDataMigrationError {
	this := ComputerContentCachingDataMigrationError{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ComputerContentCachingDataMigrationError) GetCode() int64 {
	if o == nil || IsNil(o.Code) {
		var ret int64
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCachingDataMigrationError) GetCodeOk() (*int64, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ComputerContentCachingDataMigrationError) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given int64 and assigns it to the Code field.
func (o *ComputerContentCachingDataMigrationError) SetCode(v int64) {
	o.Code = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *ComputerContentCachingDataMigrationError) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCachingDataMigrationError) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *ComputerContentCachingDataMigrationError) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *ComputerContentCachingDataMigrationError) SetDomain(v string) {
	o.Domain = &v
}

// GetUserInfo returns the UserInfo field value if set, zero value otherwise.
func (o *ComputerContentCachingDataMigrationError) GetUserInfo() []ComputerContentCachingDataMigrationErrorUserInfo {
	if o == nil || IsNil(o.UserInfo) {
		var ret []ComputerContentCachingDataMigrationErrorUserInfo
		return ret
	}
	return o.UserInfo
}

// GetUserInfoOk returns a tuple with the UserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCachingDataMigrationError) GetUserInfoOk() ([]ComputerContentCachingDataMigrationErrorUserInfo, bool) {
	if o == nil || IsNil(o.UserInfo) {
		return nil, false
	}
	return o.UserInfo, true
}

// HasUserInfo returns a boolean if a field has been set.
func (o *ComputerContentCachingDataMigrationError) HasUserInfo() bool {
	if o != nil && !IsNil(o.UserInfo) {
		return true
	}

	return false
}

// SetUserInfo gets a reference to the given []ComputerContentCachingDataMigrationErrorUserInfo and assigns it to the UserInfo field.
func (o *ComputerContentCachingDataMigrationError) SetUserInfo(v []ComputerContentCachingDataMigrationErrorUserInfo) {
	o.UserInfo = v
}

func (o ComputerContentCachingDataMigrationError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComputerContentCachingDataMigrationError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.UserInfo) {
		toSerialize["userInfo"] = o.UserInfo
	}
	return toSerialize, nil
}

type NullableComputerContentCachingDataMigrationError struct {
	value *ComputerContentCachingDataMigrationError
	isSet bool
}

func (v NullableComputerContentCachingDataMigrationError) Get() *ComputerContentCachingDataMigrationError {
	return v.value
}

func (v *NullableComputerContentCachingDataMigrationError) Set(val *ComputerContentCachingDataMigrationError) {
	v.value = val
	v.isSet = true
}

func (v NullableComputerContentCachingDataMigrationError) IsSet() bool {
	return v.isSet
}

func (v *NullableComputerContentCachingDataMigrationError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputerContentCachingDataMigrationError(val *ComputerContentCachingDataMigrationError) *NullableComputerContentCachingDataMigrationError {
	return &NullableComputerContentCachingDataMigrationError{value: val, isSet: true}
}

func (v NullableComputerContentCachingDataMigrationError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputerContentCachingDataMigrationError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


