/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// EbookExclusions struct for EbookExclusions
type EbookExclusions struct {
	ComputerIds []string `json:"computerIds,omitempty"`
	ComputerGroupIds []string `json:"computerGroupIds,omitempty"`
	MobileDeviceIds []string `json:"mobileDeviceIds,omitempty"`
	MobileDeviceGroupIds []string `json:"mobileDeviceGroupIds,omitempty"`
	BuildingIds []string `json:"buildingIds,omitempty"`
	DepartmentIds []string `json:"departmentIds,omitempty"`
	UserIds []string `json:"userIds,omitempty"`
	UserGroupIds []string `json:"userGroupIds,omitempty"`
	Limitations *EbookLimitations `json:"limitations,omitempty"`
}

// NewEbookExclusions instantiates a new EbookExclusions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEbookExclusions() *EbookExclusions {
	this := EbookExclusions{}
	return &this
}

// NewEbookExclusionsWithDefaults instantiates a new EbookExclusions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEbookExclusionsWithDefaults() *EbookExclusions {
	this := EbookExclusions{}
	return &this
}

// GetComputerIds returns the ComputerIds field value if set, zero value otherwise.
func (o *EbookExclusions) GetComputerIds() []string {
	if o == nil || o.ComputerIds == nil {
		var ret []string
		return ret
	}
	return o.ComputerIds
}

// GetComputerIdsOk returns a tuple with the ComputerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EbookExclusions) GetComputerIdsOk() ([]string, bool) {
	if o == nil || o.ComputerIds == nil {
		return nil, false
	}
	return o.ComputerIds, true
}

// HasComputerIds returns a boolean if a field has been set.
func (o *EbookExclusions) HasComputerIds() bool {
	if o != nil && o.ComputerIds != nil {
		return true
	}

	return false
}

// SetComputerIds gets a reference to the given []string and assigns it to the ComputerIds field.
func (o *EbookExclusions) SetComputerIds(v []string) {
	o.ComputerIds = v
}

// GetComputerGroupIds returns the ComputerGroupIds field value if set, zero value otherwise.
func (o *EbookExclusions) GetComputerGroupIds() []string {
	if o == nil || o.ComputerGroupIds == nil {
		var ret []string
		return ret
	}
	return o.ComputerGroupIds
}

// GetComputerGroupIdsOk returns a tuple with the ComputerGroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EbookExclusions) GetComputerGroupIdsOk() ([]string, bool) {
	if o == nil || o.ComputerGroupIds == nil {
		return nil, false
	}
	return o.ComputerGroupIds, true
}

// HasComputerGroupIds returns a boolean if a field has been set.
func (o *EbookExclusions) HasComputerGroupIds() bool {
	if o != nil && o.ComputerGroupIds != nil {
		return true
	}

	return false
}

// SetComputerGroupIds gets a reference to the given []string and assigns it to the ComputerGroupIds field.
func (o *EbookExclusions) SetComputerGroupIds(v []string) {
	o.ComputerGroupIds = v
}

// GetMobileDeviceIds returns the MobileDeviceIds field value if set, zero value otherwise.
func (o *EbookExclusions) GetMobileDeviceIds() []string {
	if o == nil || o.MobileDeviceIds == nil {
		var ret []string
		return ret
	}
	return o.MobileDeviceIds
}

// GetMobileDeviceIdsOk returns a tuple with the MobileDeviceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EbookExclusions) GetMobileDeviceIdsOk() ([]string, bool) {
	if o == nil || o.MobileDeviceIds == nil {
		return nil, false
	}
	return o.MobileDeviceIds, true
}

// HasMobileDeviceIds returns a boolean if a field has been set.
func (o *EbookExclusions) HasMobileDeviceIds() bool {
	if o != nil && o.MobileDeviceIds != nil {
		return true
	}

	return false
}

// SetMobileDeviceIds gets a reference to the given []string and assigns it to the MobileDeviceIds field.
func (o *EbookExclusions) SetMobileDeviceIds(v []string) {
	o.MobileDeviceIds = v
}

// GetMobileDeviceGroupIds returns the MobileDeviceGroupIds field value if set, zero value otherwise.
func (o *EbookExclusions) GetMobileDeviceGroupIds() []string {
	if o == nil || o.MobileDeviceGroupIds == nil {
		var ret []string
		return ret
	}
	return o.MobileDeviceGroupIds
}

// GetMobileDeviceGroupIdsOk returns a tuple with the MobileDeviceGroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EbookExclusions) GetMobileDeviceGroupIdsOk() ([]string, bool) {
	if o == nil || o.MobileDeviceGroupIds == nil {
		return nil, false
	}
	return o.MobileDeviceGroupIds, true
}

// HasMobileDeviceGroupIds returns a boolean if a field has been set.
func (o *EbookExclusions) HasMobileDeviceGroupIds() bool {
	if o != nil && o.MobileDeviceGroupIds != nil {
		return true
	}

	return false
}

// SetMobileDeviceGroupIds gets a reference to the given []string and assigns it to the MobileDeviceGroupIds field.
func (o *EbookExclusions) SetMobileDeviceGroupIds(v []string) {
	o.MobileDeviceGroupIds = v
}

// GetBuildingIds returns the BuildingIds field value if set, zero value otherwise.
func (o *EbookExclusions) GetBuildingIds() []string {
	if o == nil || o.BuildingIds == nil {
		var ret []string
		return ret
	}
	return o.BuildingIds
}

// GetBuildingIdsOk returns a tuple with the BuildingIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EbookExclusions) GetBuildingIdsOk() ([]string, bool) {
	if o == nil || o.BuildingIds == nil {
		return nil, false
	}
	return o.BuildingIds, true
}

// HasBuildingIds returns a boolean if a field has been set.
func (o *EbookExclusions) HasBuildingIds() bool {
	if o != nil && o.BuildingIds != nil {
		return true
	}

	return false
}

// SetBuildingIds gets a reference to the given []string and assigns it to the BuildingIds field.
func (o *EbookExclusions) SetBuildingIds(v []string) {
	o.BuildingIds = v
}

// GetDepartmentIds returns the DepartmentIds field value if set, zero value otherwise.
func (o *EbookExclusions) GetDepartmentIds() []string {
	if o == nil || o.DepartmentIds == nil {
		var ret []string
		return ret
	}
	return o.DepartmentIds
}

// GetDepartmentIdsOk returns a tuple with the DepartmentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EbookExclusions) GetDepartmentIdsOk() ([]string, bool) {
	if o == nil || o.DepartmentIds == nil {
		return nil, false
	}
	return o.DepartmentIds, true
}

// HasDepartmentIds returns a boolean if a field has been set.
func (o *EbookExclusions) HasDepartmentIds() bool {
	if o != nil && o.DepartmentIds != nil {
		return true
	}

	return false
}

// SetDepartmentIds gets a reference to the given []string and assigns it to the DepartmentIds field.
func (o *EbookExclusions) SetDepartmentIds(v []string) {
	o.DepartmentIds = v
}

// GetUserIds returns the UserIds field value if set, zero value otherwise.
func (o *EbookExclusions) GetUserIds() []string {
	if o == nil || o.UserIds == nil {
		var ret []string
		return ret
	}
	return o.UserIds
}

// GetUserIdsOk returns a tuple with the UserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EbookExclusions) GetUserIdsOk() ([]string, bool) {
	if o == nil || o.UserIds == nil {
		return nil, false
	}
	return o.UserIds, true
}

// HasUserIds returns a boolean if a field has been set.
func (o *EbookExclusions) HasUserIds() bool {
	if o != nil && o.UserIds != nil {
		return true
	}

	return false
}

// SetUserIds gets a reference to the given []string and assigns it to the UserIds field.
func (o *EbookExclusions) SetUserIds(v []string) {
	o.UserIds = v
}

// GetUserGroupIds returns the UserGroupIds field value if set, zero value otherwise.
func (o *EbookExclusions) GetUserGroupIds() []string {
	if o == nil || o.UserGroupIds == nil {
		var ret []string
		return ret
	}
	return o.UserGroupIds
}

// GetUserGroupIdsOk returns a tuple with the UserGroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EbookExclusions) GetUserGroupIdsOk() ([]string, bool) {
	if o == nil || o.UserGroupIds == nil {
		return nil, false
	}
	return o.UserGroupIds, true
}

// HasUserGroupIds returns a boolean if a field has been set.
func (o *EbookExclusions) HasUserGroupIds() bool {
	if o != nil && o.UserGroupIds != nil {
		return true
	}

	return false
}

// SetUserGroupIds gets a reference to the given []string and assigns it to the UserGroupIds field.
func (o *EbookExclusions) SetUserGroupIds(v []string) {
	o.UserGroupIds = v
}

// GetLimitations returns the Limitations field value if set, zero value otherwise.
func (o *EbookExclusions) GetLimitations() EbookLimitations {
	if o == nil || o.Limitations == nil {
		var ret EbookLimitations
		return ret
	}
	return *o.Limitations
}

// GetLimitationsOk returns a tuple with the Limitations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EbookExclusions) GetLimitationsOk() (*EbookLimitations, bool) {
	if o == nil || o.Limitations == nil {
		return nil, false
	}
	return o.Limitations, true
}

// HasLimitations returns a boolean if a field has been set.
func (o *EbookExclusions) HasLimitations() bool {
	if o != nil && o.Limitations != nil {
		return true
	}

	return false
}

// SetLimitations gets a reference to the given EbookLimitations and assigns it to the Limitations field.
func (o *EbookExclusions) SetLimitations(v EbookLimitations) {
	o.Limitations = &v
}

func (o EbookExclusions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ComputerIds != nil {
		toSerialize["computerIds"] = o.ComputerIds
	}
	if o.ComputerGroupIds != nil {
		toSerialize["computerGroupIds"] = o.ComputerGroupIds
	}
	if o.MobileDeviceIds != nil {
		toSerialize["mobileDeviceIds"] = o.MobileDeviceIds
	}
	if o.MobileDeviceGroupIds != nil {
		toSerialize["mobileDeviceGroupIds"] = o.MobileDeviceGroupIds
	}
	if o.BuildingIds != nil {
		toSerialize["buildingIds"] = o.BuildingIds
	}
	if o.DepartmentIds != nil {
		toSerialize["departmentIds"] = o.DepartmentIds
	}
	if o.UserIds != nil {
		toSerialize["userIds"] = o.UserIds
	}
	if o.UserGroupIds != nil {
		toSerialize["userGroupIds"] = o.UserGroupIds
	}
	if o.Limitations != nil {
		toSerialize["limitations"] = o.Limitations
	}
	return json.Marshal(toSerialize)
}

type NullableEbookExclusions struct {
	value *EbookExclusions
	isSet bool
}

func (v NullableEbookExclusions) Get() *EbookExclusions {
	return v.value
}

func (v *NullableEbookExclusions) Set(val *EbookExclusions) {
	v.value = val
	v.isSet = true
}

func (v NullableEbookExclusions) IsSet() bool {
	return v.isSet
}

func (v *NullableEbookExclusions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEbookExclusions(val *EbookExclusions) *NullableEbookExclusions {
	return &NullableEbookExclusions{value: val, isSet: true}
}

func (v NullableEbookExclusions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEbookExclusions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


