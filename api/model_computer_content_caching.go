/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// ComputerContentCaching struct for ComputerContentCaching
type ComputerContentCaching struct {
	ComputerContentCachingInformationId *string `json:"computerContentCachingInformationId,omitempty"`
	Parents []ComputerContentCachingParent `json:"parents,omitempty"`
	Alerts []ComputerContentCachingAlert `json:"alerts,omitempty"`
	Activated *bool `json:"activated,omitempty"`
	Active *bool `json:"active,omitempty"`
	ActualCacheBytesUsed *int64 `json:"actualCacheBytesUsed,omitempty"`
	CacheDetails []ComputerContentCachingCacheDetail `json:"cacheDetails,omitempty"`
	CacheBytesFree *int64 `json:"cacheBytesFree,omitempty"`
	CacheBytesLimit *int64 `json:"cacheBytesLimit,omitempty"`
	CacheStatus *string `json:"cacheStatus,omitempty"`
	CacheBytesUsed *int64 `json:"cacheBytesUsed,omitempty"`
	DataMigrationCompleted *bool `json:"dataMigrationCompleted,omitempty"`
	DataMigrationProgressPercentage *int32 `json:"dataMigrationProgressPercentage,omitempty"`
	DataMigrationError *ComputerContentCachingDataMigrationError `json:"dataMigrationError,omitempty"`
	MaxCachePressureLast1HourPercentage *int32 `json:"maxCachePressureLast1HourPercentage,omitempty"`
	PersonalCacheBytesFree *int64 `json:"personalCacheBytesFree,omitempty"`
	PersonalCacheBytesLimit *int64 `json:"personalCacheBytesLimit,omitempty"`
	PersonalCacheBytesUsed *int64 `json:"personalCacheBytesUsed,omitempty"`
	Port *int64 `json:"port,omitempty"`
	PublicAddress *string `json:"publicAddress,omitempty"`
	RegistrationError *string `json:"registrationError,omitempty"`
	RegistrationResponseCode *int64 `json:"registrationResponseCode,omitempty"`
	RegistrationStarted *time.Time `json:"registrationStarted,omitempty"`
	RegistrationStatus *string `json:"registrationStatus,omitempty"`
	RestrictedMedia *bool `json:"restrictedMedia,omitempty"`
	ServerGuid *string `json:"serverGuid,omitempty"`
	StartupStatus *string `json:"startupStatus,omitempty"`
	TetheratorStatus *string `json:"tetheratorStatus,omitempty"`
	TotalBytesAreSince *time.Time `json:"totalBytesAreSince,omitempty"`
	TotalBytesDropped *int64 `json:"totalBytesDropped,omitempty"`
	TotalBytesImported *int64 `json:"totalBytesImported,omitempty"`
	TotalBytesReturnedToChildren *int64 `json:"totalBytesReturnedToChildren,omitempty"`
	TotalBytesReturnedToClients *int64 `json:"totalBytesReturnedToClients,omitempty"`
	TotalBytesReturnedToPeers *int64 `json:"totalBytesReturnedToPeers,omitempty"`
	TotalBytesStoredFromOrigin *int64 `json:"totalBytesStoredFromOrigin,omitempty"`
	TotalBytesStoredFromParents *int64 `json:"totalBytesStoredFromParents,omitempty"`
	TotalBytesStoredFromPeers *int64 `json:"totalBytesStoredFromPeers,omitempty"`
}

// NewComputerContentCaching instantiates a new ComputerContentCaching object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputerContentCaching() *ComputerContentCaching {
	this := ComputerContentCaching{}
	return &this
}

// NewComputerContentCachingWithDefaults instantiates a new ComputerContentCaching object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputerContentCachingWithDefaults() *ComputerContentCaching {
	this := ComputerContentCaching{}
	return &this
}

// GetComputerContentCachingInformationId returns the ComputerContentCachingInformationId field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetComputerContentCachingInformationId() string {
	if o == nil || o.ComputerContentCachingInformationId == nil {
		var ret string
		return ret
	}
	return *o.ComputerContentCachingInformationId
}

// GetComputerContentCachingInformationIdOk returns a tuple with the ComputerContentCachingInformationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetComputerContentCachingInformationIdOk() (*string, bool) {
	if o == nil || o.ComputerContentCachingInformationId == nil {
		return nil, false
	}
	return o.ComputerContentCachingInformationId, true
}

// HasComputerContentCachingInformationId returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasComputerContentCachingInformationId() bool {
	if o != nil && o.ComputerContentCachingInformationId != nil {
		return true
	}

	return false
}

// SetComputerContentCachingInformationId gets a reference to the given string and assigns it to the ComputerContentCachingInformationId field.
func (o *ComputerContentCaching) SetComputerContentCachingInformationId(v string) {
	o.ComputerContentCachingInformationId = &v
}

// GetParents returns the Parents field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetParents() []ComputerContentCachingParent {
	if o == nil || o.Parents == nil {
		var ret []ComputerContentCachingParent
		return ret
	}
	return o.Parents
}

// GetParentsOk returns a tuple with the Parents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetParentsOk() ([]ComputerContentCachingParent, bool) {
	if o == nil || o.Parents == nil {
		return nil, false
	}
	return o.Parents, true
}

// HasParents returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasParents() bool {
	if o != nil && o.Parents != nil {
		return true
	}

	return false
}

// SetParents gets a reference to the given []ComputerContentCachingParent and assigns it to the Parents field.
func (o *ComputerContentCaching) SetParents(v []ComputerContentCachingParent) {
	o.Parents = v
}

// GetAlerts returns the Alerts field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetAlerts() []ComputerContentCachingAlert {
	if o == nil || o.Alerts == nil {
		var ret []ComputerContentCachingAlert
		return ret
	}
	return o.Alerts
}

// GetAlertsOk returns a tuple with the Alerts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetAlertsOk() ([]ComputerContentCachingAlert, bool) {
	if o == nil || o.Alerts == nil {
		return nil, false
	}
	return o.Alerts, true
}

// HasAlerts returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasAlerts() bool {
	if o != nil && o.Alerts != nil {
		return true
	}

	return false
}

// SetAlerts gets a reference to the given []ComputerContentCachingAlert and assigns it to the Alerts field.
func (o *ComputerContentCaching) SetAlerts(v []ComputerContentCachingAlert) {
	o.Alerts = v
}

// GetActivated returns the Activated field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetActivated() bool {
	if o == nil || o.Activated == nil {
		var ret bool
		return ret
	}
	return *o.Activated
}

// GetActivatedOk returns a tuple with the Activated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetActivatedOk() (*bool, bool) {
	if o == nil || o.Activated == nil {
		return nil, false
	}
	return o.Activated, true
}

// HasActivated returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasActivated() bool {
	if o != nil && o.Activated != nil {
		return true
	}

	return false
}

// SetActivated gets a reference to the given bool and assigns it to the Activated field.
func (o *ComputerContentCaching) SetActivated(v bool) {
	o.Activated = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *ComputerContentCaching) SetActive(v bool) {
	o.Active = &v
}

// GetActualCacheBytesUsed returns the ActualCacheBytesUsed field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetActualCacheBytesUsed() int64 {
	if o == nil || o.ActualCacheBytesUsed == nil {
		var ret int64
		return ret
	}
	return *o.ActualCacheBytesUsed
}

// GetActualCacheBytesUsedOk returns a tuple with the ActualCacheBytesUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetActualCacheBytesUsedOk() (*int64, bool) {
	if o == nil || o.ActualCacheBytesUsed == nil {
		return nil, false
	}
	return o.ActualCacheBytesUsed, true
}

// HasActualCacheBytesUsed returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasActualCacheBytesUsed() bool {
	if o != nil && o.ActualCacheBytesUsed != nil {
		return true
	}

	return false
}

// SetActualCacheBytesUsed gets a reference to the given int64 and assigns it to the ActualCacheBytesUsed field.
func (o *ComputerContentCaching) SetActualCacheBytesUsed(v int64) {
	o.ActualCacheBytesUsed = &v
}

// GetCacheDetails returns the CacheDetails field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetCacheDetails() []ComputerContentCachingCacheDetail {
	if o == nil || o.CacheDetails == nil {
		var ret []ComputerContentCachingCacheDetail
		return ret
	}
	return o.CacheDetails
}

// GetCacheDetailsOk returns a tuple with the CacheDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetCacheDetailsOk() ([]ComputerContentCachingCacheDetail, bool) {
	if o == nil || o.CacheDetails == nil {
		return nil, false
	}
	return o.CacheDetails, true
}

// HasCacheDetails returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasCacheDetails() bool {
	if o != nil && o.CacheDetails != nil {
		return true
	}

	return false
}

// SetCacheDetails gets a reference to the given []ComputerContentCachingCacheDetail and assigns it to the CacheDetails field.
func (o *ComputerContentCaching) SetCacheDetails(v []ComputerContentCachingCacheDetail) {
	o.CacheDetails = v
}

// GetCacheBytesFree returns the CacheBytesFree field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetCacheBytesFree() int64 {
	if o == nil || o.CacheBytesFree == nil {
		var ret int64
		return ret
	}
	return *o.CacheBytesFree
}

// GetCacheBytesFreeOk returns a tuple with the CacheBytesFree field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetCacheBytesFreeOk() (*int64, bool) {
	if o == nil || o.CacheBytesFree == nil {
		return nil, false
	}
	return o.CacheBytesFree, true
}

// HasCacheBytesFree returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasCacheBytesFree() bool {
	if o != nil && o.CacheBytesFree != nil {
		return true
	}

	return false
}

// SetCacheBytesFree gets a reference to the given int64 and assigns it to the CacheBytesFree field.
func (o *ComputerContentCaching) SetCacheBytesFree(v int64) {
	o.CacheBytesFree = &v
}

// GetCacheBytesLimit returns the CacheBytesLimit field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetCacheBytesLimit() int64 {
	if o == nil || o.CacheBytesLimit == nil {
		var ret int64
		return ret
	}
	return *o.CacheBytesLimit
}

// GetCacheBytesLimitOk returns a tuple with the CacheBytesLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetCacheBytesLimitOk() (*int64, bool) {
	if o == nil || o.CacheBytesLimit == nil {
		return nil, false
	}
	return o.CacheBytesLimit, true
}

// HasCacheBytesLimit returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasCacheBytesLimit() bool {
	if o != nil && o.CacheBytesLimit != nil {
		return true
	}

	return false
}

// SetCacheBytesLimit gets a reference to the given int64 and assigns it to the CacheBytesLimit field.
func (o *ComputerContentCaching) SetCacheBytesLimit(v int64) {
	o.CacheBytesLimit = &v
}

// GetCacheStatus returns the CacheStatus field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetCacheStatus() string {
	if o == nil || o.CacheStatus == nil {
		var ret string
		return ret
	}
	return *o.CacheStatus
}

// GetCacheStatusOk returns a tuple with the CacheStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetCacheStatusOk() (*string, bool) {
	if o == nil || o.CacheStatus == nil {
		return nil, false
	}
	return o.CacheStatus, true
}

// HasCacheStatus returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasCacheStatus() bool {
	if o != nil && o.CacheStatus != nil {
		return true
	}

	return false
}

// SetCacheStatus gets a reference to the given string and assigns it to the CacheStatus field.
func (o *ComputerContentCaching) SetCacheStatus(v string) {
	o.CacheStatus = &v
}

// GetCacheBytesUsed returns the CacheBytesUsed field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetCacheBytesUsed() int64 {
	if o == nil || o.CacheBytesUsed == nil {
		var ret int64
		return ret
	}
	return *o.CacheBytesUsed
}

// GetCacheBytesUsedOk returns a tuple with the CacheBytesUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetCacheBytesUsedOk() (*int64, bool) {
	if o == nil || o.CacheBytesUsed == nil {
		return nil, false
	}
	return o.CacheBytesUsed, true
}

// HasCacheBytesUsed returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasCacheBytesUsed() bool {
	if o != nil && o.CacheBytesUsed != nil {
		return true
	}

	return false
}

// SetCacheBytesUsed gets a reference to the given int64 and assigns it to the CacheBytesUsed field.
func (o *ComputerContentCaching) SetCacheBytesUsed(v int64) {
	o.CacheBytesUsed = &v
}

// GetDataMigrationCompleted returns the DataMigrationCompleted field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetDataMigrationCompleted() bool {
	if o == nil || o.DataMigrationCompleted == nil {
		var ret bool
		return ret
	}
	return *o.DataMigrationCompleted
}

// GetDataMigrationCompletedOk returns a tuple with the DataMigrationCompleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetDataMigrationCompletedOk() (*bool, bool) {
	if o == nil || o.DataMigrationCompleted == nil {
		return nil, false
	}
	return o.DataMigrationCompleted, true
}

// HasDataMigrationCompleted returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasDataMigrationCompleted() bool {
	if o != nil && o.DataMigrationCompleted != nil {
		return true
	}

	return false
}

// SetDataMigrationCompleted gets a reference to the given bool and assigns it to the DataMigrationCompleted field.
func (o *ComputerContentCaching) SetDataMigrationCompleted(v bool) {
	o.DataMigrationCompleted = &v
}

// GetDataMigrationProgressPercentage returns the DataMigrationProgressPercentage field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetDataMigrationProgressPercentage() int32 {
	if o == nil || o.DataMigrationProgressPercentage == nil {
		var ret int32
		return ret
	}
	return *o.DataMigrationProgressPercentage
}

// GetDataMigrationProgressPercentageOk returns a tuple with the DataMigrationProgressPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetDataMigrationProgressPercentageOk() (*int32, bool) {
	if o == nil || o.DataMigrationProgressPercentage == nil {
		return nil, false
	}
	return o.DataMigrationProgressPercentage, true
}

// HasDataMigrationProgressPercentage returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasDataMigrationProgressPercentage() bool {
	if o != nil && o.DataMigrationProgressPercentage != nil {
		return true
	}

	return false
}

// SetDataMigrationProgressPercentage gets a reference to the given int32 and assigns it to the DataMigrationProgressPercentage field.
func (o *ComputerContentCaching) SetDataMigrationProgressPercentage(v int32) {
	o.DataMigrationProgressPercentage = &v
}

// GetDataMigrationError returns the DataMigrationError field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetDataMigrationError() ComputerContentCachingDataMigrationError {
	if o == nil || o.DataMigrationError == nil {
		var ret ComputerContentCachingDataMigrationError
		return ret
	}
	return *o.DataMigrationError
}

// GetDataMigrationErrorOk returns a tuple with the DataMigrationError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetDataMigrationErrorOk() (*ComputerContentCachingDataMigrationError, bool) {
	if o == nil || o.DataMigrationError == nil {
		return nil, false
	}
	return o.DataMigrationError, true
}

// HasDataMigrationError returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasDataMigrationError() bool {
	if o != nil && o.DataMigrationError != nil {
		return true
	}

	return false
}

// SetDataMigrationError gets a reference to the given ComputerContentCachingDataMigrationError and assigns it to the DataMigrationError field.
func (o *ComputerContentCaching) SetDataMigrationError(v ComputerContentCachingDataMigrationError) {
	o.DataMigrationError = &v
}

// GetMaxCachePressureLast1HourPercentage returns the MaxCachePressureLast1HourPercentage field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetMaxCachePressureLast1HourPercentage() int32 {
	if o == nil || o.MaxCachePressureLast1HourPercentage == nil {
		var ret int32
		return ret
	}
	return *o.MaxCachePressureLast1HourPercentage
}

// GetMaxCachePressureLast1HourPercentageOk returns a tuple with the MaxCachePressureLast1HourPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetMaxCachePressureLast1HourPercentageOk() (*int32, bool) {
	if o == nil || o.MaxCachePressureLast1HourPercentage == nil {
		return nil, false
	}
	return o.MaxCachePressureLast1HourPercentage, true
}

// HasMaxCachePressureLast1HourPercentage returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasMaxCachePressureLast1HourPercentage() bool {
	if o != nil && o.MaxCachePressureLast1HourPercentage != nil {
		return true
	}

	return false
}

// SetMaxCachePressureLast1HourPercentage gets a reference to the given int32 and assigns it to the MaxCachePressureLast1HourPercentage field.
func (o *ComputerContentCaching) SetMaxCachePressureLast1HourPercentage(v int32) {
	o.MaxCachePressureLast1HourPercentage = &v
}

// GetPersonalCacheBytesFree returns the PersonalCacheBytesFree field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetPersonalCacheBytesFree() int64 {
	if o == nil || o.PersonalCacheBytesFree == nil {
		var ret int64
		return ret
	}
	return *o.PersonalCacheBytesFree
}

// GetPersonalCacheBytesFreeOk returns a tuple with the PersonalCacheBytesFree field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetPersonalCacheBytesFreeOk() (*int64, bool) {
	if o == nil || o.PersonalCacheBytesFree == nil {
		return nil, false
	}
	return o.PersonalCacheBytesFree, true
}

// HasPersonalCacheBytesFree returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasPersonalCacheBytesFree() bool {
	if o != nil && o.PersonalCacheBytesFree != nil {
		return true
	}

	return false
}

// SetPersonalCacheBytesFree gets a reference to the given int64 and assigns it to the PersonalCacheBytesFree field.
func (o *ComputerContentCaching) SetPersonalCacheBytesFree(v int64) {
	o.PersonalCacheBytesFree = &v
}

// GetPersonalCacheBytesLimit returns the PersonalCacheBytesLimit field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetPersonalCacheBytesLimit() int64 {
	if o == nil || o.PersonalCacheBytesLimit == nil {
		var ret int64
		return ret
	}
	return *o.PersonalCacheBytesLimit
}

// GetPersonalCacheBytesLimitOk returns a tuple with the PersonalCacheBytesLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetPersonalCacheBytesLimitOk() (*int64, bool) {
	if o == nil || o.PersonalCacheBytesLimit == nil {
		return nil, false
	}
	return o.PersonalCacheBytesLimit, true
}

// HasPersonalCacheBytesLimit returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasPersonalCacheBytesLimit() bool {
	if o != nil && o.PersonalCacheBytesLimit != nil {
		return true
	}

	return false
}

// SetPersonalCacheBytesLimit gets a reference to the given int64 and assigns it to the PersonalCacheBytesLimit field.
func (o *ComputerContentCaching) SetPersonalCacheBytesLimit(v int64) {
	o.PersonalCacheBytesLimit = &v
}

// GetPersonalCacheBytesUsed returns the PersonalCacheBytesUsed field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetPersonalCacheBytesUsed() int64 {
	if o == nil || o.PersonalCacheBytesUsed == nil {
		var ret int64
		return ret
	}
	return *o.PersonalCacheBytesUsed
}

// GetPersonalCacheBytesUsedOk returns a tuple with the PersonalCacheBytesUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetPersonalCacheBytesUsedOk() (*int64, bool) {
	if o == nil || o.PersonalCacheBytesUsed == nil {
		return nil, false
	}
	return o.PersonalCacheBytesUsed, true
}

// HasPersonalCacheBytesUsed returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasPersonalCacheBytesUsed() bool {
	if o != nil && o.PersonalCacheBytesUsed != nil {
		return true
	}

	return false
}

// SetPersonalCacheBytesUsed gets a reference to the given int64 and assigns it to the PersonalCacheBytesUsed field.
func (o *ComputerContentCaching) SetPersonalCacheBytesUsed(v int64) {
	o.PersonalCacheBytesUsed = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetPort() int64 {
	if o == nil || o.Port == nil {
		var ret int64
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetPortOk() (*int64, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int64 and assigns it to the Port field.
func (o *ComputerContentCaching) SetPort(v int64) {
	o.Port = &v
}

// GetPublicAddress returns the PublicAddress field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetPublicAddress() string {
	if o == nil || o.PublicAddress == nil {
		var ret string
		return ret
	}
	return *o.PublicAddress
}

// GetPublicAddressOk returns a tuple with the PublicAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetPublicAddressOk() (*string, bool) {
	if o == nil || o.PublicAddress == nil {
		return nil, false
	}
	return o.PublicAddress, true
}

// HasPublicAddress returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasPublicAddress() bool {
	if o != nil && o.PublicAddress != nil {
		return true
	}

	return false
}

// SetPublicAddress gets a reference to the given string and assigns it to the PublicAddress field.
func (o *ComputerContentCaching) SetPublicAddress(v string) {
	o.PublicAddress = &v
}

// GetRegistrationError returns the RegistrationError field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetRegistrationError() string {
	if o == nil || o.RegistrationError == nil {
		var ret string
		return ret
	}
	return *o.RegistrationError
}

// GetRegistrationErrorOk returns a tuple with the RegistrationError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetRegistrationErrorOk() (*string, bool) {
	if o == nil || o.RegistrationError == nil {
		return nil, false
	}
	return o.RegistrationError, true
}

// HasRegistrationError returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasRegistrationError() bool {
	if o != nil && o.RegistrationError != nil {
		return true
	}

	return false
}

// SetRegistrationError gets a reference to the given string and assigns it to the RegistrationError field.
func (o *ComputerContentCaching) SetRegistrationError(v string) {
	o.RegistrationError = &v
}

// GetRegistrationResponseCode returns the RegistrationResponseCode field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetRegistrationResponseCode() int64 {
	if o == nil || o.RegistrationResponseCode == nil {
		var ret int64
		return ret
	}
	return *o.RegistrationResponseCode
}

// GetRegistrationResponseCodeOk returns a tuple with the RegistrationResponseCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetRegistrationResponseCodeOk() (*int64, bool) {
	if o == nil || o.RegistrationResponseCode == nil {
		return nil, false
	}
	return o.RegistrationResponseCode, true
}

// HasRegistrationResponseCode returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasRegistrationResponseCode() bool {
	if o != nil && o.RegistrationResponseCode != nil {
		return true
	}

	return false
}

// SetRegistrationResponseCode gets a reference to the given int64 and assigns it to the RegistrationResponseCode field.
func (o *ComputerContentCaching) SetRegistrationResponseCode(v int64) {
	o.RegistrationResponseCode = &v
}

// GetRegistrationStarted returns the RegistrationStarted field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetRegistrationStarted() time.Time {
	if o == nil || o.RegistrationStarted == nil {
		var ret time.Time
		return ret
	}
	return *o.RegistrationStarted
}

// GetRegistrationStartedOk returns a tuple with the RegistrationStarted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetRegistrationStartedOk() (*time.Time, bool) {
	if o == nil || o.RegistrationStarted == nil {
		return nil, false
	}
	return o.RegistrationStarted, true
}

// HasRegistrationStarted returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasRegistrationStarted() bool {
	if o != nil && o.RegistrationStarted != nil {
		return true
	}

	return false
}

// SetRegistrationStarted gets a reference to the given time.Time and assigns it to the RegistrationStarted field.
func (o *ComputerContentCaching) SetRegistrationStarted(v time.Time) {
	o.RegistrationStarted = &v
}

// GetRegistrationStatus returns the RegistrationStatus field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetRegistrationStatus() string {
	if o == nil || o.RegistrationStatus == nil {
		var ret string
		return ret
	}
	return *o.RegistrationStatus
}

// GetRegistrationStatusOk returns a tuple with the RegistrationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetRegistrationStatusOk() (*string, bool) {
	if o == nil || o.RegistrationStatus == nil {
		return nil, false
	}
	return o.RegistrationStatus, true
}

// HasRegistrationStatus returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasRegistrationStatus() bool {
	if o != nil && o.RegistrationStatus != nil {
		return true
	}

	return false
}

// SetRegistrationStatus gets a reference to the given string and assigns it to the RegistrationStatus field.
func (o *ComputerContentCaching) SetRegistrationStatus(v string) {
	o.RegistrationStatus = &v
}

// GetRestrictedMedia returns the RestrictedMedia field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetRestrictedMedia() bool {
	if o == nil || o.RestrictedMedia == nil {
		var ret bool
		return ret
	}
	return *o.RestrictedMedia
}

// GetRestrictedMediaOk returns a tuple with the RestrictedMedia field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetRestrictedMediaOk() (*bool, bool) {
	if o == nil || o.RestrictedMedia == nil {
		return nil, false
	}
	return o.RestrictedMedia, true
}

// HasRestrictedMedia returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasRestrictedMedia() bool {
	if o != nil && o.RestrictedMedia != nil {
		return true
	}

	return false
}

// SetRestrictedMedia gets a reference to the given bool and assigns it to the RestrictedMedia field.
func (o *ComputerContentCaching) SetRestrictedMedia(v bool) {
	o.RestrictedMedia = &v
}

// GetServerGuid returns the ServerGuid field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetServerGuid() string {
	if o == nil || o.ServerGuid == nil {
		var ret string
		return ret
	}
	return *o.ServerGuid
}

// GetServerGuidOk returns a tuple with the ServerGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetServerGuidOk() (*string, bool) {
	if o == nil || o.ServerGuid == nil {
		return nil, false
	}
	return o.ServerGuid, true
}

// HasServerGuid returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasServerGuid() bool {
	if o != nil && o.ServerGuid != nil {
		return true
	}

	return false
}

// SetServerGuid gets a reference to the given string and assigns it to the ServerGuid field.
func (o *ComputerContentCaching) SetServerGuid(v string) {
	o.ServerGuid = &v
}

// GetStartupStatus returns the StartupStatus field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetStartupStatus() string {
	if o == nil || o.StartupStatus == nil {
		var ret string
		return ret
	}
	return *o.StartupStatus
}

// GetStartupStatusOk returns a tuple with the StartupStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetStartupStatusOk() (*string, bool) {
	if o == nil || o.StartupStatus == nil {
		return nil, false
	}
	return o.StartupStatus, true
}

// HasStartupStatus returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasStartupStatus() bool {
	if o != nil && o.StartupStatus != nil {
		return true
	}

	return false
}

// SetStartupStatus gets a reference to the given string and assigns it to the StartupStatus field.
func (o *ComputerContentCaching) SetStartupStatus(v string) {
	o.StartupStatus = &v
}

// GetTetheratorStatus returns the TetheratorStatus field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetTetheratorStatus() string {
	if o == nil || o.TetheratorStatus == nil {
		var ret string
		return ret
	}
	return *o.TetheratorStatus
}

// GetTetheratorStatusOk returns a tuple with the TetheratorStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetTetheratorStatusOk() (*string, bool) {
	if o == nil || o.TetheratorStatus == nil {
		return nil, false
	}
	return o.TetheratorStatus, true
}

// HasTetheratorStatus returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasTetheratorStatus() bool {
	if o != nil && o.TetheratorStatus != nil {
		return true
	}

	return false
}

// SetTetheratorStatus gets a reference to the given string and assigns it to the TetheratorStatus field.
func (o *ComputerContentCaching) SetTetheratorStatus(v string) {
	o.TetheratorStatus = &v
}

// GetTotalBytesAreSince returns the TotalBytesAreSince field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetTotalBytesAreSince() time.Time {
	if o == nil || o.TotalBytesAreSince == nil {
		var ret time.Time
		return ret
	}
	return *o.TotalBytesAreSince
}

// GetTotalBytesAreSinceOk returns a tuple with the TotalBytesAreSince field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetTotalBytesAreSinceOk() (*time.Time, bool) {
	if o == nil || o.TotalBytesAreSince == nil {
		return nil, false
	}
	return o.TotalBytesAreSince, true
}

// HasTotalBytesAreSince returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasTotalBytesAreSince() bool {
	if o != nil && o.TotalBytesAreSince != nil {
		return true
	}

	return false
}

// SetTotalBytesAreSince gets a reference to the given time.Time and assigns it to the TotalBytesAreSince field.
func (o *ComputerContentCaching) SetTotalBytesAreSince(v time.Time) {
	o.TotalBytesAreSince = &v
}

// GetTotalBytesDropped returns the TotalBytesDropped field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetTotalBytesDropped() int64 {
	if o == nil || o.TotalBytesDropped == nil {
		var ret int64
		return ret
	}
	return *o.TotalBytesDropped
}

// GetTotalBytesDroppedOk returns a tuple with the TotalBytesDropped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetTotalBytesDroppedOk() (*int64, bool) {
	if o == nil || o.TotalBytesDropped == nil {
		return nil, false
	}
	return o.TotalBytesDropped, true
}

// HasTotalBytesDropped returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasTotalBytesDropped() bool {
	if o != nil && o.TotalBytesDropped != nil {
		return true
	}

	return false
}

// SetTotalBytesDropped gets a reference to the given int64 and assigns it to the TotalBytesDropped field.
func (o *ComputerContentCaching) SetTotalBytesDropped(v int64) {
	o.TotalBytesDropped = &v
}

// GetTotalBytesImported returns the TotalBytesImported field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetTotalBytesImported() int64 {
	if o == nil || o.TotalBytesImported == nil {
		var ret int64
		return ret
	}
	return *o.TotalBytesImported
}

// GetTotalBytesImportedOk returns a tuple with the TotalBytesImported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetTotalBytesImportedOk() (*int64, bool) {
	if o == nil || o.TotalBytesImported == nil {
		return nil, false
	}
	return o.TotalBytesImported, true
}

// HasTotalBytesImported returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasTotalBytesImported() bool {
	if o != nil && o.TotalBytesImported != nil {
		return true
	}

	return false
}

// SetTotalBytesImported gets a reference to the given int64 and assigns it to the TotalBytesImported field.
func (o *ComputerContentCaching) SetTotalBytesImported(v int64) {
	o.TotalBytesImported = &v
}

// GetTotalBytesReturnedToChildren returns the TotalBytesReturnedToChildren field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetTotalBytesReturnedToChildren() int64 {
	if o == nil || o.TotalBytesReturnedToChildren == nil {
		var ret int64
		return ret
	}
	return *o.TotalBytesReturnedToChildren
}

// GetTotalBytesReturnedToChildrenOk returns a tuple with the TotalBytesReturnedToChildren field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetTotalBytesReturnedToChildrenOk() (*int64, bool) {
	if o == nil || o.TotalBytesReturnedToChildren == nil {
		return nil, false
	}
	return o.TotalBytesReturnedToChildren, true
}

// HasTotalBytesReturnedToChildren returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasTotalBytesReturnedToChildren() bool {
	if o != nil && o.TotalBytesReturnedToChildren != nil {
		return true
	}

	return false
}

// SetTotalBytesReturnedToChildren gets a reference to the given int64 and assigns it to the TotalBytesReturnedToChildren field.
func (o *ComputerContentCaching) SetTotalBytesReturnedToChildren(v int64) {
	o.TotalBytesReturnedToChildren = &v
}

// GetTotalBytesReturnedToClients returns the TotalBytesReturnedToClients field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetTotalBytesReturnedToClients() int64 {
	if o == nil || o.TotalBytesReturnedToClients == nil {
		var ret int64
		return ret
	}
	return *o.TotalBytesReturnedToClients
}

// GetTotalBytesReturnedToClientsOk returns a tuple with the TotalBytesReturnedToClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetTotalBytesReturnedToClientsOk() (*int64, bool) {
	if o == nil || o.TotalBytesReturnedToClients == nil {
		return nil, false
	}
	return o.TotalBytesReturnedToClients, true
}

// HasTotalBytesReturnedToClients returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasTotalBytesReturnedToClients() bool {
	if o != nil && o.TotalBytesReturnedToClients != nil {
		return true
	}

	return false
}

// SetTotalBytesReturnedToClients gets a reference to the given int64 and assigns it to the TotalBytesReturnedToClients field.
func (o *ComputerContentCaching) SetTotalBytesReturnedToClients(v int64) {
	o.TotalBytesReturnedToClients = &v
}

// GetTotalBytesReturnedToPeers returns the TotalBytesReturnedToPeers field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetTotalBytesReturnedToPeers() int64 {
	if o == nil || o.TotalBytesReturnedToPeers == nil {
		var ret int64
		return ret
	}
	return *o.TotalBytesReturnedToPeers
}

// GetTotalBytesReturnedToPeersOk returns a tuple with the TotalBytesReturnedToPeers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetTotalBytesReturnedToPeersOk() (*int64, bool) {
	if o == nil || o.TotalBytesReturnedToPeers == nil {
		return nil, false
	}
	return o.TotalBytesReturnedToPeers, true
}

// HasTotalBytesReturnedToPeers returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasTotalBytesReturnedToPeers() bool {
	if o != nil && o.TotalBytesReturnedToPeers != nil {
		return true
	}

	return false
}

// SetTotalBytesReturnedToPeers gets a reference to the given int64 and assigns it to the TotalBytesReturnedToPeers field.
func (o *ComputerContentCaching) SetTotalBytesReturnedToPeers(v int64) {
	o.TotalBytesReturnedToPeers = &v
}

// GetTotalBytesStoredFromOrigin returns the TotalBytesStoredFromOrigin field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetTotalBytesStoredFromOrigin() int64 {
	if o == nil || o.TotalBytesStoredFromOrigin == nil {
		var ret int64
		return ret
	}
	return *o.TotalBytesStoredFromOrigin
}

// GetTotalBytesStoredFromOriginOk returns a tuple with the TotalBytesStoredFromOrigin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetTotalBytesStoredFromOriginOk() (*int64, bool) {
	if o == nil || o.TotalBytesStoredFromOrigin == nil {
		return nil, false
	}
	return o.TotalBytesStoredFromOrigin, true
}

// HasTotalBytesStoredFromOrigin returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasTotalBytesStoredFromOrigin() bool {
	if o != nil && o.TotalBytesStoredFromOrigin != nil {
		return true
	}

	return false
}

// SetTotalBytesStoredFromOrigin gets a reference to the given int64 and assigns it to the TotalBytesStoredFromOrigin field.
func (o *ComputerContentCaching) SetTotalBytesStoredFromOrigin(v int64) {
	o.TotalBytesStoredFromOrigin = &v
}

// GetTotalBytesStoredFromParents returns the TotalBytesStoredFromParents field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetTotalBytesStoredFromParents() int64 {
	if o == nil || o.TotalBytesStoredFromParents == nil {
		var ret int64
		return ret
	}
	return *o.TotalBytesStoredFromParents
}

// GetTotalBytesStoredFromParentsOk returns a tuple with the TotalBytesStoredFromParents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetTotalBytesStoredFromParentsOk() (*int64, bool) {
	if o == nil || o.TotalBytesStoredFromParents == nil {
		return nil, false
	}
	return o.TotalBytesStoredFromParents, true
}

// HasTotalBytesStoredFromParents returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasTotalBytesStoredFromParents() bool {
	if o != nil && o.TotalBytesStoredFromParents != nil {
		return true
	}

	return false
}

// SetTotalBytesStoredFromParents gets a reference to the given int64 and assigns it to the TotalBytesStoredFromParents field.
func (o *ComputerContentCaching) SetTotalBytesStoredFromParents(v int64) {
	o.TotalBytesStoredFromParents = &v
}

// GetTotalBytesStoredFromPeers returns the TotalBytesStoredFromPeers field value if set, zero value otherwise.
func (o *ComputerContentCaching) GetTotalBytesStoredFromPeers() int64 {
	if o == nil || o.TotalBytesStoredFromPeers == nil {
		var ret int64
		return ret
	}
	return *o.TotalBytesStoredFromPeers
}

// GetTotalBytesStoredFromPeersOk returns a tuple with the TotalBytesStoredFromPeers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCaching) GetTotalBytesStoredFromPeersOk() (*int64, bool) {
	if o == nil || o.TotalBytesStoredFromPeers == nil {
		return nil, false
	}
	return o.TotalBytesStoredFromPeers, true
}

// HasTotalBytesStoredFromPeers returns a boolean if a field has been set.
func (o *ComputerContentCaching) HasTotalBytesStoredFromPeers() bool {
	if o != nil && o.TotalBytesStoredFromPeers != nil {
		return true
	}

	return false
}

// SetTotalBytesStoredFromPeers gets a reference to the given int64 and assigns it to the TotalBytesStoredFromPeers field.
func (o *ComputerContentCaching) SetTotalBytesStoredFromPeers(v int64) {
	o.TotalBytesStoredFromPeers = &v
}

func (o ComputerContentCaching) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ComputerContentCachingInformationId != nil {
		toSerialize["computerContentCachingInformationId"] = o.ComputerContentCachingInformationId
	}
	if o.Parents != nil {
		toSerialize["parents"] = o.Parents
	}
	if o.Alerts != nil {
		toSerialize["alerts"] = o.Alerts
	}
	if o.Activated != nil {
		toSerialize["activated"] = o.Activated
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.ActualCacheBytesUsed != nil {
		toSerialize["actualCacheBytesUsed"] = o.ActualCacheBytesUsed
	}
	if o.CacheDetails != nil {
		toSerialize["cacheDetails"] = o.CacheDetails
	}
	if o.CacheBytesFree != nil {
		toSerialize["cacheBytesFree"] = o.CacheBytesFree
	}
	if o.CacheBytesLimit != nil {
		toSerialize["cacheBytesLimit"] = o.CacheBytesLimit
	}
	if o.CacheStatus != nil {
		toSerialize["cacheStatus"] = o.CacheStatus
	}
	if o.CacheBytesUsed != nil {
		toSerialize["cacheBytesUsed"] = o.CacheBytesUsed
	}
	if o.DataMigrationCompleted != nil {
		toSerialize["dataMigrationCompleted"] = o.DataMigrationCompleted
	}
	if o.DataMigrationProgressPercentage != nil {
		toSerialize["dataMigrationProgressPercentage"] = o.DataMigrationProgressPercentage
	}
	if o.DataMigrationError != nil {
		toSerialize["dataMigrationError"] = o.DataMigrationError
	}
	if o.MaxCachePressureLast1HourPercentage != nil {
		toSerialize["maxCachePressureLast1HourPercentage"] = o.MaxCachePressureLast1HourPercentage
	}
	if o.PersonalCacheBytesFree != nil {
		toSerialize["personalCacheBytesFree"] = o.PersonalCacheBytesFree
	}
	if o.PersonalCacheBytesLimit != nil {
		toSerialize["personalCacheBytesLimit"] = o.PersonalCacheBytesLimit
	}
	if o.PersonalCacheBytesUsed != nil {
		toSerialize["personalCacheBytesUsed"] = o.PersonalCacheBytesUsed
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	if o.PublicAddress != nil {
		toSerialize["publicAddress"] = o.PublicAddress
	}
	if o.RegistrationError != nil {
		toSerialize["registrationError"] = o.RegistrationError
	}
	if o.RegistrationResponseCode != nil {
		toSerialize["registrationResponseCode"] = o.RegistrationResponseCode
	}
	if o.RegistrationStarted != nil {
		toSerialize["registrationStarted"] = o.RegistrationStarted
	}
	if o.RegistrationStatus != nil {
		toSerialize["registrationStatus"] = o.RegistrationStatus
	}
	if o.RestrictedMedia != nil {
		toSerialize["restrictedMedia"] = o.RestrictedMedia
	}
	if o.ServerGuid != nil {
		toSerialize["serverGuid"] = o.ServerGuid
	}
	if o.StartupStatus != nil {
		toSerialize["startupStatus"] = o.StartupStatus
	}
	if o.TetheratorStatus != nil {
		toSerialize["tetheratorStatus"] = o.TetheratorStatus
	}
	if o.TotalBytesAreSince != nil {
		toSerialize["totalBytesAreSince"] = o.TotalBytesAreSince
	}
	if o.TotalBytesDropped != nil {
		toSerialize["totalBytesDropped"] = o.TotalBytesDropped
	}
	if o.TotalBytesImported != nil {
		toSerialize["totalBytesImported"] = o.TotalBytesImported
	}
	if o.TotalBytesReturnedToChildren != nil {
		toSerialize["totalBytesReturnedToChildren"] = o.TotalBytesReturnedToChildren
	}
	if o.TotalBytesReturnedToClients != nil {
		toSerialize["totalBytesReturnedToClients"] = o.TotalBytesReturnedToClients
	}
	if o.TotalBytesReturnedToPeers != nil {
		toSerialize["totalBytesReturnedToPeers"] = o.TotalBytesReturnedToPeers
	}
	if o.TotalBytesStoredFromOrigin != nil {
		toSerialize["totalBytesStoredFromOrigin"] = o.TotalBytesStoredFromOrigin
	}
	if o.TotalBytesStoredFromParents != nil {
		toSerialize["totalBytesStoredFromParents"] = o.TotalBytesStoredFromParents
	}
	if o.TotalBytesStoredFromPeers != nil {
		toSerialize["totalBytesStoredFromPeers"] = o.TotalBytesStoredFromPeers
	}
	return json.Marshal(toSerialize)
}

type NullableComputerContentCaching struct {
	value *ComputerContentCaching
	isSet bool
}

func (v NullableComputerContentCaching) Get() *ComputerContentCaching {
	return v.value
}

func (v *NullableComputerContentCaching) Set(val *ComputerContentCaching) {
	v.value = val
	v.isSet = true
}

func (v NullableComputerContentCaching) IsSet() bool {
	return v.isSet
}

func (v *NullableComputerContentCaching) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputerContentCaching(val *ComputerContentCaching) *NullableComputerContentCaching {
	return &NullableComputerContentCaching{value: val, isSet: true}
}

func (v NullableComputerContentCaching) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputerContentCaching) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


