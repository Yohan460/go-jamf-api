/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the IconResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IconResponse{}

// IconResponse struct for IconResponse
type IconResponse struct {
	Url *string `json:"url,omitempty"`
	Id *int64 `json:"id,omitempty"`
}

// NewIconResponse instantiates a new IconResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIconResponse() *IconResponse {
	this := IconResponse{}
	return &this
}

// NewIconResponseWithDefaults instantiates a new IconResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIconResponseWithDefaults() *IconResponse {
	this := IconResponse{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *IconResponse) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IconResponse) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *IconResponse) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *IconResponse) SetUrl(v string) {
	o.Url = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IconResponse) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IconResponse) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IconResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *IconResponse) SetId(v int64) {
	o.Id = &v
}

func (o IconResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IconResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return toSerialize, nil
}

type NullableIconResponse struct {
	value *IconResponse
	isSet bool
}

func (v NullableIconResponse) Get() *IconResponse {
	return v.value
}

func (v *NullableIconResponse) Set(val *IconResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableIconResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableIconResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIconResponse(val *IconResponse) *NullableIconResponse {
	return &NullableIconResponse{value: val, isSet: true}
}

func (v NullableIconResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIconResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


