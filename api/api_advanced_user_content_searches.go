/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// AdvancedUserContentSearchesApiService AdvancedUserContentSearchesApi service
type AdvancedUserContentSearchesApiService service

type ApiV1AdvancedUserContentSearchesGetRequest struct {
	ctx context.Context
	ApiService *AdvancedUserContentSearchesApiService
}

func (r ApiV1AdvancedUserContentSearchesGetRequest) Execute() (*AdvancedUserContentSearchSearchResults, *http.Response, error) {
	return r.ApiService.V1AdvancedUserContentSearchesGetExecute(r)
}

/*
V1AdvancedUserContentSearchesGet Get All Advanced User Content Search objects 

Get All Advanced User Content Search Objects


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1AdvancedUserContentSearchesGetRequest
*/
func (a *AdvancedUserContentSearchesApiService) V1AdvancedUserContentSearchesGet(ctx context.Context) ApiV1AdvancedUserContentSearchesGetRequest {
	return ApiV1AdvancedUserContentSearchesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AdvancedUserContentSearchSearchResults
func (a *AdvancedUserContentSearchesApiService) V1AdvancedUserContentSearchesGetExecute(r ApiV1AdvancedUserContentSearchesGetRequest) (*AdvancedUserContentSearchSearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AdvancedUserContentSearchSearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdvancedUserContentSearchesApiService.V1AdvancedUserContentSearchesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/advanced-user-content-searches"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1AdvancedUserContentSearchesIdDeleteRequest struct {
	ctx context.Context
	ApiService *AdvancedUserContentSearchesApiService
	id string
}

func (r ApiV1AdvancedUserContentSearchesIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1AdvancedUserContentSearchesIdDeleteExecute(r)
}

/*
V1AdvancedUserContentSearchesIdDelete Remove specified Advanced User Content Search object 

Removes specified Advanced User Content Search Object


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id instance id of Advanced User Content Search record
 @return ApiV1AdvancedUserContentSearchesIdDeleteRequest
*/
func (a *AdvancedUserContentSearchesApiService) V1AdvancedUserContentSearchesIdDelete(ctx context.Context, id string) ApiV1AdvancedUserContentSearchesIdDeleteRequest {
	return ApiV1AdvancedUserContentSearchesIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AdvancedUserContentSearchesApiService) V1AdvancedUserContentSearchesIdDeleteExecute(r ApiV1AdvancedUserContentSearchesIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdvancedUserContentSearchesApiService.V1AdvancedUserContentSearchesIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/advanced-user-content-searches/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1AdvancedUserContentSearchesIdGetRequest struct {
	ctx context.Context
	ApiService *AdvancedUserContentSearchesApiService
	id string
}

func (r ApiV1AdvancedUserContentSearchesIdGetRequest) Execute() (*AdvancedUserContentSearch, *http.Response, error) {
	return r.ApiService.V1AdvancedUserContentSearchesIdGetExecute(r)
}

/*
V1AdvancedUserContentSearchesIdGet Get Specified Advanced User Content Search object 

Gets Specified Advanced User Content Search Object


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id id of target Advanced User Content Search
 @return ApiV1AdvancedUserContentSearchesIdGetRequest
*/
func (a *AdvancedUserContentSearchesApiService) V1AdvancedUserContentSearchesIdGet(ctx context.Context, id string) ApiV1AdvancedUserContentSearchesIdGetRequest {
	return ApiV1AdvancedUserContentSearchesIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AdvancedUserContentSearch
func (a *AdvancedUserContentSearchesApiService) V1AdvancedUserContentSearchesIdGetExecute(r ApiV1AdvancedUserContentSearchesIdGetRequest) (*AdvancedUserContentSearch, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AdvancedUserContentSearch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdvancedUserContentSearchesApiService.V1AdvancedUserContentSearchesIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/advanced-user-content-searches/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1AdvancedUserContentSearchesIdPutRequest struct {
	ctx context.Context
	ApiService *AdvancedUserContentSearchesApiService
	id string
	advancedUserContentSearch *AdvancedUserContentSearch
}

func (r ApiV1AdvancedUserContentSearchesIdPutRequest) AdvancedUserContentSearch(advancedUserContentSearch AdvancedUserContentSearch) ApiV1AdvancedUserContentSearchesIdPutRequest {
	r.advancedUserContentSearch = &advancedUserContentSearch
	return r
}

func (r ApiV1AdvancedUserContentSearchesIdPutRequest) Execute() (*AdvancedUserContentSearch, *http.Response, error) {
	return r.ApiService.V1AdvancedUserContentSearchesIdPutExecute(r)
}

/*
V1AdvancedUserContentSearchesIdPut Get Specified Advanced User Content Search object 

Gets Specified Advanced User Content Search Object


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id id of target Advanced User Content Search
 @return ApiV1AdvancedUserContentSearchesIdPutRequest
*/
func (a *AdvancedUserContentSearchesApiService) V1AdvancedUserContentSearchesIdPut(ctx context.Context, id string) ApiV1AdvancedUserContentSearchesIdPutRequest {
	return ApiV1AdvancedUserContentSearchesIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AdvancedUserContentSearch
func (a *AdvancedUserContentSearchesApiService) V1AdvancedUserContentSearchesIdPutExecute(r ApiV1AdvancedUserContentSearchesIdPutRequest) (*AdvancedUserContentSearch, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AdvancedUserContentSearch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdvancedUserContentSearchesApiService.V1AdvancedUserContentSearchesIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/advanced-user-content-searches/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.advancedUserContentSearch == nil {
		return localVarReturnValue, nil, reportError("advancedUserContentSearch is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.advancedUserContentSearch
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1AdvancedUserContentSearchesPostRequest struct {
	ctx context.Context
	ApiService *AdvancedUserContentSearchesApiService
	advancedUserContentSearch *AdvancedUserContentSearch
}

func (r ApiV1AdvancedUserContentSearchesPostRequest) AdvancedUserContentSearch(advancedUserContentSearch AdvancedUserContentSearch) ApiV1AdvancedUserContentSearchesPostRequest {
	r.advancedUserContentSearch = &advancedUserContentSearch
	return r
}

func (r ApiV1AdvancedUserContentSearchesPostRequest) Execute() (*HrefResponse, *http.Response, error) {
	return r.ApiService.V1AdvancedUserContentSearchesPostExecute(r)
}

/*
V1AdvancedUserContentSearchesPost Create Advanced User Content Search object 

Creates Advanced User Content Search Object


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1AdvancedUserContentSearchesPostRequest
*/
func (a *AdvancedUserContentSearchesApiService) V1AdvancedUserContentSearchesPost(ctx context.Context) ApiV1AdvancedUserContentSearchesPostRequest {
	return ApiV1AdvancedUserContentSearchesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HrefResponse
func (a *AdvancedUserContentSearchesApiService) V1AdvancedUserContentSearchesPostExecute(r ApiV1AdvancedUserContentSearchesPostRequest) (*HrefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HrefResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdvancedUserContentSearchesApiService.V1AdvancedUserContentSearchesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/advanced-user-content-searches"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.advancedUserContentSearch == nil {
		return localVarReturnValue, nil, reportError("advancedUserContentSearch is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.advancedUserContentSearch
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
