/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type SchedulerAPI interface {

	/*
	V1SchedulerJobsGet Retrieve all Jamf Pro Scheduler jobs

	Retrieves the names of all Jamf Pro Scheduler jobs

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SchedulerAPIV1SchedulerJobsGetRequest
	*/
	V1SchedulerJobsGet(ctx context.Context) SchedulerAPIV1SchedulerJobsGetRequest

	// V1SchedulerJobsGetExecute executes the request
	//  @return SchedulerJobs
	V1SchedulerJobsGetExecute(r SchedulerAPIV1SchedulerJobsGetRequest) (*SchedulerJobs, *http.Response, error)

	/*
	V1SchedulerJobsJobKeyTriggersGet Retrieve all triggers for a Jamf Pro Scheduler job

	Retrieves all triggers for a Jamf Pro Scheduler job

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param jobKey Jamf Pro Scheduler Job Key
	@return SchedulerAPIV1SchedulerJobsJobKeyTriggersGetRequest
	*/
	V1SchedulerJobsJobKeyTriggersGet(ctx context.Context, jobKey string) SchedulerAPIV1SchedulerJobsJobKeyTriggersGetRequest

	// V1SchedulerJobsJobKeyTriggersGetExecute executes the request
	//  @return SchedulerJob
	V1SchedulerJobsJobKeyTriggersGetExecute(r SchedulerAPIV1SchedulerJobsJobKeyTriggersGetRequest) (*SchedulerJob, *http.Response, error)

	/*
	V1SchedulerSummaryGet Retrieve a summary of the Jamf Pro Scheduler

	Retrieves a summary of the Jamf Pro Scheduler

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SchedulerAPIV1SchedulerSummaryGetRequest
	*/
	V1SchedulerSummaryGet(ctx context.Context) SchedulerAPIV1SchedulerSummaryGetRequest

	// V1SchedulerSummaryGetExecute executes the request
	//  @return SchedulerSummary
	V1SchedulerSummaryGetExecute(r SchedulerAPIV1SchedulerSummaryGetRequest) (*SchedulerSummary, *http.Response, error)
}

// SchedulerAPIService SchedulerAPI service
type SchedulerAPIService service

type SchedulerAPIV1SchedulerJobsGetRequest struct {
	ctx context.Context
	ApiService SchedulerAPI
}

func (r SchedulerAPIV1SchedulerJobsGetRequest) Execute() (*SchedulerJobs, *http.Response, error) {
	return r.ApiService.V1SchedulerJobsGetExecute(r)
}

/*
V1SchedulerJobsGet Retrieve all Jamf Pro Scheduler jobs

Retrieves the names of all Jamf Pro Scheduler jobs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SchedulerAPIV1SchedulerJobsGetRequest
*/
func (a *SchedulerAPIService) V1SchedulerJobsGet(ctx context.Context) SchedulerAPIV1SchedulerJobsGetRequest {
	return SchedulerAPIV1SchedulerJobsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SchedulerJobs
func (a *SchedulerAPIService) V1SchedulerJobsGetExecute(r SchedulerAPIV1SchedulerJobsGetRequest) (*SchedulerJobs, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SchedulerJobs
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SchedulerAPIService.V1SchedulerJobsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/scheduler/jobs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SchedulerAPIV1SchedulerJobsJobKeyTriggersGetRequest struct {
	ctx context.Context
	ApiService SchedulerAPI
	jobKey string
	page *int64
	pageSize *int64
	sort *[]string
	filter *string
}

func (r SchedulerAPIV1SchedulerJobsJobKeyTriggersGetRequest) Page(page int64) SchedulerAPIV1SchedulerJobsJobKeyTriggersGetRequest {
	r.page = &page
	return r
}

func (r SchedulerAPIV1SchedulerJobsJobKeyTriggersGetRequest) PageSize(pageSize int64) SchedulerAPIV1SchedulerJobsJobKeyTriggersGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorts results by one or more criteria, following the format property:asc/desc. Default sort is nextFireTime:asc. If using multiple criteria, separate with commas.
func (r SchedulerAPIV1SchedulerJobsJobKeyTriggersGetRequest) Sort(sort []string) SchedulerAPIV1SchedulerJobsJobKeyTriggersGetRequest {
	r.sort = &sort
	return r
}

// Query in the RSQL format, allowing to filter the Jamf Pro Scheduler triggers collection. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: triggerKey, previousFireTime, nextFireTime.
func (r SchedulerAPIV1SchedulerJobsJobKeyTriggersGetRequest) Filter(filter string) SchedulerAPIV1SchedulerJobsJobKeyTriggersGetRequest {
	r.filter = &filter
	return r
}

func (r SchedulerAPIV1SchedulerJobsJobKeyTriggersGetRequest) Execute() (*SchedulerJob, *http.Response, error) {
	return r.ApiService.V1SchedulerJobsJobKeyTriggersGetExecute(r)
}

/*
V1SchedulerJobsJobKeyTriggersGet Retrieve all triggers for a Jamf Pro Scheduler job

Retrieves all triggers for a Jamf Pro Scheduler job

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param jobKey Jamf Pro Scheduler Job Key
 @return SchedulerAPIV1SchedulerJobsJobKeyTriggersGetRequest
*/
func (a *SchedulerAPIService) V1SchedulerJobsJobKeyTriggersGet(ctx context.Context, jobKey string) SchedulerAPIV1SchedulerJobsJobKeyTriggersGetRequest {
	return SchedulerAPIV1SchedulerJobsJobKeyTriggersGetRequest{
		ApiService: a,
		ctx: ctx,
		jobKey: jobKey,
	}
}

// Execute executes the request
//  @return SchedulerJob
func (a *SchedulerAPIService) V1SchedulerJobsJobKeyTriggersGetExecute(r SchedulerAPIV1SchedulerJobsJobKeyTriggersGetRequest) (*SchedulerJob, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SchedulerJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SchedulerAPIService.V1SchedulerJobsJobKeyTriggersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/scheduler/jobs/{jobKey}/triggers"
	localVarPath = strings.Replace(localVarPath, "{"+"jobKey"+"}", url.PathEscape(parameterValueToString(r.jobKey, "jobKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int64 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int64 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		defaultValue := []string{"nextFireTime:asc"}
		r.sort = &defaultValue
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	} else {
		var defaultValue string = ""
		r.filter = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SchedulerAPIV1SchedulerSummaryGetRequest struct {
	ctx context.Context
	ApiService SchedulerAPI
}

func (r SchedulerAPIV1SchedulerSummaryGetRequest) Execute() (*SchedulerSummary, *http.Response, error) {
	return r.ApiService.V1SchedulerSummaryGetExecute(r)
}

/*
V1SchedulerSummaryGet Retrieve a summary of the Jamf Pro Scheduler

Retrieves a summary of the Jamf Pro Scheduler

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SchedulerAPIV1SchedulerSummaryGetRequest
*/
func (a *SchedulerAPIService) V1SchedulerSummaryGet(ctx context.Context) SchedulerAPIV1SchedulerSummaryGetRequest {
	return SchedulerAPIV1SchedulerSummaryGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SchedulerSummary
func (a *SchedulerAPIService) V1SchedulerSummaryGetExecute(r SchedulerAPIV1SchedulerSummaryGetRequest) (*SchedulerSummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SchedulerSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SchedulerAPIService.V1SchedulerSummaryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/scheduler/summary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
