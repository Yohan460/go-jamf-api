/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// AdvancedSearchCriteriaChoices struct for AdvancedSearchCriteriaChoices
type AdvancedSearchCriteriaChoices struct {
	Choices []string `json:"choices,omitempty"`
}

// NewAdvancedSearchCriteriaChoices instantiates a new AdvancedSearchCriteriaChoices object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvancedSearchCriteriaChoices() *AdvancedSearchCriteriaChoices {
	this := AdvancedSearchCriteriaChoices{}
	return &this
}

// NewAdvancedSearchCriteriaChoicesWithDefaults instantiates a new AdvancedSearchCriteriaChoices object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvancedSearchCriteriaChoicesWithDefaults() *AdvancedSearchCriteriaChoices {
	this := AdvancedSearchCriteriaChoices{}
	return &this
}

// GetChoices returns the Choices field value if set, zero value otherwise.
func (o *AdvancedSearchCriteriaChoices) GetChoices() []string {
	if o == nil || o.Choices == nil {
		var ret []string
		return ret
	}
	return o.Choices
}

// GetChoicesOk returns a tuple with the Choices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedSearchCriteriaChoices) GetChoicesOk() ([]string, bool) {
	if o == nil || o.Choices == nil {
		return nil, false
	}
	return o.Choices, true
}

// HasChoices returns a boolean if a field has been set.
func (o *AdvancedSearchCriteriaChoices) HasChoices() bool {
	if o != nil && o.Choices != nil {
		return true
	}

	return false
}

// SetChoices gets a reference to the given []string and assigns it to the Choices field.
func (o *AdvancedSearchCriteriaChoices) SetChoices(v []string) {
	o.Choices = v
}

func (o AdvancedSearchCriteriaChoices) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Choices != nil {
		toSerialize["choices"] = o.Choices
	}
	return json.Marshal(toSerialize)
}

type NullableAdvancedSearchCriteriaChoices struct {
	value *AdvancedSearchCriteriaChoices
	isSet bool
}

func (v NullableAdvancedSearchCriteriaChoices) Get() *AdvancedSearchCriteriaChoices {
	return v.value
}

func (v *NullableAdvancedSearchCriteriaChoices) Set(val *AdvancedSearchCriteriaChoices) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvancedSearchCriteriaChoices) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvancedSearchCriteriaChoices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvancedSearchCriteriaChoices(val *AdvancedSearchCriteriaChoices) *NullableAdvancedSearchCriteriaChoices {
	return &NullableAdvancedSearchCriteriaChoices{value: val, isSet: true}
}

func (v NullableAdvancedSearchCriteriaChoices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvancedSearchCriteriaChoices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


