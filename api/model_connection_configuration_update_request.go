/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ConnectionConfigurationUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionConfigurationUpdateRequest{}

// ConnectionConfigurationUpdateRequest Request that updates configuration connection between Jamf Pro and Team Viewer
type ConnectionConfigurationUpdateRequest struct {
	// Name for Team Viewer Connection Configuration
	DisplayName *string `json:"displayName,omitempty"`
	// Defines the intent to enable or disable Team Viewer connection
	Enabled *bool `json:"enabled,omitempty"`
	// Number of minutes before the session expires
	SessionTimeout *int64 `json:"sessionTimeout,omitempty"`
	// Script token for Team Viewer Connection Configuration
	Token *string `json:"token,omitempty"`
}

// NewConnectionConfigurationUpdateRequest instantiates a new ConnectionConfigurationUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionConfigurationUpdateRequest() *ConnectionConfigurationUpdateRequest {
	this := ConnectionConfigurationUpdateRequest{}
	return &this
}

// NewConnectionConfigurationUpdateRequestWithDefaults instantiates a new ConnectionConfigurationUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionConfigurationUpdateRequestWithDefaults() *ConnectionConfigurationUpdateRequest {
	this := ConnectionConfigurationUpdateRequest{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ConnectionConfigurationUpdateRequest) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionConfigurationUpdateRequest) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ConnectionConfigurationUpdateRequest) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ConnectionConfigurationUpdateRequest) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ConnectionConfigurationUpdateRequest) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionConfigurationUpdateRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ConnectionConfigurationUpdateRequest) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ConnectionConfigurationUpdateRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetSessionTimeout returns the SessionTimeout field value if set, zero value otherwise.
func (o *ConnectionConfigurationUpdateRequest) GetSessionTimeout() int64 {
	if o == nil || IsNil(o.SessionTimeout) {
		var ret int64
		return ret
	}
	return *o.SessionTimeout
}

// GetSessionTimeoutOk returns a tuple with the SessionTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionConfigurationUpdateRequest) GetSessionTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.SessionTimeout) {
		return nil, false
	}
	return o.SessionTimeout, true
}

// HasSessionTimeout returns a boolean if a field has been set.
func (o *ConnectionConfigurationUpdateRequest) HasSessionTimeout() bool {
	if o != nil && !IsNil(o.SessionTimeout) {
		return true
	}

	return false
}

// SetSessionTimeout gets a reference to the given int64 and assigns it to the SessionTimeout field.
func (o *ConnectionConfigurationUpdateRequest) SetSessionTimeout(v int64) {
	o.SessionTimeout = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *ConnectionConfigurationUpdateRequest) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionConfigurationUpdateRequest) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *ConnectionConfigurationUpdateRequest) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *ConnectionConfigurationUpdateRequest) SetToken(v string) {
	o.Token = &v
}

func (o ConnectionConfigurationUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionConfigurationUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.SessionTimeout) {
		toSerialize["sessionTimeout"] = o.SessionTimeout
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	return toSerialize, nil
}

type NullableConnectionConfigurationUpdateRequest struct {
	value *ConnectionConfigurationUpdateRequest
	isSet bool
}

func (v NullableConnectionConfigurationUpdateRequest) Get() *ConnectionConfigurationUpdateRequest {
	return v.value
}

func (v *NullableConnectionConfigurationUpdateRequest) Set(val *ConnectionConfigurationUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionConfigurationUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionConfigurationUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionConfigurationUpdateRequest(val *ConnectionConfigurationUpdateRequest) *NullableConnectionConfigurationUpdateRequest {
	return &NullableConnectionConfigurationUpdateRequest{value: val, isSet: true}
}

func (v NullableConnectionConfigurationUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionConfigurationUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


