/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the MobileDevicePrestageName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MobileDevicePrestageName{}

// MobileDevicePrestageName struct for MobileDevicePrestageName
type MobileDevicePrestageName struct {
	Id *int32 `json:"id,omitempty"`
	DeviceName *string `json:"deviceName,omitempty"`
	IsUsed *bool `json:"isUsed,omitempty"`
}

// NewMobileDevicePrestageName instantiates a new MobileDevicePrestageName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMobileDevicePrestageName() *MobileDevicePrestageName {
	this := MobileDevicePrestageName{}
	return &this
}

// NewMobileDevicePrestageNameWithDefaults instantiates a new MobileDevicePrestageName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMobileDevicePrestageNameWithDefaults() *MobileDevicePrestageName {
	this := MobileDevicePrestageName{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MobileDevicePrestageName) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDevicePrestageName) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MobileDevicePrestageName) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *MobileDevicePrestageName) SetId(v int32) {
	o.Id = &v
}

// GetDeviceName returns the DeviceName field value if set, zero value otherwise.
func (o *MobileDevicePrestageName) GetDeviceName() string {
	if o == nil || IsNil(o.DeviceName) {
		var ret string
		return ret
	}
	return *o.DeviceName
}

// GetDeviceNameOk returns a tuple with the DeviceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDevicePrestageName) GetDeviceNameOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceName) {
		return nil, false
	}
	return o.DeviceName, true
}

// HasDeviceName returns a boolean if a field has been set.
func (o *MobileDevicePrestageName) HasDeviceName() bool {
	if o != nil && !IsNil(o.DeviceName) {
		return true
	}

	return false
}

// SetDeviceName gets a reference to the given string and assigns it to the DeviceName field.
func (o *MobileDevicePrestageName) SetDeviceName(v string) {
	o.DeviceName = &v
}

// GetIsUsed returns the IsUsed field value if set, zero value otherwise.
func (o *MobileDevicePrestageName) GetIsUsed() bool {
	if o == nil || IsNil(o.IsUsed) {
		var ret bool
		return ret
	}
	return *o.IsUsed
}

// GetIsUsedOk returns a tuple with the IsUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDevicePrestageName) GetIsUsedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsUsed) {
		return nil, false
	}
	return o.IsUsed, true
}

// HasIsUsed returns a boolean if a field has been set.
func (o *MobileDevicePrestageName) HasIsUsed() bool {
	if o != nil && !IsNil(o.IsUsed) {
		return true
	}

	return false
}

// SetIsUsed gets a reference to the given bool and assigns it to the IsUsed field.
func (o *MobileDevicePrestageName) SetIsUsed(v bool) {
	o.IsUsed = &v
}

func (o MobileDevicePrestageName) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MobileDevicePrestageName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.DeviceName) {
		toSerialize["deviceName"] = o.DeviceName
	}
	if !IsNil(o.IsUsed) {
		toSerialize["isUsed"] = o.IsUsed
	}
	return toSerialize, nil
}

type NullableMobileDevicePrestageName struct {
	value *MobileDevicePrestageName
	isSet bool
}

func (v NullableMobileDevicePrestageName) Get() *MobileDevicePrestageName {
	return v.value
}

func (v *NullableMobileDevicePrestageName) Set(val *MobileDevicePrestageName) {
	v.value = val
	v.isSet = true
}

func (v NullableMobileDevicePrestageName) IsSet() bool {
	return v.isSet
}

func (v *NullableMobileDevicePrestageName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMobileDevicePrestageName(val *MobileDevicePrestageName) *NullableMobileDevicePrestageName {
	return &NullableMobileDevicePrestageName{value: val, isSet: true}
}

func (v NullableMobileDevicePrestageName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMobileDevicePrestageName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


