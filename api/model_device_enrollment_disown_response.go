/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the DeviceEnrollmentDisownResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceEnrollmentDisownResponse{}

// DeviceEnrollmentDisownResponse struct for DeviceEnrollmentDisownResponse
type DeviceEnrollmentDisownResponse struct {
	Devices *map[string]string `json:"devices,omitempty"`
}

// NewDeviceEnrollmentDisownResponse instantiates a new DeviceEnrollmentDisownResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceEnrollmentDisownResponse() *DeviceEnrollmentDisownResponse {
	this := DeviceEnrollmentDisownResponse{}
	return &this
}

// NewDeviceEnrollmentDisownResponseWithDefaults instantiates a new DeviceEnrollmentDisownResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceEnrollmentDisownResponseWithDefaults() *DeviceEnrollmentDisownResponse {
	this := DeviceEnrollmentDisownResponse{}
	return &this
}

// GetDevices returns the Devices field value if set, zero value otherwise.
func (o *DeviceEnrollmentDisownResponse) GetDevices() map[string]string {
	if o == nil || IsNil(o.Devices) {
		var ret map[string]string
		return ret
	}
	return *o.Devices
}

// GetDevicesOk returns a tuple with the Devices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceEnrollmentDisownResponse) GetDevicesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Devices) {
		return nil, false
	}
	return o.Devices, true
}

// HasDevices returns a boolean if a field has been set.
func (o *DeviceEnrollmentDisownResponse) HasDevices() bool {
	if o != nil && !IsNil(o.Devices) {
		return true
	}

	return false
}

// SetDevices gets a reference to the given map[string]string and assigns it to the Devices field.
func (o *DeviceEnrollmentDisownResponse) SetDevices(v map[string]string) {
	o.Devices = &v
}

func (o DeviceEnrollmentDisownResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceEnrollmentDisownResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Devices) {
		toSerialize["devices"] = o.Devices
	}
	return toSerialize, nil
}

type NullableDeviceEnrollmentDisownResponse struct {
	value *DeviceEnrollmentDisownResponse
	isSet bool
}

func (v NullableDeviceEnrollmentDisownResponse) Get() *DeviceEnrollmentDisownResponse {
	return v.value
}

func (v *NullableDeviceEnrollmentDisownResponse) Set(val *DeviceEnrollmentDisownResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceEnrollmentDisownResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceEnrollmentDisownResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceEnrollmentDisownResponse(val *DeviceEnrollmentDisownResponse) *NullableDeviceEnrollmentDisownResponse {
	return &NullableDeviceEnrollmentDisownResponse{value: val, isSet: true}
}

func (v NullableDeviceEnrollmentDisownResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceEnrollmentDisownResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


