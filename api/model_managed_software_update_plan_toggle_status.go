/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ManagedSoftwareUpdatePlanToggleStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagedSoftwareUpdatePlanToggleStatus{}

// ManagedSoftwareUpdatePlanToggleStatus struct for ManagedSoftwareUpdatePlanToggleStatus
type ManagedSoftwareUpdatePlanToggleStatus struct {
	// The local server time when the toggle was initiated. Null if state is NEVER_RAN
	StartTime NullableString `json:"startTime,omitempty"`
	// The local server time when the toggle was completed. Null if state is NEVER_RAN
	EndTime NullableString `json:"endTime,omitempty"`
	// Duration in seconds between the start time and end time. \"Now\" is used when end time is null. Null if state is NEVER_RAN
	ElapsedTime NullableInt64 `json:"elapsedTime,omitempty"`
	// The current state of the toggle
	State *string `json:"state,omitempty"`
	// The total number of records that will be deleted
	TotalRecords *int64 `json:"totalRecords,omitempty"`
	// The total number of records that have been deleted
	ProcessedRecords *int64 `json:"processedRecords,omitempty"`
	// The percentage between total and completed records.
	PercentComplete *float64 `json:"percentComplete,omitempty"`
	// Pretty print of total, processed, and percentage complete
	FormattedPercentComplete *string `json:"formattedPercentComplete,omitempty"`
	// Troubleshooting - The exit status code from the toggle processing job. \"Unknown\" will return when the toggle is running.
	ExitState *string `json:"exitState,omitempty"`
	// Troubleshooting - The exit message of the toggle job if it encounters an exception while running. Nominal return is an empty string
	ExitMessage *string `json:"exitMessage,omitempty"`
}

// NewManagedSoftwareUpdatePlanToggleStatus instantiates a new ManagedSoftwareUpdatePlanToggleStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagedSoftwareUpdatePlanToggleStatus() *ManagedSoftwareUpdatePlanToggleStatus {
	this := ManagedSoftwareUpdatePlanToggleStatus{}
	return &this
}

// NewManagedSoftwareUpdatePlanToggleStatusWithDefaults instantiates a new ManagedSoftwareUpdatePlanToggleStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagedSoftwareUpdatePlanToggleStatusWithDefaults() *ManagedSoftwareUpdatePlanToggleStatus {
	this := ManagedSoftwareUpdatePlanToggleStatus{}
	return &this
}

// GetStartTime returns the StartTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagedSoftwareUpdatePlanToggleStatus) GetStartTime() string {
	if o == nil || IsNil(o.StartTime.Get()) {
		var ret string
		return ret
	}
	return *o.StartTime.Get()
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedSoftwareUpdatePlanToggleStatus) GetStartTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartTime.Get(), o.StartTime.IsSet()
}

// HasStartTime returns a boolean if a field has been set.
func (o *ManagedSoftwareUpdatePlanToggleStatus) HasStartTime() bool {
	if o != nil && o.StartTime.IsSet() {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given NullableString and assigns it to the StartTime field.
func (o *ManagedSoftwareUpdatePlanToggleStatus) SetStartTime(v string) {
	o.StartTime.Set(&v)
}
// SetStartTimeNil sets the value for StartTime to be an explicit nil
func (o *ManagedSoftwareUpdatePlanToggleStatus) SetStartTimeNil() {
	o.StartTime.Set(nil)
}

// UnsetStartTime ensures that no value is present for StartTime, not even an explicit nil
func (o *ManagedSoftwareUpdatePlanToggleStatus) UnsetStartTime() {
	o.StartTime.Unset()
}

// GetEndTime returns the EndTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagedSoftwareUpdatePlanToggleStatus) GetEndTime() string {
	if o == nil || IsNil(o.EndTime.Get()) {
		var ret string
		return ret
	}
	return *o.EndTime.Get()
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedSoftwareUpdatePlanToggleStatus) GetEndTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndTime.Get(), o.EndTime.IsSet()
}

// HasEndTime returns a boolean if a field has been set.
func (o *ManagedSoftwareUpdatePlanToggleStatus) HasEndTime() bool {
	if o != nil && o.EndTime.IsSet() {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given NullableString and assigns it to the EndTime field.
func (o *ManagedSoftwareUpdatePlanToggleStatus) SetEndTime(v string) {
	o.EndTime.Set(&v)
}
// SetEndTimeNil sets the value for EndTime to be an explicit nil
func (o *ManagedSoftwareUpdatePlanToggleStatus) SetEndTimeNil() {
	o.EndTime.Set(nil)
}

// UnsetEndTime ensures that no value is present for EndTime, not even an explicit nil
func (o *ManagedSoftwareUpdatePlanToggleStatus) UnsetEndTime() {
	o.EndTime.Unset()
}

// GetElapsedTime returns the ElapsedTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagedSoftwareUpdatePlanToggleStatus) GetElapsedTime() int64 {
	if o == nil || IsNil(o.ElapsedTime.Get()) {
		var ret int64
		return ret
	}
	return *o.ElapsedTime.Get()
}

// GetElapsedTimeOk returns a tuple with the ElapsedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedSoftwareUpdatePlanToggleStatus) GetElapsedTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ElapsedTime.Get(), o.ElapsedTime.IsSet()
}

// HasElapsedTime returns a boolean if a field has been set.
func (o *ManagedSoftwareUpdatePlanToggleStatus) HasElapsedTime() bool {
	if o != nil && o.ElapsedTime.IsSet() {
		return true
	}

	return false
}

// SetElapsedTime gets a reference to the given NullableInt64 and assigns it to the ElapsedTime field.
func (o *ManagedSoftwareUpdatePlanToggleStatus) SetElapsedTime(v int64) {
	o.ElapsedTime.Set(&v)
}
// SetElapsedTimeNil sets the value for ElapsedTime to be an explicit nil
func (o *ManagedSoftwareUpdatePlanToggleStatus) SetElapsedTimeNil() {
	o.ElapsedTime.Set(nil)
}

// UnsetElapsedTime ensures that no value is present for ElapsedTime, not even an explicit nil
func (o *ManagedSoftwareUpdatePlanToggleStatus) UnsetElapsedTime() {
	o.ElapsedTime.Unset()
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ManagedSoftwareUpdatePlanToggleStatus) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedSoftwareUpdatePlanToggleStatus) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ManagedSoftwareUpdatePlanToggleStatus) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *ManagedSoftwareUpdatePlanToggleStatus) SetState(v string) {
	o.State = &v
}

// GetTotalRecords returns the TotalRecords field value if set, zero value otherwise.
func (o *ManagedSoftwareUpdatePlanToggleStatus) GetTotalRecords() int64 {
	if o == nil || IsNil(o.TotalRecords) {
		var ret int64
		return ret
	}
	return *o.TotalRecords
}

// GetTotalRecordsOk returns a tuple with the TotalRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedSoftwareUpdatePlanToggleStatus) GetTotalRecordsOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalRecords) {
		return nil, false
	}
	return o.TotalRecords, true
}

// HasTotalRecords returns a boolean if a field has been set.
func (o *ManagedSoftwareUpdatePlanToggleStatus) HasTotalRecords() bool {
	if o != nil && !IsNil(o.TotalRecords) {
		return true
	}

	return false
}

// SetTotalRecords gets a reference to the given int64 and assigns it to the TotalRecords field.
func (o *ManagedSoftwareUpdatePlanToggleStatus) SetTotalRecords(v int64) {
	o.TotalRecords = &v
}

// GetProcessedRecords returns the ProcessedRecords field value if set, zero value otherwise.
func (o *ManagedSoftwareUpdatePlanToggleStatus) GetProcessedRecords() int64 {
	if o == nil || IsNil(o.ProcessedRecords) {
		var ret int64
		return ret
	}
	return *o.ProcessedRecords
}

// GetProcessedRecordsOk returns a tuple with the ProcessedRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedSoftwareUpdatePlanToggleStatus) GetProcessedRecordsOk() (*int64, bool) {
	if o == nil || IsNil(o.ProcessedRecords) {
		return nil, false
	}
	return o.ProcessedRecords, true
}

// HasProcessedRecords returns a boolean if a field has been set.
func (o *ManagedSoftwareUpdatePlanToggleStatus) HasProcessedRecords() bool {
	if o != nil && !IsNil(o.ProcessedRecords) {
		return true
	}

	return false
}

// SetProcessedRecords gets a reference to the given int64 and assigns it to the ProcessedRecords field.
func (o *ManagedSoftwareUpdatePlanToggleStatus) SetProcessedRecords(v int64) {
	o.ProcessedRecords = &v
}

// GetPercentComplete returns the PercentComplete field value if set, zero value otherwise.
func (o *ManagedSoftwareUpdatePlanToggleStatus) GetPercentComplete() float64 {
	if o == nil || IsNil(o.PercentComplete) {
		var ret float64
		return ret
	}
	return *o.PercentComplete
}

// GetPercentCompleteOk returns a tuple with the PercentComplete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedSoftwareUpdatePlanToggleStatus) GetPercentCompleteOk() (*float64, bool) {
	if o == nil || IsNil(o.PercentComplete) {
		return nil, false
	}
	return o.PercentComplete, true
}

// HasPercentComplete returns a boolean if a field has been set.
func (o *ManagedSoftwareUpdatePlanToggleStatus) HasPercentComplete() bool {
	if o != nil && !IsNil(o.PercentComplete) {
		return true
	}

	return false
}

// SetPercentComplete gets a reference to the given float64 and assigns it to the PercentComplete field.
func (o *ManagedSoftwareUpdatePlanToggleStatus) SetPercentComplete(v float64) {
	o.PercentComplete = &v
}

// GetFormattedPercentComplete returns the FormattedPercentComplete field value if set, zero value otherwise.
func (o *ManagedSoftwareUpdatePlanToggleStatus) GetFormattedPercentComplete() string {
	if o == nil || IsNil(o.FormattedPercentComplete) {
		var ret string
		return ret
	}
	return *o.FormattedPercentComplete
}

// GetFormattedPercentCompleteOk returns a tuple with the FormattedPercentComplete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedSoftwareUpdatePlanToggleStatus) GetFormattedPercentCompleteOk() (*string, bool) {
	if o == nil || IsNil(o.FormattedPercentComplete) {
		return nil, false
	}
	return o.FormattedPercentComplete, true
}

// HasFormattedPercentComplete returns a boolean if a field has been set.
func (o *ManagedSoftwareUpdatePlanToggleStatus) HasFormattedPercentComplete() bool {
	if o != nil && !IsNil(o.FormattedPercentComplete) {
		return true
	}

	return false
}

// SetFormattedPercentComplete gets a reference to the given string and assigns it to the FormattedPercentComplete field.
func (o *ManagedSoftwareUpdatePlanToggleStatus) SetFormattedPercentComplete(v string) {
	o.FormattedPercentComplete = &v
}

// GetExitState returns the ExitState field value if set, zero value otherwise.
func (o *ManagedSoftwareUpdatePlanToggleStatus) GetExitState() string {
	if o == nil || IsNil(o.ExitState) {
		var ret string
		return ret
	}
	return *o.ExitState
}

// GetExitStateOk returns a tuple with the ExitState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedSoftwareUpdatePlanToggleStatus) GetExitStateOk() (*string, bool) {
	if o == nil || IsNil(o.ExitState) {
		return nil, false
	}
	return o.ExitState, true
}

// HasExitState returns a boolean if a field has been set.
func (o *ManagedSoftwareUpdatePlanToggleStatus) HasExitState() bool {
	if o != nil && !IsNil(o.ExitState) {
		return true
	}

	return false
}

// SetExitState gets a reference to the given string and assigns it to the ExitState field.
func (o *ManagedSoftwareUpdatePlanToggleStatus) SetExitState(v string) {
	o.ExitState = &v
}

// GetExitMessage returns the ExitMessage field value if set, zero value otherwise.
func (o *ManagedSoftwareUpdatePlanToggleStatus) GetExitMessage() string {
	if o == nil || IsNil(o.ExitMessage) {
		var ret string
		return ret
	}
	return *o.ExitMessage
}

// GetExitMessageOk returns a tuple with the ExitMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedSoftwareUpdatePlanToggleStatus) GetExitMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ExitMessage) {
		return nil, false
	}
	return o.ExitMessage, true
}

// HasExitMessage returns a boolean if a field has been set.
func (o *ManagedSoftwareUpdatePlanToggleStatus) HasExitMessage() bool {
	if o != nil && !IsNil(o.ExitMessage) {
		return true
	}

	return false
}

// SetExitMessage gets a reference to the given string and assigns it to the ExitMessage field.
func (o *ManagedSoftwareUpdatePlanToggleStatus) SetExitMessage(v string) {
	o.ExitMessage = &v
}

func (o ManagedSoftwareUpdatePlanToggleStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagedSoftwareUpdatePlanToggleStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.StartTime.IsSet() {
		toSerialize["startTime"] = o.StartTime.Get()
	}
	if o.EndTime.IsSet() {
		toSerialize["endTime"] = o.EndTime.Get()
	}
	if o.ElapsedTime.IsSet() {
		toSerialize["elapsedTime"] = o.ElapsedTime.Get()
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.TotalRecords) {
		toSerialize["totalRecords"] = o.TotalRecords
	}
	if !IsNil(o.ProcessedRecords) {
		toSerialize["processedRecords"] = o.ProcessedRecords
	}
	if !IsNil(o.PercentComplete) {
		toSerialize["percentComplete"] = o.PercentComplete
	}
	if !IsNil(o.FormattedPercentComplete) {
		toSerialize["formattedPercentComplete"] = o.FormattedPercentComplete
	}
	if !IsNil(o.ExitState) {
		toSerialize["exitState"] = o.ExitState
	}
	if !IsNil(o.ExitMessage) {
		toSerialize["exitMessage"] = o.ExitMessage
	}
	return toSerialize, nil
}

type NullableManagedSoftwareUpdatePlanToggleStatus struct {
	value *ManagedSoftwareUpdatePlanToggleStatus
	isSet bool
}

func (v NullableManagedSoftwareUpdatePlanToggleStatus) Get() *ManagedSoftwareUpdatePlanToggleStatus {
	return v.value
}

func (v *NullableManagedSoftwareUpdatePlanToggleStatus) Set(val *ManagedSoftwareUpdatePlanToggleStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedSoftwareUpdatePlanToggleStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedSoftwareUpdatePlanToggleStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedSoftwareUpdatePlanToggleStatus(val *ManagedSoftwareUpdatePlanToggleStatus) *NullableManagedSoftwareUpdatePlanToggleStatus {
	return &NullableManagedSoftwareUpdatePlanToggleStatus{value: val, isSet: true}
}

func (v NullableManagedSoftwareUpdatePlanToggleStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedSoftwareUpdatePlanToggleStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


