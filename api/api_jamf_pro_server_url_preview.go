/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type JamfProServerUrlPreviewAPI interface {

	/*
	V1JamfProServerUrlGet Get Jamf Pro Server URL settings 

	Get Jamf Pro Server URL settings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return JamfProServerUrlPreviewAPIV1JamfProServerUrlGetRequest
	*/
	V1JamfProServerUrlGet(ctx context.Context) JamfProServerUrlPreviewAPIV1JamfProServerUrlGetRequest

	// V1JamfProServerUrlGetExecute executes the request
	//  @return JamfProServerUrl
	V1JamfProServerUrlGetExecute(r JamfProServerUrlPreviewAPIV1JamfProServerUrlGetRequest) (*JamfProServerUrl, *http.Response, error)

	/*
	V1JamfProServerUrlHistoryGet Get Jamf Pro Server URL settings history 

	Gets Jamf Pro Server URL settings history

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return JamfProServerUrlPreviewAPIV1JamfProServerUrlHistoryGetRequest
	*/
	V1JamfProServerUrlHistoryGet(ctx context.Context) JamfProServerUrlPreviewAPIV1JamfProServerUrlHistoryGetRequest

	// V1JamfProServerUrlHistoryGetExecute executes the request
	//  @return HistorySearchResults
	V1JamfProServerUrlHistoryGetExecute(r JamfProServerUrlPreviewAPIV1JamfProServerUrlHistoryGetRequest) (*HistorySearchResults, *http.Response, error)

	/*
	V1JamfProServerUrlHistoryPost Add Jamf Pro Server URL settings history notes 

	Adds Jamf Pro Server URL settings history notes

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return JamfProServerUrlPreviewAPIV1JamfProServerUrlHistoryPostRequest
	*/
	V1JamfProServerUrlHistoryPost(ctx context.Context) JamfProServerUrlPreviewAPIV1JamfProServerUrlHistoryPostRequest

	// V1JamfProServerUrlHistoryPostExecute executes the request
	//  @return ObjectHistory
	V1JamfProServerUrlHistoryPostExecute(r JamfProServerUrlPreviewAPIV1JamfProServerUrlHistoryPostRequest) (*ObjectHistory, *http.Response, error)

	/*
	V1JamfProServerUrlPut Update Jamf Pro Server URL settings 

	Update Jamf Pro Server URL settings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return JamfProServerUrlPreviewAPIV1JamfProServerUrlPutRequest
	*/
	V1JamfProServerUrlPut(ctx context.Context) JamfProServerUrlPreviewAPIV1JamfProServerUrlPutRequest

	// V1JamfProServerUrlPutExecute executes the request
	//  @return JamfProServerUrl
	V1JamfProServerUrlPutExecute(r JamfProServerUrlPreviewAPIV1JamfProServerUrlPutRequest) (*JamfProServerUrl, *http.Response, error)
}

// JamfProServerUrlPreviewAPIService JamfProServerUrlPreviewAPI service
type JamfProServerUrlPreviewAPIService service

type JamfProServerUrlPreviewAPIV1JamfProServerUrlGetRequest struct {
	ctx context.Context
	ApiService JamfProServerUrlPreviewAPI
}

func (r JamfProServerUrlPreviewAPIV1JamfProServerUrlGetRequest) Execute() (*JamfProServerUrl, *http.Response, error) {
	return r.ApiService.V1JamfProServerUrlGetExecute(r)
}

/*
V1JamfProServerUrlGet Get Jamf Pro Server URL settings 

Get Jamf Pro Server URL settings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return JamfProServerUrlPreviewAPIV1JamfProServerUrlGetRequest
*/
func (a *JamfProServerUrlPreviewAPIService) V1JamfProServerUrlGet(ctx context.Context) JamfProServerUrlPreviewAPIV1JamfProServerUrlGetRequest {
	return JamfProServerUrlPreviewAPIV1JamfProServerUrlGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return JamfProServerUrl
func (a *JamfProServerUrlPreviewAPIService) V1JamfProServerUrlGetExecute(r JamfProServerUrlPreviewAPIV1JamfProServerUrlGetRequest) (*JamfProServerUrl, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JamfProServerUrl
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JamfProServerUrlPreviewAPIService.V1JamfProServerUrlGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/jamf-pro-server-url"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type JamfProServerUrlPreviewAPIV1JamfProServerUrlHistoryGetRequest struct {
	ctx context.Context
	ApiService JamfProServerUrlPreviewAPI
	page *int64
	size *int64
	pagesize *int64
	pageSize *int64
	sort *string
}

func (r JamfProServerUrlPreviewAPIV1JamfProServerUrlHistoryGetRequest) Page(page int64) JamfProServerUrlPreviewAPIV1JamfProServerUrlHistoryGetRequest {
	r.page = &page
	return r
}

// Deprecated
func (r JamfProServerUrlPreviewAPIV1JamfProServerUrlHistoryGetRequest) Size(size int64) JamfProServerUrlPreviewAPIV1JamfProServerUrlHistoryGetRequest {
	r.size = &size
	return r
}

// Deprecated
func (r JamfProServerUrlPreviewAPIV1JamfProServerUrlHistoryGetRequest) Pagesize(pagesize int64) JamfProServerUrlPreviewAPIV1JamfProServerUrlHistoryGetRequest {
	r.pagesize = &pagesize
	return r
}

func (r JamfProServerUrlPreviewAPIV1JamfProServerUrlHistoryGetRequest) PageSize(pageSize int64) JamfProServerUrlPreviewAPIV1JamfProServerUrlHistoryGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Default sort is date:desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc 
func (r JamfProServerUrlPreviewAPIV1JamfProServerUrlHistoryGetRequest) Sort(sort string) JamfProServerUrlPreviewAPIV1JamfProServerUrlHistoryGetRequest {
	r.sort = &sort
	return r
}

func (r JamfProServerUrlPreviewAPIV1JamfProServerUrlHistoryGetRequest) Execute() (*HistorySearchResults, *http.Response, error) {
	return r.ApiService.V1JamfProServerUrlHistoryGetExecute(r)
}

/*
V1JamfProServerUrlHistoryGet Get Jamf Pro Server URL settings history 

Gets Jamf Pro Server URL settings history

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return JamfProServerUrlPreviewAPIV1JamfProServerUrlHistoryGetRequest
*/
func (a *JamfProServerUrlPreviewAPIService) V1JamfProServerUrlHistoryGet(ctx context.Context) JamfProServerUrlPreviewAPIV1JamfProServerUrlHistoryGetRequest {
	return JamfProServerUrlPreviewAPIV1JamfProServerUrlHistoryGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HistorySearchResults
func (a *JamfProServerUrlPreviewAPIService) V1JamfProServerUrlHistoryGetExecute(r JamfProServerUrlPreviewAPIV1JamfProServerUrlHistoryGetRequest) (*HistorySearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HistorySearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JamfProServerUrlPreviewAPIService.V1JamfProServerUrlHistoryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/jamf-pro-server-url/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int64 = 0
		r.page = &defaultValue
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	} else {
		var defaultValue int64 = 100
		r.size = &defaultValue
	}
	if r.pagesize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pagesize", r.pagesize, "")
	} else {
		var defaultValue int64 = 100
		r.pagesize = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int64 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	} else {
		var defaultValue string = "date:desc"
		r.sort = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type JamfProServerUrlPreviewAPIV1JamfProServerUrlHistoryPostRequest struct {
	ctx context.Context
	ApiService JamfProServerUrlPreviewAPI
	objectHistoryNote *ObjectHistoryNote
}

// History notes to create
func (r JamfProServerUrlPreviewAPIV1JamfProServerUrlHistoryPostRequest) ObjectHistoryNote(objectHistoryNote ObjectHistoryNote) JamfProServerUrlPreviewAPIV1JamfProServerUrlHistoryPostRequest {
	r.objectHistoryNote = &objectHistoryNote
	return r
}

func (r JamfProServerUrlPreviewAPIV1JamfProServerUrlHistoryPostRequest) Execute() (*ObjectHistory, *http.Response, error) {
	return r.ApiService.V1JamfProServerUrlHistoryPostExecute(r)
}

/*
V1JamfProServerUrlHistoryPost Add Jamf Pro Server URL settings history notes 

Adds Jamf Pro Server URL settings history notes

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return JamfProServerUrlPreviewAPIV1JamfProServerUrlHistoryPostRequest
*/
func (a *JamfProServerUrlPreviewAPIService) V1JamfProServerUrlHistoryPost(ctx context.Context) JamfProServerUrlPreviewAPIV1JamfProServerUrlHistoryPostRequest {
	return JamfProServerUrlPreviewAPIV1JamfProServerUrlHistoryPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ObjectHistory
func (a *JamfProServerUrlPreviewAPIService) V1JamfProServerUrlHistoryPostExecute(r JamfProServerUrlPreviewAPIV1JamfProServerUrlHistoryPostRequest) (*ObjectHistory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectHistory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JamfProServerUrlPreviewAPIService.V1JamfProServerUrlHistoryPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/jamf-pro-server-url/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.objectHistoryNote == nil {
		return localVarReturnValue, nil, reportError("objectHistoryNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.objectHistoryNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type JamfProServerUrlPreviewAPIV1JamfProServerUrlPutRequest struct {
	ctx context.Context
	ApiService JamfProServerUrlPreviewAPI
	jamfProServerUrl *JamfProServerUrl
}

// Jamf Pro Server URL settings object
func (r JamfProServerUrlPreviewAPIV1JamfProServerUrlPutRequest) JamfProServerUrl(jamfProServerUrl JamfProServerUrl) JamfProServerUrlPreviewAPIV1JamfProServerUrlPutRequest {
	r.jamfProServerUrl = &jamfProServerUrl
	return r
}

func (r JamfProServerUrlPreviewAPIV1JamfProServerUrlPutRequest) Execute() (*JamfProServerUrl, *http.Response, error) {
	return r.ApiService.V1JamfProServerUrlPutExecute(r)
}

/*
V1JamfProServerUrlPut Update Jamf Pro Server URL settings 

Update Jamf Pro Server URL settings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return JamfProServerUrlPreviewAPIV1JamfProServerUrlPutRequest
*/
func (a *JamfProServerUrlPreviewAPIService) V1JamfProServerUrlPut(ctx context.Context) JamfProServerUrlPreviewAPIV1JamfProServerUrlPutRequest {
	return JamfProServerUrlPreviewAPIV1JamfProServerUrlPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return JamfProServerUrl
func (a *JamfProServerUrlPreviewAPIService) V1JamfProServerUrlPutExecute(r JamfProServerUrlPreviewAPIV1JamfProServerUrlPutRequest) (*JamfProServerUrl, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JamfProServerUrl
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JamfProServerUrlPreviewAPIService.V1JamfProServerUrlPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/jamf-pro-server-url"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.jamfProServerUrl == nil {
		return localVarReturnValue, nil, reportError("jamfProServerUrl is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jamfProServerUrl
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
