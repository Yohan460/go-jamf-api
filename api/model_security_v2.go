/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the SecurityV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityV2{}

// SecurityV2 struct for SecurityV2
type SecurityV2 struct {
	DataProtected *bool `json:"dataProtected,omitempty"`
	BlockLevelEncryptionCapable *bool `json:"blockLevelEncryptionCapable,omitempty"`
	FileLevelEncryptionCapable *bool `json:"fileLevelEncryptionCapable,omitempty"`
	PasscodePresent *bool `json:"passcodePresent,omitempty"`
	PasscodeCompliant *bool `json:"passcodeCompliant,omitempty"`
	PasscodeCompliantWithProfile *bool `json:"passcodeCompliantWithProfile,omitempty"`
	HardwareEncryption *int64 `json:"hardwareEncryption,omitempty"`
	ActivationLockEnabled *bool `json:"activationLockEnabled,omitempty"`
	JailBreakDetected *bool `json:"jailBreakDetected,omitempty"`
}

// NewSecurityV2 instantiates a new SecurityV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityV2() *SecurityV2 {
	this := SecurityV2{}
	return &this
}

// NewSecurityV2WithDefaults instantiates a new SecurityV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityV2WithDefaults() *SecurityV2 {
	this := SecurityV2{}
	return &this
}

// GetDataProtected returns the DataProtected field value if set, zero value otherwise.
func (o *SecurityV2) GetDataProtected() bool {
	if o == nil || IsNil(o.DataProtected) {
		var ret bool
		return ret
	}
	return *o.DataProtected
}

// GetDataProtectedOk returns a tuple with the DataProtected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityV2) GetDataProtectedOk() (*bool, bool) {
	if o == nil || IsNil(o.DataProtected) {
		return nil, false
	}
	return o.DataProtected, true
}

// HasDataProtected returns a boolean if a field has been set.
func (o *SecurityV2) HasDataProtected() bool {
	if o != nil && !IsNil(o.DataProtected) {
		return true
	}

	return false
}

// SetDataProtected gets a reference to the given bool and assigns it to the DataProtected field.
func (o *SecurityV2) SetDataProtected(v bool) {
	o.DataProtected = &v
}

// GetBlockLevelEncryptionCapable returns the BlockLevelEncryptionCapable field value if set, zero value otherwise.
func (o *SecurityV2) GetBlockLevelEncryptionCapable() bool {
	if o == nil || IsNil(o.BlockLevelEncryptionCapable) {
		var ret bool
		return ret
	}
	return *o.BlockLevelEncryptionCapable
}

// GetBlockLevelEncryptionCapableOk returns a tuple with the BlockLevelEncryptionCapable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityV2) GetBlockLevelEncryptionCapableOk() (*bool, bool) {
	if o == nil || IsNil(o.BlockLevelEncryptionCapable) {
		return nil, false
	}
	return o.BlockLevelEncryptionCapable, true
}

// HasBlockLevelEncryptionCapable returns a boolean if a field has been set.
func (o *SecurityV2) HasBlockLevelEncryptionCapable() bool {
	if o != nil && !IsNil(o.BlockLevelEncryptionCapable) {
		return true
	}

	return false
}

// SetBlockLevelEncryptionCapable gets a reference to the given bool and assigns it to the BlockLevelEncryptionCapable field.
func (o *SecurityV2) SetBlockLevelEncryptionCapable(v bool) {
	o.BlockLevelEncryptionCapable = &v
}

// GetFileLevelEncryptionCapable returns the FileLevelEncryptionCapable field value if set, zero value otherwise.
func (o *SecurityV2) GetFileLevelEncryptionCapable() bool {
	if o == nil || IsNil(o.FileLevelEncryptionCapable) {
		var ret bool
		return ret
	}
	return *o.FileLevelEncryptionCapable
}

// GetFileLevelEncryptionCapableOk returns a tuple with the FileLevelEncryptionCapable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityV2) GetFileLevelEncryptionCapableOk() (*bool, bool) {
	if o == nil || IsNil(o.FileLevelEncryptionCapable) {
		return nil, false
	}
	return o.FileLevelEncryptionCapable, true
}

// HasFileLevelEncryptionCapable returns a boolean if a field has been set.
func (o *SecurityV2) HasFileLevelEncryptionCapable() bool {
	if o != nil && !IsNil(o.FileLevelEncryptionCapable) {
		return true
	}

	return false
}

// SetFileLevelEncryptionCapable gets a reference to the given bool and assigns it to the FileLevelEncryptionCapable field.
func (o *SecurityV2) SetFileLevelEncryptionCapable(v bool) {
	o.FileLevelEncryptionCapable = &v
}

// GetPasscodePresent returns the PasscodePresent field value if set, zero value otherwise.
func (o *SecurityV2) GetPasscodePresent() bool {
	if o == nil || IsNil(o.PasscodePresent) {
		var ret bool
		return ret
	}
	return *o.PasscodePresent
}

// GetPasscodePresentOk returns a tuple with the PasscodePresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityV2) GetPasscodePresentOk() (*bool, bool) {
	if o == nil || IsNil(o.PasscodePresent) {
		return nil, false
	}
	return o.PasscodePresent, true
}

// HasPasscodePresent returns a boolean if a field has been set.
func (o *SecurityV2) HasPasscodePresent() bool {
	if o != nil && !IsNil(o.PasscodePresent) {
		return true
	}

	return false
}

// SetPasscodePresent gets a reference to the given bool and assigns it to the PasscodePresent field.
func (o *SecurityV2) SetPasscodePresent(v bool) {
	o.PasscodePresent = &v
}

// GetPasscodeCompliant returns the PasscodeCompliant field value if set, zero value otherwise.
func (o *SecurityV2) GetPasscodeCompliant() bool {
	if o == nil || IsNil(o.PasscodeCompliant) {
		var ret bool
		return ret
	}
	return *o.PasscodeCompliant
}

// GetPasscodeCompliantOk returns a tuple with the PasscodeCompliant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityV2) GetPasscodeCompliantOk() (*bool, bool) {
	if o == nil || IsNil(o.PasscodeCompliant) {
		return nil, false
	}
	return o.PasscodeCompliant, true
}

// HasPasscodeCompliant returns a boolean if a field has been set.
func (o *SecurityV2) HasPasscodeCompliant() bool {
	if o != nil && !IsNil(o.PasscodeCompliant) {
		return true
	}

	return false
}

// SetPasscodeCompliant gets a reference to the given bool and assigns it to the PasscodeCompliant field.
func (o *SecurityV2) SetPasscodeCompliant(v bool) {
	o.PasscodeCompliant = &v
}

// GetPasscodeCompliantWithProfile returns the PasscodeCompliantWithProfile field value if set, zero value otherwise.
func (o *SecurityV2) GetPasscodeCompliantWithProfile() bool {
	if o == nil || IsNil(o.PasscodeCompliantWithProfile) {
		var ret bool
		return ret
	}
	return *o.PasscodeCompliantWithProfile
}

// GetPasscodeCompliantWithProfileOk returns a tuple with the PasscodeCompliantWithProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityV2) GetPasscodeCompliantWithProfileOk() (*bool, bool) {
	if o == nil || IsNil(o.PasscodeCompliantWithProfile) {
		return nil, false
	}
	return o.PasscodeCompliantWithProfile, true
}

// HasPasscodeCompliantWithProfile returns a boolean if a field has been set.
func (o *SecurityV2) HasPasscodeCompliantWithProfile() bool {
	if o != nil && !IsNil(o.PasscodeCompliantWithProfile) {
		return true
	}

	return false
}

// SetPasscodeCompliantWithProfile gets a reference to the given bool and assigns it to the PasscodeCompliantWithProfile field.
func (o *SecurityV2) SetPasscodeCompliantWithProfile(v bool) {
	o.PasscodeCompliantWithProfile = &v
}

// GetHardwareEncryption returns the HardwareEncryption field value if set, zero value otherwise.
func (o *SecurityV2) GetHardwareEncryption() int64 {
	if o == nil || IsNil(o.HardwareEncryption) {
		var ret int64
		return ret
	}
	return *o.HardwareEncryption
}

// GetHardwareEncryptionOk returns a tuple with the HardwareEncryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityV2) GetHardwareEncryptionOk() (*int64, bool) {
	if o == nil || IsNil(o.HardwareEncryption) {
		return nil, false
	}
	return o.HardwareEncryption, true
}

// HasHardwareEncryption returns a boolean if a field has been set.
func (o *SecurityV2) HasHardwareEncryption() bool {
	if o != nil && !IsNil(o.HardwareEncryption) {
		return true
	}

	return false
}

// SetHardwareEncryption gets a reference to the given int64 and assigns it to the HardwareEncryption field.
func (o *SecurityV2) SetHardwareEncryption(v int64) {
	o.HardwareEncryption = &v
}

// GetActivationLockEnabled returns the ActivationLockEnabled field value if set, zero value otherwise.
func (o *SecurityV2) GetActivationLockEnabled() bool {
	if o == nil || IsNil(o.ActivationLockEnabled) {
		var ret bool
		return ret
	}
	return *o.ActivationLockEnabled
}

// GetActivationLockEnabledOk returns a tuple with the ActivationLockEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityV2) GetActivationLockEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ActivationLockEnabled) {
		return nil, false
	}
	return o.ActivationLockEnabled, true
}

// HasActivationLockEnabled returns a boolean if a field has been set.
func (o *SecurityV2) HasActivationLockEnabled() bool {
	if o != nil && !IsNil(o.ActivationLockEnabled) {
		return true
	}

	return false
}

// SetActivationLockEnabled gets a reference to the given bool and assigns it to the ActivationLockEnabled field.
func (o *SecurityV2) SetActivationLockEnabled(v bool) {
	o.ActivationLockEnabled = &v
}

// GetJailBreakDetected returns the JailBreakDetected field value if set, zero value otherwise.
func (o *SecurityV2) GetJailBreakDetected() bool {
	if o == nil || IsNil(o.JailBreakDetected) {
		var ret bool
		return ret
	}
	return *o.JailBreakDetected
}

// GetJailBreakDetectedOk returns a tuple with the JailBreakDetected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityV2) GetJailBreakDetectedOk() (*bool, bool) {
	if o == nil || IsNil(o.JailBreakDetected) {
		return nil, false
	}
	return o.JailBreakDetected, true
}

// HasJailBreakDetected returns a boolean if a field has been set.
func (o *SecurityV2) HasJailBreakDetected() bool {
	if o != nil && !IsNil(o.JailBreakDetected) {
		return true
	}

	return false
}

// SetJailBreakDetected gets a reference to the given bool and assigns it to the JailBreakDetected field.
func (o *SecurityV2) SetJailBreakDetected(v bool) {
	o.JailBreakDetected = &v
}

func (o SecurityV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataProtected) {
		toSerialize["dataProtected"] = o.DataProtected
	}
	if !IsNil(o.BlockLevelEncryptionCapable) {
		toSerialize["blockLevelEncryptionCapable"] = o.BlockLevelEncryptionCapable
	}
	if !IsNil(o.FileLevelEncryptionCapable) {
		toSerialize["fileLevelEncryptionCapable"] = o.FileLevelEncryptionCapable
	}
	if !IsNil(o.PasscodePresent) {
		toSerialize["passcodePresent"] = o.PasscodePresent
	}
	if !IsNil(o.PasscodeCompliant) {
		toSerialize["passcodeCompliant"] = o.PasscodeCompliant
	}
	if !IsNil(o.PasscodeCompliantWithProfile) {
		toSerialize["passcodeCompliantWithProfile"] = o.PasscodeCompliantWithProfile
	}
	if !IsNil(o.HardwareEncryption) {
		toSerialize["hardwareEncryption"] = o.HardwareEncryption
	}
	if !IsNil(o.ActivationLockEnabled) {
		toSerialize["activationLockEnabled"] = o.ActivationLockEnabled
	}
	if !IsNil(o.JailBreakDetected) {
		toSerialize["jailBreakDetected"] = o.JailBreakDetected
	}
	return toSerialize, nil
}

type NullableSecurityV2 struct {
	value *SecurityV2
	isSet bool
}

func (v NullableSecurityV2) Get() *SecurityV2 {
	return v.value
}

func (v *NullableSecurityV2) Set(val *SecurityV2) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityV2) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityV2(val *SecurityV2) *NullableSecurityV2 {
	return &NullableSecurityV2{value: val, isSet: true}
}

func (v NullableSecurityV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


