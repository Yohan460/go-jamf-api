/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type CloudLdapAPI interface {

	/*
	V1LdapKeystoreVerifyPost Validate keystore for Cloud Identity Provider secure connection

	Validate keystore for Cloud Identity Provider secure connection

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return CloudLdapAPIV1LdapKeystoreVerifyPostRequest
	*/
	V1LdapKeystoreVerifyPost(ctx context.Context) CloudLdapAPIV1LdapKeystoreVerifyPostRequest

	// V1LdapKeystoreVerifyPostExecute executes the request
	//  @return CloudLdapKeystore
	V1LdapKeystoreVerifyPostExecute(r CloudLdapAPIV1LdapKeystoreVerifyPostRequest) (*CloudLdapKeystore, *http.Response, error)

	/*
	V2CloudLdapsDefaultsProviderMappingsGet Get default mappings

	Get default mappings for Cloud Identity Provider Provider.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param provider Cloud Identity Provider name
	@return CloudLdapAPIV2CloudLdapsDefaultsProviderMappingsGetRequest
	*/
	V2CloudLdapsDefaultsProviderMappingsGet(ctx context.Context, provider string) CloudLdapAPIV2CloudLdapsDefaultsProviderMappingsGetRequest

	// V2CloudLdapsDefaultsProviderMappingsGetExecute executes the request
	//  @return CloudLdapMappingsResponse
	V2CloudLdapsDefaultsProviderMappingsGetExecute(r CloudLdapAPIV2CloudLdapsDefaultsProviderMappingsGetRequest) (*CloudLdapMappingsResponse, *http.Response, error)

	/*
	V2CloudLdapsDefaultsProviderServerConfigurationGet Get default server configuration

	Get default server configuration for Cloud Identity Provider Identity Provider.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param provider Cloud Identity Provider name
	@return CloudLdapAPIV2CloudLdapsDefaultsProviderServerConfigurationGetRequest
	*/
	V2CloudLdapsDefaultsProviderServerConfigurationGet(ctx context.Context, provider string) CloudLdapAPIV2CloudLdapsDefaultsProviderServerConfigurationGetRequest

	// V2CloudLdapsDefaultsProviderServerConfigurationGetExecute executes the request
	//  @return CloudLdapServerResponse
	V2CloudLdapsDefaultsProviderServerConfigurationGetExecute(r CloudLdapAPIV2CloudLdapsDefaultsProviderServerConfigurationGetRequest) (*CloudLdapServerResponse, *http.Response, error)

	/*
	V2CloudLdapsIdConnectionBindGet Get bind connection pool statistics

	Get all search connection pool for chosen Cloud Identity Provider.
numConnectionsClosedDefunct - The number of connections that have been closed as defunct.
numConnectionsClosedExpired - The number of connections that have been closed because they were expired.
numConnectionsClosedUnneeded - The number of connections that have been closed because they were no longer needed.
numFailedCheckouts - The number of failed attempts to check out a connection from the pool.
numFailedConnectionAttempts - The number of failed attempts to create a connection for use in the pool.
numReleasedValid - The number of valid connections released back to the pool.
numSuccessfulCheckouts - The number of successful attempts to check out a connection from the pool.
numSuccessfulCheckoutsNewConnection - The number of successful checkout attempts that had to create a new connection because none were available.
numSuccessfulConnectionAttempts - The number successful attempts to create a connection for use in the pool.
maximumAvailableConnections - The maximum number of connections that may be available in the pool at any time.
numSuccessfulCheckoutsWithoutWait - The number of successful checkout attempts that were able to take an existing connection without waiting.
numSuccessfulCheckoutsAfterWait - The number of successful checkout attempts that retrieved a connection from the pool after waiting for it to become available.
numAvailableConnections - The number of connections currently available for use in the pool.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Cloud Identity Provider identifier
	@return CloudLdapAPIV2CloudLdapsIdConnectionBindGetRequest
	*/
	V2CloudLdapsIdConnectionBindGet(ctx context.Context, id string) CloudLdapAPIV2CloudLdapsIdConnectionBindGetRequest

	// V2CloudLdapsIdConnectionBindGetExecute executes the request
	//  @return CloudLdapConnectionPoolStatistics
	V2CloudLdapsIdConnectionBindGetExecute(r CloudLdapAPIV2CloudLdapsIdConnectionBindGetRequest) (*CloudLdapConnectionPoolStatistics, *http.Response, error)

	/*
	V2CloudLdapsIdConnectionSearchGet Get search connection pool statistics

	Get all search connection pool for chosen Cloud Identity Provider.
numConnectionsClosedDefunct - The number of connections that have been closed as defunct.
numConnectionsClosedExpired - The number of connections that have been closed because they were expired.
numConnectionsClosedUnneeded - The number of connections that have been closed because they were no longer needed.
numFailedCheckouts - The number of failed attempts to check out a connection from the pool.
numFailedConnectionAttempts - The number of failed attempts to create a connection for use in the pool.
numReleasedValid - The number of valid connections released back to the pool.
numSuccessfulCheckouts - The number of successful attempts to check out a connection from the pool.
numSuccessfulCheckoutsNewConnection - The number of successful checkout attempts that had to create a new connection because none were available.
numSuccessfulConnectionAttempts - The number successful attempts to create a connection for use in the pool.
maximumAvailableConnections - The maximum number of connections that may be available in the pool at any time.
numSuccessfulCheckoutsWithoutWait - The number of successful checkout attempts that were able to take an existing connection without waiting.
numSuccessfulCheckoutsAfterWait - The number of successful checkout attempts that retrieved a connection from the pool after waiting for it to become available.
numAvailableConnections - The number of connections currently available for use in the pool.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Cloud Identity Provider identifier
	@return CloudLdapAPIV2CloudLdapsIdConnectionSearchGetRequest
	*/
	V2CloudLdapsIdConnectionSearchGet(ctx context.Context, id string) CloudLdapAPIV2CloudLdapsIdConnectionSearchGetRequest

	// V2CloudLdapsIdConnectionSearchGetExecute executes the request
	//  @return CloudLdapConnectionPoolStatistics
	V2CloudLdapsIdConnectionSearchGetExecute(r CloudLdapAPIV2CloudLdapsIdConnectionSearchGetRequest) (*CloudLdapConnectionPoolStatistics, *http.Response, error)

	/*
	V2CloudLdapsIdConnectionStatusGet Tests the communication with the specified cloud connection 

	Tests the communication with the specified cloud connection


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Cloud Identity Provider identifier
	@return CloudLdapAPIV2CloudLdapsIdConnectionStatusGetRequest
	*/
	V2CloudLdapsIdConnectionStatusGet(ctx context.Context, id string) CloudLdapAPIV2CloudLdapsIdConnectionStatusGetRequest

	// V2CloudLdapsIdConnectionStatusGetExecute executes the request
	//  @return CloudLdapConnectionStatus
	V2CloudLdapsIdConnectionStatusGetExecute(r CloudLdapAPIV2CloudLdapsIdConnectionStatusGetRequest) (*CloudLdapConnectionStatus, *http.Response, error)

	/*
	V2CloudLdapsIdDelete Delete Cloud Identity Provider configuration.

	Delete Cloud Identity Provider configuration.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Cloud Identity Provider identifier
	@return CloudLdapAPIV2CloudLdapsIdDeleteRequest
	*/
	V2CloudLdapsIdDelete(ctx context.Context, id string) CloudLdapAPIV2CloudLdapsIdDeleteRequest

	// V2CloudLdapsIdDeleteExecute executes the request
	V2CloudLdapsIdDeleteExecute(r CloudLdapAPIV2CloudLdapsIdDeleteRequest) (*http.Response, error)

	/*
	V2CloudLdapsIdGet Get Cloud Identity Provider configuration with given id.

	Get Cloud Identity Provider configuration with given id.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Cloud Identity Provider identifier
	@return CloudLdapAPIV2CloudLdapsIdGetRequest
	*/
	V2CloudLdapsIdGet(ctx context.Context, id string) CloudLdapAPIV2CloudLdapsIdGetRequest

	// V2CloudLdapsIdGetExecute executes the request
	//  @return LdapConfigurationResponse
	V2CloudLdapsIdGetExecute(r CloudLdapAPIV2CloudLdapsIdGetRequest) (*LdapConfigurationResponse, *http.Response, error)

	/*
	V2CloudLdapsIdMappingsGet Get mappings configurations for Cloud Identity Providers server configuration.

	Get all mappings configurations for Cloud Identity Providers server configuration.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Cloud Identity Provider identifier
	@return CloudLdapAPIV2CloudLdapsIdMappingsGetRequest
	*/
	V2CloudLdapsIdMappingsGet(ctx context.Context, id string) CloudLdapAPIV2CloudLdapsIdMappingsGetRequest

	// V2CloudLdapsIdMappingsGetExecute executes the request
	//  @return CloudLdapMappingsResponse
	V2CloudLdapsIdMappingsGetExecute(r CloudLdapAPIV2CloudLdapsIdMappingsGetRequest) (*CloudLdapMappingsResponse, *http.Response, error)

	/*
	V2CloudLdapsIdMappingsPut Update Cloud Identity Provider mappings configuration.

	Update Cloud Identity Provider mappings configuration. Cannot be used for partial updates, all content body must be sent.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Cloud Identity Provider identifier
	@return CloudLdapAPIV2CloudLdapsIdMappingsPutRequest
	*/
	V2CloudLdapsIdMappingsPut(ctx context.Context, id string) CloudLdapAPIV2CloudLdapsIdMappingsPutRequest

	// V2CloudLdapsIdMappingsPutExecute executes the request
	//  @return CloudLdapMappingsResponse
	V2CloudLdapsIdMappingsPutExecute(r CloudLdapAPIV2CloudLdapsIdMappingsPutRequest) (*CloudLdapMappingsResponse, *http.Response, error)

	/*
	V2CloudLdapsIdPut Update Cloud Identity Provider configuration

	Update Cloud Identity Provider configuration. Cannot be used for partial updates, all content body must be sent.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Cloud Identity Provider identifier
	@return CloudLdapAPIV2CloudLdapsIdPutRequest
	*/
	V2CloudLdapsIdPut(ctx context.Context, id string) CloudLdapAPIV2CloudLdapsIdPutRequest

	// V2CloudLdapsIdPutExecute executes the request
	//  @return LdapConfigurationResponse
	V2CloudLdapsIdPutExecute(r CloudLdapAPIV2CloudLdapsIdPutRequest) (*LdapConfigurationResponse, *http.Response, error)

	/*
	V2CloudLdapsPost Create Cloud Identity Provider configuration

	Create new Cloud Identity Provider configuration with unique display name. If mappings not provided, then defaults will be generated instead.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return CloudLdapAPIV2CloudLdapsPostRequest
	*/
	V2CloudLdapsPost(ctx context.Context) CloudLdapAPIV2CloudLdapsPostRequest

	// V2CloudLdapsPostExecute executes the request
	//  @return HrefResponse
	V2CloudLdapsPostExecute(r CloudLdapAPIV2CloudLdapsPostRequest) (*HrefResponse, *http.Response, error)
}

// CloudLdapAPIService CloudLdapAPI service
type CloudLdapAPIService service

type CloudLdapAPIV1LdapKeystoreVerifyPostRequest struct {
	ctx context.Context
	ApiService CloudLdapAPI
	cloudLdapKeystoreFile *CloudLdapKeystoreFile
}

func (r CloudLdapAPIV1LdapKeystoreVerifyPostRequest) CloudLdapKeystoreFile(cloudLdapKeystoreFile CloudLdapKeystoreFile) CloudLdapAPIV1LdapKeystoreVerifyPostRequest {
	r.cloudLdapKeystoreFile = &cloudLdapKeystoreFile
	return r
}

func (r CloudLdapAPIV1LdapKeystoreVerifyPostRequest) Execute() (*CloudLdapKeystore, *http.Response, error) {
	return r.ApiService.V1LdapKeystoreVerifyPostExecute(r)
}

/*
V1LdapKeystoreVerifyPost Validate keystore for Cloud Identity Provider secure connection

Validate keystore for Cloud Identity Provider secure connection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CloudLdapAPIV1LdapKeystoreVerifyPostRequest
*/
func (a *CloudLdapAPIService) V1LdapKeystoreVerifyPost(ctx context.Context) CloudLdapAPIV1LdapKeystoreVerifyPostRequest {
	return CloudLdapAPIV1LdapKeystoreVerifyPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CloudLdapKeystore
func (a *CloudLdapAPIService) V1LdapKeystoreVerifyPostExecute(r CloudLdapAPIV1LdapKeystoreVerifyPostRequest) (*CloudLdapKeystore, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudLdapKeystore
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudLdapAPIService.V1LdapKeystoreVerifyPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ldap-keystore/verify"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cloudLdapKeystoreFile == nil {
		return localVarReturnValue, nil, reportError("cloudLdapKeystoreFile is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cloudLdapKeystoreFile
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CloudLdapAPIV2CloudLdapsDefaultsProviderMappingsGetRequest struct {
	ctx context.Context
	ApiService CloudLdapAPI
	provider string
}

func (r CloudLdapAPIV2CloudLdapsDefaultsProviderMappingsGetRequest) Execute() (*CloudLdapMappingsResponse, *http.Response, error) {
	return r.ApiService.V2CloudLdapsDefaultsProviderMappingsGetExecute(r)
}

/*
V2CloudLdapsDefaultsProviderMappingsGet Get default mappings

Get default mappings for Cloud Identity Provider Provider.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param provider Cloud Identity Provider name
 @return CloudLdapAPIV2CloudLdapsDefaultsProviderMappingsGetRequest
*/
func (a *CloudLdapAPIService) V2CloudLdapsDefaultsProviderMappingsGet(ctx context.Context, provider string) CloudLdapAPIV2CloudLdapsDefaultsProviderMappingsGetRequest {
	return CloudLdapAPIV2CloudLdapsDefaultsProviderMappingsGetRequest{
		ApiService: a,
		ctx: ctx,
		provider: provider,
	}
}

// Execute executes the request
//  @return CloudLdapMappingsResponse
func (a *CloudLdapAPIService) V2CloudLdapsDefaultsProviderMappingsGetExecute(r CloudLdapAPIV2CloudLdapsDefaultsProviderMappingsGetRequest) (*CloudLdapMappingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudLdapMappingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudLdapAPIService.V2CloudLdapsDefaultsProviderMappingsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/cloud-ldaps/defaults/{provider}/mappings"
	localVarPath = strings.Replace(localVarPath, "{"+"provider"+"}", url.PathEscape(parameterValueToString(r.provider, "provider")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CloudLdapAPIV2CloudLdapsDefaultsProviderServerConfigurationGetRequest struct {
	ctx context.Context
	ApiService CloudLdapAPI
	provider string
}

func (r CloudLdapAPIV2CloudLdapsDefaultsProviderServerConfigurationGetRequest) Execute() (*CloudLdapServerResponse, *http.Response, error) {
	return r.ApiService.V2CloudLdapsDefaultsProviderServerConfigurationGetExecute(r)
}

/*
V2CloudLdapsDefaultsProviderServerConfigurationGet Get default server configuration

Get default server configuration for Cloud Identity Provider Identity Provider.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param provider Cloud Identity Provider name
 @return CloudLdapAPIV2CloudLdapsDefaultsProviderServerConfigurationGetRequest
*/
func (a *CloudLdapAPIService) V2CloudLdapsDefaultsProviderServerConfigurationGet(ctx context.Context, provider string) CloudLdapAPIV2CloudLdapsDefaultsProviderServerConfigurationGetRequest {
	return CloudLdapAPIV2CloudLdapsDefaultsProviderServerConfigurationGetRequest{
		ApiService: a,
		ctx: ctx,
		provider: provider,
	}
}

// Execute executes the request
//  @return CloudLdapServerResponse
func (a *CloudLdapAPIService) V2CloudLdapsDefaultsProviderServerConfigurationGetExecute(r CloudLdapAPIV2CloudLdapsDefaultsProviderServerConfigurationGetRequest) (*CloudLdapServerResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudLdapServerResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudLdapAPIService.V2CloudLdapsDefaultsProviderServerConfigurationGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/cloud-ldaps/defaults/{provider}/server-configuration"
	localVarPath = strings.Replace(localVarPath, "{"+"provider"+"}", url.PathEscape(parameterValueToString(r.provider, "provider")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CloudLdapAPIV2CloudLdapsIdConnectionBindGetRequest struct {
	ctx context.Context
	ApiService CloudLdapAPI
	id string
}

func (r CloudLdapAPIV2CloudLdapsIdConnectionBindGetRequest) Execute() (*CloudLdapConnectionPoolStatistics, *http.Response, error) {
	return r.ApiService.V2CloudLdapsIdConnectionBindGetExecute(r)
}

/*
V2CloudLdapsIdConnectionBindGet Get bind connection pool statistics

Get all search connection pool for chosen Cloud Identity Provider.
numConnectionsClosedDefunct - The number of connections that have been closed as defunct.
numConnectionsClosedExpired - The number of connections that have been closed because they were expired.
numConnectionsClosedUnneeded - The number of connections that have been closed because they were no longer needed.
numFailedCheckouts - The number of failed attempts to check out a connection from the pool.
numFailedConnectionAttempts - The number of failed attempts to create a connection for use in the pool.
numReleasedValid - The number of valid connections released back to the pool.
numSuccessfulCheckouts - The number of successful attempts to check out a connection from the pool.
numSuccessfulCheckoutsNewConnection - The number of successful checkout attempts that had to create a new connection because none were available.
numSuccessfulConnectionAttempts - The number successful attempts to create a connection for use in the pool.
maximumAvailableConnections - The maximum number of connections that may be available in the pool at any time.
numSuccessfulCheckoutsWithoutWait - The number of successful checkout attempts that were able to take an existing connection without waiting.
numSuccessfulCheckoutsAfterWait - The number of successful checkout attempts that retrieved a connection from the pool after waiting for it to become available.
numAvailableConnections - The number of connections currently available for use in the pool.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Cloud Identity Provider identifier
 @return CloudLdapAPIV2CloudLdapsIdConnectionBindGetRequest
*/
func (a *CloudLdapAPIService) V2CloudLdapsIdConnectionBindGet(ctx context.Context, id string) CloudLdapAPIV2CloudLdapsIdConnectionBindGetRequest {
	return CloudLdapAPIV2CloudLdapsIdConnectionBindGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CloudLdapConnectionPoolStatistics
func (a *CloudLdapAPIService) V2CloudLdapsIdConnectionBindGetExecute(r CloudLdapAPIV2CloudLdapsIdConnectionBindGetRequest) (*CloudLdapConnectionPoolStatistics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudLdapConnectionPoolStatistics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudLdapAPIService.V2CloudLdapsIdConnectionBindGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/cloud-ldaps/{id}/connection/bind"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CloudLdapAPIV2CloudLdapsIdConnectionSearchGetRequest struct {
	ctx context.Context
	ApiService CloudLdapAPI
	id string
}

func (r CloudLdapAPIV2CloudLdapsIdConnectionSearchGetRequest) Execute() (*CloudLdapConnectionPoolStatistics, *http.Response, error) {
	return r.ApiService.V2CloudLdapsIdConnectionSearchGetExecute(r)
}

/*
V2CloudLdapsIdConnectionSearchGet Get search connection pool statistics

Get all search connection pool for chosen Cloud Identity Provider.
numConnectionsClosedDefunct - The number of connections that have been closed as defunct.
numConnectionsClosedExpired - The number of connections that have been closed because they were expired.
numConnectionsClosedUnneeded - The number of connections that have been closed because they were no longer needed.
numFailedCheckouts - The number of failed attempts to check out a connection from the pool.
numFailedConnectionAttempts - The number of failed attempts to create a connection for use in the pool.
numReleasedValid - The number of valid connections released back to the pool.
numSuccessfulCheckouts - The number of successful attempts to check out a connection from the pool.
numSuccessfulCheckoutsNewConnection - The number of successful checkout attempts that had to create a new connection because none were available.
numSuccessfulConnectionAttempts - The number successful attempts to create a connection for use in the pool.
maximumAvailableConnections - The maximum number of connections that may be available in the pool at any time.
numSuccessfulCheckoutsWithoutWait - The number of successful checkout attempts that were able to take an existing connection without waiting.
numSuccessfulCheckoutsAfterWait - The number of successful checkout attempts that retrieved a connection from the pool after waiting for it to become available.
numAvailableConnections - The number of connections currently available for use in the pool.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Cloud Identity Provider identifier
 @return CloudLdapAPIV2CloudLdapsIdConnectionSearchGetRequest
*/
func (a *CloudLdapAPIService) V2CloudLdapsIdConnectionSearchGet(ctx context.Context, id string) CloudLdapAPIV2CloudLdapsIdConnectionSearchGetRequest {
	return CloudLdapAPIV2CloudLdapsIdConnectionSearchGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CloudLdapConnectionPoolStatistics
func (a *CloudLdapAPIService) V2CloudLdapsIdConnectionSearchGetExecute(r CloudLdapAPIV2CloudLdapsIdConnectionSearchGetRequest) (*CloudLdapConnectionPoolStatistics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudLdapConnectionPoolStatistics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudLdapAPIService.V2CloudLdapsIdConnectionSearchGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/cloud-ldaps/{id}/connection/search"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CloudLdapAPIV2CloudLdapsIdConnectionStatusGetRequest struct {
	ctx context.Context
	ApiService CloudLdapAPI
	id string
}

func (r CloudLdapAPIV2CloudLdapsIdConnectionStatusGetRequest) Execute() (*CloudLdapConnectionStatus, *http.Response, error) {
	return r.ApiService.V2CloudLdapsIdConnectionStatusGetExecute(r)
}

/*
V2CloudLdapsIdConnectionStatusGet Tests the communication with the specified cloud connection 

Tests the communication with the specified cloud connection


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Cloud Identity Provider identifier
 @return CloudLdapAPIV2CloudLdapsIdConnectionStatusGetRequest
*/
func (a *CloudLdapAPIService) V2CloudLdapsIdConnectionStatusGet(ctx context.Context, id string) CloudLdapAPIV2CloudLdapsIdConnectionStatusGetRequest {
	return CloudLdapAPIV2CloudLdapsIdConnectionStatusGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CloudLdapConnectionStatus
func (a *CloudLdapAPIService) V2CloudLdapsIdConnectionStatusGetExecute(r CloudLdapAPIV2CloudLdapsIdConnectionStatusGetRequest) (*CloudLdapConnectionStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudLdapConnectionStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudLdapAPIService.V2CloudLdapsIdConnectionStatusGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/cloud-ldaps/{id}/connection/status"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CloudLdapAPIV2CloudLdapsIdDeleteRequest struct {
	ctx context.Context
	ApiService CloudLdapAPI
	id string
}

func (r CloudLdapAPIV2CloudLdapsIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V2CloudLdapsIdDeleteExecute(r)
}

/*
V2CloudLdapsIdDelete Delete Cloud Identity Provider configuration.

Delete Cloud Identity Provider configuration.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Cloud Identity Provider identifier
 @return CloudLdapAPIV2CloudLdapsIdDeleteRequest
*/
func (a *CloudLdapAPIService) V2CloudLdapsIdDelete(ctx context.Context, id string) CloudLdapAPIV2CloudLdapsIdDeleteRequest {
	return CloudLdapAPIV2CloudLdapsIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *CloudLdapAPIService) V2CloudLdapsIdDeleteExecute(r CloudLdapAPIV2CloudLdapsIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudLdapAPIService.V2CloudLdapsIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/cloud-ldaps/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type CloudLdapAPIV2CloudLdapsIdGetRequest struct {
	ctx context.Context
	ApiService CloudLdapAPI
	id string
}

func (r CloudLdapAPIV2CloudLdapsIdGetRequest) Execute() (*LdapConfigurationResponse, *http.Response, error) {
	return r.ApiService.V2CloudLdapsIdGetExecute(r)
}

/*
V2CloudLdapsIdGet Get Cloud Identity Provider configuration with given id.

Get Cloud Identity Provider configuration with given id.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Cloud Identity Provider identifier
 @return CloudLdapAPIV2CloudLdapsIdGetRequest
*/
func (a *CloudLdapAPIService) V2CloudLdapsIdGet(ctx context.Context, id string) CloudLdapAPIV2CloudLdapsIdGetRequest {
	return CloudLdapAPIV2CloudLdapsIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return LdapConfigurationResponse
func (a *CloudLdapAPIService) V2CloudLdapsIdGetExecute(r CloudLdapAPIV2CloudLdapsIdGetRequest) (*LdapConfigurationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LdapConfigurationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudLdapAPIService.V2CloudLdapsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/cloud-ldaps/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CloudLdapAPIV2CloudLdapsIdMappingsGetRequest struct {
	ctx context.Context
	ApiService CloudLdapAPI
	id string
}

func (r CloudLdapAPIV2CloudLdapsIdMappingsGetRequest) Execute() (*CloudLdapMappingsResponse, *http.Response, error) {
	return r.ApiService.V2CloudLdapsIdMappingsGetExecute(r)
}

/*
V2CloudLdapsIdMappingsGet Get mappings configurations for Cloud Identity Providers server configuration.

Get all mappings configurations for Cloud Identity Providers server configuration.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Cloud Identity Provider identifier
 @return CloudLdapAPIV2CloudLdapsIdMappingsGetRequest
*/
func (a *CloudLdapAPIService) V2CloudLdapsIdMappingsGet(ctx context.Context, id string) CloudLdapAPIV2CloudLdapsIdMappingsGetRequest {
	return CloudLdapAPIV2CloudLdapsIdMappingsGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CloudLdapMappingsResponse
func (a *CloudLdapAPIService) V2CloudLdapsIdMappingsGetExecute(r CloudLdapAPIV2CloudLdapsIdMappingsGetRequest) (*CloudLdapMappingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudLdapMappingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudLdapAPIService.V2CloudLdapsIdMappingsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/cloud-ldaps/{id}/mappings"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CloudLdapAPIV2CloudLdapsIdMappingsPutRequest struct {
	ctx context.Context
	ApiService CloudLdapAPI
	id string
	cloudLdapMappingsRequest *CloudLdapMappingsRequest
}

// Cloud Identity Provider mappings to update.
func (r CloudLdapAPIV2CloudLdapsIdMappingsPutRequest) CloudLdapMappingsRequest(cloudLdapMappingsRequest CloudLdapMappingsRequest) CloudLdapAPIV2CloudLdapsIdMappingsPutRequest {
	r.cloudLdapMappingsRequest = &cloudLdapMappingsRequest
	return r
}

func (r CloudLdapAPIV2CloudLdapsIdMappingsPutRequest) Execute() (*CloudLdapMappingsResponse, *http.Response, error) {
	return r.ApiService.V2CloudLdapsIdMappingsPutExecute(r)
}

/*
V2CloudLdapsIdMappingsPut Update Cloud Identity Provider mappings configuration.

Update Cloud Identity Provider mappings configuration. Cannot be used for partial updates, all content body must be sent.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Cloud Identity Provider identifier
 @return CloudLdapAPIV2CloudLdapsIdMappingsPutRequest
*/
func (a *CloudLdapAPIService) V2CloudLdapsIdMappingsPut(ctx context.Context, id string) CloudLdapAPIV2CloudLdapsIdMappingsPutRequest {
	return CloudLdapAPIV2CloudLdapsIdMappingsPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CloudLdapMappingsResponse
func (a *CloudLdapAPIService) V2CloudLdapsIdMappingsPutExecute(r CloudLdapAPIV2CloudLdapsIdMappingsPutRequest) (*CloudLdapMappingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudLdapMappingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudLdapAPIService.V2CloudLdapsIdMappingsPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/cloud-ldaps/{id}/mappings"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cloudLdapMappingsRequest == nil {
		return localVarReturnValue, nil, reportError("cloudLdapMappingsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cloudLdapMappingsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CloudLdapAPIV2CloudLdapsIdPutRequest struct {
	ctx context.Context
	ApiService CloudLdapAPI
	id string
	ldapConfigurationUpdate *LdapConfigurationUpdate
}

// Cloud Identity Provider configuration to update
func (r CloudLdapAPIV2CloudLdapsIdPutRequest) LdapConfigurationUpdate(ldapConfigurationUpdate LdapConfigurationUpdate) CloudLdapAPIV2CloudLdapsIdPutRequest {
	r.ldapConfigurationUpdate = &ldapConfigurationUpdate
	return r
}

func (r CloudLdapAPIV2CloudLdapsIdPutRequest) Execute() (*LdapConfigurationResponse, *http.Response, error) {
	return r.ApiService.V2CloudLdapsIdPutExecute(r)
}

/*
V2CloudLdapsIdPut Update Cloud Identity Provider configuration

Update Cloud Identity Provider configuration. Cannot be used for partial updates, all content body must be sent.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Cloud Identity Provider identifier
 @return CloudLdapAPIV2CloudLdapsIdPutRequest
*/
func (a *CloudLdapAPIService) V2CloudLdapsIdPut(ctx context.Context, id string) CloudLdapAPIV2CloudLdapsIdPutRequest {
	return CloudLdapAPIV2CloudLdapsIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return LdapConfigurationResponse
func (a *CloudLdapAPIService) V2CloudLdapsIdPutExecute(r CloudLdapAPIV2CloudLdapsIdPutRequest) (*LdapConfigurationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LdapConfigurationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudLdapAPIService.V2CloudLdapsIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/cloud-ldaps/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ldapConfigurationUpdate == nil {
		return localVarReturnValue, nil, reportError("ldapConfigurationUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ldapConfigurationUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CloudLdapAPIV2CloudLdapsPostRequest struct {
	ctx context.Context
	ApiService CloudLdapAPI
	ldapConfigurationRequest *LdapConfigurationRequest
}

// Cloud Identity Provider configuration to create
func (r CloudLdapAPIV2CloudLdapsPostRequest) LdapConfigurationRequest(ldapConfigurationRequest LdapConfigurationRequest) CloudLdapAPIV2CloudLdapsPostRequest {
	r.ldapConfigurationRequest = &ldapConfigurationRequest
	return r
}

func (r CloudLdapAPIV2CloudLdapsPostRequest) Execute() (*HrefResponse, *http.Response, error) {
	return r.ApiService.V2CloudLdapsPostExecute(r)
}

/*
V2CloudLdapsPost Create Cloud Identity Provider configuration

Create new Cloud Identity Provider configuration with unique display name. If mappings not provided, then defaults will be generated instead.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CloudLdapAPIV2CloudLdapsPostRequest
*/
func (a *CloudLdapAPIService) V2CloudLdapsPost(ctx context.Context) CloudLdapAPIV2CloudLdapsPostRequest {
	return CloudLdapAPIV2CloudLdapsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HrefResponse
func (a *CloudLdapAPIService) V2CloudLdapsPostExecute(r CloudLdapAPIV2CloudLdapsPostRequest) (*HrefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HrefResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudLdapAPIService.V2CloudLdapsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/cloud-ldaps"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ldapConfigurationRequest == nil {
		return localVarReturnValue, nil, reportError("ldapConfigurationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ldapConfigurationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
