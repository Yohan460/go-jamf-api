/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ComputerInventoryCollectionSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComputerInventoryCollectionSettings{}

// ComputerInventoryCollectionSettings struct for ComputerInventoryCollectionSettings
type ComputerInventoryCollectionSettings struct {
	ComputerInventoryCollectionPreferences *ComputerInventoryCollectionPreferences `json:"computerInventoryCollectionPreferences,omitempty"`
	ApplicationPaths []AppPath `json:"applicationPaths,omitempty"`
	FontPaths []FontPath `json:"fontPaths,omitempty"`
	PluginPaths []PluginPath `json:"pluginPaths,omitempty"`
}

// NewComputerInventoryCollectionSettings instantiates a new ComputerInventoryCollectionSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputerInventoryCollectionSettings() *ComputerInventoryCollectionSettings {
	this := ComputerInventoryCollectionSettings{}
	return &this
}

// NewComputerInventoryCollectionSettingsWithDefaults instantiates a new ComputerInventoryCollectionSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputerInventoryCollectionSettingsWithDefaults() *ComputerInventoryCollectionSettings {
	this := ComputerInventoryCollectionSettings{}
	return &this
}

// GetComputerInventoryCollectionPreferences returns the ComputerInventoryCollectionPreferences field value if set, zero value otherwise.
func (o *ComputerInventoryCollectionSettings) GetComputerInventoryCollectionPreferences() ComputerInventoryCollectionPreferences {
	if o == nil || IsNil(o.ComputerInventoryCollectionPreferences) {
		var ret ComputerInventoryCollectionPreferences
		return ret
	}
	return *o.ComputerInventoryCollectionPreferences
}

// GetComputerInventoryCollectionPreferencesOk returns a tuple with the ComputerInventoryCollectionPreferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerInventoryCollectionSettings) GetComputerInventoryCollectionPreferencesOk() (*ComputerInventoryCollectionPreferences, bool) {
	if o == nil || IsNil(o.ComputerInventoryCollectionPreferences) {
		return nil, false
	}
	return o.ComputerInventoryCollectionPreferences, true
}

// HasComputerInventoryCollectionPreferences returns a boolean if a field has been set.
func (o *ComputerInventoryCollectionSettings) HasComputerInventoryCollectionPreferences() bool {
	if o != nil && !IsNil(o.ComputerInventoryCollectionPreferences) {
		return true
	}

	return false
}

// SetComputerInventoryCollectionPreferences gets a reference to the given ComputerInventoryCollectionPreferences and assigns it to the ComputerInventoryCollectionPreferences field.
func (o *ComputerInventoryCollectionSettings) SetComputerInventoryCollectionPreferences(v ComputerInventoryCollectionPreferences) {
	o.ComputerInventoryCollectionPreferences = &v
}

// GetApplicationPaths returns the ApplicationPaths field value if set, zero value otherwise.
func (o *ComputerInventoryCollectionSettings) GetApplicationPaths() []AppPath {
	if o == nil || IsNil(o.ApplicationPaths) {
		var ret []AppPath
		return ret
	}
	return o.ApplicationPaths
}

// GetApplicationPathsOk returns a tuple with the ApplicationPaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerInventoryCollectionSettings) GetApplicationPathsOk() ([]AppPath, bool) {
	if o == nil || IsNil(o.ApplicationPaths) {
		return nil, false
	}
	return o.ApplicationPaths, true
}

// HasApplicationPaths returns a boolean if a field has been set.
func (o *ComputerInventoryCollectionSettings) HasApplicationPaths() bool {
	if o != nil && !IsNil(o.ApplicationPaths) {
		return true
	}

	return false
}

// SetApplicationPaths gets a reference to the given []AppPath and assigns it to the ApplicationPaths field.
func (o *ComputerInventoryCollectionSettings) SetApplicationPaths(v []AppPath) {
	o.ApplicationPaths = v
}

// GetFontPaths returns the FontPaths field value if set, zero value otherwise.
func (o *ComputerInventoryCollectionSettings) GetFontPaths() []FontPath {
	if o == nil || IsNil(o.FontPaths) {
		var ret []FontPath
		return ret
	}
	return o.FontPaths
}

// GetFontPathsOk returns a tuple with the FontPaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerInventoryCollectionSettings) GetFontPathsOk() ([]FontPath, bool) {
	if o == nil || IsNil(o.FontPaths) {
		return nil, false
	}
	return o.FontPaths, true
}

// HasFontPaths returns a boolean if a field has been set.
func (o *ComputerInventoryCollectionSettings) HasFontPaths() bool {
	if o != nil && !IsNil(o.FontPaths) {
		return true
	}

	return false
}

// SetFontPaths gets a reference to the given []FontPath and assigns it to the FontPaths field.
func (o *ComputerInventoryCollectionSettings) SetFontPaths(v []FontPath) {
	o.FontPaths = v
}

// GetPluginPaths returns the PluginPaths field value if set, zero value otherwise.
func (o *ComputerInventoryCollectionSettings) GetPluginPaths() []PluginPath {
	if o == nil || IsNil(o.PluginPaths) {
		var ret []PluginPath
		return ret
	}
	return o.PluginPaths
}

// GetPluginPathsOk returns a tuple with the PluginPaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerInventoryCollectionSettings) GetPluginPathsOk() ([]PluginPath, bool) {
	if o == nil || IsNil(o.PluginPaths) {
		return nil, false
	}
	return o.PluginPaths, true
}

// HasPluginPaths returns a boolean if a field has been set.
func (o *ComputerInventoryCollectionSettings) HasPluginPaths() bool {
	if o != nil && !IsNil(o.PluginPaths) {
		return true
	}

	return false
}

// SetPluginPaths gets a reference to the given []PluginPath and assigns it to the PluginPaths field.
func (o *ComputerInventoryCollectionSettings) SetPluginPaths(v []PluginPath) {
	o.PluginPaths = v
}

func (o ComputerInventoryCollectionSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComputerInventoryCollectionSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ComputerInventoryCollectionPreferences) {
		toSerialize["computerInventoryCollectionPreferences"] = o.ComputerInventoryCollectionPreferences
	}
	if !IsNil(o.ApplicationPaths) {
		toSerialize["applicationPaths"] = o.ApplicationPaths
	}
	if !IsNil(o.FontPaths) {
		toSerialize["fontPaths"] = o.FontPaths
	}
	if !IsNil(o.PluginPaths) {
		toSerialize["pluginPaths"] = o.PluginPaths
	}
	return toSerialize, nil
}

type NullableComputerInventoryCollectionSettings struct {
	value *ComputerInventoryCollectionSettings
	isSet bool
}

func (v NullableComputerInventoryCollectionSettings) Get() *ComputerInventoryCollectionSettings {
	return v.value
}

func (v *NullableComputerInventoryCollectionSettings) Set(val *ComputerInventoryCollectionSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableComputerInventoryCollectionSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableComputerInventoryCollectionSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputerInventoryCollectionSettings(val *ComputerInventoryCollectionSettings) *NullableComputerInventoryCollectionSettings {
	return &NullableComputerInventoryCollectionSettings{value: val, isSet: true}
}

func (v NullableComputerInventoryCollectionSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputerInventoryCollectionSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


