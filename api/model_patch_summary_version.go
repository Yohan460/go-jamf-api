/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the PatchSummaryVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchSummaryVersion{}

// PatchSummaryVersion struct for PatchSummaryVersion
type PatchSummaryVersion struct {
	AbsoluteOrderId *string `json:"absoluteOrderId,omitempty"`
	Version *string `json:"version,omitempty"`
	OnVersion *int32 `json:"onVersion,omitempty"`
}

// NewPatchSummaryVersion instantiates a new PatchSummaryVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchSummaryVersion() *PatchSummaryVersion {
	this := PatchSummaryVersion{}
	return &this
}

// NewPatchSummaryVersionWithDefaults instantiates a new PatchSummaryVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchSummaryVersionWithDefaults() *PatchSummaryVersion {
	this := PatchSummaryVersion{}
	return &this
}

// GetAbsoluteOrderId returns the AbsoluteOrderId field value if set, zero value otherwise.
func (o *PatchSummaryVersion) GetAbsoluteOrderId() string {
	if o == nil || IsNil(o.AbsoluteOrderId) {
		var ret string
		return ret
	}
	return *o.AbsoluteOrderId
}

// GetAbsoluteOrderIdOk returns a tuple with the AbsoluteOrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSummaryVersion) GetAbsoluteOrderIdOk() (*string, bool) {
	if o == nil || IsNil(o.AbsoluteOrderId) {
		return nil, false
	}
	return o.AbsoluteOrderId, true
}

// HasAbsoluteOrderId returns a boolean if a field has been set.
func (o *PatchSummaryVersion) HasAbsoluteOrderId() bool {
	if o != nil && !IsNil(o.AbsoluteOrderId) {
		return true
	}

	return false
}

// SetAbsoluteOrderId gets a reference to the given string and assigns it to the AbsoluteOrderId field.
func (o *PatchSummaryVersion) SetAbsoluteOrderId(v string) {
	o.AbsoluteOrderId = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *PatchSummaryVersion) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSummaryVersion) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *PatchSummaryVersion) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *PatchSummaryVersion) SetVersion(v string) {
	o.Version = &v
}

// GetOnVersion returns the OnVersion field value if set, zero value otherwise.
func (o *PatchSummaryVersion) GetOnVersion() int32 {
	if o == nil || IsNil(o.OnVersion) {
		var ret int32
		return ret
	}
	return *o.OnVersion
}

// GetOnVersionOk returns a tuple with the OnVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSummaryVersion) GetOnVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.OnVersion) {
		return nil, false
	}
	return o.OnVersion, true
}

// HasOnVersion returns a boolean if a field has been set.
func (o *PatchSummaryVersion) HasOnVersion() bool {
	if o != nil && !IsNil(o.OnVersion) {
		return true
	}

	return false
}

// SetOnVersion gets a reference to the given int32 and assigns it to the OnVersion field.
func (o *PatchSummaryVersion) SetOnVersion(v int32) {
	o.OnVersion = &v
}

func (o PatchSummaryVersion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchSummaryVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AbsoluteOrderId) {
		toSerialize["absoluteOrderId"] = o.AbsoluteOrderId
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.OnVersion) {
		toSerialize["onVersion"] = o.OnVersion
	}
	return toSerialize, nil
}

type NullablePatchSummaryVersion struct {
	value *PatchSummaryVersion
	isSet bool
}

func (v NullablePatchSummaryVersion) Get() *PatchSummaryVersion {
	return v.value
}

func (v *NullablePatchSummaryVersion) Set(val *PatchSummaryVersion) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchSummaryVersion) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchSummaryVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchSummaryVersion(val *PatchSummaryVersion) *NullablePatchSummaryVersion {
	return &NullablePatchSummaryVersion{value: val, isSet: true}
}

func (v NullablePatchSummaryVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchSummaryVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


