/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GsxKeystore type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GsxKeystore{}

// GsxKeystore struct for GsxKeystore
type GsxKeystore struct {
	Name string `json:"name"`
	ExpirationEpoch *int64 `json:"expirationEpoch,omitempty"`
	ErrorMessage *string `json:"errorMessage,omitempty"`
	// The base 64 encoded of the GSX Connection keystore.
	KeystoreBytes *string `json:"keystoreBytes,omitempty"`
	KeystorePassword string `json:"keystorePassword"`
}

type _GsxKeystore GsxKeystore

// NewGsxKeystore instantiates a new GsxKeystore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGsxKeystore(name string, keystorePassword string) *GsxKeystore {
	this := GsxKeystore{}
	this.Name = name
	this.KeystorePassword = keystorePassword
	return &this
}

// NewGsxKeystoreWithDefaults instantiates a new GsxKeystore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGsxKeystoreWithDefaults() *GsxKeystore {
	this := GsxKeystore{}
	var name string = " "
	this.Name = name
	return &this
}

// GetName returns the Name field value
func (o *GsxKeystore) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GsxKeystore) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GsxKeystore) SetName(v string) {
	o.Name = v
}

// GetExpirationEpoch returns the ExpirationEpoch field value if set, zero value otherwise.
func (o *GsxKeystore) GetExpirationEpoch() int64 {
	if o == nil || IsNil(o.ExpirationEpoch) {
		var ret int64
		return ret
	}
	return *o.ExpirationEpoch
}

// GetExpirationEpochOk returns a tuple with the ExpirationEpoch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GsxKeystore) GetExpirationEpochOk() (*int64, bool) {
	if o == nil || IsNil(o.ExpirationEpoch) {
		return nil, false
	}
	return o.ExpirationEpoch, true
}

// HasExpirationEpoch returns a boolean if a field has been set.
func (o *GsxKeystore) HasExpirationEpoch() bool {
	if o != nil && !IsNil(o.ExpirationEpoch) {
		return true
	}

	return false
}

// SetExpirationEpoch gets a reference to the given int64 and assigns it to the ExpirationEpoch field.
func (o *GsxKeystore) SetExpirationEpoch(v int64) {
	o.ExpirationEpoch = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *GsxKeystore) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GsxKeystore) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *GsxKeystore) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *GsxKeystore) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetKeystoreBytes returns the KeystoreBytes field value if set, zero value otherwise.
func (o *GsxKeystore) GetKeystoreBytes() string {
	if o == nil || IsNil(o.KeystoreBytes) {
		var ret string
		return ret
	}
	return *o.KeystoreBytes
}

// GetKeystoreBytesOk returns a tuple with the KeystoreBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GsxKeystore) GetKeystoreBytesOk() (*string, bool) {
	if o == nil || IsNil(o.KeystoreBytes) {
		return nil, false
	}
	return o.KeystoreBytes, true
}

// HasKeystoreBytes returns a boolean if a field has been set.
func (o *GsxKeystore) HasKeystoreBytes() bool {
	if o != nil && !IsNil(o.KeystoreBytes) {
		return true
	}

	return false
}

// SetKeystoreBytes gets a reference to the given string and assigns it to the KeystoreBytes field.
func (o *GsxKeystore) SetKeystoreBytes(v string) {
	o.KeystoreBytes = &v
}

// GetKeystorePassword returns the KeystorePassword field value
func (o *GsxKeystore) GetKeystorePassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeystorePassword
}

// GetKeystorePasswordOk returns a tuple with the KeystorePassword field value
// and a boolean to check if the value has been set.
func (o *GsxKeystore) GetKeystorePasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeystorePassword, true
}

// SetKeystorePassword sets field value
func (o *GsxKeystore) SetKeystorePassword(v string) {
	o.KeystorePassword = v
}

func (o GsxKeystore) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GsxKeystore) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.ExpirationEpoch) {
		toSerialize["expirationEpoch"] = o.ExpirationEpoch
	}
	if !IsNil(o.ErrorMessage) {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	if !IsNil(o.KeystoreBytes) {
		toSerialize["keystoreBytes"] = o.KeystoreBytes
	}
	toSerialize["keystorePassword"] = o.KeystorePassword
	return toSerialize, nil
}

func (o *GsxKeystore) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"keystorePassword",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGsxKeystore := _GsxKeystore{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGsxKeystore)

	if err != nil {
		return err
	}

	*o = GsxKeystore(varGsxKeystore)

	return err
}

type NullableGsxKeystore struct {
	value *GsxKeystore
	isSet bool
}

func (v NullableGsxKeystore) Get() *GsxKeystore {
	return v.value
}

func (v *NullableGsxKeystore) Set(val *GsxKeystore) {
	v.value = val
	v.isSet = true
}

func (v NullableGsxKeystore) IsSet() bool {
	return v.isSet
}

func (v *NullableGsxKeystore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGsxKeystore(val *GsxKeystore) *NullableGsxKeystore {
	return &NullableGsxKeystore{value: val, isSet: true}
}

func (v NullableGsxKeystore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGsxKeystore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


