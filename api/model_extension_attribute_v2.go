/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ExtensionAttributeV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtensionAttributeV2{}

// ExtensionAttributeV2 struct for ExtensionAttributeV2
type ExtensionAttributeV2 struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
	Value []string `json:"value,omitempty"`
	ExtensionAttributeCollectionAllowed *bool `json:"extensionAttributeCollectionAllowed,omitempty"`
}

// NewExtensionAttributeV2 instantiates a new ExtensionAttributeV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionAttributeV2() *ExtensionAttributeV2 {
	this := ExtensionAttributeV2{}
	return &this
}

// NewExtensionAttributeV2WithDefaults instantiates a new ExtensionAttributeV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionAttributeV2WithDefaults() *ExtensionAttributeV2 {
	this := ExtensionAttributeV2{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ExtensionAttributeV2) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionAttributeV2) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ExtensionAttributeV2) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ExtensionAttributeV2) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ExtensionAttributeV2) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionAttributeV2) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ExtensionAttributeV2) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ExtensionAttributeV2) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ExtensionAttributeV2) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionAttributeV2) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ExtensionAttributeV2) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ExtensionAttributeV2) SetType(v string) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ExtensionAttributeV2) GetValue() []string {
	if o == nil || IsNil(o.Value) {
		var ret []string
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionAttributeV2) GetValueOk() ([]string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ExtensionAttributeV2) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given []string and assigns it to the Value field.
func (o *ExtensionAttributeV2) SetValue(v []string) {
	o.Value = v
}

// GetExtensionAttributeCollectionAllowed returns the ExtensionAttributeCollectionAllowed field value if set, zero value otherwise.
func (o *ExtensionAttributeV2) GetExtensionAttributeCollectionAllowed() bool {
	if o == nil || IsNil(o.ExtensionAttributeCollectionAllowed) {
		var ret bool
		return ret
	}
	return *o.ExtensionAttributeCollectionAllowed
}

// GetExtensionAttributeCollectionAllowedOk returns a tuple with the ExtensionAttributeCollectionAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionAttributeV2) GetExtensionAttributeCollectionAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.ExtensionAttributeCollectionAllowed) {
		return nil, false
	}
	return o.ExtensionAttributeCollectionAllowed, true
}

// HasExtensionAttributeCollectionAllowed returns a boolean if a field has been set.
func (o *ExtensionAttributeV2) HasExtensionAttributeCollectionAllowed() bool {
	if o != nil && !IsNil(o.ExtensionAttributeCollectionAllowed) {
		return true
	}

	return false
}

// SetExtensionAttributeCollectionAllowed gets a reference to the given bool and assigns it to the ExtensionAttributeCollectionAllowed field.
func (o *ExtensionAttributeV2) SetExtensionAttributeCollectionAllowed(v bool) {
	o.ExtensionAttributeCollectionAllowed = &v
}

func (o ExtensionAttributeV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtensionAttributeV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.ExtensionAttributeCollectionAllowed) {
		toSerialize["extensionAttributeCollectionAllowed"] = o.ExtensionAttributeCollectionAllowed
	}
	return toSerialize, nil
}

type NullableExtensionAttributeV2 struct {
	value *ExtensionAttributeV2
	isSet bool
}

func (v NullableExtensionAttributeV2) Get() *ExtensionAttributeV2 {
	return v.value
}

func (v *NullableExtensionAttributeV2) Set(val *ExtensionAttributeV2) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionAttributeV2) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionAttributeV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionAttributeV2(val *ExtensionAttributeV2) *NullableExtensionAttributeV2 {
	return &NullableExtensionAttributeV2{value: val, isSet: true}
}

func (v NullableExtensionAttributeV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionAttributeV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


