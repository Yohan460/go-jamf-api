/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type LdapAPI interface {

	/*
	LdapGroupsGet Retrieve the configured access groups that contain the text in the search param 

	Retrieves the configured access groups that contain the text in the searchParam.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LdapAPILdapGroupsGetRequest
	*/
	LdapGroupsGet(ctx context.Context) LdapAPILdapGroupsGetRequest

	// LdapGroupsGetExecute executes the request
	//  @return LdapGroupSearchResults
	LdapGroupsGetExecute(r LdapAPILdapGroupsGetRequest) (*LdapGroupSearchResults, *http.Response, error)

	/*
	LdapServersGet Retrieve all Servers including LDAP and Cloud Identity Providers. 

	Retrieve all Servers including LDAP and Cloud Identity Providers.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LdapAPILdapServersGetRequest
	*/
	LdapServersGet(ctx context.Context) LdapAPILdapServersGetRequest

	// LdapServersGetExecute executes the request
	//  @return []LdapServer
	LdapServersGetExecute(r LdapAPILdapServersGetRequest) ([]LdapServer, *http.Response, error)

	/*
	V1LdapGroupsGet Retrieve the configured access groups that contain the text in the search param 

	Retrieves the configured access groups that contain the text in the searchParam.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LdapAPIV1LdapGroupsGetRequest
	*/
	V1LdapGroupsGet(ctx context.Context) LdapAPIV1LdapGroupsGetRequest

	// V1LdapGroupsGetExecute executes the request
	//  @return LdapGroupSearchResults
	V1LdapGroupsGetExecute(r LdapAPIV1LdapGroupsGetRequest) (*LdapGroupSearchResults, *http.Response, error)

	/*
	V1LdapLdapServersGet Retrieve all LDAP Servers. 

	Retrieves all not migrated, LDAP Servers.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LdapAPIV1LdapLdapServersGetRequest
	*/
	V1LdapLdapServersGet(ctx context.Context) LdapAPIV1LdapLdapServersGetRequest

	// V1LdapLdapServersGetExecute executes the request
	//  @return []LdapServer
	V1LdapLdapServersGetExecute(r LdapAPIV1LdapLdapServersGetRequest) ([]LdapServer, *http.Response, error)

	/*
	V1LdapServersGet Retrieve all Servers including LDAP and Cloud Identity Providers. 

	Retrieve all active Servers including LDAP and Cloud Identity Providers.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LdapAPIV1LdapServersGetRequest
	*/
	V1LdapServersGet(ctx context.Context) LdapAPIV1LdapServersGetRequest

	// V1LdapServersGetExecute executes the request
	//  @return []LdapServer
	V1LdapServersGetExecute(r LdapAPIV1LdapServersGetRequest) ([]LdapServer, *http.Response, error)
}

// LdapAPIService LdapAPI service
type LdapAPIService service

type LdapAPILdapGroupsGetRequest struct {
	ctx context.Context
	ApiService LdapAPI
	q *string
}

// Will perform a \&quot;contains\&quot; search on the names of access groups
func (r LdapAPILdapGroupsGetRequest) Q(q string) LdapAPILdapGroupsGetRequest {
	r.q = &q
	return r
}

func (r LdapAPILdapGroupsGetRequest) Execute() (*LdapGroupSearchResults, *http.Response, error) {
	return r.ApiService.LdapGroupsGetExecute(r)
}

/*
LdapGroupsGet Retrieve the configured access groups that contain the text in the search param 

Retrieves the configured access groups that contain the text in the searchParam.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LdapAPILdapGroupsGetRequest
*/
func (a *LdapAPIService) LdapGroupsGet(ctx context.Context) LdapAPILdapGroupsGetRequest {
	return LdapAPILdapGroupsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return LdapGroupSearchResults
func (a *LdapAPIService) LdapGroupsGetExecute(r LdapAPILdapGroupsGetRequest) (*LdapGroupSearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LdapGroupSearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LdapAPIService.LdapGroupsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ldap/groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	} else {
		var defaultValue string = "null"
		r.q = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LdapAPILdapServersGetRequest struct {
	ctx context.Context
	ApiService LdapAPI
}

func (r LdapAPILdapServersGetRequest) Execute() ([]LdapServer, *http.Response, error) {
	return r.ApiService.LdapServersGetExecute(r)
}

/*
LdapServersGet Retrieve all Servers including LDAP and Cloud Identity Providers. 

Retrieve all Servers including LDAP and Cloud Identity Providers.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LdapAPILdapServersGetRequest
*/
func (a *LdapAPIService) LdapServersGet(ctx context.Context) LdapAPILdapServersGetRequest {
	return LdapAPILdapServersGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []LdapServer
func (a *LdapAPIService) LdapServersGetExecute(r LdapAPILdapServersGetRequest) ([]LdapServer, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []LdapServer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LdapAPIService.LdapServersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ldap/servers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LdapAPIV1LdapGroupsGetRequest struct {
	ctx context.Context
	ApiService LdapAPI
	q *string
}

// Will perform a \&quot;contains\&quot; search on the names of access groups
func (r LdapAPIV1LdapGroupsGetRequest) Q(q string) LdapAPIV1LdapGroupsGetRequest {
	r.q = &q
	return r
}

func (r LdapAPIV1LdapGroupsGetRequest) Execute() (*LdapGroupSearchResults, *http.Response, error) {
	return r.ApiService.V1LdapGroupsGetExecute(r)
}

/*
V1LdapGroupsGet Retrieve the configured access groups that contain the text in the search param 

Retrieves the configured access groups that contain the text in the searchParam.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LdapAPIV1LdapGroupsGetRequest
*/
func (a *LdapAPIService) V1LdapGroupsGet(ctx context.Context) LdapAPIV1LdapGroupsGetRequest {
	return LdapAPIV1LdapGroupsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return LdapGroupSearchResults
func (a *LdapAPIService) V1LdapGroupsGetExecute(r LdapAPIV1LdapGroupsGetRequest) (*LdapGroupSearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LdapGroupSearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LdapAPIService.V1LdapGroupsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ldap/groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	} else {
		var defaultValue string = "null"
		r.q = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LdapAPIV1LdapLdapServersGetRequest struct {
	ctx context.Context
	ApiService LdapAPI
}

func (r LdapAPIV1LdapLdapServersGetRequest) Execute() ([]LdapServer, *http.Response, error) {
	return r.ApiService.V1LdapLdapServersGetExecute(r)
}

/*
V1LdapLdapServersGet Retrieve all LDAP Servers. 

Retrieves all not migrated, LDAP Servers.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LdapAPIV1LdapLdapServersGetRequest
*/
func (a *LdapAPIService) V1LdapLdapServersGet(ctx context.Context) LdapAPIV1LdapLdapServersGetRequest {
	return LdapAPIV1LdapLdapServersGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []LdapServer
func (a *LdapAPIService) V1LdapLdapServersGetExecute(r LdapAPIV1LdapLdapServersGetRequest) ([]LdapServer, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []LdapServer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LdapAPIService.V1LdapLdapServersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ldap/ldap-servers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LdapAPIV1LdapServersGetRequest struct {
	ctx context.Context
	ApiService LdapAPI
}

func (r LdapAPIV1LdapServersGetRequest) Execute() ([]LdapServer, *http.Response, error) {
	return r.ApiService.V1LdapServersGetExecute(r)
}

/*
V1LdapServersGet Retrieve all Servers including LDAP and Cloud Identity Providers. 

Retrieve all active Servers including LDAP and Cloud Identity Providers.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LdapAPIV1LdapServersGetRequest
*/
func (a *LdapAPIService) V1LdapServersGet(ctx context.Context) LdapAPIV1LdapServersGetRequest {
	return LdapAPIV1LdapServersGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []LdapServer
func (a *LdapAPIService) V1LdapServersGetExecute(r LdapAPIV1LdapServersGetRequest) ([]LdapServer, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []LdapServer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LdapAPIService.V1LdapServersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ldap/servers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
