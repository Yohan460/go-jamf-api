/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the VerbosePackageDeploymentResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VerbosePackageDeploymentResponse{}

// VerbosePackageDeploymentResponse struct for VerbosePackageDeploymentResponse
type VerbosePackageDeploymentResponse struct {
	QueuedCommands []VerbosePackageDeploymentResponseQueuedCommandsInner `json:"queuedCommands,omitempty"`
	Errors []VerbosePackageDeploymentResponseErrorsInner `json:"errors,omitempty"`
}

// NewVerbosePackageDeploymentResponse instantiates a new VerbosePackageDeploymentResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerbosePackageDeploymentResponse() *VerbosePackageDeploymentResponse {
	this := VerbosePackageDeploymentResponse{}
	return &this
}

// NewVerbosePackageDeploymentResponseWithDefaults instantiates a new VerbosePackageDeploymentResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerbosePackageDeploymentResponseWithDefaults() *VerbosePackageDeploymentResponse {
	this := VerbosePackageDeploymentResponse{}
	return &this
}

// GetQueuedCommands returns the QueuedCommands field value if set, zero value otherwise.
func (o *VerbosePackageDeploymentResponse) GetQueuedCommands() []VerbosePackageDeploymentResponseQueuedCommandsInner {
	if o == nil || IsNil(o.QueuedCommands) {
		var ret []VerbosePackageDeploymentResponseQueuedCommandsInner
		return ret
	}
	return o.QueuedCommands
}

// GetQueuedCommandsOk returns a tuple with the QueuedCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerbosePackageDeploymentResponse) GetQueuedCommandsOk() ([]VerbosePackageDeploymentResponseQueuedCommandsInner, bool) {
	if o == nil || IsNil(o.QueuedCommands) {
		return nil, false
	}
	return o.QueuedCommands, true
}

// HasQueuedCommands returns a boolean if a field has been set.
func (o *VerbosePackageDeploymentResponse) HasQueuedCommands() bool {
	if o != nil && !IsNil(o.QueuedCommands) {
		return true
	}

	return false
}

// SetQueuedCommands gets a reference to the given []VerbosePackageDeploymentResponseQueuedCommandsInner and assigns it to the QueuedCommands field.
func (o *VerbosePackageDeploymentResponse) SetQueuedCommands(v []VerbosePackageDeploymentResponseQueuedCommandsInner) {
	o.QueuedCommands = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *VerbosePackageDeploymentResponse) GetErrors() []VerbosePackageDeploymentResponseErrorsInner {
	if o == nil || IsNil(o.Errors) {
		var ret []VerbosePackageDeploymentResponseErrorsInner
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerbosePackageDeploymentResponse) GetErrorsOk() ([]VerbosePackageDeploymentResponseErrorsInner, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *VerbosePackageDeploymentResponse) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []VerbosePackageDeploymentResponseErrorsInner and assigns it to the Errors field.
func (o *VerbosePackageDeploymentResponse) SetErrors(v []VerbosePackageDeploymentResponseErrorsInner) {
	o.Errors = v
}

func (o VerbosePackageDeploymentResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VerbosePackageDeploymentResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.QueuedCommands) {
		toSerialize["queuedCommands"] = o.QueuedCommands
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

type NullableVerbosePackageDeploymentResponse struct {
	value *VerbosePackageDeploymentResponse
	isSet bool
}

func (v NullableVerbosePackageDeploymentResponse) Get() *VerbosePackageDeploymentResponse {
	return v.value
}

func (v *NullableVerbosePackageDeploymentResponse) Set(val *VerbosePackageDeploymentResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableVerbosePackageDeploymentResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableVerbosePackageDeploymentResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerbosePackageDeploymentResponse(val *VerbosePackageDeploymentResponse) *NullableVerbosePackageDeploymentResponse {
	return &NullableVerbosePackageDeploymentResponse{value: val, isSet: true}
}

func (v NullableVerbosePackageDeploymentResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerbosePackageDeploymentResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


