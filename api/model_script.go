/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// Script struct for Script
type Script struct {
	Id *string `json:"id,omitempty"`
	Name string `json:"name"`
	Info *string `json:"info,omitempty"`
	Notes *string `json:"notes,omitempty"`
	Priority *string `json:"priority,omitempty"`
	CategoryId *string `json:"categoryId,omitempty"`
	CategoryName *string `json:"categoryName,omitempty"`
	Parameter4 *string `json:"parameter4,omitempty"`
	Parameter5 *string `json:"parameter5,omitempty"`
	Parameter6 *string `json:"parameter6,omitempty"`
	Parameter7 *string `json:"parameter7,omitempty"`
	Parameter8 *string `json:"parameter8,omitempty"`
	Parameter9 *string `json:"parameter9,omitempty"`
	Parameter10 *string `json:"parameter10,omitempty"`
	Parameter11 *string `json:"parameter11,omitempty"`
	OsRequirements *string `json:"osRequirements,omitempty"`
	ScriptContents *string `json:"scriptContents,omitempty"`
}

// NewScript instantiates a new Script object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScript(name string) *Script {
	this := Script{}
	this.Name = name
	return &this
}

// NewScriptWithDefaults instantiates a new Script object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScriptWithDefaults() *Script {
	this := Script{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Script) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Script) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Script) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Script) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Script) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Script) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Script) SetName(v string) {
	o.Name = v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *Script) GetInfo() string {
	if o == nil || o.Info == nil {
		var ret string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Script) GetInfoOk() (*string, bool) {
	if o == nil || o.Info == nil {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *Script) HasInfo() bool {
	if o != nil && o.Info != nil {
		return true
	}

	return false
}

// SetInfo gets a reference to the given string and assigns it to the Info field.
func (o *Script) SetInfo(v string) {
	o.Info = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *Script) GetNotes() string {
	if o == nil || o.Notes == nil {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Script) GetNotesOk() (*string, bool) {
	if o == nil || o.Notes == nil {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *Script) HasNotes() bool {
	if o != nil && o.Notes != nil {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *Script) SetNotes(v string) {
	o.Notes = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *Script) GetPriority() string {
	if o == nil || o.Priority == nil {
		var ret string
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Script) GetPriorityOk() (*string, bool) {
	if o == nil || o.Priority == nil {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *Script) HasPriority() bool {
	if o != nil && o.Priority != nil {
		return true
	}

	return false
}

// SetPriority gets a reference to the given string and assigns it to the Priority field.
func (o *Script) SetPriority(v string) {
	o.Priority = &v
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise.
func (o *Script) GetCategoryId() string {
	if o == nil || o.CategoryId == nil {
		var ret string
		return ret
	}
	return *o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Script) GetCategoryIdOk() (*string, bool) {
	if o == nil || o.CategoryId == nil {
		return nil, false
	}
	return o.CategoryId, true
}

// HasCategoryId returns a boolean if a field has been set.
func (o *Script) HasCategoryId() bool {
	if o != nil && o.CategoryId != nil {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given string and assigns it to the CategoryId field.
func (o *Script) SetCategoryId(v string) {
	o.CategoryId = &v
}

// GetCategoryName returns the CategoryName field value if set, zero value otherwise.
func (o *Script) GetCategoryName() string {
	if o == nil || o.CategoryName == nil {
		var ret string
		return ret
	}
	return *o.CategoryName
}

// GetCategoryNameOk returns a tuple with the CategoryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Script) GetCategoryNameOk() (*string, bool) {
	if o == nil || o.CategoryName == nil {
		return nil, false
	}
	return o.CategoryName, true
}

// HasCategoryName returns a boolean if a field has been set.
func (o *Script) HasCategoryName() bool {
	if o != nil && o.CategoryName != nil {
		return true
	}

	return false
}

// SetCategoryName gets a reference to the given string and assigns it to the CategoryName field.
func (o *Script) SetCategoryName(v string) {
	o.CategoryName = &v
}

// GetParameter4 returns the Parameter4 field value if set, zero value otherwise.
func (o *Script) GetParameter4() string {
	if o == nil || o.Parameter4 == nil {
		var ret string
		return ret
	}
	return *o.Parameter4
}

// GetParameter4Ok returns a tuple with the Parameter4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Script) GetParameter4Ok() (*string, bool) {
	if o == nil || o.Parameter4 == nil {
		return nil, false
	}
	return o.Parameter4, true
}

// HasParameter4 returns a boolean if a field has been set.
func (o *Script) HasParameter4() bool {
	if o != nil && o.Parameter4 != nil {
		return true
	}

	return false
}

// SetParameter4 gets a reference to the given string and assigns it to the Parameter4 field.
func (o *Script) SetParameter4(v string) {
	o.Parameter4 = &v
}

// GetParameter5 returns the Parameter5 field value if set, zero value otherwise.
func (o *Script) GetParameter5() string {
	if o == nil || o.Parameter5 == nil {
		var ret string
		return ret
	}
	return *o.Parameter5
}

// GetParameter5Ok returns a tuple with the Parameter5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Script) GetParameter5Ok() (*string, bool) {
	if o == nil || o.Parameter5 == nil {
		return nil, false
	}
	return o.Parameter5, true
}

// HasParameter5 returns a boolean if a field has been set.
func (o *Script) HasParameter5() bool {
	if o != nil && o.Parameter5 != nil {
		return true
	}

	return false
}

// SetParameter5 gets a reference to the given string and assigns it to the Parameter5 field.
func (o *Script) SetParameter5(v string) {
	o.Parameter5 = &v
}

// GetParameter6 returns the Parameter6 field value if set, zero value otherwise.
func (o *Script) GetParameter6() string {
	if o == nil || o.Parameter6 == nil {
		var ret string
		return ret
	}
	return *o.Parameter6
}

// GetParameter6Ok returns a tuple with the Parameter6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Script) GetParameter6Ok() (*string, bool) {
	if o == nil || o.Parameter6 == nil {
		return nil, false
	}
	return o.Parameter6, true
}

// HasParameter6 returns a boolean if a field has been set.
func (o *Script) HasParameter6() bool {
	if o != nil && o.Parameter6 != nil {
		return true
	}

	return false
}

// SetParameter6 gets a reference to the given string and assigns it to the Parameter6 field.
func (o *Script) SetParameter6(v string) {
	o.Parameter6 = &v
}

// GetParameter7 returns the Parameter7 field value if set, zero value otherwise.
func (o *Script) GetParameter7() string {
	if o == nil || o.Parameter7 == nil {
		var ret string
		return ret
	}
	return *o.Parameter7
}

// GetParameter7Ok returns a tuple with the Parameter7 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Script) GetParameter7Ok() (*string, bool) {
	if o == nil || o.Parameter7 == nil {
		return nil, false
	}
	return o.Parameter7, true
}

// HasParameter7 returns a boolean if a field has been set.
func (o *Script) HasParameter7() bool {
	if o != nil && o.Parameter7 != nil {
		return true
	}

	return false
}

// SetParameter7 gets a reference to the given string and assigns it to the Parameter7 field.
func (o *Script) SetParameter7(v string) {
	o.Parameter7 = &v
}

// GetParameter8 returns the Parameter8 field value if set, zero value otherwise.
func (o *Script) GetParameter8() string {
	if o == nil || o.Parameter8 == nil {
		var ret string
		return ret
	}
	return *o.Parameter8
}

// GetParameter8Ok returns a tuple with the Parameter8 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Script) GetParameter8Ok() (*string, bool) {
	if o == nil || o.Parameter8 == nil {
		return nil, false
	}
	return o.Parameter8, true
}

// HasParameter8 returns a boolean if a field has been set.
func (o *Script) HasParameter8() bool {
	if o != nil && o.Parameter8 != nil {
		return true
	}

	return false
}

// SetParameter8 gets a reference to the given string and assigns it to the Parameter8 field.
func (o *Script) SetParameter8(v string) {
	o.Parameter8 = &v
}

// GetParameter9 returns the Parameter9 field value if set, zero value otherwise.
func (o *Script) GetParameter9() string {
	if o == nil || o.Parameter9 == nil {
		var ret string
		return ret
	}
	return *o.Parameter9
}

// GetParameter9Ok returns a tuple with the Parameter9 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Script) GetParameter9Ok() (*string, bool) {
	if o == nil || o.Parameter9 == nil {
		return nil, false
	}
	return o.Parameter9, true
}

// HasParameter9 returns a boolean if a field has been set.
func (o *Script) HasParameter9() bool {
	if o != nil && o.Parameter9 != nil {
		return true
	}

	return false
}

// SetParameter9 gets a reference to the given string and assigns it to the Parameter9 field.
func (o *Script) SetParameter9(v string) {
	o.Parameter9 = &v
}

// GetParameter10 returns the Parameter10 field value if set, zero value otherwise.
func (o *Script) GetParameter10() string {
	if o == nil || o.Parameter10 == nil {
		var ret string
		return ret
	}
	return *o.Parameter10
}

// GetParameter10Ok returns a tuple with the Parameter10 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Script) GetParameter10Ok() (*string, bool) {
	if o == nil || o.Parameter10 == nil {
		return nil, false
	}
	return o.Parameter10, true
}

// HasParameter10 returns a boolean if a field has been set.
func (o *Script) HasParameter10() bool {
	if o != nil && o.Parameter10 != nil {
		return true
	}

	return false
}

// SetParameter10 gets a reference to the given string and assigns it to the Parameter10 field.
func (o *Script) SetParameter10(v string) {
	o.Parameter10 = &v
}

// GetParameter11 returns the Parameter11 field value if set, zero value otherwise.
func (o *Script) GetParameter11() string {
	if o == nil || o.Parameter11 == nil {
		var ret string
		return ret
	}
	return *o.Parameter11
}

// GetParameter11Ok returns a tuple with the Parameter11 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Script) GetParameter11Ok() (*string, bool) {
	if o == nil || o.Parameter11 == nil {
		return nil, false
	}
	return o.Parameter11, true
}

// HasParameter11 returns a boolean if a field has been set.
func (o *Script) HasParameter11() bool {
	if o != nil && o.Parameter11 != nil {
		return true
	}

	return false
}

// SetParameter11 gets a reference to the given string and assigns it to the Parameter11 field.
func (o *Script) SetParameter11(v string) {
	o.Parameter11 = &v
}

// GetOsRequirements returns the OsRequirements field value if set, zero value otherwise.
func (o *Script) GetOsRequirements() string {
	if o == nil || o.OsRequirements == nil {
		var ret string
		return ret
	}
	return *o.OsRequirements
}

// GetOsRequirementsOk returns a tuple with the OsRequirements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Script) GetOsRequirementsOk() (*string, bool) {
	if o == nil || o.OsRequirements == nil {
		return nil, false
	}
	return o.OsRequirements, true
}

// HasOsRequirements returns a boolean if a field has been set.
func (o *Script) HasOsRequirements() bool {
	if o != nil && o.OsRequirements != nil {
		return true
	}

	return false
}

// SetOsRequirements gets a reference to the given string and assigns it to the OsRequirements field.
func (o *Script) SetOsRequirements(v string) {
	o.OsRequirements = &v
}

// GetScriptContents returns the ScriptContents field value if set, zero value otherwise.
func (o *Script) GetScriptContents() string {
	if o == nil || o.ScriptContents == nil {
		var ret string
		return ret
	}
	return *o.ScriptContents
}

// GetScriptContentsOk returns a tuple with the ScriptContents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Script) GetScriptContentsOk() (*string, bool) {
	if o == nil || o.ScriptContents == nil {
		return nil, false
	}
	return o.ScriptContents, true
}

// HasScriptContents returns a boolean if a field has been set.
func (o *Script) HasScriptContents() bool {
	if o != nil && o.ScriptContents != nil {
		return true
	}

	return false
}

// SetScriptContents gets a reference to the given string and assigns it to the ScriptContents field.
func (o *Script) SetScriptContents(v string) {
	o.ScriptContents = &v
}

func (o Script) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Info != nil {
		toSerialize["info"] = o.Info
	}
	if o.Notes != nil {
		toSerialize["notes"] = o.Notes
	}
	if o.Priority != nil {
		toSerialize["priority"] = o.Priority
	}
	if o.CategoryId != nil {
		toSerialize["categoryId"] = o.CategoryId
	}
	if o.CategoryName != nil {
		toSerialize["categoryName"] = o.CategoryName
	}
	if o.Parameter4 != nil {
		toSerialize["parameter4"] = o.Parameter4
	}
	if o.Parameter5 != nil {
		toSerialize["parameter5"] = o.Parameter5
	}
	if o.Parameter6 != nil {
		toSerialize["parameter6"] = o.Parameter6
	}
	if o.Parameter7 != nil {
		toSerialize["parameter7"] = o.Parameter7
	}
	if o.Parameter8 != nil {
		toSerialize["parameter8"] = o.Parameter8
	}
	if o.Parameter9 != nil {
		toSerialize["parameter9"] = o.Parameter9
	}
	if o.Parameter10 != nil {
		toSerialize["parameter10"] = o.Parameter10
	}
	if o.Parameter11 != nil {
		toSerialize["parameter11"] = o.Parameter11
	}
	if o.OsRequirements != nil {
		toSerialize["osRequirements"] = o.OsRequirements
	}
	if o.ScriptContents != nil {
		toSerialize["scriptContents"] = o.ScriptContents
	}
	return json.Marshal(toSerialize)
}

type NullableScript struct {
	value *Script
	isSet bool
}

func (v NullableScript) Get() *Script {
	return v.value
}

func (v *NullableScript) Set(val *Script) {
	v.value = val
	v.isSet = true
}

func (v NullableScript) IsSet() bool {
	return v.isSet
}

func (v *NullableScript) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScript(val *Script) *NullableScript {
	return &NullableScript{value: val, isSet: true}
}

func (v NullableScript) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScript) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


