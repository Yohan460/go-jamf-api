/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the LapsUserPasswordResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LapsUserPasswordResponse{}

// LapsUserPasswordResponse struct for LapsUserPasswordResponse
type LapsUserPasswordResponse struct {
	LapsUserPasswordList []LapsUserPassword `json:"lapsUserPasswordList,omitempty"`
}

// NewLapsUserPasswordResponse instantiates a new LapsUserPasswordResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLapsUserPasswordResponse() *LapsUserPasswordResponse {
	this := LapsUserPasswordResponse{}
	return &this
}

// NewLapsUserPasswordResponseWithDefaults instantiates a new LapsUserPasswordResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLapsUserPasswordResponseWithDefaults() *LapsUserPasswordResponse {
	this := LapsUserPasswordResponse{}
	return &this
}

// GetLapsUserPasswordList returns the LapsUserPasswordList field value if set, zero value otherwise.
func (o *LapsUserPasswordResponse) GetLapsUserPasswordList() []LapsUserPassword {
	if o == nil || IsNil(o.LapsUserPasswordList) {
		var ret []LapsUserPassword
		return ret
	}
	return o.LapsUserPasswordList
}

// GetLapsUserPasswordListOk returns a tuple with the LapsUserPasswordList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LapsUserPasswordResponse) GetLapsUserPasswordListOk() ([]LapsUserPassword, bool) {
	if o == nil || IsNil(o.LapsUserPasswordList) {
		return nil, false
	}
	return o.LapsUserPasswordList, true
}

// HasLapsUserPasswordList returns a boolean if a field has been set.
func (o *LapsUserPasswordResponse) HasLapsUserPasswordList() bool {
	if o != nil && !IsNil(o.LapsUserPasswordList) {
		return true
	}

	return false
}

// SetLapsUserPasswordList gets a reference to the given []LapsUserPassword and assigns it to the LapsUserPasswordList field.
func (o *LapsUserPasswordResponse) SetLapsUserPasswordList(v []LapsUserPassword) {
	o.LapsUserPasswordList = v
}

func (o LapsUserPasswordResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LapsUserPasswordResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LapsUserPasswordList) {
		toSerialize["lapsUserPasswordList"] = o.LapsUserPasswordList
	}
	return toSerialize, nil
}

type NullableLapsUserPasswordResponse struct {
	value *LapsUserPasswordResponse
	isSet bool
}

func (v NullableLapsUserPasswordResponse) Get() *LapsUserPasswordResponse {
	return v.value
}

func (v *NullableLapsUserPasswordResponse) Set(val *LapsUserPasswordResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableLapsUserPasswordResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableLapsUserPasswordResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLapsUserPasswordResponse(val *LapsUserPasswordResponse) *NullableLapsUserPasswordResponse {
	return &NullableLapsUserPasswordResponse{value: val, isSet: true}
}

func (v NullableLapsUserPasswordResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLapsUserPasswordResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


