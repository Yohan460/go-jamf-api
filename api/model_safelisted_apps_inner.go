/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// SafelistedAppsInner struct for SafelistedAppsInner
type SafelistedAppsInner struct {
	Name *string `json:"name,omitempty"`
	BundleId *string `json:"bundleId,omitempty"`
}

// NewSafelistedAppsInner instantiates a new SafelistedAppsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSafelistedAppsInner() *SafelistedAppsInner {
	this := SafelistedAppsInner{}
	return &this
}

// NewSafelistedAppsInnerWithDefaults instantiates a new SafelistedAppsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSafelistedAppsInnerWithDefaults() *SafelistedAppsInner {
	this := SafelistedAppsInner{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SafelistedAppsInner) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafelistedAppsInner) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SafelistedAppsInner) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SafelistedAppsInner) SetName(v string) {
	o.Name = &v
}

// GetBundleId returns the BundleId field value if set, zero value otherwise.
func (o *SafelistedAppsInner) GetBundleId() string {
	if o == nil || o.BundleId == nil {
		var ret string
		return ret
	}
	return *o.BundleId
}

// GetBundleIdOk returns a tuple with the BundleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafelistedAppsInner) GetBundleIdOk() (*string, bool) {
	if o == nil || o.BundleId == nil {
		return nil, false
	}
	return o.BundleId, true
}

// HasBundleId returns a boolean if a field has been set.
func (o *SafelistedAppsInner) HasBundleId() bool {
	if o != nil && o.BundleId != nil {
		return true
	}

	return false
}

// SetBundleId gets a reference to the given string and assigns it to the BundleId field.
func (o *SafelistedAppsInner) SetBundleId(v string) {
	o.BundleId = &v
}

func (o SafelistedAppsInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.BundleId != nil {
		toSerialize["bundleId"] = o.BundleId
	}
	return json.Marshal(toSerialize)
}

type NullableSafelistedAppsInner struct {
	value *SafelistedAppsInner
	isSet bool
}

func (v NullableSafelistedAppsInner) Get() *SafelistedAppsInner {
	return v.value
}

func (v *NullableSafelistedAppsInner) Set(val *SafelistedAppsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSafelistedAppsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSafelistedAppsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSafelistedAppsInner(val *SafelistedAppsInner) *NullableSafelistedAppsInner {
	return &NullableSafelistedAppsInner{value: val, isSet: true}
}

func (v NullableSafelistedAppsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSafelistedAppsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


