/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the PatchSoftwareTitleConfigurationPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchSoftwareTitleConfigurationPatch{}

// PatchSoftwareTitleConfigurationPatch struct for PatchSoftwareTitleConfigurationPatch
type PatchSoftwareTitleConfigurationPatch struct {
	DisplayName *string `json:"displayName,omitempty"`
	CategoryId *string `json:"categoryId,omitempty"`
	SiteId *string `json:"siteId,omitempty"`
	UiNotifications *bool `json:"uiNotifications,omitempty"`
	EmailNotifications *bool `json:"emailNotifications,omitempty"`
	SoftwareTitleId *string `json:"softwareTitleId,omitempty"`
	Packages []PatchSoftwareTitlePackages `json:"packages,omitempty"`
	ExtensionAttributes []PatchSoftwareTitleConfigurationExtensionAttributes `json:"extensionAttributes,omitempty"`
}

// NewPatchSoftwareTitleConfigurationPatch instantiates a new PatchSoftwareTitleConfigurationPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchSoftwareTitleConfigurationPatch() *PatchSoftwareTitleConfigurationPatch {
	this := PatchSoftwareTitleConfigurationPatch{}
	return &this
}

// NewPatchSoftwareTitleConfigurationPatchWithDefaults instantiates a new PatchSoftwareTitleConfigurationPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchSoftwareTitleConfigurationPatchWithDefaults() *PatchSoftwareTitleConfigurationPatch {
	this := PatchSoftwareTitleConfigurationPatch{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *PatchSoftwareTitleConfigurationPatch) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSoftwareTitleConfigurationPatch) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *PatchSoftwareTitleConfigurationPatch) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *PatchSoftwareTitleConfigurationPatch) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise.
func (o *PatchSoftwareTitleConfigurationPatch) GetCategoryId() string {
	if o == nil || IsNil(o.CategoryId) {
		var ret string
		return ret
	}
	return *o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSoftwareTitleConfigurationPatch) GetCategoryIdOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryId) {
		return nil, false
	}
	return o.CategoryId, true
}

// HasCategoryId returns a boolean if a field has been set.
func (o *PatchSoftwareTitleConfigurationPatch) HasCategoryId() bool {
	if o != nil && !IsNil(o.CategoryId) {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given string and assigns it to the CategoryId field.
func (o *PatchSoftwareTitleConfigurationPatch) SetCategoryId(v string) {
	o.CategoryId = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *PatchSoftwareTitleConfigurationPatch) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSoftwareTitleConfigurationPatch) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *PatchSoftwareTitleConfigurationPatch) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *PatchSoftwareTitleConfigurationPatch) SetSiteId(v string) {
	o.SiteId = &v
}

// GetUiNotifications returns the UiNotifications field value if set, zero value otherwise.
func (o *PatchSoftwareTitleConfigurationPatch) GetUiNotifications() bool {
	if o == nil || IsNil(o.UiNotifications) {
		var ret bool
		return ret
	}
	return *o.UiNotifications
}

// GetUiNotificationsOk returns a tuple with the UiNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSoftwareTitleConfigurationPatch) GetUiNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.UiNotifications) {
		return nil, false
	}
	return o.UiNotifications, true
}

// HasUiNotifications returns a boolean if a field has been set.
func (o *PatchSoftwareTitleConfigurationPatch) HasUiNotifications() bool {
	if o != nil && !IsNil(o.UiNotifications) {
		return true
	}

	return false
}

// SetUiNotifications gets a reference to the given bool and assigns it to the UiNotifications field.
func (o *PatchSoftwareTitleConfigurationPatch) SetUiNotifications(v bool) {
	o.UiNotifications = &v
}

// GetEmailNotifications returns the EmailNotifications field value if set, zero value otherwise.
func (o *PatchSoftwareTitleConfigurationPatch) GetEmailNotifications() bool {
	if o == nil || IsNil(o.EmailNotifications) {
		var ret bool
		return ret
	}
	return *o.EmailNotifications
}

// GetEmailNotificationsOk returns a tuple with the EmailNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSoftwareTitleConfigurationPatch) GetEmailNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.EmailNotifications) {
		return nil, false
	}
	return o.EmailNotifications, true
}

// HasEmailNotifications returns a boolean if a field has been set.
func (o *PatchSoftwareTitleConfigurationPatch) HasEmailNotifications() bool {
	if o != nil && !IsNil(o.EmailNotifications) {
		return true
	}

	return false
}

// SetEmailNotifications gets a reference to the given bool and assigns it to the EmailNotifications field.
func (o *PatchSoftwareTitleConfigurationPatch) SetEmailNotifications(v bool) {
	o.EmailNotifications = &v
}

// GetSoftwareTitleId returns the SoftwareTitleId field value if set, zero value otherwise.
func (o *PatchSoftwareTitleConfigurationPatch) GetSoftwareTitleId() string {
	if o == nil || IsNil(o.SoftwareTitleId) {
		var ret string
		return ret
	}
	return *o.SoftwareTitleId
}

// GetSoftwareTitleIdOk returns a tuple with the SoftwareTitleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSoftwareTitleConfigurationPatch) GetSoftwareTitleIdOk() (*string, bool) {
	if o == nil || IsNil(o.SoftwareTitleId) {
		return nil, false
	}
	return o.SoftwareTitleId, true
}

// HasSoftwareTitleId returns a boolean if a field has been set.
func (o *PatchSoftwareTitleConfigurationPatch) HasSoftwareTitleId() bool {
	if o != nil && !IsNil(o.SoftwareTitleId) {
		return true
	}

	return false
}

// SetSoftwareTitleId gets a reference to the given string and assigns it to the SoftwareTitleId field.
func (o *PatchSoftwareTitleConfigurationPatch) SetSoftwareTitleId(v string) {
	o.SoftwareTitleId = &v
}

// GetPackages returns the Packages field value if set, zero value otherwise.
func (o *PatchSoftwareTitleConfigurationPatch) GetPackages() []PatchSoftwareTitlePackages {
	if o == nil || IsNil(o.Packages) {
		var ret []PatchSoftwareTitlePackages
		return ret
	}
	return o.Packages
}

// GetPackagesOk returns a tuple with the Packages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSoftwareTitleConfigurationPatch) GetPackagesOk() ([]PatchSoftwareTitlePackages, bool) {
	if o == nil || IsNil(o.Packages) {
		return nil, false
	}
	return o.Packages, true
}

// HasPackages returns a boolean if a field has been set.
func (o *PatchSoftwareTitleConfigurationPatch) HasPackages() bool {
	if o != nil && !IsNil(o.Packages) {
		return true
	}

	return false
}

// SetPackages gets a reference to the given []PatchSoftwareTitlePackages and assigns it to the Packages field.
func (o *PatchSoftwareTitleConfigurationPatch) SetPackages(v []PatchSoftwareTitlePackages) {
	o.Packages = v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *PatchSoftwareTitleConfigurationPatch) GetExtensionAttributes() []PatchSoftwareTitleConfigurationExtensionAttributes {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret []PatchSoftwareTitleConfigurationExtensionAttributes
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSoftwareTitleConfigurationPatch) GetExtensionAttributesOk() ([]PatchSoftwareTitleConfigurationExtensionAttributes, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return nil, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *PatchSoftwareTitleConfigurationPatch) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given []PatchSoftwareTitleConfigurationExtensionAttributes and assigns it to the ExtensionAttributes field.
func (o *PatchSoftwareTitleConfigurationPatch) SetExtensionAttributes(v []PatchSoftwareTitleConfigurationExtensionAttributes) {
	o.ExtensionAttributes = v
}

func (o PatchSoftwareTitleConfigurationPatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchSoftwareTitleConfigurationPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.CategoryId) {
		toSerialize["categoryId"] = o.CategoryId
	}
	if !IsNil(o.SiteId) {
		toSerialize["siteId"] = o.SiteId
	}
	if !IsNil(o.UiNotifications) {
		toSerialize["uiNotifications"] = o.UiNotifications
	}
	if !IsNil(o.EmailNotifications) {
		toSerialize["emailNotifications"] = o.EmailNotifications
	}
	if !IsNil(o.SoftwareTitleId) {
		toSerialize["softwareTitleId"] = o.SoftwareTitleId
	}
	if !IsNil(o.Packages) {
		toSerialize["packages"] = o.Packages
	}
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extensionAttributes"] = o.ExtensionAttributes
	}
	return toSerialize, nil
}

type NullablePatchSoftwareTitleConfigurationPatch struct {
	value *PatchSoftwareTitleConfigurationPatch
	isSet bool
}

func (v NullablePatchSoftwareTitleConfigurationPatch) Get() *PatchSoftwareTitleConfigurationPatch {
	return v.value
}

func (v *NullablePatchSoftwareTitleConfigurationPatch) Set(val *PatchSoftwareTitleConfigurationPatch) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchSoftwareTitleConfigurationPatch) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchSoftwareTitleConfigurationPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchSoftwareTitleConfigurationPatch(val *PatchSoftwareTitleConfigurationPatch) *NullablePatchSoftwareTitleConfigurationPatch {
	return &NullablePatchSoftwareTitleConfigurationPatch{value: val, isSet: true}
}

func (v NullablePatchSoftwareTitleConfigurationPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchSoftwareTitleConfigurationPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


