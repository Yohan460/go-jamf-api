/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the SmartSearchCriterion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmartSearchCriterion{}

// SmartSearchCriterion struct for SmartSearchCriterion
type SmartSearchCriterion struct {
	Name *string `json:"name,omitempty"`
	Priority *int64 `json:"priority,omitempty"`
	AndOr *string `json:"andOr,omitempty"`
	SearchType *string `json:"searchType,omitempty"`
	Value *string `json:"value,omitempty"`
	OpeningParen *bool `json:"openingParen,omitempty"`
	ClosingParen *bool `json:"closingParen,omitempty"`
}

// NewSmartSearchCriterion instantiates a new SmartSearchCriterion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartSearchCriterion() *SmartSearchCriterion {
	this := SmartSearchCriterion{}
	return &this
}

// NewSmartSearchCriterionWithDefaults instantiates a new SmartSearchCriterion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartSearchCriterionWithDefaults() *SmartSearchCriterion {
	this := SmartSearchCriterion{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SmartSearchCriterion) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartSearchCriterion) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SmartSearchCriterion) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SmartSearchCriterion) SetName(v string) {
	o.Name = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *SmartSearchCriterion) GetPriority() int64 {
	if o == nil || IsNil(o.Priority) {
		var ret int64
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartSearchCriterion) GetPriorityOk() (*int64, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *SmartSearchCriterion) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int64 and assigns it to the Priority field.
func (o *SmartSearchCriterion) SetPriority(v int64) {
	o.Priority = &v
}

// GetAndOr returns the AndOr field value if set, zero value otherwise.
func (o *SmartSearchCriterion) GetAndOr() string {
	if o == nil || IsNil(o.AndOr) {
		var ret string
		return ret
	}
	return *o.AndOr
}

// GetAndOrOk returns a tuple with the AndOr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartSearchCriterion) GetAndOrOk() (*string, bool) {
	if o == nil || IsNil(o.AndOr) {
		return nil, false
	}
	return o.AndOr, true
}

// HasAndOr returns a boolean if a field has been set.
func (o *SmartSearchCriterion) HasAndOr() bool {
	if o != nil && !IsNil(o.AndOr) {
		return true
	}

	return false
}

// SetAndOr gets a reference to the given string and assigns it to the AndOr field.
func (o *SmartSearchCriterion) SetAndOr(v string) {
	o.AndOr = &v
}

// GetSearchType returns the SearchType field value if set, zero value otherwise.
func (o *SmartSearchCriterion) GetSearchType() string {
	if o == nil || IsNil(o.SearchType) {
		var ret string
		return ret
	}
	return *o.SearchType
}

// GetSearchTypeOk returns a tuple with the SearchType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartSearchCriterion) GetSearchTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SearchType) {
		return nil, false
	}
	return o.SearchType, true
}

// HasSearchType returns a boolean if a field has been set.
func (o *SmartSearchCriterion) HasSearchType() bool {
	if o != nil && !IsNil(o.SearchType) {
		return true
	}

	return false
}

// SetSearchType gets a reference to the given string and assigns it to the SearchType field.
func (o *SmartSearchCriterion) SetSearchType(v string) {
	o.SearchType = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SmartSearchCriterion) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartSearchCriterion) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SmartSearchCriterion) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *SmartSearchCriterion) SetValue(v string) {
	o.Value = &v
}

// GetOpeningParen returns the OpeningParen field value if set, zero value otherwise.
func (o *SmartSearchCriterion) GetOpeningParen() bool {
	if o == nil || IsNil(o.OpeningParen) {
		var ret bool
		return ret
	}
	return *o.OpeningParen
}

// GetOpeningParenOk returns a tuple with the OpeningParen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartSearchCriterion) GetOpeningParenOk() (*bool, bool) {
	if o == nil || IsNil(o.OpeningParen) {
		return nil, false
	}
	return o.OpeningParen, true
}

// HasOpeningParen returns a boolean if a field has been set.
func (o *SmartSearchCriterion) HasOpeningParen() bool {
	if o != nil && !IsNil(o.OpeningParen) {
		return true
	}

	return false
}

// SetOpeningParen gets a reference to the given bool and assigns it to the OpeningParen field.
func (o *SmartSearchCriterion) SetOpeningParen(v bool) {
	o.OpeningParen = &v
}

// GetClosingParen returns the ClosingParen field value if set, zero value otherwise.
func (o *SmartSearchCriterion) GetClosingParen() bool {
	if o == nil || IsNil(o.ClosingParen) {
		var ret bool
		return ret
	}
	return *o.ClosingParen
}

// GetClosingParenOk returns a tuple with the ClosingParen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartSearchCriterion) GetClosingParenOk() (*bool, bool) {
	if o == nil || IsNil(o.ClosingParen) {
		return nil, false
	}
	return o.ClosingParen, true
}

// HasClosingParen returns a boolean if a field has been set.
func (o *SmartSearchCriterion) HasClosingParen() bool {
	if o != nil && !IsNil(o.ClosingParen) {
		return true
	}

	return false
}

// SetClosingParen gets a reference to the given bool and assigns it to the ClosingParen field.
func (o *SmartSearchCriterion) SetClosingParen(v bool) {
	o.ClosingParen = &v
}

func (o SmartSearchCriterion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmartSearchCriterion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.AndOr) {
		toSerialize["andOr"] = o.AndOr
	}
	if !IsNil(o.SearchType) {
		toSerialize["searchType"] = o.SearchType
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.OpeningParen) {
		toSerialize["openingParen"] = o.OpeningParen
	}
	if !IsNil(o.ClosingParen) {
		toSerialize["closingParen"] = o.ClosingParen
	}
	return toSerialize, nil
}

type NullableSmartSearchCriterion struct {
	value *SmartSearchCriterion
	isSet bool
}

func (v NullableSmartSearchCriterion) Get() *SmartSearchCriterion {
	return v.value
}

func (v *NullableSmartSearchCriterion) Set(val *SmartSearchCriterion) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartSearchCriterion) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartSearchCriterion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartSearchCriterion(val *SmartSearchCriterion) *NullableSmartSearchCriterion {
	return &NullableSmartSearchCriterion{value: val, isSet: true}
}

func (v NullableSmartSearchCriterion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartSearchCriterion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


