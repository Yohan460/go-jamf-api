/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the PatchSoftwareTitleExtensionAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchSoftwareTitleExtensionAttributes{}

// PatchSoftwareTitleExtensionAttributes struct for PatchSoftwareTitleExtensionAttributes
type PatchSoftwareTitleExtensionAttributes struct {
	EaId *string `json:"eaId,omitempty"`
	Accepted *bool `json:"accepted,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	ScriptContents *string `json:"scriptContents,omitempty"`
}

// NewPatchSoftwareTitleExtensionAttributes instantiates a new PatchSoftwareTitleExtensionAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchSoftwareTitleExtensionAttributes() *PatchSoftwareTitleExtensionAttributes {
	this := PatchSoftwareTitleExtensionAttributes{}
	return &this
}

// NewPatchSoftwareTitleExtensionAttributesWithDefaults instantiates a new PatchSoftwareTitleExtensionAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchSoftwareTitleExtensionAttributesWithDefaults() *PatchSoftwareTitleExtensionAttributes {
	this := PatchSoftwareTitleExtensionAttributes{}
	return &this
}

// GetEaId returns the EaId field value if set, zero value otherwise.
func (o *PatchSoftwareTitleExtensionAttributes) GetEaId() string {
	if o == nil || IsNil(o.EaId) {
		var ret string
		return ret
	}
	return *o.EaId
}

// GetEaIdOk returns a tuple with the EaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSoftwareTitleExtensionAttributes) GetEaIdOk() (*string, bool) {
	if o == nil || IsNil(o.EaId) {
		return nil, false
	}
	return o.EaId, true
}

// HasEaId returns a boolean if a field has been set.
func (o *PatchSoftwareTitleExtensionAttributes) HasEaId() bool {
	if o != nil && !IsNil(o.EaId) {
		return true
	}

	return false
}

// SetEaId gets a reference to the given string and assigns it to the EaId field.
func (o *PatchSoftwareTitleExtensionAttributes) SetEaId(v string) {
	o.EaId = &v
}

// GetAccepted returns the Accepted field value if set, zero value otherwise.
func (o *PatchSoftwareTitleExtensionAttributes) GetAccepted() bool {
	if o == nil || IsNil(o.Accepted) {
		var ret bool
		return ret
	}
	return *o.Accepted
}

// GetAcceptedOk returns a tuple with the Accepted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSoftwareTitleExtensionAttributes) GetAcceptedOk() (*bool, bool) {
	if o == nil || IsNil(o.Accepted) {
		return nil, false
	}
	return o.Accepted, true
}

// HasAccepted returns a boolean if a field has been set.
func (o *PatchSoftwareTitleExtensionAttributes) HasAccepted() bool {
	if o != nil && !IsNil(o.Accepted) {
		return true
	}

	return false
}

// SetAccepted gets a reference to the given bool and assigns it to the Accepted field.
func (o *PatchSoftwareTitleExtensionAttributes) SetAccepted(v bool) {
	o.Accepted = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *PatchSoftwareTitleExtensionAttributes) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSoftwareTitleExtensionAttributes) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *PatchSoftwareTitleExtensionAttributes) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *PatchSoftwareTitleExtensionAttributes) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetScriptContents returns the ScriptContents field value if set, zero value otherwise.
func (o *PatchSoftwareTitleExtensionAttributes) GetScriptContents() string {
	if o == nil || IsNil(o.ScriptContents) {
		var ret string
		return ret
	}
	return *o.ScriptContents
}

// GetScriptContentsOk returns a tuple with the ScriptContents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSoftwareTitleExtensionAttributes) GetScriptContentsOk() (*string, bool) {
	if o == nil || IsNil(o.ScriptContents) {
		return nil, false
	}
	return o.ScriptContents, true
}

// HasScriptContents returns a boolean if a field has been set.
func (o *PatchSoftwareTitleExtensionAttributes) HasScriptContents() bool {
	if o != nil && !IsNil(o.ScriptContents) {
		return true
	}

	return false
}

// SetScriptContents gets a reference to the given string and assigns it to the ScriptContents field.
func (o *PatchSoftwareTitleExtensionAttributes) SetScriptContents(v string) {
	o.ScriptContents = &v
}

func (o PatchSoftwareTitleExtensionAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchSoftwareTitleExtensionAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EaId) {
		toSerialize["eaId"] = o.EaId
	}
	if !IsNil(o.Accepted) {
		toSerialize["accepted"] = o.Accepted
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.ScriptContents) {
		toSerialize["scriptContents"] = o.ScriptContents
	}
	return toSerialize, nil
}

type NullablePatchSoftwareTitleExtensionAttributes struct {
	value *PatchSoftwareTitleExtensionAttributes
	isSet bool
}

func (v NullablePatchSoftwareTitleExtensionAttributes) Get() *PatchSoftwareTitleExtensionAttributes {
	return v.value
}

func (v *NullablePatchSoftwareTitleExtensionAttributes) Set(val *PatchSoftwareTitleExtensionAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchSoftwareTitleExtensionAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchSoftwareTitleExtensionAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchSoftwareTitleExtensionAttributes(val *PatchSoftwareTitleExtensionAttributes) *NullablePatchSoftwareTitleExtensionAttributes {
	return &NullablePatchSoftwareTitleExtensionAttributes{value: val, isSet: true}
}

func (v NullablePatchSoftwareTitleExtensionAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchSoftwareTitleExtensionAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


