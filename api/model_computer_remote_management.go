/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ComputerRemoteManagement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComputerRemoteManagement{}

// ComputerRemoteManagement struct for ComputerRemoteManagement
type ComputerRemoteManagement struct {
	Managed *bool `json:"managed,omitempty"`
	ManagementUsername *string `json:"managementUsername,omitempty"`
	ManagementPassword *string `json:"managementPassword,omitempty"`
}

// NewComputerRemoteManagement instantiates a new ComputerRemoteManagement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputerRemoteManagement() *ComputerRemoteManagement {
	this := ComputerRemoteManagement{}
	return &this
}

// NewComputerRemoteManagementWithDefaults instantiates a new ComputerRemoteManagement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputerRemoteManagementWithDefaults() *ComputerRemoteManagement {
	this := ComputerRemoteManagement{}
	return &this
}

// GetManaged returns the Managed field value if set, zero value otherwise.
func (o *ComputerRemoteManagement) GetManaged() bool {
	if o == nil || IsNil(o.Managed) {
		var ret bool
		return ret
	}
	return *o.Managed
}

// GetManagedOk returns a tuple with the Managed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerRemoteManagement) GetManagedOk() (*bool, bool) {
	if o == nil || IsNil(o.Managed) {
		return nil, false
	}
	return o.Managed, true
}

// HasManaged returns a boolean if a field has been set.
func (o *ComputerRemoteManagement) HasManaged() bool {
	if o != nil && !IsNil(o.Managed) {
		return true
	}

	return false
}

// SetManaged gets a reference to the given bool and assigns it to the Managed field.
func (o *ComputerRemoteManagement) SetManaged(v bool) {
	o.Managed = &v
}

// GetManagementUsername returns the ManagementUsername field value if set, zero value otherwise.
func (o *ComputerRemoteManagement) GetManagementUsername() string {
	if o == nil || IsNil(o.ManagementUsername) {
		var ret string
		return ret
	}
	return *o.ManagementUsername
}

// GetManagementUsernameOk returns a tuple with the ManagementUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerRemoteManagement) GetManagementUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.ManagementUsername) {
		return nil, false
	}
	return o.ManagementUsername, true
}

// HasManagementUsername returns a boolean if a field has been set.
func (o *ComputerRemoteManagement) HasManagementUsername() bool {
	if o != nil && !IsNil(o.ManagementUsername) {
		return true
	}

	return false
}

// SetManagementUsername gets a reference to the given string and assigns it to the ManagementUsername field.
func (o *ComputerRemoteManagement) SetManagementUsername(v string) {
	o.ManagementUsername = &v
}

// GetManagementPassword returns the ManagementPassword field value if set, zero value otherwise.
func (o *ComputerRemoteManagement) GetManagementPassword() string {
	if o == nil || IsNil(o.ManagementPassword) {
		var ret string
		return ret
	}
	return *o.ManagementPassword
}

// GetManagementPasswordOk returns a tuple with the ManagementPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerRemoteManagement) GetManagementPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.ManagementPassword) {
		return nil, false
	}
	return o.ManagementPassword, true
}

// HasManagementPassword returns a boolean if a field has been set.
func (o *ComputerRemoteManagement) HasManagementPassword() bool {
	if o != nil && !IsNil(o.ManagementPassword) {
		return true
	}

	return false
}

// SetManagementPassword gets a reference to the given string and assigns it to the ManagementPassword field.
func (o *ComputerRemoteManagement) SetManagementPassword(v string) {
	o.ManagementPassword = &v
}

func (o ComputerRemoteManagement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComputerRemoteManagement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Managed) {
		toSerialize["managed"] = o.Managed
	}
	if !IsNil(o.ManagementUsername) {
		toSerialize["managementUsername"] = o.ManagementUsername
	}
	if !IsNil(o.ManagementPassword) {
		toSerialize["managementPassword"] = o.ManagementPassword
	}
	return toSerialize, nil
}

type NullableComputerRemoteManagement struct {
	value *ComputerRemoteManagement
	isSet bool
}

func (v NullableComputerRemoteManagement) Get() *ComputerRemoteManagement {
	return v.value
}

func (v *NullableComputerRemoteManagement) Set(val *ComputerRemoteManagement) {
	v.value = val
	v.isSet = true
}

func (v NullableComputerRemoteManagement) IsSet() bool {
	return v.isSet
}

func (v *NullableComputerRemoteManagement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputerRemoteManagement(val *ComputerRemoteManagement) *NullableComputerRemoteManagement {
	return &NullableComputerRemoteManagement{value: val, isSet: true}
}

func (v NullableComputerRemoteManagement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputerRemoteManagement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


