/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the Udids type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Udids{}

// Udids struct for Udids
type Udids struct {
	Udids []string `json:"udids,omitempty"`
}

// NewUdids instantiates a new Udids object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUdids() *Udids {
	this := Udids{}
	return &this
}

// NewUdidsWithDefaults instantiates a new Udids object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUdidsWithDefaults() *Udids {
	this := Udids{}
	return &this
}

// GetUdids returns the Udids field value if set, zero value otherwise.
func (o *Udids) GetUdids() []string {
	if o == nil || IsNil(o.Udids) {
		var ret []string
		return ret
	}
	return o.Udids
}

// GetUdidsOk returns a tuple with the Udids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Udids) GetUdidsOk() ([]string, bool) {
	if o == nil || IsNil(o.Udids) {
		return nil, false
	}
	return o.Udids, true
}

// HasUdids returns a boolean if a field has been set.
func (o *Udids) HasUdids() bool {
	if o != nil && !IsNil(o.Udids) {
		return true
	}

	return false
}

// SetUdids gets a reference to the given []string and assigns it to the Udids field.
func (o *Udids) SetUdids(v []string) {
	o.Udids = v
}

func (o Udids) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Udids) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Udids) {
		toSerialize["udids"] = o.Udids
	}
	return toSerialize, nil
}

type NullableUdids struct {
	value *Udids
	isSet bool
}

func (v NullableUdids) Get() *Udids {
	return v.value
}

func (v *NullableUdids) Set(val *Udids) {
	v.value = val
	v.isSet = true
}

func (v NullableUdids) IsSet() bool {
	return v.isSet
}

func (v *NullableUdids) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUdids(val *Udids) *NullableUdids {
	return &NullableUdids{value: val, isSet: true}
}

func (v NullableUdids) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUdids) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


