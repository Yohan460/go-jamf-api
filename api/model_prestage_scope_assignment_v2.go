/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// checks if the PrestageScopeAssignmentV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrestageScopeAssignmentV2{}

// PrestageScopeAssignmentV2 struct for PrestageScopeAssignmentV2
type PrestageScopeAssignmentV2 struct {
	SerialNumber *string `json:"serialNumber,omitempty"`
	AssignmentDate *time.Time `json:"assignmentDate,omitempty"`
	UserAssigned *string `json:"userAssigned,omitempty"`
}

// NewPrestageScopeAssignmentV2 instantiates a new PrestageScopeAssignmentV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrestageScopeAssignmentV2() *PrestageScopeAssignmentV2 {
	this := PrestageScopeAssignmentV2{}
	return &this
}

// NewPrestageScopeAssignmentV2WithDefaults instantiates a new PrestageScopeAssignmentV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrestageScopeAssignmentV2WithDefaults() *PrestageScopeAssignmentV2 {
	this := PrestageScopeAssignmentV2{}
	return &this
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *PrestageScopeAssignmentV2) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrestageScopeAssignmentV2) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *PrestageScopeAssignmentV2) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *PrestageScopeAssignmentV2) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetAssignmentDate returns the AssignmentDate field value if set, zero value otherwise.
func (o *PrestageScopeAssignmentV2) GetAssignmentDate() time.Time {
	if o == nil || IsNil(o.AssignmentDate) {
		var ret time.Time
		return ret
	}
	return *o.AssignmentDate
}

// GetAssignmentDateOk returns a tuple with the AssignmentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrestageScopeAssignmentV2) GetAssignmentDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AssignmentDate) {
		return nil, false
	}
	return o.AssignmentDate, true
}

// HasAssignmentDate returns a boolean if a field has been set.
func (o *PrestageScopeAssignmentV2) HasAssignmentDate() bool {
	if o != nil && !IsNil(o.AssignmentDate) {
		return true
	}

	return false
}

// SetAssignmentDate gets a reference to the given time.Time and assigns it to the AssignmentDate field.
func (o *PrestageScopeAssignmentV2) SetAssignmentDate(v time.Time) {
	o.AssignmentDate = &v
}

// GetUserAssigned returns the UserAssigned field value if set, zero value otherwise.
func (o *PrestageScopeAssignmentV2) GetUserAssigned() string {
	if o == nil || IsNil(o.UserAssigned) {
		var ret string
		return ret
	}
	return *o.UserAssigned
}

// GetUserAssignedOk returns a tuple with the UserAssigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrestageScopeAssignmentV2) GetUserAssignedOk() (*string, bool) {
	if o == nil || IsNil(o.UserAssigned) {
		return nil, false
	}
	return o.UserAssigned, true
}

// HasUserAssigned returns a boolean if a field has been set.
func (o *PrestageScopeAssignmentV2) HasUserAssigned() bool {
	if o != nil && !IsNil(o.UserAssigned) {
		return true
	}

	return false
}

// SetUserAssigned gets a reference to the given string and assigns it to the UserAssigned field.
func (o *PrestageScopeAssignmentV2) SetUserAssigned(v string) {
	o.UserAssigned = &v
}

func (o PrestageScopeAssignmentV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrestageScopeAssignmentV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SerialNumber) {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	if !IsNil(o.AssignmentDate) {
		toSerialize["assignmentDate"] = o.AssignmentDate
	}
	if !IsNil(o.UserAssigned) {
		toSerialize["userAssigned"] = o.UserAssigned
	}
	return toSerialize, nil
}

type NullablePrestageScopeAssignmentV2 struct {
	value *PrestageScopeAssignmentV2
	isSet bool
}

func (v NullablePrestageScopeAssignmentV2) Get() *PrestageScopeAssignmentV2 {
	return v.value
}

func (v *NullablePrestageScopeAssignmentV2) Set(val *PrestageScopeAssignmentV2) {
	v.value = val
	v.isSet = true
}

func (v NullablePrestageScopeAssignmentV2) IsSet() bool {
	return v.isSet
}

func (v *NullablePrestageScopeAssignmentV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrestageScopeAssignmentV2(val *PrestageScopeAssignmentV2) *NullablePrestageScopeAssignmentV2 {
	return &NullablePrestageScopeAssignmentV2{value: val, isSet: true}
}

func (v NullablePrestageScopeAssignmentV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrestageScopeAssignmentV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


