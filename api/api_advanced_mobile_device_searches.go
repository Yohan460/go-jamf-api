/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


type AdvancedMobileDeviceSearchesApi interface {

	/*
	V1AdvancedMobileDeviceSearchesChoicesGet Get Mobile Device Advanced Search criteria choices 

	Gets Mobile Device Advanced Search criteria choices. A list of potentially valid choices can be found by navigating to the Criteria page of the Advanced Mobile Device Search creation process. A few are "App Name", "Building", and "Display Name".


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV1AdvancedMobileDeviceSearchesChoicesGetRequest
	*/
	V1AdvancedMobileDeviceSearchesChoicesGet(ctx context.Context) ApiV1AdvancedMobileDeviceSearchesChoicesGetRequest

	// V1AdvancedMobileDeviceSearchesChoicesGetExecute executes the request
	//  @return AdvancedSearchCriteriaChoices
	V1AdvancedMobileDeviceSearchesChoicesGetExecute(r ApiV1AdvancedMobileDeviceSearchesChoicesGetRequest) (*AdvancedSearchCriteriaChoices, *http.Response, error)

	/*
	V1AdvancedMobileDeviceSearchesDeleteMultiplePost Remove specified Advanced Search objects 

	Removes specified Advanced Search Objects


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV1AdvancedMobileDeviceSearchesDeleteMultiplePostRequest
	*/
	V1AdvancedMobileDeviceSearchesDeleteMultiplePost(ctx context.Context) ApiV1AdvancedMobileDeviceSearchesDeleteMultiplePostRequest

	// V1AdvancedMobileDeviceSearchesDeleteMultiplePostExecute executes the request
	V1AdvancedMobileDeviceSearchesDeleteMultiplePostExecute(r ApiV1AdvancedMobileDeviceSearchesDeleteMultiplePostRequest) (*http.Response, error)

	/*
	V1AdvancedMobileDeviceSearchesGet Get Advanced Search objects 

	Gets Advanced Search Objects


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV1AdvancedMobileDeviceSearchesGetRequest
	*/
	V1AdvancedMobileDeviceSearchesGet(ctx context.Context) ApiV1AdvancedMobileDeviceSearchesGetRequest

	// V1AdvancedMobileDeviceSearchesGetExecute executes the request
	//  @return AdvancedSearchSearchResults
	V1AdvancedMobileDeviceSearchesGetExecute(r ApiV1AdvancedMobileDeviceSearchesGetRequest) (*AdvancedSearchSearchResults, *http.Response, error)

	/*
	V1AdvancedMobileDeviceSearchesIdDelete Remove specified Advanced Search object 

	Removes specified Advanced Search Object


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id instance id of advanced search record
	@return ApiV1AdvancedMobileDeviceSearchesIdDeleteRequest
	*/
	V1AdvancedMobileDeviceSearchesIdDelete(ctx context.Context, id string) ApiV1AdvancedMobileDeviceSearchesIdDeleteRequest

	// V1AdvancedMobileDeviceSearchesIdDeleteExecute executes the request
	V1AdvancedMobileDeviceSearchesIdDeleteExecute(r ApiV1AdvancedMobileDeviceSearchesIdDeleteRequest) (*http.Response, error)

	/*
	V1AdvancedMobileDeviceSearchesIdGet Get specified Advanced Search object 

	Gets Specified Advanced Search Object


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id id of target Advanced Search
	@return ApiV1AdvancedMobileDeviceSearchesIdGetRequest
	*/
	V1AdvancedMobileDeviceSearchesIdGet(ctx context.Context, id string) ApiV1AdvancedMobileDeviceSearchesIdGetRequest

	// V1AdvancedMobileDeviceSearchesIdGetExecute executes the request
	//  @return AdvancedSearch
	V1AdvancedMobileDeviceSearchesIdGetExecute(r ApiV1AdvancedMobileDeviceSearchesIdGetRequest) (*AdvancedSearch, *http.Response, error)

	/*
	V1AdvancedMobileDeviceSearchesIdPut Get specified Advanced Search object 

	Gets Specified Advanced Search Object


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id id of target Advanced Search
	@return ApiV1AdvancedMobileDeviceSearchesIdPutRequest
	*/
	V1AdvancedMobileDeviceSearchesIdPut(ctx context.Context, id string) ApiV1AdvancedMobileDeviceSearchesIdPutRequest

	// V1AdvancedMobileDeviceSearchesIdPutExecute executes the request
	//  @return AdvancedSearch
	V1AdvancedMobileDeviceSearchesIdPutExecute(r ApiV1AdvancedMobileDeviceSearchesIdPutRequest) (*AdvancedSearch, *http.Response, error)

	/*
	V1AdvancedMobileDeviceSearchesPost Create Advanced Search object 

	Creates Advanced Search Object


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV1AdvancedMobileDeviceSearchesPostRequest
	*/
	V1AdvancedMobileDeviceSearchesPost(ctx context.Context) ApiV1AdvancedMobileDeviceSearchesPostRequest

	// V1AdvancedMobileDeviceSearchesPostExecute executes the request
	//  @return HrefResponse
	V1AdvancedMobileDeviceSearchesPostExecute(r ApiV1AdvancedMobileDeviceSearchesPostRequest) (*HrefResponse, *http.Response, error)
}

// AdvancedMobileDeviceSearchesApiService AdvancedMobileDeviceSearchesApi service
type AdvancedMobileDeviceSearchesApiService service

type ApiV1AdvancedMobileDeviceSearchesChoicesGetRequest struct {
	ctx context.Context
	ApiService AdvancedMobileDeviceSearchesApi
	criteria *string
	site *string
	contains *string
}

func (r ApiV1AdvancedMobileDeviceSearchesChoicesGetRequest) Criteria(criteria string) ApiV1AdvancedMobileDeviceSearchesChoicesGetRequest {
	r.criteria = &criteria
	return r
}

func (r ApiV1AdvancedMobileDeviceSearchesChoicesGetRequest) Site(site string) ApiV1AdvancedMobileDeviceSearchesChoicesGetRequest {
	r.site = &site
	return r
}

func (r ApiV1AdvancedMobileDeviceSearchesChoicesGetRequest) Contains(contains string) ApiV1AdvancedMobileDeviceSearchesChoicesGetRequest {
	r.contains = &contains
	return r
}

func (r ApiV1AdvancedMobileDeviceSearchesChoicesGetRequest) Execute() (*AdvancedSearchCriteriaChoices, *http.Response, error) {
	return r.ApiService.V1AdvancedMobileDeviceSearchesChoicesGetExecute(r)
}

/*
V1AdvancedMobileDeviceSearchesChoicesGet Get Mobile Device Advanced Search criteria choices 

Gets Mobile Device Advanced Search criteria choices. A list of potentially valid choices can be found by navigating to the Criteria page of the Advanced Mobile Device Search creation process. A few are "App Name", "Building", and "Display Name".


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1AdvancedMobileDeviceSearchesChoicesGetRequest
*/
func (a *AdvancedMobileDeviceSearchesApiService) V1AdvancedMobileDeviceSearchesChoicesGet(ctx context.Context) ApiV1AdvancedMobileDeviceSearchesChoicesGetRequest {
	return ApiV1AdvancedMobileDeviceSearchesChoicesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AdvancedSearchCriteriaChoices
func (a *AdvancedMobileDeviceSearchesApiService) V1AdvancedMobileDeviceSearchesChoicesGetExecute(r ApiV1AdvancedMobileDeviceSearchesChoicesGetRequest) (*AdvancedSearchCriteriaChoices, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AdvancedSearchCriteriaChoices
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdvancedMobileDeviceSearchesApiService.V1AdvancedMobileDeviceSearchesChoicesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/advanced-mobile-device-searches/choices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.criteria == nil {
		return localVarReturnValue, nil, reportError("criteria is required and must be specified")
	}

	localVarQueryParams.Add("criteria", parameterToString(*r.criteria, ""))
	if r.site != nil {
		localVarQueryParams.Add("site", parameterToString(*r.site, ""))
	}
	if r.contains != nil {
		localVarQueryParams.Add("contains", parameterToString(*r.contains, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1AdvancedMobileDeviceSearchesDeleteMultiplePostRequest struct {
	ctx context.Context
	ApiService AdvancedMobileDeviceSearchesApi
	ids *Ids
}

// ids of the building to be deleted
func (r ApiV1AdvancedMobileDeviceSearchesDeleteMultiplePostRequest) Ids(ids Ids) ApiV1AdvancedMobileDeviceSearchesDeleteMultiplePostRequest {
	r.ids = &ids
	return r
}

func (r ApiV1AdvancedMobileDeviceSearchesDeleteMultiplePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1AdvancedMobileDeviceSearchesDeleteMultiplePostExecute(r)
}

/*
V1AdvancedMobileDeviceSearchesDeleteMultiplePost Remove specified Advanced Search objects 

Removes specified Advanced Search Objects


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1AdvancedMobileDeviceSearchesDeleteMultiplePostRequest
*/
func (a *AdvancedMobileDeviceSearchesApiService) V1AdvancedMobileDeviceSearchesDeleteMultiplePost(ctx context.Context) ApiV1AdvancedMobileDeviceSearchesDeleteMultiplePostRequest {
	return ApiV1AdvancedMobileDeviceSearchesDeleteMultiplePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *AdvancedMobileDeviceSearchesApiService) V1AdvancedMobileDeviceSearchesDeleteMultiplePostExecute(r ApiV1AdvancedMobileDeviceSearchesDeleteMultiplePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdvancedMobileDeviceSearchesApiService.V1AdvancedMobileDeviceSearchesDeleteMultiplePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/advanced-mobile-device-searches/delete-multiple"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ids == nil {
		return nil, reportError("ids is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ids
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1AdvancedMobileDeviceSearchesGetRequest struct {
	ctx context.Context
	ApiService AdvancedMobileDeviceSearchesApi
}

func (r ApiV1AdvancedMobileDeviceSearchesGetRequest) Execute() (*AdvancedSearchSearchResults, *http.Response, error) {
	return r.ApiService.V1AdvancedMobileDeviceSearchesGetExecute(r)
}

/*
V1AdvancedMobileDeviceSearchesGet Get Advanced Search objects 

Gets Advanced Search Objects


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1AdvancedMobileDeviceSearchesGetRequest
*/
func (a *AdvancedMobileDeviceSearchesApiService) V1AdvancedMobileDeviceSearchesGet(ctx context.Context) ApiV1AdvancedMobileDeviceSearchesGetRequest {
	return ApiV1AdvancedMobileDeviceSearchesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AdvancedSearchSearchResults
func (a *AdvancedMobileDeviceSearchesApiService) V1AdvancedMobileDeviceSearchesGetExecute(r ApiV1AdvancedMobileDeviceSearchesGetRequest) (*AdvancedSearchSearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AdvancedSearchSearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdvancedMobileDeviceSearchesApiService.V1AdvancedMobileDeviceSearchesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/advanced-mobile-device-searches"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1AdvancedMobileDeviceSearchesIdDeleteRequest struct {
	ctx context.Context
	ApiService AdvancedMobileDeviceSearchesApi
	id string
}

func (r ApiV1AdvancedMobileDeviceSearchesIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1AdvancedMobileDeviceSearchesIdDeleteExecute(r)
}

/*
V1AdvancedMobileDeviceSearchesIdDelete Remove specified Advanced Search object 

Removes specified Advanced Search Object


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id instance id of advanced search record
 @return ApiV1AdvancedMobileDeviceSearchesIdDeleteRequest
*/
func (a *AdvancedMobileDeviceSearchesApiService) V1AdvancedMobileDeviceSearchesIdDelete(ctx context.Context, id string) ApiV1AdvancedMobileDeviceSearchesIdDeleteRequest {
	return ApiV1AdvancedMobileDeviceSearchesIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AdvancedMobileDeviceSearchesApiService) V1AdvancedMobileDeviceSearchesIdDeleteExecute(r ApiV1AdvancedMobileDeviceSearchesIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdvancedMobileDeviceSearchesApiService.V1AdvancedMobileDeviceSearchesIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/advanced-mobile-device-searches/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1AdvancedMobileDeviceSearchesIdGetRequest struct {
	ctx context.Context
	ApiService AdvancedMobileDeviceSearchesApi
	id string
}

func (r ApiV1AdvancedMobileDeviceSearchesIdGetRequest) Execute() (*AdvancedSearch, *http.Response, error) {
	return r.ApiService.V1AdvancedMobileDeviceSearchesIdGetExecute(r)
}

/*
V1AdvancedMobileDeviceSearchesIdGet Get specified Advanced Search object 

Gets Specified Advanced Search Object


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id id of target Advanced Search
 @return ApiV1AdvancedMobileDeviceSearchesIdGetRequest
*/
func (a *AdvancedMobileDeviceSearchesApiService) V1AdvancedMobileDeviceSearchesIdGet(ctx context.Context, id string) ApiV1AdvancedMobileDeviceSearchesIdGetRequest {
	return ApiV1AdvancedMobileDeviceSearchesIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AdvancedSearch
func (a *AdvancedMobileDeviceSearchesApiService) V1AdvancedMobileDeviceSearchesIdGetExecute(r ApiV1AdvancedMobileDeviceSearchesIdGetRequest) (*AdvancedSearch, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AdvancedSearch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdvancedMobileDeviceSearchesApiService.V1AdvancedMobileDeviceSearchesIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/advanced-mobile-device-searches/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1AdvancedMobileDeviceSearchesIdPutRequest struct {
	ctx context.Context
	ApiService AdvancedMobileDeviceSearchesApi
	id string
	advancedSearch *AdvancedSearch
}

func (r ApiV1AdvancedMobileDeviceSearchesIdPutRequest) AdvancedSearch(advancedSearch AdvancedSearch) ApiV1AdvancedMobileDeviceSearchesIdPutRequest {
	r.advancedSearch = &advancedSearch
	return r
}

func (r ApiV1AdvancedMobileDeviceSearchesIdPutRequest) Execute() (*AdvancedSearch, *http.Response, error) {
	return r.ApiService.V1AdvancedMobileDeviceSearchesIdPutExecute(r)
}

/*
V1AdvancedMobileDeviceSearchesIdPut Get specified Advanced Search object 

Gets Specified Advanced Search Object


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id id of target Advanced Search
 @return ApiV1AdvancedMobileDeviceSearchesIdPutRequest
*/
func (a *AdvancedMobileDeviceSearchesApiService) V1AdvancedMobileDeviceSearchesIdPut(ctx context.Context, id string) ApiV1AdvancedMobileDeviceSearchesIdPutRequest {
	return ApiV1AdvancedMobileDeviceSearchesIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AdvancedSearch
func (a *AdvancedMobileDeviceSearchesApiService) V1AdvancedMobileDeviceSearchesIdPutExecute(r ApiV1AdvancedMobileDeviceSearchesIdPutRequest) (*AdvancedSearch, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AdvancedSearch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdvancedMobileDeviceSearchesApiService.V1AdvancedMobileDeviceSearchesIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/advanced-mobile-device-searches/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.advancedSearch == nil {
		return localVarReturnValue, nil, reportError("advancedSearch is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.advancedSearch
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1AdvancedMobileDeviceSearchesPostRequest struct {
	ctx context.Context
	ApiService AdvancedMobileDeviceSearchesApi
	advancedSearch *AdvancedSearch
}

func (r ApiV1AdvancedMobileDeviceSearchesPostRequest) AdvancedSearch(advancedSearch AdvancedSearch) ApiV1AdvancedMobileDeviceSearchesPostRequest {
	r.advancedSearch = &advancedSearch
	return r
}

func (r ApiV1AdvancedMobileDeviceSearchesPostRequest) Execute() (*HrefResponse, *http.Response, error) {
	return r.ApiService.V1AdvancedMobileDeviceSearchesPostExecute(r)
}

/*
V1AdvancedMobileDeviceSearchesPost Create Advanced Search object 

Creates Advanced Search Object


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1AdvancedMobileDeviceSearchesPostRequest
*/
func (a *AdvancedMobileDeviceSearchesApiService) V1AdvancedMobileDeviceSearchesPost(ctx context.Context) ApiV1AdvancedMobileDeviceSearchesPostRequest {
	return ApiV1AdvancedMobileDeviceSearchesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HrefResponse
func (a *AdvancedMobileDeviceSearchesApiService) V1AdvancedMobileDeviceSearchesPostExecute(r ApiV1AdvancedMobileDeviceSearchesPostRequest) (*HrefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HrefResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdvancedMobileDeviceSearchesApiService.V1AdvancedMobileDeviceSearchesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/advanced-mobile-device-searches"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.advancedSearch == nil {
		return localVarReturnValue, nil, reportError("advancedSearch is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.advancedSearch
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
