/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the EbookLimitations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EbookLimitations{}

// EbookLimitations struct for EbookLimitations
type EbookLimitations struct {
	NetworkSegments []string `json:"networkSegments,omitempty"`
	Users []EbookLimitationsUsersInner `json:"users,omitempty"`
	UserGroups []string `json:"userGroups,omitempty"`
}

// NewEbookLimitations instantiates a new EbookLimitations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEbookLimitations() *EbookLimitations {
	this := EbookLimitations{}
	return &this
}

// NewEbookLimitationsWithDefaults instantiates a new EbookLimitations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEbookLimitationsWithDefaults() *EbookLimitations {
	this := EbookLimitations{}
	return &this
}

// GetNetworkSegments returns the NetworkSegments field value if set, zero value otherwise.
func (o *EbookLimitations) GetNetworkSegments() []string {
	if o == nil || IsNil(o.NetworkSegments) {
		var ret []string
		return ret
	}
	return o.NetworkSegments
}

// GetNetworkSegmentsOk returns a tuple with the NetworkSegments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EbookLimitations) GetNetworkSegmentsOk() ([]string, bool) {
	if o == nil || IsNil(o.NetworkSegments) {
		return nil, false
	}
	return o.NetworkSegments, true
}

// HasNetworkSegments returns a boolean if a field has been set.
func (o *EbookLimitations) HasNetworkSegments() bool {
	if o != nil && !IsNil(o.NetworkSegments) {
		return true
	}

	return false
}

// SetNetworkSegments gets a reference to the given []string and assigns it to the NetworkSegments field.
func (o *EbookLimitations) SetNetworkSegments(v []string) {
	o.NetworkSegments = v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *EbookLimitations) GetUsers() []EbookLimitationsUsersInner {
	if o == nil || IsNil(o.Users) {
		var ret []EbookLimitationsUsersInner
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EbookLimitations) GetUsersOk() ([]EbookLimitationsUsersInner, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *EbookLimitations) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []EbookLimitationsUsersInner and assigns it to the Users field.
func (o *EbookLimitations) SetUsers(v []EbookLimitationsUsersInner) {
	o.Users = v
}

// GetUserGroups returns the UserGroups field value if set, zero value otherwise.
func (o *EbookLimitations) GetUserGroups() []string {
	if o == nil || IsNil(o.UserGroups) {
		var ret []string
		return ret
	}
	return o.UserGroups
}

// GetUserGroupsOk returns a tuple with the UserGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EbookLimitations) GetUserGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.UserGroups) {
		return nil, false
	}
	return o.UserGroups, true
}

// HasUserGroups returns a boolean if a field has been set.
func (o *EbookLimitations) HasUserGroups() bool {
	if o != nil && !IsNil(o.UserGroups) {
		return true
	}

	return false
}

// SetUserGroups gets a reference to the given []string and assigns it to the UserGroups field.
func (o *EbookLimitations) SetUserGroups(v []string) {
	o.UserGroups = v
}

func (o EbookLimitations) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EbookLimitations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NetworkSegments) {
		toSerialize["networkSegments"] = o.NetworkSegments
	}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	if !IsNil(o.UserGroups) {
		toSerialize["userGroups"] = o.UserGroups
	}
	return toSerialize, nil
}

type NullableEbookLimitations struct {
	value *EbookLimitations
	isSet bool
}

func (v NullableEbookLimitations) Get() *EbookLimitations {
	return v.value
}

func (v *NullableEbookLimitations) Set(val *EbookLimitations) {
	v.value = val
	v.isSet = true
}

func (v NullableEbookLimitations) IsSet() bool {
	return v.isSet
}

func (v *NullableEbookLimitations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEbookLimitations(val *EbookLimitations) *NullableEbookLimitations {
	return &NullableEbookLimitations{value: val, isSet: true}
}

func (v NullableEbookLimitations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEbookLimitations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


