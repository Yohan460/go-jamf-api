/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OnboardingConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OnboardingConfiguration{}

// OnboardingConfiguration struct for OnboardingConfiguration
type OnboardingConfiguration struct {
	Id *string `json:"id,omitempty"`
	Enabled bool `json:"enabled"`
	OnboardingItems []OnboardingItem `json:"onboardingItems"`
}

type _OnboardingConfiguration OnboardingConfiguration

// NewOnboardingConfiguration instantiates a new OnboardingConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOnboardingConfiguration(enabled bool, onboardingItems []OnboardingItem) *OnboardingConfiguration {
	this := OnboardingConfiguration{}
	this.Enabled = enabled
	this.OnboardingItems = onboardingItems
	return &this
}

// NewOnboardingConfigurationWithDefaults instantiates a new OnboardingConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOnboardingConfigurationWithDefaults() *OnboardingConfiguration {
	this := OnboardingConfiguration{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OnboardingConfiguration) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnboardingConfiguration) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OnboardingConfiguration) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OnboardingConfiguration) SetId(v string) {
	o.Id = &v
}

// GetEnabled returns the Enabled field value
func (o *OnboardingConfiguration) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *OnboardingConfiguration) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *OnboardingConfiguration) SetEnabled(v bool) {
	o.Enabled = v
}

// GetOnboardingItems returns the OnboardingItems field value
func (o *OnboardingConfiguration) GetOnboardingItems() []OnboardingItem {
	if o == nil {
		var ret []OnboardingItem
		return ret
	}

	return o.OnboardingItems
}

// GetOnboardingItemsOk returns a tuple with the OnboardingItems field value
// and a boolean to check if the value has been set.
func (o *OnboardingConfiguration) GetOnboardingItemsOk() ([]OnboardingItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.OnboardingItems, true
}

// SetOnboardingItems sets field value
func (o *OnboardingConfiguration) SetOnboardingItems(v []OnboardingItem) {
	o.OnboardingItems = v
}

func (o OnboardingConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OnboardingConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["enabled"] = o.Enabled
	toSerialize["onboardingItems"] = o.OnboardingItems
	return toSerialize, nil
}

func (o *OnboardingConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
		"onboardingItems",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOnboardingConfiguration := _OnboardingConfiguration{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOnboardingConfiguration)

	if err != nil {
		return err
	}

	*o = OnboardingConfiguration(varOnboardingConfiguration)

	return err
}

type NullableOnboardingConfiguration struct {
	value *OnboardingConfiguration
	isSet bool
}

func (v NullableOnboardingConfiguration) Get() *OnboardingConfiguration {
	return v.value
}

func (v *NullableOnboardingConfiguration) Set(val *OnboardingConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableOnboardingConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableOnboardingConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnboardingConfiguration(val *OnboardingConfiguration) *NullableOnboardingConfiguration {
	return &NullableOnboardingConfiguration{value: val, isSet: true}
}

func (v NullableOnboardingConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnboardingConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


