/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SmtpGraphApiCredentials type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmtpGraphApiCredentials{}

// SmtpGraphApiCredentials struct for SmtpGraphApiCredentials
type SmtpGraphApiCredentials struct {
	TenantId string `json:"tenantId"`
	ClientId string `json:"clientId"`
	ClientSecret string `json:"clientSecret"`
}

type _SmtpGraphApiCredentials SmtpGraphApiCredentials

// NewSmtpGraphApiCredentials instantiates a new SmtpGraphApiCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmtpGraphApiCredentials(tenantId string, clientId string, clientSecret string) *SmtpGraphApiCredentials {
	this := SmtpGraphApiCredentials{}
	this.TenantId = tenantId
	this.ClientId = clientId
	this.ClientSecret = clientSecret
	return &this
}

// NewSmtpGraphApiCredentialsWithDefaults instantiates a new SmtpGraphApiCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmtpGraphApiCredentialsWithDefaults() *SmtpGraphApiCredentials {
	this := SmtpGraphApiCredentials{}
	var tenantId string = ""
	this.TenantId = tenantId
	var clientId string = ""
	this.ClientId = clientId
	var clientSecret string = ""
	this.ClientSecret = clientSecret
	return &this
}

// GetTenantId returns the TenantId field value
func (o *SmtpGraphApiCredentials) GetTenantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
func (o *SmtpGraphApiCredentials) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantId, true
}

// SetTenantId sets field value
func (o *SmtpGraphApiCredentials) SetTenantId(v string) {
	o.TenantId = v
}

// GetClientId returns the ClientId field value
func (o *SmtpGraphApiCredentials) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *SmtpGraphApiCredentials) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *SmtpGraphApiCredentials) SetClientId(v string) {
	o.ClientId = v
}

// GetClientSecret returns the ClientSecret field value
func (o *SmtpGraphApiCredentials) GetClientSecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientSecret
}

// GetClientSecretOk returns a tuple with the ClientSecret field value
// and a boolean to check if the value has been set.
func (o *SmtpGraphApiCredentials) GetClientSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientSecret, true
}

// SetClientSecret sets field value
func (o *SmtpGraphApiCredentials) SetClientSecret(v string) {
	o.ClientSecret = v
}

func (o SmtpGraphApiCredentials) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmtpGraphApiCredentials) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tenantId"] = o.TenantId
	toSerialize["clientId"] = o.ClientId
	toSerialize["clientSecret"] = o.ClientSecret
	return toSerialize, nil
}

func (o *SmtpGraphApiCredentials) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tenantId",
		"clientId",
		"clientSecret",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSmtpGraphApiCredentials := _SmtpGraphApiCredentials{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSmtpGraphApiCredentials)

	if err != nil {
		return err
	}

	*o = SmtpGraphApiCredentials(varSmtpGraphApiCredentials)

	return err
}

type NullableSmtpGraphApiCredentials struct {
	value *SmtpGraphApiCredentials
	isSet bool
}

func (v NullableSmtpGraphApiCredentials) Get() *SmtpGraphApiCredentials {
	return v.value
}

func (v *NullableSmtpGraphApiCredentials) Set(val *SmtpGraphApiCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableSmtpGraphApiCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableSmtpGraphApiCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmtpGraphApiCredentials(val *SmtpGraphApiCredentials) *NullableSmtpGraphApiCredentials {
	return &NullableSmtpGraphApiCredentials{value: val, isSet: true}
}

func (v NullableSmtpGraphApiCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmtpGraphApiCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


