/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the DeleteUserCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteUserCommand{}

// DeleteUserCommand struct for DeleteUserCommand
type DeleteUserCommand struct {
	UserName *string `json:"userName,omitempty"`
	ForceDeletion *bool `json:"forceDeletion,omitempty"`
	DeleteAllUsers *bool `json:"deleteAllUsers,omitempty"`
}

// NewDeleteUserCommand instantiates a new DeleteUserCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteUserCommand() *DeleteUserCommand {
	this := DeleteUserCommand{}
	return &this
}

// NewDeleteUserCommandWithDefaults instantiates a new DeleteUserCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteUserCommandWithDefaults() *DeleteUserCommand {
	this := DeleteUserCommand{}
	return &this
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *DeleteUserCommand) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteUserCommand) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *DeleteUserCommand) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *DeleteUserCommand) SetUserName(v string) {
	o.UserName = &v
}

// GetForceDeletion returns the ForceDeletion field value if set, zero value otherwise.
func (o *DeleteUserCommand) GetForceDeletion() bool {
	if o == nil || IsNil(o.ForceDeletion) {
		var ret bool
		return ret
	}
	return *o.ForceDeletion
}

// GetForceDeletionOk returns a tuple with the ForceDeletion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteUserCommand) GetForceDeletionOk() (*bool, bool) {
	if o == nil || IsNil(o.ForceDeletion) {
		return nil, false
	}
	return o.ForceDeletion, true
}

// HasForceDeletion returns a boolean if a field has been set.
func (o *DeleteUserCommand) HasForceDeletion() bool {
	if o != nil && !IsNil(o.ForceDeletion) {
		return true
	}

	return false
}

// SetForceDeletion gets a reference to the given bool and assigns it to the ForceDeletion field.
func (o *DeleteUserCommand) SetForceDeletion(v bool) {
	o.ForceDeletion = &v
}

// GetDeleteAllUsers returns the DeleteAllUsers field value if set, zero value otherwise.
func (o *DeleteUserCommand) GetDeleteAllUsers() bool {
	if o == nil || IsNil(o.DeleteAllUsers) {
		var ret bool
		return ret
	}
	return *o.DeleteAllUsers
}

// GetDeleteAllUsersOk returns a tuple with the DeleteAllUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteUserCommand) GetDeleteAllUsersOk() (*bool, bool) {
	if o == nil || IsNil(o.DeleteAllUsers) {
		return nil, false
	}
	return o.DeleteAllUsers, true
}

// HasDeleteAllUsers returns a boolean if a field has been set.
func (o *DeleteUserCommand) HasDeleteAllUsers() bool {
	if o != nil && !IsNil(o.DeleteAllUsers) {
		return true
	}

	return false
}

// SetDeleteAllUsers gets a reference to the given bool and assigns it to the DeleteAllUsers field.
func (o *DeleteUserCommand) SetDeleteAllUsers(v bool) {
	o.DeleteAllUsers = &v
}

func (o DeleteUserCommand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteUserCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	if !IsNil(o.ForceDeletion) {
		toSerialize["forceDeletion"] = o.ForceDeletion
	}
	if !IsNil(o.DeleteAllUsers) {
		toSerialize["deleteAllUsers"] = o.DeleteAllUsers
	}
	return toSerialize, nil
}

type NullableDeleteUserCommand struct {
	value *DeleteUserCommand
	isSet bool
}

func (v NullableDeleteUserCommand) Get() *DeleteUserCommand {
	return v.value
}

func (v *NullableDeleteUserCommand) Set(val *DeleteUserCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteUserCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteUserCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteUserCommand(val *DeleteUserCommand) *NullableDeleteUserCommand {
	return &NullableDeleteUserCommand{value: val, isSet: true}
}

func (v NullableDeleteUserCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteUserCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


