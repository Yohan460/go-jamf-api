/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ApplicationConfiguration struct for ApplicationConfiguration
type ApplicationConfiguration struct {
	Configuration *string `json:"configuration,omitempty"`
	Identifier *string `json:"identifier,omitempty"`
}

// NewApplicationConfiguration instantiates a new ApplicationConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationConfiguration() *ApplicationConfiguration {
	this := ApplicationConfiguration{}
	return &this
}

// NewApplicationConfigurationWithDefaults instantiates a new ApplicationConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationConfigurationWithDefaults() *ApplicationConfiguration {
	this := ApplicationConfiguration{}
	return &this
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *ApplicationConfiguration) GetConfiguration() string {
	if o == nil || o.Configuration == nil {
		var ret string
		return ret
	}
	return *o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationConfiguration) GetConfigurationOk() (*string, bool) {
	if o == nil || o.Configuration == nil {
		return nil, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *ApplicationConfiguration) HasConfiguration() bool {
	if o != nil && o.Configuration != nil {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given string and assigns it to the Configuration field.
func (o *ApplicationConfiguration) SetConfiguration(v string) {
	o.Configuration = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *ApplicationConfiguration) GetIdentifier() string {
	if o == nil || o.Identifier == nil {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationConfiguration) GetIdentifierOk() (*string, bool) {
	if o == nil || o.Identifier == nil {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *ApplicationConfiguration) HasIdentifier() bool {
	if o != nil && o.Identifier != nil {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *ApplicationConfiguration) SetIdentifier(v string) {
	o.Identifier = &v
}

func (o ApplicationConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Configuration != nil {
		toSerialize["configuration"] = o.Configuration
	}
	if o.Identifier != nil {
		toSerialize["identifier"] = o.Identifier
	}
	return json.Marshal(toSerialize)
}

type NullableApplicationConfiguration struct {
	value *ApplicationConfiguration
	isSet bool
}

func (v NullableApplicationConfiguration) Get() *ApplicationConfiguration {
	return v.value
}

func (v *NullableApplicationConfiguration) Set(val *ApplicationConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationConfiguration(val *ApplicationConfiguration) *NullableApplicationConfiguration {
	return &NullableApplicationConfiguration{value: val, isSet: true}
}

func (v NullableApplicationConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


