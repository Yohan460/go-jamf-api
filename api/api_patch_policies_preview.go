/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


type PatchPoliciesPreviewApi interface {

	/*
	PatchPatchPoliciesGet Return a list of patch policies 

	Returns a list of patch policies.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPatchPatchPoliciesGetRequest
	*/
	PatchPatchPoliciesGet(ctx context.Context) ApiPatchPatchPoliciesGetRequest

	// PatchPatchPoliciesGetExecute executes the request
	//  @return []PatchPolicySummary
	PatchPatchPoliciesGetExecute(r ApiPatchPatchPoliciesGetRequest) ([]PatchPolicySummary, *http.Response, error)

	/*
	PatchPatchPoliciesIdDashboardDelete Remove a patch policy from the dashboard 

	Removes a patch policy from the dashboard.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id patch id
	@return ApiPatchPatchPoliciesIdDashboardDeleteRequest
	*/
	PatchPatchPoliciesIdDashboardDelete(ctx context.Context, id int32) ApiPatchPatchPoliciesIdDashboardDeleteRequest

	// PatchPatchPoliciesIdDashboardDeleteExecute executes the request
	PatchPatchPoliciesIdDashboardDeleteExecute(r ApiPatchPatchPoliciesIdDashboardDeleteRequest) (*http.Response, error)

	/*
	PatchPatchPoliciesIdDashboardGet Return whether or not the requested patch policy is on the dashboard 

	Returns whether or not the requested patch policy is on the dashboard

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id patch policy id
	@return ApiPatchPatchPoliciesIdDashboardGetRequest
	*/
	PatchPatchPoliciesIdDashboardGet(ctx context.Context, id int32) ApiPatchPatchPoliciesIdDashboardGetRequest

	// PatchPatchPoliciesIdDashboardGetExecute executes the request
	//  @return PatchPolicyOnDashboard
	PatchPatchPoliciesIdDashboardGetExecute(r ApiPatchPatchPoliciesIdDashboardGetRequest) (*PatchPolicyOnDashboard, *http.Response, error)

	/*
	PatchPatchPoliciesIdDashboardPost Add a patch policy to the dashboard 

	Adds a patch policy to the dashboard.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id patch policy id
	@return ApiPatchPatchPoliciesIdDashboardPostRequest
	*/
	PatchPatchPoliciesIdDashboardPost(ctx context.Context, id int32) ApiPatchPatchPoliciesIdDashboardPostRequest

	// PatchPatchPoliciesIdDashboardPostExecute executes the request
	PatchPatchPoliciesIdDashboardPostExecute(r ApiPatchPatchPoliciesIdDashboardPostRequest) (*http.Response, error)
}

// PatchPoliciesPreviewApiService PatchPoliciesPreviewApi service
type PatchPoliciesPreviewApiService service

type ApiPatchPatchPoliciesGetRequest struct {
	ctx context.Context
	ApiService PatchPoliciesPreviewApi
	onDashboard *bool
	enabled *bool
}

// Filters whether or not the patch policies are on the dashboard.
func (r ApiPatchPatchPoliciesGetRequest) OnDashboard(onDashboard bool) ApiPatchPatchPoliciesGetRequest {
	r.onDashboard = &onDashboard
	return r
}

// Filters whether or not the patch policies are enabled.
func (r ApiPatchPatchPoliciesGetRequest) Enabled(enabled bool) ApiPatchPatchPoliciesGetRequest {
	r.enabled = &enabled
	return r
}

func (r ApiPatchPatchPoliciesGetRequest) Execute() ([]PatchPolicySummary, *http.Response, error) {
	return r.ApiService.PatchPatchPoliciesGetExecute(r)
}

/*
PatchPatchPoliciesGet Return a list of patch policies 

Returns a list of patch policies.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPatchPatchPoliciesGetRequest
*/
func (a *PatchPoliciesPreviewApiService) PatchPatchPoliciesGet(ctx context.Context) ApiPatchPatchPoliciesGetRequest {
	return ApiPatchPatchPoliciesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []PatchPolicySummary
func (a *PatchPoliciesPreviewApiService) PatchPatchPoliciesGetExecute(r ApiPatchPatchPoliciesGetRequest) ([]PatchPolicySummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PatchPolicySummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchPoliciesPreviewApiService.PatchPatchPoliciesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/patch/patch-policies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.onDashboard != nil {
		localVarQueryParams.Add("onDashboard", parameterToString(*r.onDashboard, ""))
	}
	if r.enabled != nil {
		localVarQueryParams.Add("enabled", parameterToString(*r.enabled, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchPatchPoliciesIdDashboardDeleteRequest struct {
	ctx context.Context
	ApiService PatchPoliciesPreviewApi
	id int32
}

func (r ApiPatchPatchPoliciesIdDashboardDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.PatchPatchPoliciesIdDashboardDeleteExecute(r)
}

/*
PatchPatchPoliciesIdDashboardDelete Remove a patch policy from the dashboard 

Removes a patch policy from the dashboard.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id patch id
 @return ApiPatchPatchPoliciesIdDashboardDeleteRequest
*/
func (a *PatchPoliciesPreviewApiService) PatchPatchPoliciesIdDashboardDelete(ctx context.Context, id int32) ApiPatchPatchPoliciesIdDashboardDeleteRequest {
	return ApiPatchPatchPoliciesIdDashboardDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *PatchPoliciesPreviewApiService) PatchPatchPoliciesIdDashboardDeleteExecute(r ApiPatchPatchPoliciesIdDashboardDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchPoliciesPreviewApiService.PatchPatchPoliciesIdDashboardDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/patch/patch-policies/{id}/dashboard"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPatchPatchPoliciesIdDashboardGetRequest struct {
	ctx context.Context
	ApiService PatchPoliciesPreviewApi
	id int32
}

func (r ApiPatchPatchPoliciesIdDashboardGetRequest) Execute() (*PatchPolicyOnDashboard, *http.Response, error) {
	return r.ApiService.PatchPatchPoliciesIdDashboardGetExecute(r)
}

/*
PatchPatchPoliciesIdDashboardGet Return whether or not the requested patch policy is on the dashboard 

Returns whether or not the requested patch policy is on the dashboard

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id patch policy id
 @return ApiPatchPatchPoliciesIdDashboardGetRequest
*/
func (a *PatchPoliciesPreviewApiService) PatchPatchPoliciesIdDashboardGet(ctx context.Context, id int32) ApiPatchPatchPoliciesIdDashboardGetRequest {
	return ApiPatchPatchPoliciesIdDashboardGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PatchPolicyOnDashboard
func (a *PatchPoliciesPreviewApiService) PatchPatchPoliciesIdDashboardGetExecute(r ApiPatchPatchPoliciesIdDashboardGetRequest) (*PatchPolicyOnDashboard, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PatchPolicyOnDashboard
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchPoliciesPreviewApiService.PatchPatchPoliciesIdDashboardGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/patch/patch-policies/{id}/dashboard"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchPatchPoliciesIdDashboardPostRequest struct {
	ctx context.Context
	ApiService PatchPoliciesPreviewApi
	id int32
}

func (r ApiPatchPatchPoliciesIdDashboardPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.PatchPatchPoliciesIdDashboardPostExecute(r)
}

/*
PatchPatchPoliciesIdDashboardPost Add a patch policy to the dashboard 

Adds a patch policy to the dashboard.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id patch policy id
 @return ApiPatchPatchPoliciesIdDashboardPostRequest
*/
func (a *PatchPoliciesPreviewApiService) PatchPatchPoliciesIdDashboardPost(ctx context.Context, id int32) ApiPatchPatchPoliciesIdDashboardPostRequest {
	return ApiPatchPatchPoliciesIdDashboardPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *PatchPoliciesPreviewApiService) PatchPatchPoliciesIdDashboardPostExecute(r ApiPatchPatchPoliciesIdDashboardPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchPoliciesPreviewApiService.PatchPatchPoliciesIdDashboardPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/patch/patch-policies/{id}/dashboard"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
