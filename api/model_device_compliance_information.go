/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// DeviceComplianceInformation Device compliance information record
type DeviceComplianceInformation struct {
	// ID of the device
	DeviceId *string `json:"deviceId,omitempty"`
	// If device is applicable for compliance calculation
	Applicable *bool `json:"applicable,omitempty"`
	// Device compliance state. Possible values are: * `UNKNOWN` for unknow compliance state, this usually means that the compliance state is being calculated, * `NON_COMPLIANT` for non compliant state, * `COMPLIANT` for compliant state 
	ComplianceState *string `json:"complianceState,omitempty"`
	// Name of the compliance vendor
	ComplianceVendor *string `json:"complianceVendor,omitempty"`
}

// NewDeviceComplianceInformation instantiates a new DeviceComplianceInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceComplianceInformation() *DeviceComplianceInformation {
	this := DeviceComplianceInformation{}
	return &this
}

// NewDeviceComplianceInformationWithDefaults instantiates a new DeviceComplianceInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceComplianceInformationWithDefaults() *DeviceComplianceInformation {
	this := DeviceComplianceInformation{}
	return &this
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *DeviceComplianceInformation) GetDeviceId() string {
	if o == nil || o.DeviceId == nil {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceComplianceInformation) GetDeviceIdOk() (*string, bool) {
	if o == nil || o.DeviceId == nil {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *DeviceComplianceInformation) HasDeviceId() bool {
	if o != nil && o.DeviceId != nil {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *DeviceComplianceInformation) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetApplicable returns the Applicable field value if set, zero value otherwise.
func (o *DeviceComplianceInformation) GetApplicable() bool {
	if o == nil || o.Applicable == nil {
		var ret bool
		return ret
	}
	return *o.Applicable
}

// GetApplicableOk returns a tuple with the Applicable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceComplianceInformation) GetApplicableOk() (*bool, bool) {
	if o == nil || o.Applicable == nil {
		return nil, false
	}
	return o.Applicable, true
}

// HasApplicable returns a boolean if a field has been set.
func (o *DeviceComplianceInformation) HasApplicable() bool {
	if o != nil && o.Applicable != nil {
		return true
	}

	return false
}

// SetApplicable gets a reference to the given bool and assigns it to the Applicable field.
func (o *DeviceComplianceInformation) SetApplicable(v bool) {
	o.Applicable = &v
}

// GetComplianceState returns the ComplianceState field value if set, zero value otherwise.
func (o *DeviceComplianceInformation) GetComplianceState() string {
	if o == nil || o.ComplianceState == nil {
		var ret string
		return ret
	}
	return *o.ComplianceState
}

// GetComplianceStateOk returns a tuple with the ComplianceState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceComplianceInformation) GetComplianceStateOk() (*string, bool) {
	if o == nil || o.ComplianceState == nil {
		return nil, false
	}
	return o.ComplianceState, true
}

// HasComplianceState returns a boolean if a field has been set.
func (o *DeviceComplianceInformation) HasComplianceState() bool {
	if o != nil && o.ComplianceState != nil {
		return true
	}

	return false
}

// SetComplianceState gets a reference to the given string and assigns it to the ComplianceState field.
func (o *DeviceComplianceInformation) SetComplianceState(v string) {
	o.ComplianceState = &v
}

// GetComplianceVendor returns the ComplianceVendor field value if set, zero value otherwise.
func (o *DeviceComplianceInformation) GetComplianceVendor() string {
	if o == nil || o.ComplianceVendor == nil {
		var ret string
		return ret
	}
	return *o.ComplianceVendor
}

// GetComplianceVendorOk returns a tuple with the ComplianceVendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceComplianceInformation) GetComplianceVendorOk() (*string, bool) {
	if o == nil || o.ComplianceVendor == nil {
		return nil, false
	}
	return o.ComplianceVendor, true
}

// HasComplianceVendor returns a boolean if a field has been set.
func (o *DeviceComplianceInformation) HasComplianceVendor() bool {
	if o != nil && o.ComplianceVendor != nil {
		return true
	}

	return false
}

// SetComplianceVendor gets a reference to the given string and assigns it to the ComplianceVendor field.
func (o *DeviceComplianceInformation) SetComplianceVendor(v string) {
	o.ComplianceVendor = &v
}

func (o DeviceComplianceInformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DeviceId != nil {
		toSerialize["deviceId"] = o.DeviceId
	}
	if o.Applicable != nil {
		toSerialize["applicable"] = o.Applicable
	}
	if o.ComplianceState != nil {
		toSerialize["complianceState"] = o.ComplianceState
	}
	if o.ComplianceVendor != nil {
		toSerialize["complianceVendor"] = o.ComplianceVendor
	}
	return json.Marshal(toSerialize)
}

type NullableDeviceComplianceInformation struct {
	value *DeviceComplianceInformation
	isSet bool
}

func (v NullableDeviceComplianceInformation) Get() *DeviceComplianceInformation {
	return v.value
}

func (v *NullableDeviceComplianceInformation) Set(val *DeviceComplianceInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceComplianceInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceComplianceInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceComplianceInformation(val *DeviceComplianceInformation) *NullableDeviceComplianceInformation {
	return &NullableDeviceComplianceInformation{value: val, isSet: true}
}

func (v NullableDeviceComplianceInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceComplianceInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


