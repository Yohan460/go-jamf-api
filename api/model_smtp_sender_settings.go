/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SmtpSenderSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmtpSenderSettings{}

// SmtpSenderSettings struct for SmtpSenderSettings
type SmtpSenderSettings struct {
	DisplayName *string `json:"displayName,omitempty"`
	EmailAddress string `json:"emailAddress"`
}

type _SmtpSenderSettings SmtpSenderSettings

// NewSmtpSenderSettings instantiates a new SmtpSenderSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmtpSenderSettings(emailAddress string) *SmtpSenderSettings {
	this := SmtpSenderSettings{}
	var displayName string = "Jamf Pro Server"
	this.DisplayName = &displayName
	this.EmailAddress = emailAddress
	return &this
}

// NewSmtpSenderSettingsWithDefaults instantiates a new SmtpSenderSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmtpSenderSettingsWithDefaults() *SmtpSenderSettings {
	this := SmtpSenderSettings{}
	var displayName string = "Jamf Pro Server"
	this.DisplayName = &displayName
	var emailAddress string = ""
	this.EmailAddress = emailAddress
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *SmtpSenderSettings) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmtpSenderSettings) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *SmtpSenderSettings) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *SmtpSenderSettings) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEmailAddress returns the EmailAddress field value
func (o *SmtpSenderSettings) GetEmailAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value
// and a boolean to check if the value has been set.
func (o *SmtpSenderSettings) GetEmailAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmailAddress, true
}

// SetEmailAddress sets field value
func (o *SmtpSenderSettings) SetEmailAddress(v string) {
	o.EmailAddress = v
}

func (o SmtpSenderSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmtpSenderSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	toSerialize["emailAddress"] = o.EmailAddress
	return toSerialize, nil
}

func (o *SmtpSenderSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"emailAddress",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSmtpSenderSettings := _SmtpSenderSettings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSmtpSenderSettings)

	if err != nil {
		return err
	}

	*o = SmtpSenderSettings(varSmtpSenderSettings)

	return err
}

type NullableSmtpSenderSettings struct {
	value *SmtpSenderSettings
	isSet bool
}

func (v NullableSmtpSenderSettings) Get() *SmtpSenderSettings {
	return v.value
}

func (v *NullableSmtpSenderSettings) Set(val *SmtpSenderSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableSmtpSenderSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableSmtpSenderSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmtpSenderSettings(val *SmtpSenderSettings) *NullableSmtpSenderSettings {
	return &NullableSmtpSenderSettings{value: val, isSet: true}
}

func (v NullableSmtpSenderSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmtpSenderSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


