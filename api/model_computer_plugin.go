/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ComputerPlugin type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComputerPlugin{}

// ComputerPlugin struct for ComputerPlugin
type ComputerPlugin struct {
	Name *string `json:"name,omitempty"`
	Version *string `json:"version,omitempty"`
	Path *string `json:"path,omitempty"`
}

// NewComputerPlugin instantiates a new ComputerPlugin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputerPlugin() *ComputerPlugin {
	this := ComputerPlugin{}
	return &this
}

// NewComputerPluginWithDefaults instantiates a new ComputerPlugin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputerPluginWithDefaults() *ComputerPlugin {
	this := ComputerPlugin{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ComputerPlugin) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerPlugin) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ComputerPlugin) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ComputerPlugin) SetName(v string) {
	o.Name = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ComputerPlugin) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerPlugin) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ComputerPlugin) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ComputerPlugin) SetVersion(v string) {
	o.Version = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *ComputerPlugin) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerPlugin) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *ComputerPlugin) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *ComputerPlugin) SetPath(v string) {
	o.Path = &v
}

func (o ComputerPlugin) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComputerPlugin) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	return toSerialize, nil
}

type NullableComputerPlugin struct {
	value *ComputerPlugin
	isSet bool
}

func (v NullableComputerPlugin) Get() *ComputerPlugin {
	return v.value
}

func (v *NullableComputerPlugin) Set(val *ComputerPlugin) {
	v.value = val
	v.isSet = true
}

func (v NullableComputerPlugin) IsSet() bool {
	return v.isSet
}

func (v *NullableComputerPlugin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputerPlugin(val *ComputerPlugin) *NullableComputerPlugin {
	return &NullableComputerPlugin{value: val, isSet: true}
}

func (v NullableComputerPlugin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputerPlugin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


