/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SsoKeystoreParse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SsoKeystoreParse{}

// SsoKeystoreParse struct for SsoKeystoreParse
type SsoKeystoreParse struct {
	KeystorePassword string `json:"keystorePassword"`
	KeystoreFile string `json:"keystoreFile"`
	KeystoreFileName string `json:"keystoreFileName"`
}

type _SsoKeystoreParse SsoKeystoreParse

// NewSsoKeystoreParse instantiates a new SsoKeystoreParse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSsoKeystoreParse(keystorePassword string, keystoreFile string, keystoreFileName string) *SsoKeystoreParse {
	this := SsoKeystoreParse{}
	this.KeystorePassword = keystorePassword
	this.KeystoreFile = keystoreFile
	this.KeystoreFileName = keystoreFileName
	return &this
}

// NewSsoKeystoreParseWithDefaults instantiates a new SsoKeystoreParse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSsoKeystoreParseWithDefaults() *SsoKeystoreParse {
	this := SsoKeystoreParse{}
	return &this
}

// GetKeystorePassword returns the KeystorePassword field value
func (o *SsoKeystoreParse) GetKeystorePassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeystorePassword
}

// GetKeystorePasswordOk returns a tuple with the KeystorePassword field value
// and a boolean to check if the value has been set.
func (o *SsoKeystoreParse) GetKeystorePasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeystorePassword, true
}

// SetKeystorePassword sets field value
func (o *SsoKeystoreParse) SetKeystorePassword(v string) {
	o.KeystorePassword = v
}

// GetKeystoreFile returns the KeystoreFile field value
func (o *SsoKeystoreParse) GetKeystoreFile() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeystoreFile
}

// GetKeystoreFileOk returns a tuple with the KeystoreFile field value
// and a boolean to check if the value has been set.
func (o *SsoKeystoreParse) GetKeystoreFileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeystoreFile, true
}

// SetKeystoreFile sets field value
func (o *SsoKeystoreParse) SetKeystoreFile(v string) {
	o.KeystoreFile = v
}

// GetKeystoreFileName returns the KeystoreFileName field value
func (o *SsoKeystoreParse) GetKeystoreFileName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeystoreFileName
}

// GetKeystoreFileNameOk returns a tuple with the KeystoreFileName field value
// and a boolean to check if the value has been set.
func (o *SsoKeystoreParse) GetKeystoreFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeystoreFileName, true
}

// SetKeystoreFileName sets field value
func (o *SsoKeystoreParse) SetKeystoreFileName(v string) {
	o.KeystoreFileName = v
}

func (o SsoKeystoreParse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SsoKeystoreParse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["keystorePassword"] = o.KeystorePassword
	toSerialize["keystoreFile"] = o.KeystoreFile
	toSerialize["keystoreFileName"] = o.KeystoreFileName
	return toSerialize, nil
}

func (o *SsoKeystoreParse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"keystorePassword",
		"keystoreFile",
		"keystoreFileName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSsoKeystoreParse := _SsoKeystoreParse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSsoKeystoreParse)

	if err != nil {
		return err
	}

	*o = SsoKeystoreParse(varSsoKeystoreParse)

	return err
}

type NullableSsoKeystoreParse struct {
	value *SsoKeystoreParse
	isSet bool
}

func (v NullableSsoKeystoreParse) Get() *SsoKeystoreParse {
	return v.value
}

func (v *NullableSsoKeystoreParse) Set(val *SsoKeystoreParse) {
	v.value = val
	v.isSet = true
}

func (v NullableSsoKeystoreParse) IsSet() bool {
	return v.isSet
}

func (v *NullableSsoKeystoreParse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSsoKeystoreParse(val *SsoKeystoreParse) *NullableSsoKeystoreParse {
	return &NullableSsoKeystoreParse{value: val, isSet: true}
}

func (v NullableSsoKeystoreParse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSsoKeystoreParse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


