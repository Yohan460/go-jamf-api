/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// NotificationType the model 'NotificationType'
type NotificationType string

// List of NotificationType
const (
	NOTIFICATIONTYPE_APNS_CERT_REVOKED NotificationType = "APNS_CERT_REVOKED"
	NOTIFICATIONTYPE_APNS_CONNECTION_FAILURE NotificationType = "APNS_CONNECTION_FAILURE"
	NOTIFICATIONTYPE_APPLE_SCHOOL_MANAGER_T_C_NOT_SIGNED NotificationType = "APPLE_SCHOOL_MANAGER_T_C_NOT_SIGNED"
	NOTIFICATIONTYPE_BUILT_IN_CA_EXPIRED NotificationType = "BUILT_IN_CA_EXPIRED"
	NOTIFICATIONTYPE_BUILT_IN_CA_EXPIRING NotificationType = "BUILT_IN_CA_EXPIRING"
	NOTIFICATIONTYPE_BUILT_IN_CA_RENEWAL_FAILED NotificationType = "BUILT_IN_CA_RENEWAL_FAILED"
	NOTIFICATIONTYPE_BUILT_IN_CA_RENEWAL_SUCCESS NotificationType = "BUILT_IN_CA_RENEWAL_SUCCESS"
	NOTIFICATIONTYPE_CLOUD_LDAP_CERT_EXPIRED NotificationType = "CLOUD_LDAP_CERT_EXPIRED"
	NOTIFICATIONTYPE_CLOUD_LDAP_CERT_WILL_EXPIRE NotificationType = "CLOUD_LDAP_CERT_WILL_EXPIRE"
	NOTIFICATIONTYPE_DEP_INSTANCE_EXPIRED NotificationType = "DEP_INSTANCE_EXPIRED"
	NOTIFICATIONTYPE_DEP_INSTANCE_WILL_EXPIRE NotificationType = "DEP_INSTANCE_WILL_EXPIRE"
	NOTIFICATIONTYPE_DEVICE_ENROLLMENT_PROGRAM_T_C_NOT_SIGNED NotificationType = "DEVICE_ENROLLMENT_PROGRAM_T_C_NOT_SIGNED"
	NOTIFICATIONTYPE_EXCEEDED_LICENSE_COUNT NotificationType = "EXCEEDED_LICENSE_COUNT"
	NOTIFICATIONTYPE_FREQUENT_INVENTORY_COLLECTION_POLICY NotificationType = "FREQUENT_INVENTORY_COLLECTION_POLICY"
	NOTIFICATIONTYPE_GSX_CERT_EXPIRED NotificationType = "GSX_CERT_EXPIRED"
	NOTIFICATIONTYPE_GSX_CERT_WILL_EXPIRE NotificationType = "GSX_CERT_WILL_EXPIRE"
	NOTIFICATIONTYPE_HCL_BIND_ERROR NotificationType = "HCL_BIND_ERROR"
	NOTIFICATIONTYPE_HCL_ERROR NotificationType = "HCL_ERROR"
	NOTIFICATIONTYPE_INSECURE_LDAP NotificationType = "INSECURE_LDAP"
	NOTIFICATIONTYPE_INVALID_REFERENCES_EXT_ATTR NotificationType = "INVALID_REFERENCES_EXT_ATTR"
	NOTIFICATIONTYPE_INVALID_REFERENCES_POLICIES NotificationType = "INVALID_REFERENCES_POLICIES"
	NOTIFICATIONTYPE_INVALID_REFERENCES_SCRIPTS NotificationType = "INVALID_REFERENCES_SCRIPTS"
	NOTIFICATIONTYPE_JAMF_CONNECT_UPDATE NotificationType = "JAMF_CONNECT_UPDATE"
	NOTIFICATIONTYPE_JAMF_PROTECT_UPDATE NotificationType = "JAMF_PROTECT_UPDATE"
	NOTIFICATIONTYPE_JIM_ERROR NotificationType = "JIM_ERROR"
	NOTIFICATIONTYPE_LDAP_CONNECTION_CHECK_THROUGH_JIM_FAILED NotificationType = "LDAP_CONNECTION_CHECK_THROUGH_JIM_FAILED"
	NOTIFICATIONTYPE_LDAP_CONNECTION_CHECK_THROUGH_JIM_SUCCESSFUL NotificationType = "LDAP_CONNECTION_CHECK_THROUGH_JIM_SUCCESSFUL"
	NOTIFICATIONTYPE_MDM_EXTERNAL_SIGNING_CERTIFICATE_EXPIRED NotificationType = "MDM_EXTERNAL_SIGNING_CERTIFICATE_EXPIRED"
	NOTIFICATIONTYPE_MDM_EXTERNAL_SIGNING_CERTIFICATE_EXPIRING NotificationType = "MDM_EXTERNAL_SIGNING_CERTIFICATE_EXPIRING"
	NOTIFICATIONTYPE_MDM_EXTERNAL_SIGNING_CERTIFICATE_EXPIRING_TODAY NotificationType = "MDM_EXTERNAL_SIGNING_CERTIFICATE_EXPIRING_TODAY"
	NOTIFICATIONTYPE_MII_HEARTBEAT_FAILED_NOTIFICATION NotificationType = "MII_HEARTBEAT_FAILED_NOTIFICATION"
	NOTIFICATIONTYPE_MII_INVENTORY_UPLOAD_FAILED_NOTIFICATION NotificationType = "MII_INVENTORY_UPLOAD_FAILED_NOTIFICATION"
	NOTIFICATIONTYPE_MII_UNATHORIZED_RESPONSE_NOTIFICATION NotificationType = "MII_UNATHORIZED_RESPONSE_NOTIFICATION"
	NOTIFICATIONTYPE_PATCH_EXTENTION_ATTRIBUTE NotificationType = "PATCH_EXTENTION_ATTRIBUTE"
	NOTIFICATIONTYPE_PATCH_UPDATE NotificationType = "PATCH_UPDATE"
	NOTIFICATIONTYPE_POLICY_MANAGEMENT_ACCOUNT_PAYLOAD_SECURITY_MULTIPLE NotificationType = "POLICY_MANAGEMENT_ACCOUNT_PAYLOAD_SECURITY_MULTIPLE"
	NOTIFICATIONTYPE_POLICY_MANAGEMENT_ACCOUNT_PAYLOAD_SECURITY_SINGLE NotificationType = "POLICY_MANAGEMENT_ACCOUNT_PAYLOAD_SECURITY_SINGLE"
	NOTIFICATIONTYPE_PUSH_CERT_EXPIRED NotificationType = "PUSH_CERT_EXPIRED"
	NOTIFICATIONTYPE_PUSH_CERT_WILL_EXPIRE NotificationType = "PUSH_CERT_WILL_EXPIRE"
	NOTIFICATIONTYPE_PUSH_PROXY_CERT_EXPIRED NotificationType = "PUSH_PROXY_CERT_EXPIRED"
	NOTIFICATIONTYPE_SSO_CERT_EXPIRED NotificationType = "SSO_CERT_EXPIRED"
	NOTIFICATIONTYPE_SSO_IDP_CERT_EXPIRED NotificationType = "SSO_IDP_CERT_EXPIRED"
	NOTIFICATIONTYPE_SSO_CERT_WILL_EXPIRE NotificationType = "SSO_CERT_WILL_EXPIRE"
	NOTIFICATIONTYPE_SSO_IDP_CERT_WILL_EXPIRE NotificationType = "SSO_IDP_CERT_WILL_EXPIRE"
	NOTIFICATIONTYPE_TOMCAT_SSL_CERT_EXPIRED NotificationType = "TOMCAT_SSL_CERT_EXPIRED"
	NOTIFICATIONTYPE_TOMCAT_SSL_CERT_WILL_EXPIRE NotificationType = "TOMCAT_SSL_CERT_WILL_EXPIRE"
	NOTIFICATIONTYPE_USER_INITIATED_ENROLLMENT_MANAGEMENT_ACCOUNT_SECURITY_ISSUE NotificationType = "USER_INITIATED_ENROLLMENT_MANAGEMENT_ACCOUNT_SECURITY_ISSUE"
	NOTIFICATIONTYPE_USER_MAID_DUPLICATE_ERROR NotificationType = "USER_MAID_DUPLICATE_ERROR"
	NOTIFICATIONTYPE_USER_MAID_MISMATCH_ERROR NotificationType = "USER_MAID_MISMATCH_ERROR"
	NOTIFICATIONTYPE_USER_MAID_ROSTER_DUPLICATE_ERROR NotificationType = "USER_MAID_ROSTER_DUPLICATE_ERROR"
	NOTIFICATIONTYPE_VPP_ACCOUNT_EXPIRED NotificationType = "VPP_ACCOUNT_EXPIRED"
	NOTIFICATIONTYPE_VPP_ACCOUNT_WILL_EXPIRE NotificationType = "VPP_ACCOUNT_WILL_EXPIRE"
	NOTIFICATIONTYPE_VPP_TOKEN_REVOKED NotificationType = "VPP_TOKEN_REVOKED"
	NOTIFICATIONTYPE_DEVICE_COMPLIANCE_CONNECTION_ERROR NotificationType = "DEVICE_COMPLIANCE_CONNECTION_ERROR"
	NOTIFICATIONTYPE_CONDITIONAL_ACCESS_CONNECTION_ERROR NotificationType = "CONDITIONAL_ACCESS_CONNECTION_ERROR"
	NOTIFICATIONTYPE_AZURE_AD_MIGRATION_REPORT_GENERATED NotificationType = "AZURE_AD_MIGRATION_REPORT_GENERATED"
	NOTIFICATIONTYPE_BEYOND_CORP_CONNECTION_ERROR NotificationType = "BEYOND_CORP_CONNECTION_ERROR"
	NOTIFICATIONTYPE_APP_INSTALLERS_NEW_APP_VERSION_AVAILABLE NotificationType = "APP_INSTALLERS_NEW_APP_VERSION_AVAILABLE"
	NOTIFICATIONTYPE_APP_INSTALLERS_NEW_APP_VERSION_DEPLOYMENT_STARTED NotificationType = "APP_INSTALLERS_NEW_APP_VERSION_DEPLOYMENT_STARTED"
	NOTIFICATIONTYPE_APP_INSTALLERS_APP_VERSION_REMOVED NotificationType = "APP_INSTALLERS_APP_VERSION_REMOVED"
	NOTIFICATIONTYPE_APP_INSTALLERS_APP_TITLE_REMOVED NotificationType = "APP_INSTALLERS_APP_TITLE_REMOVED"
	NOTIFICATIONTYPE_APP_INSTALLERS_DEPLOYMENT_INSTALLATION_FAILED NotificationType = "APP_INSTALLERS_DEPLOYMENT_INSTALLATION_FAILED"
	NOTIFICATIONTYPE_SAML_RESPONSE_ASSERTION_SIGNING_REQUIRED NotificationType = "SAML_RESPONSE_ASSERTION_SIGNING_REQUIRED"
)

// All allowed values of NotificationType enum
var AllowedNotificationTypeEnumValues = []NotificationType{
	"APNS_CERT_REVOKED",
	"APNS_CONNECTION_FAILURE",
	"APPLE_SCHOOL_MANAGER_T_C_NOT_SIGNED",
	"BUILT_IN_CA_EXPIRED",
	"BUILT_IN_CA_EXPIRING",
	"BUILT_IN_CA_RENEWAL_FAILED",
	"BUILT_IN_CA_RENEWAL_SUCCESS",
	"CLOUD_LDAP_CERT_EXPIRED",
	"CLOUD_LDAP_CERT_WILL_EXPIRE",
	"DEP_INSTANCE_EXPIRED",
	"DEP_INSTANCE_WILL_EXPIRE",
	"DEVICE_ENROLLMENT_PROGRAM_T_C_NOT_SIGNED",
	"EXCEEDED_LICENSE_COUNT",
	"FREQUENT_INVENTORY_COLLECTION_POLICY",
	"GSX_CERT_EXPIRED",
	"GSX_CERT_WILL_EXPIRE",
	"HCL_BIND_ERROR",
	"HCL_ERROR",
	"INSECURE_LDAP",
	"INVALID_REFERENCES_EXT_ATTR",
	"INVALID_REFERENCES_POLICIES",
	"INVALID_REFERENCES_SCRIPTS",
	"JAMF_CONNECT_UPDATE",
	"JAMF_PROTECT_UPDATE",
	"JIM_ERROR",
	"LDAP_CONNECTION_CHECK_THROUGH_JIM_FAILED",
	"LDAP_CONNECTION_CHECK_THROUGH_JIM_SUCCESSFUL",
	"MDM_EXTERNAL_SIGNING_CERTIFICATE_EXPIRED",
	"MDM_EXTERNAL_SIGNING_CERTIFICATE_EXPIRING",
	"MDM_EXTERNAL_SIGNING_CERTIFICATE_EXPIRING_TODAY",
	"MII_HEARTBEAT_FAILED_NOTIFICATION",
	"MII_INVENTORY_UPLOAD_FAILED_NOTIFICATION",
	"MII_UNATHORIZED_RESPONSE_NOTIFICATION",
	"PATCH_EXTENTION_ATTRIBUTE",
	"PATCH_UPDATE",
	"POLICY_MANAGEMENT_ACCOUNT_PAYLOAD_SECURITY_MULTIPLE",
	"POLICY_MANAGEMENT_ACCOUNT_PAYLOAD_SECURITY_SINGLE",
	"PUSH_CERT_EXPIRED",
	"PUSH_CERT_WILL_EXPIRE",
	"PUSH_PROXY_CERT_EXPIRED",
	"SSO_CERT_EXPIRED",
	"SSO_IDP_CERT_EXPIRED",
	"SSO_CERT_WILL_EXPIRE",
	"SSO_IDP_CERT_WILL_EXPIRE",
	"TOMCAT_SSL_CERT_EXPIRED",
	"TOMCAT_SSL_CERT_WILL_EXPIRE",
	"USER_INITIATED_ENROLLMENT_MANAGEMENT_ACCOUNT_SECURITY_ISSUE",
	"USER_MAID_DUPLICATE_ERROR",
	"USER_MAID_MISMATCH_ERROR",
	"USER_MAID_ROSTER_DUPLICATE_ERROR",
	"VPP_ACCOUNT_EXPIRED",
	"VPP_ACCOUNT_WILL_EXPIRE",
	"VPP_TOKEN_REVOKED",
	"DEVICE_COMPLIANCE_CONNECTION_ERROR",
	"CONDITIONAL_ACCESS_CONNECTION_ERROR",
	"AZURE_AD_MIGRATION_REPORT_GENERATED",
	"BEYOND_CORP_CONNECTION_ERROR",
	"APP_INSTALLERS_NEW_APP_VERSION_AVAILABLE",
	"APP_INSTALLERS_NEW_APP_VERSION_DEPLOYMENT_STARTED",
	"APP_INSTALLERS_APP_VERSION_REMOVED",
	"APP_INSTALLERS_APP_TITLE_REMOVED",
	"APP_INSTALLERS_DEPLOYMENT_INSTALLATION_FAILED",
	"SAML_RESPONSE_ASSERTION_SIGNING_REQUIRED",
}

func (v *NotificationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NotificationType(value)
	for _, existing := range AllowedNotificationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NotificationType", value)
}

// NewNotificationTypeFromValue returns a pointer to a valid NotificationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNotificationTypeFromValue(v string) (*NotificationType, error) {
	ev := NotificationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NotificationType: valid values are %v", v, AllowedNotificationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NotificationType) IsValid() bool {
	for _, existing := range AllowedNotificationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NotificationType value
func (v NotificationType) Ptr() *NotificationType {
	return &v
}

type NullableNotificationType struct {
	value *NotificationType
	isSet bool
}

func (v NullableNotificationType) Get() *NotificationType {
	return v.value
}

func (v *NullableNotificationType) Set(val *NotificationType) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationType) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationType(val *NotificationType) *NullableNotificationType {
	return &NullableNotificationType{value: val, isSet: true}
}

func (v NullableNotificationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

