/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


type DeviceEnrollmentsDevicesApi interface {

	/*
	V1DeviceEnrollmentsIdDevicesGet Retrieve a list of Devices assigned to the supplied id 

	Retrieves a list of devices assigned to the supplied id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Device Enrollment Instance identifier
	@return ApiV1DeviceEnrollmentsIdDevicesGetRequest
	*/
	V1DeviceEnrollmentsIdDevicesGet(ctx context.Context, id string) ApiV1DeviceEnrollmentsIdDevicesGetRequest

	// V1DeviceEnrollmentsIdDevicesGetExecute executes the request
	//  @return DeviceEnrollmentDeviceSearchResults
	V1DeviceEnrollmentsIdDevicesGetExecute(r ApiV1DeviceEnrollmentsIdDevicesGetRequest) (*DeviceEnrollmentDeviceSearchResults, *http.Response, error)
}

// DeviceEnrollmentsDevicesApiService DeviceEnrollmentsDevicesApi service
type DeviceEnrollmentsDevicesApiService service

type ApiV1DeviceEnrollmentsIdDevicesGetRequest struct {
	ctx context.Context
	ApiService DeviceEnrollmentsDevicesApi
	id string
}

func (r ApiV1DeviceEnrollmentsIdDevicesGetRequest) Execute() (*DeviceEnrollmentDeviceSearchResults, *http.Response, error) {
	return r.ApiService.V1DeviceEnrollmentsIdDevicesGetExecute(r)
}

/*
V1DeviceEnrollmentsIdDevicesGet Retrieve a list of Devices assigned to the supplied id 

Retrieves a list of devices assigned to the supplied id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Device Enrollment Instance identifier
 @return ApiV1DeviceEnrollmentsIdDevicesGetRequest
*/
func (a *DeviceEnrollmentsDevicesApiService) V1DeviceEnrollmentsIdDevicesGet(ctx context.Context, id string) ApiV1DeviceEnrollmentsIdDevicesGetRequest {
	return ApiV1DeviceEnrollmentsIdDevicesGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DeviceEnrollmentDeviceSearchResults
func (a *DeviceEnrollmentsDevicesApiService) V1DeviceEnrollmentsIdDevicesGetExecute(r ApiV1DeviceEnrollmentsIdDevicesGetRequest) (*DeviceEnrollmentDeviceSearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceEnrollmentDeviceSearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceEnrollmentsDevicesApiService.V1DeviceEnrollmentsIdDevicesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/device-enrollments/{id}/devices"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
