/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// InventoryInformation Jamf Pro Inventory statistics object. Aggregates managed/unmanaged devices and computers counters
type InventoryInformation struct {
	// Number of managed computers in inventory.
	ManagedComputers *int32 `json:"managedComputers,omitempty"`
	// Number of unmanaged computers in inventory.
	UnmanagedComputers *int32 `json:"unmanagedComputers,omitempty"`
	// Number of managed devices in inventory.
	ManagedDevices *int32 `json:"managedDevices,omitempty"`
	// Number of unmanaged devices in inventory.
	UnmanagedDevices *int32 `json:"unmanagedDevices,omitempty"`
}

// NewInventoryInformation instantiates a new InventoryInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInventoryInformation() *InventoryInformation {
	this := InventoryInformation{}
	return &this
}

// NewInventoryInformationWithDefaults instantiates a new InventoryInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInventoryInformationWithDefaults() *InventoryInformation {
	this := InventoryInformation{}
	return &this
}

// GetManagedComputers returns the ManagedComputers field value if set, zero value otherwise.
func (o *InventoryInformation) GetManagedComputers() int32 {
	if o == nil || o.ManagedComputers == nil {
		var ret int32
		return ret
	}
	return *o.ManagedComputers
}

// GetManagedComputersOk returns a tuple with the ManagedComputers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryInformation) GetManagedComputersOk() (*int32, bool) {
	if o == nil || o.ManagedComputers == nil {
		return nil, false
	}
	return o.ManagedComputers, true
}

// HasManagedComputers returns a boolean if a field has been set.
func (o *InventoryInformation) HasManagedComputers() bool {
	if o != nil && o.ManagedComputers != nil {
		return true
	}

	return false
}

// SetManagedComputers gets a reference to the given int32 and assigns it to the ManagedComputers field.
func (o *InventoryInformation) SetManagedComputers(v int32) {
	o.ManagedComputers = &v
}

// GetUnmanagedComputers returns the UnmanagedComputers field value if set, zero value otherwise.
func (o *InventoryInformation) GetUnmanagedComputers() int32 {
	if o == nil || o.UnmanagedComputers == nil {
		var ret int32
		return ret
	}
	return *o.UnmanagedComputers
}

// GetUnmanagedComputersOk returns a tuple with the UnmanagedComputers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryInformation) GetUnmanagedComputersOk() (*int32, bool) {
	if o == nil || o.UnmanagedComputers == nil {
		return nil, false
	}
	return o.UnmanagedComputers, true
}

// HasUnmanagedComputers returns a boolean if a field has been set.
func (o *InventoryInformation) HasUnmanagedComputers() bool {
	if o != nil && o.UnmanagedComputers != nil {
		return true
	}

	return false
}

// SetUnmanagedComputers gets a reference to the given int32 and assigns it to the UnmanagedComputers field.
func (o *InventoryInformation) SetUnmanagedComputers(v int32) {
	o.UnmanagedComputers = &v
}

// GetManagedDevices returns the ManagedDevices field value if set, zero value otherwise.
func (o *InventoryInformation) GetManagedDevices() int32 {
	if o == nil || o.ManagedDevices == nil {
		var ret int32
		return ret
	}
	return *o.ManagedDevices
}

// GetManagedDevicesOk returns a tuple with the ManagedDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryInformation) GetManagedDevicesOk() (*int32, bool) {
	if o == nil || o.ManagedDevices == nil {
		return nil, false
	}
	return o.ManagedDevices, true
}

// HasManagedDevices returns a boolean if a field has been set.
func (o *InventoryInformation) HasManagedDevices() bool {
	if o != nil && o.ManagedDevices != nil {
		return true
	}

	return false
}

// SetManagedDevices gets a reference to the given int32 and assigns it to the ManagedDevices field.
func (o *InventoryInformation) SetManagedDevices(v int32) {
	o.ManagedDevices = &v
}

// GetUnmanagedDevices returns the UnmanagedDevices field value if set, zero value otherwise.
func (o *InventoryInformation) GetUnmanagedDevices() int32 {
	if o == nil || o.UnmanagedDevices == nil {
		var ret int32
		return ret
	}
	return *o.UnmanagedDevices
}

// GetUnmanagedDevicesOk returns a tuple with the UnmanagedDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryInformation) GetUnmanagedDevicesOk() (*int32, bool) {
	if o == nil || o.UnmanagedDevices == nil {
		return nil, false
	}
	return o.UnmanagedDevices, true
}

// HasUnmanagedDevices returns a boolean if a field has been set.
func (o *InventoryInformation) HasUnmanagedDevices() bool {
	if o != nil && o.UnmanagedDevices != nil {
		return true
	}

	return false
}

// SetUnmanagedDevices gets a reference to the given int32 and assigns it to the UnmanagedDevices field.
func (o *InventoryInformation) SetUnmanagedDevices(v int32) {
	o.UnmanagedDevices = &v
}

func (o InventoryInformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ManagedComputers != nil {
		toSerialize["managedComputers"] = o.ManagedComputers
	}
	if o.UnmanagedComputers != nil {
		toSerialize["unmanagedComputers"] = o.UnmanagedComputers
	}
	if o.ManagedDevices != nil {
		toSerialize["managedDevices"] = o.ManagedDevices
	}
	if o.UnmanagedDevices != nil {
		toSerialize["unmanagedDevices"] = o.UnmanagedDevices
	}
	return json.Marshal(toSerialize)
}

type NullableInventoryInformation struct {
	value *InventoryInformation
	isSet bool
}

func (v NullableInventoryInformation) Get() *InventoryInformation {
	return v.value
}

func (v *NullableInventoryInformation) Set(val *InventoryInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableInventoryInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableInventoryInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventoryInformation(val *InventoryInformation) *NullableInventoryInformation {
	return &NullableInventoryInformation{value: val, isSet: true}
}

func (v NullableInventoryInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventoryInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


