/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the DssDeclarations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DssDeclarations{}

// DssDeclarations struct for DssDeclarations
type DssDeclarations struct {
	Declarations []DssDeclaration `json:"declarations,omitempty"`
}

// NewDssDeclarations instantiates a new DssDeclarations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDssDeclarations() *DssDeclarations {
	this := DssDeclarations{}
	return &this
}

// NewDssDeclarationsWithDefaults instantiates a new DssDeclarations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDssDeclarationsWithDefaults() *DssDeclarations {
	this := DssDeclarations{}
	return &this
}

// GetDeclarations returns the Declarations field value if set, zero value otherwise.
func (o *DssDeclarations) GetDeclarations() []DssDeclaration {
	if o == nil || IsNil(o.Declarations) {
		var ret []DssDeclaration
		return ret
	}
	return o.Declarations
}

// GetDeclarationsOk returns a tuple with the Declarations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DssDeclarations) GetDeclarationsOk() ([]DssDeclaration, bool) {
	if o == nil || IsNil(o.Declarations) {
		return nil, false
	}
	return o.Declarations, true
}

// HasDeclarations returns a boolean if a field has been set.
func (o *DssDeclarations) HasDeclarations() bool {
	if o != nil && !IsNil(o.Declarations) {
		return true
	}

	return false
}

// SetDeclarations gets a reference to the given []DssDeclaration and assigns it to the Declarations field.
func (o *DssDeclarations) SetDeclarations(v []DssDeclaration) {
	o.Declarations = v
}

func (o DssDeclarations) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DssDeclarations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Declarations) {
		toSerialize["declarations"] = o.Declarations
	}
	return toSerialize, nil
}

type NullableDssDeclarations struct {
	value *DssDeclarations
	isSet bool
}

func (v NullableDssDeclarations) Get() *DssDeclarations {
	return v.value
}

func (v *NullableDssDeclarations) Set(val *DssDeclarations) {
	v.value = val
	v.isSet = true
}

func (v NullableDssDeclarations) IsSet() bool {
	return v.isSet
}

func (v *NullableDssDeclarations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDssDeclarations(val *DssDeclarations) *NullableDssDeclarations {
	return &NullableDssDeclarations{value: val, isSet: true}
}

func (v NullableDssDeclarations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDssDeclarations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


