/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// CertificateIdentityV2 struct for CertificateIdentityV2
type CertificateIdentityV2 struct {
	Filename *string `json:"filename,omitempty"`
	KeystorePassword *string `json:"keystorePassword,omitempty"`
	// The base 64 encoded certificate.
	IdentityKeystore *string `json:"identityKeystore,omitempty"`
	// The md5 checksum of the certificate file. Intended to be used in verifification the cert being used to sign QuickAdd packages.
	Md5Sum *string `json:"md5Sum,omitempty"`
}

// NewCertificateIdentityV2 instantiates a new CertificateIdentityV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateIdentityV2() *CertificateIdentityV2 {
	this := CertificateIdentityV2{}
	var filename string = "null"
	this.Filename = &filename
	var keystorePassword string = ""
	this.KeystorePassword = &keystorePassword
	return &this
}

// NewCertificateIdentityV2WithDefaults instantiates a new CertificateIdentityV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateIdentityV2WithDefaults() *CertificateIdentityV2 {
	this := CertificateIdentityV2{}
	var filename string = "null"
	this.Filename = &filename
	var keystorePassword string = ""
	this.KeystorePassword = &keystorePassword
	return &this
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *CertificateIdentityV2) GetFilename() string {
	if o == nil || o.Filename == nil {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateIdentityV2) GetFilenameOk() (*string, bool) {
	if o == nil || o.Filename == nil {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *CertificateIdentityV2) HasFilename() bool {
	if o != nil && o.Filename != nil {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *CertificateIdentityV2) SetFilename(v string) {
	o.Filename = &v
}

// GetKeystorePassword returns the KeystorePassword field value if set, zero value otherwise.
func (o *CertificateIdentityV2) GetKeystorePassword() string {
	if o == nil || o.KeystorePassword == nil {
		var ret string
		return ret
	}
	return *o.KeystorePassword
}

// GetKeystorePasswordOk returns a tuple with the KeystorePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateIdentityV2) GetKeystorePasswordOk() (*string, bool) {
	if o == nil || o.KeystorePassword == nil {
		return nil, false
	}
	return o.KeystorePassword, true
}

// HasKeystorePassword returns a boolean if a field has been set.
func (o *CertificateIdentityV2) HasKeystorePassword() bool {
	if o != nil && o.KeystorePassword != nil {
		return true
	}

	return false
}

// SetKeystorePassword gets a reference to the given string and assigns it to the KeystorePassword field.
func (o *CertificateIdentityV2) SetKeystorePassword(v string) {
	o.KeystorePassword = &v
}

// GetIdentityKeystore returns the IdentityKeystore field value if set, zero value otherwise.
func (o *CertificateIdentityV2) GetIdentityKeystore() string {
	if o == nil || o.IdentityKeystore == nil {
		var ret string
		return ret
	}
	return *o.IdentityKeystore
}

// GetIdentityKeystoreOk returns a tuple with the IdentityKeystore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateIdentityV2) GetIdentityKeystoreOk() (*string, bool) {
	if o == nil || o.IdentityKeystore == nil {
		return nil, false
	}
	return o.IdentityKeystore, true
}

// HasIdentityKeystore returns a boolean if a field has been set.
func (o *CertificateIdentityV2) HasIdentityKeystore() bool {
	if o != nil && o.IdentityKeystore != nil {
		return true
	}

	return false
}

// SetIdentityKeystore gets a reference to the given string and assigns it to the IdentityKeystore field.
func (o *CertificateIdentityV2) SetIdentityKeystore(v string) {
	o.IdentityKeystore = &v
}

// GetMd5Sum returns the Md5Sum field value if set, zero value otherwise.
func (o *CertificateIdentityV2) GetMd5Sum() string {
	if o == nil || o.Md5Sum == nil {
		var ret string
		return ret
	}
	return *o.Md5Sum
}

// GetMd5SumOk returns a tuple with the Md5Sum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateIdentityV2) GetMd5SumOk() (*string, bool) {
	if o == nil || o.Md5Sum == nil {
		return nil, false
	}
	return o.Md5Sum, true
}

// HasMd5Sum returns a boolean if a field has been set.
func (o *CertificateIdentityV2) HasMd5Sum() bool {
	if o != nil && o.Md5Sum != nil {
		return true
	}

	return false
}

// SetMd5Sum gets a reference to the given string and assigns it to the Md5Sum field.
func (o *CertificateIdentityV2) SetMd5Sum(v string) {
	o.Md5Sum = &v
}

func (o CertificateIdentityV2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Filename != nil {
		toSerialize["filename"] = o.Filename
	}
	if o.KeystorePassword != nil {
		toSerialize["keystorePassword"] = o.KeystorePassword
	}
	if o.IdentityKeystore != nil {
		toSerialize["identityKeystore"] = o.IdentityKeystore
	}
	if o.Md5Sum != nil {
		toSerialize["md5Sum"] = o.Md5Sum
	}
	return json.Marshal(toSerialize)
}

type NullableCertificateIdentityV2 struct {
	value *CertificateIdentityV2
	isSet bool
}

func (v NullableCertificateIdentityV2) Get() *CertificateIdentityV2 {
	return v.value
}

func (v *NullableCertificateIdentityV2) Set(val *CertificateIdentityV2) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateIdentityV2) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateIdentityV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateIdentityV2(val *CertificateIdentityV2) *NullableCertificateIdentityV2 {
	return &NullableCertificateIdentityV2{value: val, isSet: true}
}

func (v NullableCertificateIdentityV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateIdentityV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


