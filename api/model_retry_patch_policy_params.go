/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// RetryPatchPolicyParams struct for RetryPatchPolicyParams
type RetryPatchPolicyParams struct {
	PatchPolicyId *int32 `json:"patchPolicyId,omitempty"`
	DeviceIds []int32 `json:"deviceIds,omitempty"`
	IsRetryAllFailed *bool `json:"isRetryAllFailed,omitempty"`
}

// NewRetryPatchPolicyParams instantiates a new RetryPatchPolicyParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRetryPatchPolicyParams() *RetryPatchPolicyParams {
	this := RetryPatchPolicyParams{}
	var isRetryAllFailed bool = false
	this.IsRetryAllFailed = &isRetryAllFailed
	return &this
}

// NewRetryPatchPolicyParamsWithDefaults instantiates a new RetryPatchPolicyParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRetryPatchPolicyParamsWithDefaults() *RetryPatchPolicyParams {
	this := RetryPatchPolicyParams{}
	var isRetryAllFailed bool = false
	this.IsRetryAllFailed = &isRetryAllFailed
	return &this
}

// GetPatchPolicyId returns the PatchPolicyId field value if set, zero value otherwise.
func (o *RetryPatchPolicyParams) GetPatchPolicyId() int32 {
	if o == nil || o.PatchPolicyId == nil {
		var ret int32
		return ret
	}
	return *o.PatchPolicyId
}

// GetPatchPolicyIdOk returns a tuple with the PatchPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetryPatchPolicyParams) GetPatchPolicyIdOk() (*int32, bool) {
	if o == nil || o.PatchPolicyId == nil {
		return nil, false
	}
	return o.PatchPolicyId, true
}

// HasPatchPolicyId returns a boolean if a field has been set.
func (o *RetryPatchPolicyParams) HasPatchPolicyId() bool {
	if o != nil && o.PatchPolicyId != nil {
		return true
	}

	return false
}

// SetPatchPolicyId gets a reference to the given int32 and assigns it to the PatchPolicyId field.
func (o *RetryPatchPolicyParams) SetPatchPolicyId(v int32) {
	o.PatchPolicyId = &v
}

// GetDeviceIds returns the DeviceIds field value if set, zero value otherwise.
func (o *RetryPatchPolicyParams) GetDeviceIds() []int32 {
	if o == nil || o.DeviceIds == nil {
		var ret []int32
		return ret
	}
	return o.DeviceIds
}

// GetDeviceIdsOk returns a tuple with the DeviceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetryPatchPolicyParams) GetDeviceIdsOk() ([]int32, bool) {
	if o == nil || o.DeviceIds == nil {
		return nil, false
	}
	return o.DeviceIds, true
}

// HasDeviceIds returns a boolean if a field has been set.
func (o *RetryPatchPolicyParams) HasDeviceIds() bool {
	if o != nil && o.DeviceIds != nil {
		return true
	}

	return false
}

// SetDeviceIds gets a reference to the given []int32 and assigns it to the DeviceIds field.
func (o *RetryPatchPolicyParams) SetDeviceIds(v []int32) {
	o.DeviceIds = v
}

// GetIsRetryAllFailed returns the IsRetryAllFailed field value if set, zero value otherwise.
func (o *RetryPatchPolicyParams) GetIsRetryAllFailed() bool {
	if o == nil || o.IsRetryAllFailed == nil {
		var ret bool
		return ret
	}
	return *o.IsRetryAllFailed
}

// GetIsRetryAllFailedOk returns a tuple with the IsRetryAllFailed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetryPatchPolicyParams) GetIsRetryAllFailedOk() (*bool, bool) {
	if o == nil || o.IsRetryAllFailed == nil {
		return nil, false
	}
	return o.IsRetryAllFailed, true
}

// HasIsRetryAllFailed returns a boolean if a field has been set.
func (o *RetryPatchPolicyParams) HasIsRetryAllFailed() bool {
	if o != nil && o.IsRetryAllFailed != nil {
		return true
	}

	return false
}

// SetIsRetryAllFailed gets a reference to the given bool and assigns it to the IsRetryAllFailed field.
func (o *RetryPatchPolicyParams) SetIsRetryAllFailed(v bool) {
	o.IsRetryAllFailed = &v
}

func (o RetryPatchPolicyParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PatchPolicyId != nil {
		toSerialize["patchPolicyId"] = o.PatchPolicyId
	}
	if o.DeviceIds != nil {
		toSerialize["deviceIds"] = o.DeviceIds
	}
	if o.IsRetryAllFailed != nil {
		toSerialize["isRetryAllFailed"] = o.IsRetryAllFailed
	}
	return json.Marshal(toSerialize)
}

type NullableRetryPatchPolicyParams struct {
	value *RetryPatchPolicyParams
	isSet bool
}

func (v NullableRetryPatchPolicyParams) Get() *RetryPatchPolicyParams {
	return v.value
}

func (v *NullableRetryPatchPolicyParams) Set(val *RetryPatchPolicyParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRetryPatchPolicyParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRetryPatchPolicyParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRetryPatchPolicyParams(val *RetryPatchPolicyParams) *NullableRetryPatchPolicyParams {
	return &NullableRetryPatchPolicyParams{value: val, isSet: true}
}

func (v NullableRetryPatchPolicyParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRetryPatchPolicyParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


