/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// AccountPreferencesUserInterfaceDisplayTheme the model 'AccountPreferencesUserInterfaceDisplayTheme'
type AccountPreferencesUserInterfaceDisplayTheme string

// List of AccountPreferencesUserInterfaceDisplayTheme
const (
	ACCOUNTPREFERENCESUSERINTERFACEDISPLAYTHEME_MATCH_SYSTEM AccountPreferencesUserInterfaceDisplayTheme = "MATCH_SYSTEM"
	ACCOUNTPREFERENCESUSERINTERFACEDISPLAYTHEME_LIGHT AccountPreferencesUserInterfaceDisplayTheme = "LIGHT"
	ACCOUNTPREFERENCESUSERINTERFACEDISPLAYTHEME_DARK AccountPreferencesUserInterfaceDisplayTheme = "DARK"
)

// All allowed values of AccountPreferencesUserInterfaceDisplayTheme enum
var AllowedAccountPreferencesUserInterfaceDisplayThemeEnumValues = []AccountPreferencesUserInterfaceDisplayTheme{
	"MATCH_SYSTEM",
	"LIGHT",
	"DARK",
}

func (v *AccountPreferencesUserInterfaceDisplayTheme) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccountPreferencesUserInterfaceDisplayTheme(value)
	for _, existing := range AllowedAccountPreferencesUserInterfaceDisplayThemeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccountPreferencesUserInterfaceDisplayTheme", value)
}

// NewAccountPreferencesUserInterfaceDisplayThemeFromValue returns a pointer to a valid AccountPreferencesUserInterfaceDisplayTheme
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountPreferencesUserInterfaceDisplayThemeFromValue(v string) (*AccountPreferencesUserInterfaceDisplayTheme, error) {
	ev := AccountPreferencesUserInterfaceDisplayTheme(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccountPreferencesUserInterfaceDisplayTheme: valid values are %v", v, AllowedAccountPreferencesUserInterfaceDisplayThemeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountPreferencesUserInterfaceDisplayTheme) IsValid() bool {
	for _, existing := range AllowedAccountPreferencesUserInterfaceDisplayThemeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccountPreferencesUserInterfaceDisplayTheme value
func (v AccountPreferencesUserInterfaceDisplayTheme) Ptr() *AccountPreferencesUserInterfaceDisplayTheme {
	return &v
}

type NullableAccountPreferencesUserInterfaceDisplayTheme struct {
	value *AccountPreferencesUserInterfaceDisplayTheme
	isSet bool
}

func (v NullableAccountPreferencesUserInterfaceDisplayTheme) Get() *AccountPreferencesUserInterfaceDisplayTheme {
	return v.value
}

func (v *NullableAccountPreferencesUserInterfaceDisplayTheme) Set(val *AccountPreferencesUserInterfaceDisplayTheme) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountPreferencesUserInterfaceDisplayTheme) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountPreferencesUserInterfaceDisplayTheme) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountPreferencesUserInterfaceDisplayTheme(val *AccountPreferencesUserInterfaceDisplayTheme) *NullableAccountPreferencesUserInterfaceDisplayTheme {
	return &NullableAccountPreferencesUserInterfaceDisplayTheme{value: val, isSet: true}
}

func (v NullableAccountPreferencesUserInterfaceDisplayTheme) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountPreferencesUserInterfaceDisplayTheme) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

