/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type MobileDeviceGroupsAPI interface {

	/*
	V1MobileDeviceGroupsGet Return the list of all Mobile Device Groups 

	Returns the list of all mobile device groups.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MobileDeviceGroupsAPIV1MobileDeviceGroupsGetRequest
	*/
	V1MobileDeviceGroupsGet(ctx context.Context) MobileDeviceGroupsAPIV1MobileDeviceGroupsGetRequest

	// V1MobileDeviceGroupsGetExecute executes the request
	//  @return []MobileDeviceGroup
	V1MobileDeviceGroupsGetExecute(r MobileDeviceGroupsAPIV1MobileDeviceGroupsGetRequest) ([]MobileDeviceGroup, *http.Response, error)

	/*
	V1MobileDeviceGroupsStaticGroupMembershipIdGet Get Static Group Membership by Id 

	Get Static Group Membership by Id


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id instance id of static-group
	@return MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupMembershipIdGetRequest
	*/
	V1MobileDeviceGroupsStaticGroupMembershipIdGet(ctx context.Context, id string) MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupMembershipIdGetRequest

	// V1MobileDeviceGroupsStaticGroupMembershipIdGetExecute executes the request
	//  @return InventoryListMobileDeviceSearchResults
	V1MobileDeviceGroupsStaticGroupMembershipIdGetExecute(r MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupMembershipIdGetRequest) (*InventoryListMobileDeviceSearchResults, *http.Response, error)

	/*
	V1MobileDeviceGroupsStaticGroupsGet Get Static Groups 

	Get Static Groups


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsGetRequest
	*/
	V1MobileDeviceGroupsStaticGroupsGet(ctx context.Context) MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsGetRequest

	// V1MobileDeviceGroupsStaticGroupsGetExecute executes the request
	//  @return StaticGroupSearchResults
	V1MobileDeviceGroupsStaticGroupsGetExecute(r MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsGetRequest) (*StaticGroupSearchResults, *http.Response, error)

	/*
	V1MobileDeviceGroupsStaticGroupsIdDelete Remove Static Group by Id 

	Remove Static Group by Id


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id instance id of static-group
	@return MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsIdDeleteRequest
	*/
	V1MobileDeviceGroupsStaticGroupsIdDelete(ctx context.Context, id string) MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsIdDeleteRequest

	// V1MobileDeviceGroupsStaticGroupsIdDeleteExecute executes the request
	V1MobileDeviceGroupsStaticGroupsIdDeleteExecute(r MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsIdDeleteRequest) (*http.Response, error)

	/*
	V1MobileDeviceGroupsStaticGroupsIdGet Get Static Group by Id 

	Get Static Group by Id


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id instance id of static-group
	@return MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsIdGetRequest
	*/
	V1MobileDeviceGroupsStaticGroupsIdGet(ctx context.Context, id string) MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsIdGetRequest

	// V1MobileDeviceGroupsStaticGroupsIdGetExecute executes the request
	//  @return StaticGroup
	V1MobileDeviceGroupsStaticGroupsIdGetExecute(r MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsIdGetRequest) (*StaticGroup, *http.Response, error)

	/*
	V1MobileDeviceGroupsStaticGroupsIdPatch Update membership of a static group. 

	Update membership of a static group.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id instance id of a static group
	@return MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsIdPatchRequest
	*/
	V1MobileDeviceGroupsStaticGroupsIdPatch(ctx context.Context, id string) MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsIdPatchRequest

	// V1MobileDeviceGroupsStaticGroupsIdPatchExecute executes the request
	//  @return StaticGroupAssignment
	V1MobileDeviceGroupsStaticGroupsIdPatchExecute(r MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsIdPatchRequest) (*StaticGroupAssignment, *http.Response, error)

	/*
	V1MobileDeviceGroupsStaticGroupsPost Create membership of a static group. 

	Create membership of a static group.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsPostRequest
	*/
	V1MobileDeviceGroupsStaticGroupsPost(ctx context.Context) MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsPostRequest

	// V1MobileDeviceGroupsStaticGroupsPostExecute executes the request
	//  @return HrefResponse
	V1MobileDeviceGroupsStaticGroupsPostExecute(r MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsPostRequest) (*HrefResponse, *http.Response, error)
}

// MobileDeviceGroupsAPIService MobileDeviceGroupsAPI service
type MobileDeviceGroupsAPIService service

type MobileDeviceGroupsAPIV1MobileDeviceGroupsGetRequest struct {
	ctx context.Context
	ApiService MobileDeviceGroupsAPI
}

func (r MobileDeviceGroupsAPIV1MobileDeviceGroupsGetRequest) Execute() ([]MobileDeviceGroup, *http.Response, error) {
	return r.ApiService.V1MobileDeviceGroupsGetExecute(r)
}

/*
V1MobileDeviceGroupsGet Return the list of all Mobile Device Groups 

Returns the list of all mobile device groups.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MobileDeviceGroupsAPIV1MobileDeviceGroupsGetRequest
*/
func (a *MobileDeviceGroupsAPIService) V1MobileDeviceGroupsGet(ctx context.Context) MobileDeviceGroupsAPIV1MobileDeviceGroupsGetRequest {
	return MobileDeviceGroupsAPIV1MobileDeviceGroupsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []MobileDeviceGroup
func (a *MobileDeviceGroupsAPIService) V1MobileDeviceGroupsGetExecute(r MobileDeviceGroupsAPIV1MobileDeviceGroupsGetRequest) ([]MobileDeviceGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []MobileDeviceGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDeviceGroupsAPIService.V1MobileDeviceGroupsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/mobile-device-groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupMembershipIdGetRequest struct {
	ctx context.Context
	ApiService MobileDeviceGroupsAPI
	id string
	page *int32
	pageSize *int32
	sort *[]string
	filter *string
}

func (r MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupMembershipIdGetRequest) Page(page int32) MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupMembershipIdGetRequest {
	r.page = &page
	return r
}

func (r MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupMembershipIdGetRequest) PageSize(pageSize int32) MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupMembershipIdGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Default sort is mobileDeviceId:asc. Multiple sort criteria are supported and must be separated with a comma.   Fields allowed in the sort: &#x60;airPlayPassword&#x60;, &#x60;appAnalyticsEnabled&#x60;, &#x60;assetTag&#x60;, &#x60;availableSpaceMb&#x60;,  &#x60;batteryLevel&#x60;, &#x60;bluetoothLowEnergyCapable&#x60;, &#x60;bluetoothMacAddress&#x60;, &#x60;capacityMb&#x60;,  &#x60;lostModeEnabledDate&#x60;, &#x60;declarativeDeviceManagementEnabled&#x60;, &#x60;deviceId&#x60;, &#x60;deviceLocatorServiceEnabled&#x60;, &#x60;devicePhoneNumber&#x60;, &#x60;diagnosticAndUsageReportingEnabled&#x60;, &#x60;displayName&#x60;, &#x60;doNotDisturbEnabled&#x60;,  &#x60;enrollmentSessionTokenValid&#x60;, &#x60;exchangeDeviceId&#x60;, &#x60;cloudBackupEnabled&#x60;, &#x60;osBuild&#x60;, &#x60;osRapidSecurityResponse&#x60;, &#x60;osSupplementalBuildVersion&#x60;, &#x60;osVersion&#x60;, &#x60;ipAddress&#x60;, &#x60;itunesStoreAccountActive&#x60;, &#x60;mobileDeviceId&#x60;, &#x60;languages&#x60;, &#x60;lastBackupDate&#x60;, &#x60;lastEnrolledDate&#x60;, &#x60;lastCloudBackupDate&#x60;, &#x60;lastInventoryUpdateDate&#x60;, &#x60;locales&#x60;, &#x60;locationServicesForSelfServiceMobileEnabled&#x60;, &#x60;lostModeEnabled&#x60;, &#x60;managed&#x60;, &#x60;mdmProfileExpirationDate&#x60;, &#x60;model&#x60;, &#x60;modelIdentifier&#x60;, &#x60;modelNumber&#x60;, &#x60;modemFirmwareVersion&#x60;, &#x60;quotaSize&#x60;, &#x60;residentUsers&#x60;, &#x60;serialNumber&#x60;, &#x60;sharedIpad&#x60;, &#x60;supervised&#x60;, &#x60;tethered&#x60;, &#x60;timeZone&#x60;, &#x60;udid&#x60;, &#x60;usedSpacePercentage&#x60;, &#x60;wifiMacAddress&#x60;, &#x60;deviceOwnershipType&#x60;, &#x60;building&#x60;, &#x60;department&#x60;, &#x60;emailAddress&#x60;, &#x60;fullName&#x60;, &#x60;userPhoneNumber&#x60;, &#x60;position&#x60;, &#x60;room&#x60;, &#x60;username&#x60;, &#x60;appleCareId&#x60;, &#x60;leaseExpirationDate&#x60;,&#x60;lifeExpectancyYears&#x60;, &#x60;poDate&#x60;, &#x60;poNumber&#x60;, &#x60;purchasePrice&#x60;, &#x60;purchasedOrLeased&#x60;, &#x60;purchasingAccount&#x60;, &#x60;purchasingContact&#x60;, &#x60;vendor&#x60;, &#x60;warrantyExpirationDate&#x60;, &#x60;activationLockEnabled&#x60;, &#x60;blockEncryptionCapable&#x60;, &#x60;dataProtection&#x60;, &#x60;fileEncryptionCapable&#x60;, &#x60;hardwareEncryptionSupported&#x60;, &#x60;jailbreakStatus&#x60;, &#x60;passcodeCompliant&#x60;, &#x60;passcodeCompliantWithProfile&#x60;, &#x60;passcodeLockGracePeriodEnforcedSeconds&#x60;, &#x60;passcodePresent&#x60;, &#x60;personalDeviceProfileCurrent&#x60;, &#x60;carrierSettingsVersion&#x60;, &#x60;cellularTechnology&#x60;, &#x60;currentCarrierNetwork&#x60;, &#x60;currentMobileCountryCode&#x60;, &#x60;currentMobileNetworkCode&#x60;,  &#x60;dataRoamingEnabled&#x60;, &#x60;eid&#x60;, &#x60;network&#x60;, &#x60;homeMobileCountryCode&#x60;,  &#x60;homeMobileNetworkCode&#x60;, &#x60;iccid&#x60;, &#x60;imei&#x60;, &#x60;imei2&#x60;, &#x60;meid&#x60;, &#x60;personalHotspotEnabled&#x60;, &#x60;voiceRoamingEnabled&#x60;, &#x60;roaming&#x60;  Example: &#x60;sort&#x3D;displayName:desc,username:asc&#x60; 
func (r MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupMembershipIdGetRequest) Sort(sort []string) MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupMembershipIdGetRequest {
	r.sort = &sort
	return r
}

// Query in the RSQL format, allowing to filter mobile device collection. Default filter is empty query - returning all results for the requested page.  Fields allowed in the query: &#x60;airPlayPassword&#x60;, &#x60;appAnalyticsEnabled&#x60;, &#x60;assetTag&#x60;, &#x60;availableSpaceMb&#x60;,  &#x60;batteryLevel&#x60;, &#x60;bluetoothLowEnergyCapable&#x60;, &#x60;bluetoothMacAddress&#x60;, &#x60;capacityMb&#x60;,  &#x60;declarativeDeviceManagementEnabled&#x60;, &#x60;deviceId&#x60;, &#x60;deviceLocatorServiceEnabled&#x60;, &#x60;devicePhoneNumber&#x60;, &#x60;diagnosticAndUsageReportingEnabled&#x60;, &#x60;displayName&#x60;, &#x60;doNotDisturbEnabled&#x60;, &#x60;exchangeDeviceId&#x60;,  &#x60;cloudBackupEnabled&#x60;, &#x60;osBuild&#x60;, &#x60;osSupplementalBuildVersion&#x60;, &#x60;osVersion&#x60;, &#x60;osRapidSecurityResponse&#x60;, &#x60;ipAddress&#x60;,  &#x60;itunesStoreAccountActive&#x60;, &#x60;mobileDeviceId&#x60;, &#x60;languages&#x60;, &#x60;locales&#x60;, &#x60;locationServicesForSelfServiceMobileEnabled&#x60;, &#x60;lostModeEnabled&#x60;, &#x60;managed&#x60;, &#x60;model&#x60;,  &#x60;modelIdentifier&#x60;, &#x60;modelNumber&#x60;, &#x60;modemFirmwareVersion&#x60;, &#x60;quotaSize&#x60;,  &#x60;residentUsers&#x60;, &#x60;serialNumber&#x60;, &#x60;sharedIpad&#x60;, &#x60;supervised&#x60;, &#x60;tethered&#x60;, &#x60;timeZone&#x60;, &#x60;udid&#x60;, &#x60;usedSpacePercentage&#x60;,  &#x60;wifiMacAddress&#x60;, &#x60;building&#x60;, &#x60;department&#x60;, &#x60;emailAddress&#x60;, &#x60;fullName&#x60;, &#x60;userPhoneNumber&#x60;, &#x60;position&#x60;, &#x60;room&#x60;, &#x60;username&#x60;, &#x60;appleCareId&#x60;, &#x60;lifeExpectancyYears&#x60;, &#x60;poNumber&#x60;,  &#x60;purchasePrice&#x60;, &#x60;purchasedOrLeased&#x60;, &#x60;purchasingAccount&#x60;, &#x60;purchasingContact&#x60;, &#x60;vendor&#x60;, &#x60;activationLockEnabled&#x60;, &#x60;blockEncryptionCapable&#x60;, &#x60;dataProtection&#x60;,  &#x60;fileEncryptionCapable&#x60;, &#x60;passcodeCompliant&#x60;, &#x60;passcodeCompliantWithProfile&#x60;, &#x60;passcodeLockGracePeriodEnforcedSeconds&#x60;, &#x60;passcodePresent&#x60;, &#x60;personalDeviceProfileCurrent&#x60;, &#x60;carrierSettingsVersion&#x60;, &#x60;currentCarrierNetwork&#x60;, &#x60;currentMobileCountryCode&#x60;, &#x60;currentMobileNetworkCode&#x60;, &#x60;dataRoamingEnabled&#x60;, &#x60;eid&#x60;, &#x60;network&#x60;, &#x60;homeMobileCountryCode&#x60;, &#x60;homeMobileNetworkCode&#x60;, &#x60;iccid&#x60;, &#x60;imei&#x60;, &#x60;imei2&#x60;, &#x60;meid&#x60;, &#x60;personalHotspotEnabled&#x60;,  &#x60;roaming&#x60;  This param can be combined with paging and sorting. Example: &#x60;filter&#x3D;displayName&#x3D;&#x3D;\&quot;iPad\&quot;&#x60; 
func (r MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupMembershipIdGetRequest) Filter(filter string) MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupMembershipIdGetRequest {
	r.filter = &filter
	return r
}

func (r MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupMembershipIdGetRequest) Execute() (*InventoryListMobileDeviceSearchResults, *http.Response, error) {
	return r.ApiService.V1MobileDeviceGroupsStaticGroupMembershipIdGetExecute(r)
}

/*
V1MobileDeviceGroupsStaticGroupMembershipIdGet Get Static Group Membership by Id 

Get Static Group Membership by Id


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id instance id of static-group
 @return MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupMembershipIdGetRequest
*/
func (a *MobileDeviceGroupsAPIService) V1MobileDeviceGroupsStaticGroupMembershipIdGet(ctx context.Context, id string) MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupMembershipIdGetRequest {
	return MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupMembershipIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return InventoryListMobileDeviceSearchResults
func (a *MobileDeviceGroupsAPIService) V1MobileDeviceGroupsStaticGroupMembershipIdGetExecute(r MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupMembershipIdGetRequest) (*InventoryListMobileDeviceSearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InventoryListMobileDeviceSearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDeviceGroupsAPIService.V1MobileDeviceGroupsStaticGroupMembershipIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/mobile-device-groups/static-group-membership/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		defaultValue := []string{"displayName:asc"}
		r.sort = &defaultValue
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	} else {
		var defaultValue string = ""
		r.filter = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsGetRequest struct {
	ctx context.Context
	ApiService MobileDeviceGroupsAPI
	page *int32
	pageSize *int32
	sort *[]string
	filter *string
}

func (r MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsGetRequest) Page(page int32) MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsGetRequest {
	r.page = &page
	return r
}

func (r MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsGetRequest) PageSize(pageSize int32) MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Default sort is id:asc. Available criteria to sort on: groupId, groupName, siteId.
func (r MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsGetRequest) Sort(sort []string) MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsGetRequest {
	r.sort = &sort
	return r
}

// Query in the RSQL format, allowing to filter department collection. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: groupId, groupName, siteId. The siteId field can only be filtered by admins with full access. Any sited admin will have siteId filtered automatically. This param can be combined with paging and sorting. Example: groupName&#x3D;&#x3D;\&quot;staticGroup1\&quot;
func (r MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsGetRequest) Filter(filter string) MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsGetRequest {
	r.filter = &filter
	return r
}

func (r MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsGetRequest) Execute() (*StaticGroupSearchResults, *http.Response, error) {
	return r.ApiService.V1MobileDeviceGroupsStaticGroupsGetExecute(r)
}

/*
V1MobileDeviceGroupsStaticGroupsGet Get Static Groups 

Get Static Groups


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsGetRequest
*/
func (a *MobileDeviceGroupsAPIService) V1MobileDeviceGroupsStaticGroupsGet(ctx context.Context) MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsGetRequest {
	return MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return StaticGroupSearchResults
func (a *MobileDeviceGroupsAPIService) V1MobileDeviceGroupsStaticGroupsGetExecute(r MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsGetRequest) (*StaticGroupSearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StaticGroupSearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDeviceGroupsAPIService.V1MobileDeviceGroupsStaticGroupsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/mobile-device-groups/static-groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		defaultValue := []string{"groupId:asc"}
		r.sort = &defaultValue
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	} else {
		var defaultValue string = ""
		r.filter = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsIdDeleteRequest struct {
	ctx context.Context
	ApiService MobileDeviceGroupsAPI
	id string
}

func (r MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1MobileDeviceGroupsStaticGroupsIdDeleteExecute(r)
}

/*
V1MobileDeviceGroupsStaticGroupsIdDelete Remove Static Group by Id 

Remove Static Group by Id


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id instance id of static-group
 @return MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsIdDeleteRequest
*/
func (a *MobileDeviceGroupsAPIService) V1MobileDeviceGroupsStaticGroupsIdDelete(ctx context.Context, id string) MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsIdDeleteRequest {
	return MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *MobileDeviceGroupsAPIService) V1MobileDeviceGroupsStaticGroupsIdDeleteExecute(r MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDeviceGroupsAPIService.V1MobileDeviceGroupsStaticGroupsIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/mobile-device-groups/static-groups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsIdGetRequest struct {
	ctx context.Context
	ApiService MobileDeviceGroupsAPI
	id string
}

func (r MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsIdGetRequest) Execute() (*StaticGroup, *http.Response, error) {
	return r.ApiService.V1MobileDeviceGroupsStaticGroupsIdGetExecute(r)
}

/*
V1MobileDeviceGroupsStaticGroupsIdGet Get Static Group by Id 

Get Static Group by Id


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id instance id of static-group
 @return MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsIdGetRequest
*/
func (a *MobileDeviceGroupsAPIService) V1MobileDeviceGroupsStaticGroupsIdGet(ctx context.Context, id string) MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsIdGetRequest {
	return MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return StaticGroup
func (a *MobileDeviceGroupsAPIService) V1MobileDeviceGroupsStaticGroupsIdGetExecute(r MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsIdGetRequest) (*StaticGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StaticGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDeviceGroupsAPIService.V1MobileDeviceGroupsStaticGroupsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/mobile-device-groups/static-groups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsIdPatchRequest struct {
	ctx context.Context
	ApiService MobileDeviceGroupsAPI
	id string
	staticGroupAssignment *StaticGroupAssignment
}

func (r MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsIdPatchRequest) StaticGroupAssignment(staticGroupAssignment StaticGroupAssignment) MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsIdPatchRequest {
	r.staticGroupAssignment = &staticGroupAssignment
	return r
}

func (r MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsIdPatchRequest) Execute() (*StaticGroupAssignment, *http.Response, error) {
	return r.ApiService.V1MobileDeviceGroupsStaticGroupsIdPatchExecute(r)
}

/*
V1MobileDeviceGroupsStaticGroupsIdPatch Update membership of a static group. 

Update membership of a static group.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id instance id of a static group
 @return MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsIdPatchRequest
*/
func (a *MobileDeviceGroupsAPIService) V1MobileDeviceGroupsStaticGroupsIdPatch(ctx context.Context, id string) MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsIdPatchRequest {
	return MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsIdPatchRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return StaticGroupAssignment
func (a *MobileDeviceGroupsAPIService) V1MobileDeviceGroupsStaticGroupsIdPatchExecute(r MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsIdPatchRequest) (*StaticGroupAssignment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StaticGroupAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDeviceGroupsAPIService.V1MobileDeviceGroupsStaticGroupsIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/mobile-device-groups/static-groups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.staticGroupAssignment == nil {
		return localVarReturnValue, nil, reportError("staticGroupAssignment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.staticGroupAssignment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsPostRequest struct {
	ctx context.Context
	ApiService MobileDeviceGroupsAPI
	staticGroupAssignment *StaticGroupAssignment
}

func (r MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsPostRequest) StaticGroupAssignment(staticGroupAssignment StaticGroupAssignment) MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsPostRequest {
	r.staticGroupAssignment = &staticGroupAssignment
	return r
}

func (r MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsPostRequest) Execute() (*HrefResponse, *http.Response, error) {
	return r.ApiService.V1MobileDeviceGroupsStaticGroupsPostExecute(r)
}

/*
V1MobileDeviceGroupsStaticGroupsPost Create membership of a static group. 

Create membership of a static group.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsPostRequest
*/
func (a *MobileDeviceGroupsAPIService) V1MobileDeviceGroupsStaticGroupsPost(ctx context.Context) MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsPostRequest {
	return MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HrefResponse
func (a *MobileDeviceGroupsAPIService) V1MobileDeviceGroupsStaticGroupsPostExecute(r MobileDeviceGroupsAPIV1MobileDeviceGroupsStaticGroupsPostRequest) (*HrefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HrefResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDeviceGroupsAPIService.V1MobileDeviceGroupsStaticGroupsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/mobile-device-groups/static-groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.staticGroupAssignment == nil {
		return localVarReturnValue, nil, reportError("staticGroupAssignment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.staticGroupAssignment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
