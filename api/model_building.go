/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Building type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Building{}

// Building struct for Building
type Building struct {
	Id *string `json:"id,omitempty"`
	Name string `json:"name"`
	StreetAddress1 NullableString `json:"streetAddress1,omitempty"`
	StreetAddress2 NullableString `json:"streetAddress2,omitempty"`
	City NullableString `json:"city,omitempty"`
	StateProvince NullableString `json:"stateProvince,omitempty"`
	ZipPostalCode NullableString `json:"zipPostalCode,omitempty"`
	Country NullableString `json:"country,omitempty"`
}

type _Building Building

// NewBuilding instantiates a new Building object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuilding(name string) *Building {
	this := Building{}
	this.Name = name
	return &this
}

// NewBuildingWithDefaults instantiates a new Building object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuildingWithDefaults() *Building {
	this := Building{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Building) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Building) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Building) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Building) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Building) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Building) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Building) SetName(v string) {
	o.Name = v
}

// GetStreetAddress1 returns the StreetAddress1 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Building) GetStreetAddress1() string {
	if o == nil || IsNil(o.StreetAddress1.Get()) {
		var ret string
		return ret
	}
	return *o.StreetAddress1.Get()
}

// GetStreetAddress1Ok returns a tuple with the StreetAddress1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Building) GetStreetAddress1Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StreetAddress1.Get(), o.StreetAddress1.IsSet()
}

// HasStreetAddress1 returns a boolean if a field has been set.
func (o *Building) HasStreetAddress1() bool {
	if o != nil && o.StreetAddress1.IsSet() {
		return true
	}

	return false
}

// SetStreetAddress1 gets a reference to the given NullableString and assigns it to the StreetAddress1 field.
func (o *Building) SetStreetAddress1(v string) {
	o.StreetAddress1.Set(&v)
}
// SetStreetAddress1Nil sets the value for StreetAddress1 to be an explicit nil
func (o *Building) SetStreetAddress1Nil() {
	o.StreetAddress1.Set(nil)
}

// UnsetStreetAddress1 ensures that no value is present for StreetAddress1, not even an explicit nil
func (o *Building) UnsetStreetAddress1() {
	o.StreetAddress1.Unset()
}

// GetStreetAddress2 returns the StreetAddress2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Building) GetStreetAddress2() string {
	if o == nil || IsNil(o.StreetAddress2.Get()) {
		var ret string
		return ret
	}
	return *o.StreetAddress2.Get()
}

// GetStreetAddress2Ok returns a tuple with the StreetAddress2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Building) GetStreetAddress2Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StreetAddress2.Get(), o.StreetAddress2.IsSet()
}

// HasStreetAddress2 returns a boolean if a field has been set.
func (o *Building) HasStreetAddress2() bool {
	if o != nil && o.StreetAddress2.IsSet() {
		return true
	}

	return false
}

// SetStreetAddress2 gets a reference to the given NullableString and assigns it to the StreetAddress2 field.
func (o *Building) SetStreetAddress2(v string) {
	o.StreetAddress2.Set(&v)
}
// SetStreetAddress2Nil sets the value for StreetAddress2 to be an explicit nil
func (o *Building) SetStreetAddress2Nil() {
	o.StreetAddress2.Set(nil)
}

// UnsetStreetAddress2 ensures that no value is present for StreetAddress2, not even an explicit nil
func (o *Building) UnsetStreetAddress2() {
	o.StreetAddress2.Unset()
}

// GetCity returns the City field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Building) GetCity() string {
	if o == nil || IsNil(o.City.Get()) {
		var ret string
		return ret
	}
	return *o.City.Get()
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Building) GetCityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.City.Get(), o.City.IsSet()
}

// HasCity returns a boolean if a field has been set.
func (o *Building) HasCity() bool {
	if o != nil && o.City.IsSet() {
		return true
	}

	return false
}

// SetCity gets a reference to the given NullableString and assigns it to the City field.
func (o *Building) SetCity(v string) {
	o.City.Set(&v)
}
// SetCityNil sets the value for City to be an explicit nil
func (o *Building) SetCityNil() {
	o.City.Set(nil)
}

// UnsetCity ensures that no value is present for City, not even an explicit nil
func (o *Building) UnsetCity() {
	o.City.Unset()
}

// GetStateProvince returns the StateProvince field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Building) GetStateProvince() string {
	if o == nil || IsNil(o.StateProvince.Get()) {
		var ret string
		return ret
	}
	return *o.StateProvince.Get()
}

// GetStateProvinceOk returns a tuple with the StateProvince field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Building) GetStateProvinceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StateProvince.Get(), o.StateProvince.IsSet()
}

// HasStateProvince returns a boolean if a field has been set.
func (o *Building) HasStateProvince() bool {
	if o != nil && o.StateProvince.IsSet() {
		return true
	}

	return false
}

// SetStateProvince gets a reference to the given NullableString and assigns it to the StateProvince field.
func (o *Building) SetStateProvince(v string) {
	o.StateProvince.Set(&v)
}
// SetStateProvinceNil sets the value for StateProvince to be an explicit nil
func (o *Building) SetStateProvinceNil() {
	o.StateProvince.Set(nil)
}

// UnsetStateProvince ensures that no value is present for StateProvince, not even an explicit nil
func (o *Building) UnsetStateProvince() {
	o.StateProvince.Unset()
}

// GetZipPostalCode returns the ZipPostalCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Building) GetZipPostalCode() string {
	if o == nil || IsNil(o.ZipPostalCode.Get()) {
		var ret string
		return ret
	}
	return *o.ZipPostalCode.Get()
}

// GetZipPostalCodeOk returns a tuple with the ZipPostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Building) GetZipPostalCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ZipPostalCode.Get(), o.ZipPostalCode.IsSet()
}

// HasZipPostalCode returns a boolean if a field has been set.
func (o *Building) HasZipPostalCode() bool {
	if o != nil && o.ZipPostalCode.IsSet() {
		return true
	}

	return false
}

// SetZipPostalCode gets a reference to the given NullableString and assigns it to the ZipPostalCode field.
func (o *Building) SetZipPostalCode(v string) {
	o.ZipPostalCode.Set(&v)
}
// SetZipPostalCodeNil sets the value for ZipPostalCode to be an explicit nil
func (o *Building) SetZipPostalCodeNil() {
	o.ZipPostalCode.Set(nil)
}

// UnsetZipPostalCode ensures that no value is present for ZipPostalCode, not even an explicit nil
func (o *Building) UnsetZipPostalCode() {
	o.ZipPostalCode.Unset()
}

// GetCountry returns the Country field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Building) GetCountry() string {
	if o == nil || IsNil(o.Country.Get()) {
		var ret string
		return ret
	}
	return *o.Country.Get()
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Building) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Country.Get(), o.Country.IsSet()
}

// HasCountry returns a boolean if a field has been set.
func (o *Building) HasCountry() bool {
	if o != nil && o.Country.IsSet() {
		return true
	}

	return false
}

// SetCountry gets a reference to the given NullableString and assigns it to the Country field.
func (o *Building) SetCountry(v string) {
	o.Country.Set(&v)
}
// SetCountryNil sets the value for Country to be an explicit nil
func (o *Building) SetCountryNil() {
	o.Country.Set(nil)
}

// UnsetCountry ensures that no value is present for Country, not even an explicit nil
func (o *Building) UnsetCountry() {
	o.Country.Unset()
}

func (o Building) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Building) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if o.StreetAddress1.IsSet() {
		toSerialize["streetAddress1"] = o.StreetAddress1.Get()
	}
	if o.StreetAddress2.IsSet() {
		toSerialize["streetAddress2"] = o.StreetAddress2.Get()
	}
	if o.City.IsSet() {
		toSerialize["city"] = o.City.Get()
	}
	if o.StateProvince.IsSet() {
		toSerialize["stateProvince"] = o.StateProvince.Get()
	}
	if o.ZipPostalCode.IsSet() {
		toSerialize["zipPostalCode"] = o.ZipPostalCode.Get()
	}
	if o.Country.IsSet() {
		toSerialize["country"] = o.Country.Get()
	}
	return toSerialize, nil
}

func (o *Building) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBuilding := _Building{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBuilding)

	if err != nil {
		return err
	}

	*o = Building(varBuilding)

	return err
}

type NullableBuilding struct {
	value *Building
	isSet bool
}

func (v NullableBuilding) Get() *Building {
	return v.value
}

func (v *NullableBuilding) Set(val *Building) {
	v.value = val
	v.isSet = true
}

func (v NullableBuilding) IsSet() bool {
	return v.isSet
}

func (v *NullableBuilding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuilding(val *Building) *NullableBuilding {
	return &NullableBuilding{value: val, isSet: true}
}

func (v NullableBuilding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuilding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


