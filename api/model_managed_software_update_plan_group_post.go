/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ManagedSoftwareUpdatePlanGroupPost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagedSoftwareUpdatePlanGroupPost{}

// ManagedSoftwareUpdatePlanGroupPost struct for ManagedSoftwareUpdatePlanGroupPost
type ManagedSoftwareUpdatePlanGroupPost struct {
	Group PlanGroupPost `json:"group"`
	Config PlanConfigurationPost `json:"config"`
}

type _ManagedSoftwareUpdatePlanGroupPost ManagedSoftwareUpdatePlanGroupPost

// NewManagedSoftwareUpdatePlanGroupPost instantiates a new ManagedSoftwareUpdatePlanGroupPost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagedSoftwareUpdatePlanGroupPost(group PlanGroupPost, config PlanConfigurationPost) *ManagedSoftwareUpdatePlanGroupPost {
	this := ManagedSoftwareUpdatePlanGroupPost{}
	this.Group = group
	this.Config = config
	return &this
}

// NewManagedSoftwareUpdatePlanGroupPostWithDefaults instantiates a new ManagedSoftwareUpdatePlanGroupPost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagedSoftwareUpdatePlanGroupPostWithDefaults() *ManagedSoftwareUpdatePlanGroupPost {
	this := ManagedSoftwareUpdatePlanGroupPost{}
	return &this
}

// GetGroup returns the Group field value
func (o *ManagedSoftwareUpdatePlanGroupPost) GetGroup() PlanGroupPost {
	if o == nil {
		var ret PlanGroupPost
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *ManagedSoftwareUpdatePlanGroupPost) GetGroupOk() (*PlanGroupPost, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *ManagedSoftwareUpdatePlanGroupPost) SetGroup(v PlanGroupPost) {
	o.Group = v
}

// GetConfig returns the Config field value
func (o *ManagedSoftwareUpdatePlanGroupPost) GetConfig() PlanConfigurationPost {
	if o == nil {
		var ret PlanConfigurationPost
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *ManagedSoftwareUpdatePlanGroupPost) GetConfigOk() (*PlanConfigurationPost, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *ManagedSoftwareUpdatePlanGroupPost) SetConfig(v PlanConfigurationPost) {
	o.Config = v
}

func (o ManagedSoftwareUpdatePlanGroupPost) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagedSoftwareUpdatePlanGroupPost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["group"] = o.Group
	toSerialize["config"] = o.Config
	return toSerialize, nil
}

func (o *ManagedSoftwareUpdatePlanGroupPost) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"group",
		"config",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varManagedSoftwareUpdatePlanGroupPost := _ManagedSoftwareUpdatePlanGroupPost{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varManagedSoftwareUpdatePlanGroupPost)

	if err != nil {
		return err
	}

	*o = ManagedSoftwareUpdatePlanGroupPost(varManagedSoftwareUpdatePlanGroupPost)

	return err
}

type NullableManagedSoftwareUpdatePlanGroupPost struct {
	value *ManagedSoftwareUpdatePlanGroupPost
	isSet bool
}

func (v NullableManagedSoftwareUpdatePlanGroupPost) Get() *ManagedSoftwareUpdatePlanGroupPost {
	return v.value
}

func (v *NullableManagedSoftwareUpdatePlanGroupPost) Set(val *ManagedSoftwareUpdatePlanGroupPost) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedSoftwareUpdatePlanGroupPost) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedSoftwareUpdatePlanGroupPost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedSoftwareUpdatePlanGroupPost(val *ManagedSoftwareUpdatePlanGroupPost) *NullableManagedSoftwareUpdatePlanGroupPost {
	return &NullableManagedSoftwareUpdatePlanGroupPost{value: val, isSet: true}
}

func (v NullableManagedSoftwareUpdatePlanGroupPost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedSoftwareUpdatePlanGroupPost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


