/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// StartupStatus struct for StartupStatus
type StartupStatus struct {
	Step *string `json:"step,omitempty"`
	StepCode *string `json:"stepCode,omitempty"`
	StepParam *string `json:"stepParam,omitempty"`
	Percentage *int32 `json:"percentage,omitempty"`
	Warning *string `json:"warning,omitempty"`
	WarningCode *string `json:"warningCode,omitempty"`
	WarningParam *string `json:"warningParam,omitempty"`
	Error *string `json:"error,omitempty"`
	ErrorCode *string `json:"errorCode,omitempty"`
}

// NewStartupStatus instantiates a new StartupStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStartupStatus() *StartupStatus {
	this := StartupStatus{}
	return &this
}

// NewStartupStatusWithDefaults instantiates a new StartupStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStartupStatusWithDefaults() *StartupStatus {
	this := StartupStatus{}
	return &this
}

// GetStep returns the Step field value if set, zero value otherwise.
func (o *StartupStatus) GetStep() string {
	if o == nil || o.Step == nil {
		var ret string
		return ret
	}
	return *o.Step
}

// GetStepOk returns a tuple with the Step field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartupStatus) GetStepOk() (*string, bool) {
	if o == nil || o.Step == nil {
		return nil, false
	}
	return o.Step, true
}

// HasStep returns a boolean if a field has been set.
func (o *StartupStatus) HasStep() bool {
	if o != nil && o.Step != nil {
		return true
	}

	return false
}

// SetStep gets a reference to the given string and assigns it to the Step field.
func (o *StartupStatus) SetStep(v string) {
	o.Step = &v
}

// GetStepCode returns the StepCode field value if set, zero value otherwise.
func (o *StartupStatus) GetStepCode() string {
	if o == nil || o.StepCode == nil {
		var ret string
		return ret
	}
	return *o.StepCode
}

// GetStepCodeOk returns a tuple with the StepCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartupStatus) GetStepCodeOk() (*string, bool) {
	if o == nil || o.StepCode == nil {
		return nil, false
	}
	return o.StepCode, true
}

// HasStepCode returns a boolean if a field has been set.
func (o *StartupStatus) HasStepCode() bool {
	if o != nil && o.StepCode != nil {
		return true
	}

	return false
}

// SetStepCode gets a reference to the given string and assigns it to the StepCode field.
func (o *StartupStatus) SetStepCode(v string) {
	o.StepCode = &v
}

// GetStepParam returns the StepParam field value if set, zero value otherwise.
func (o *StartupStatus) GetStepParam() string {
	if o == nil || o.StepParam == nil {
		var ret string
		return ret
	}
	return *o.StepParam
}

// GetStepParamOk returns a tuple with the StepParam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartupStatus) GetStepParamOk() (*string, bool) {
	if o == nil || o.StepParam == nil {
		return nil, false
	}
	return o.StepParam, true
}

// HasStepParam returns a boolean if a field has been set.
func (o *StartupStatus) HasStepParam() bool {
	if o != nil && o.StepParam != nil {
		return true
	}

	return false
}

// SetStepParam gets a reference to the given string and assigns it to the StepParam field.
func (o *StartupStatus) SetStepParam(v string) {
	o.StepParam = &v
}

// GetPercentage returns the Percentage field value if set, zero value otherwise.
func (o *StartupStatus) GetPercentage() int32 {
	if o == nil || o.Percentage == nil {
		var ret int32
		return ret
	}
	return *o.Percentage
}

// GetPercentageOk returns a tuple with the Percentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartupStatus) GetPercentageOk() (*int32, bool) {
	if o == nil || o.Percentage == nil {
		return nil, false
	}
	return o.Percentage, true
}

// HasPercentage returns a boolean if a field has been set.
func (o *StartupStatus) HasPercentage() bool {
	if o != nil && o.Percentage != nil {
		return true
	}

	return false
}

// SetPercentage gets a reference to the given int32 and assigns it to the Percentage field.
func (o *StartupStatus) SetPercentage(v int32) {
	o.Percentage = &v
}

// GetWarning returns the Warning field value if set, zero value otherwise.
func (o *StartupStatus) GetWarning() string {
	if o == nil || o.Warning == nil {
		var ret string
		return ret
	}
	return *o.Warning
}

// GetWarningOk returns a tuple with the Warning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartupStatus) GetWarningOk() (*string, bool) {
	if o == nil || o.Warning == nil {
		return nil, false
	}
	return o.Warning, true
}

// HasWarning returns a boolean if a field has been set.
func (o *StartupStatus) HasWarning() bool {
	if o != nil && o.Warning != nil {
		return true
	}

	return false
}

// SetWarning gets a reference to the given string and assigns it to the Warning field.
func (o *StartupStatus) SetWarning(v string) {
	o.Warning = &v
}

// GetWarningCode returns the WarningCode field value if set, zero value otherwise.
func (o *StartupStatus) GetWarningCode() string {
	if o == nil || o.WarningCode == nil {
		var ret string
		return ret
	}
	return *o.WarningCode
}

// GetWarningCodeOk returns a tuple with the WarningCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartupStatus) GetWarningCodeOk() (*string, bool) {
	if o == nil || o.WarningCode == nil {
		return nil, false
	}
	return o.WarningCode, true
}

// HasWarningCode returns a boolean if a field has been set.
func (o *StartupStatus) HasWarningCode() bool {
	if o != nil && o.WarningCode != nil {
		return true
	}

	return false
}

// SetWarningCode gets a reference to the given string and assigns it to the WarningCode field.
func (o *StartupStatus) SetWarningCode(v string) {
	o.WarningCode = &v
}

// GetWarningParam returns the WarningParam field value if set, zero value otherwise.
func (o *StartupStatus) GetWarningParam() string {
	if o == nil || o.WarningParam == nil {
		var ret string
		return ret
	}
	return *o.WarningParam
}

// GetWarningParamOk returns a tuple with the WarningParam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartupStatus) GetWarningParamOk() (*string, bool) {
	if o == nil || o.WarningParam == nil {
		return nil, false
	}
	return o.WarningParam, true
}

// HasWarningParam returns a boolean if a field has been set.
func (o *StartupStatus) HasWarningParam() bool {
	if o != nil && o.WarningParam != nil {
		return true
	}

	return false
}

// SetWarningParam gets a reference to the given string and assigns it to the WarningParam field.
func (o *StartupStatus) SetWarningParam(v string) {
	o.WarningParam = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *StartupStatus) GetError() string {
	if o == nil || o.Error == nil {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartupStatus) GetErrorOk() (*string, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *StartupStatus) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *StartupStatus) SetError(v string) {
	o.Error = &v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *StartupStatus) GetErrorCode() string {
	if o == nil || o.ErrorCode == nil {
		var ret string
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartupStatus) GetErrorCodeOk() (*string, bool) {
	if o == nil || o.ErrorCode == nil {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *StartupStatus) HasErrorCode() bool {
	if o != nil && o.ErrorCode != nil {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given string and assigns it to the ErrorCode field.
func (o *StartupStatus) SetErrorCode(v string) {
	o.ErrorCode = &v
}

func (o StartupStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Step != nil {
		toSerialize["step"] = o.Step
	}
	if o.StepCode != nil {
		toSerialize["stepCode"] = o.StepCode
	}
	if o.StepParam != nil {
		toSerialize["stepParam"] = o.StepParam
	}
	if o.Percentage != nil {
		toSerialize["percentage"] = o.Percentage
	}
	if o.Warning != nil {
		toSerialize["warning"] = o.Warning
	}
	if o.WarningCode != nil {
		toSerialize["warningCode"] = o.WarningCode
	}
	if o.WarningParam != nil {
		toSerialize["warningParam"] = o.WarningParam
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.ErrorCode != nil {
		toSerialize["errorCode"] = o.ErrorCode
	}
	return json.Marshal(toSerialize)
}

type NullableStartupStatus struct {
	value *StartupStatus
	isSet bool
}

func (v NullableStartupStatus) Get() *StartupStatus {
	return v.value
}

func (v *NullableStartupStatus) Set(val *StartupStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableStartupStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableStartupStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStartupStatus(val *StartupStatus) *NullableStartupStatus {
	return &NullableStartupStatus{value: val, isSet: true}
}

func (v NullableStartupStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStartupStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


