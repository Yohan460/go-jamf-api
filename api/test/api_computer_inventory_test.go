/*
Jamf Pro API

Testing ComputerInventoryAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/yohan460/go-jamf-api"
)

func Test_api_ComputerInventoryAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ComputerInventoryAPIService V1ComputersInventoryDetailIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ComputerInventoryAPI.V1ComputersInventoryDetailIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ComputerInventoryAPIService V1ComputersInventoryDetailIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ComputerInventoryAPI.V1ComputersInventoryDetailIdPatch(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ComputerInventoryAPIService V1ComputersInventoryFilevaultGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ComputerInventoryAPI.V1ComputersInventoryFilevaultGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ComputerInventoryAPIService V1ComputersInventoryGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ComputerInventoryAPI.V1ComputersInventoryGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ComputerInventoryAPIService V1ComputersInventoryIdAttachmentsAttachmentIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var attachmentId string

		httpRes, err := apiClient.ComputerInventoryAPI.V1ComputersInventoryIdAttachmentsAttachmentIdDelete(context.Background(), id, attachmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ComputerInventoryAPIService V1ComputersInventoryIdAttachmentsAttachmentIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var attachmentId string

		resp, httpRes, err := apiClient.ComputerInventoryAPI.V1ComputersInventoryIdAttachmentsAttachmentIdGet(context.Background(), id, attachmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ComputerInventoryAPIService V1ComputersInventoryIdAttachmentsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ComputerInventoryAPI.V1ComputersInventoryIdAttachmentsPost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ComputerInventoryAPIService V1ComputersInventoryIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.ComputerInventoryAPI.V1ComputersInventoryIdDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ComputerInventoryAPIService V1ComputersInventoryIdFilevaultGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ComputerInventoryAPI.V1ComputersInventoryIdFilevaultGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ComputerInventoryAPIService V1ComputersInventoryIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ComputerInventoryAPI.V1ComputersInventoryIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ComputerInventoryAPIService V1ComputersInventoryIdViewRecoveryLockPasswordGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ComputerInventoryAPI.V1ComputersInventoryIdViewRecoveryLockPasswordGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
