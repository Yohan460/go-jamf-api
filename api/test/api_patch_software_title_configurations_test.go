/*
Jamf Pro API

Testing PatchSoftwareTitleConfigurationsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/yohan460/go-jamf-api"
)

func Test_api_PatchSoftwareTitleConfigurationsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PatchSoftwareTitleConfigurationsAPIService V2PatchSoftwareTitleConfigurationsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PatchSoftwareTitleConfigurationsAPI.V2PatchSoftwareTitleConfigurationsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PatchSoftwareTitleConfigurationsAPIService V2PatchSoftwareTitleConfigurationsIdDashboardDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.PatchSoftwareTitleConfigurationsAPI.V2PatchSoftwareTitleConfigurationsIdDashboardDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PatchSoftwareTitleConfigurationsAPIService V2PatchSoftwareTitleConfigurationsIdDashboardGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PatchSoftwareTitleConfigurationsAPI.V2PatchSoftwareTitleConfigurationsIdDashboardGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PatchSoftwareTitleConfigurationsAPIService V2PatchSoftwareTitleConfigurationsIdDashboardPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.PatchSoftwareTitleConfigurationsAPI.V2PatchSoftwareTitleConfigurationsIdDashboardPost(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PatchSoftwareTitleConfigurationsAPIService V2PatchSoftwareTitleConfigurationsIdDefinitionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PatchSoftwareTitleConfigurationsAPI.V2PatchSoftwareTitleConfigurationsIdDefinitionsGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PatchSoftwareTitleConfigurationsAPIService V2PatchSoftwareTitleConfigurationsIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.PatchSoftwareTitleConfigurationsAPI.V2PatchSoftwareTitleConfigurationsIdDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PatchSoftwareTitleConfigurationsAPIService V2PatchSoftwareTitleConfigurationsIdDependenciesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PatchSoftwareTitleConfigurationsAPI.V2PatchSoftwareTitleConfigurationsIdDependenciesGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PatchSoftwareTitleConfigurationsAPIService V2PatchSoftwareTitleConfigurationsIdExportReportGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PatchSoftwareTitleConfigurationsAPI.V2PatchSoftwareTitleConfigurationsIdExportReportGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PatchSoftwareTitleConfigurationsAPIService V2PatchSoftwareTitleConfigurationsIdExtensionAttributesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PatchSoftwareTitleConfigurationsAPI.V2PatchSoftwareTitleConfigurationsIdExtensionAttributesGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PatchSoftwareTitleConfigurationsAPIService V2PatchSoftwareTitleConfigurationsIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PatchSoftwareTitleConfigurationsAPI.V2PatchSoftwareTitleConfigurationsIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PatchSoftwareTitleConfigurationsAPIService V2PatchSoftwareTitleConfigurationsIdHistoryGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PatchSoftwareTitleConfigurationsAPI.V2PatchSoftwareTitleConfigurationsIdHistoryGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PatchSoftwareTitleConfigurationsAPIService V2PatchSoftwareTitleConfigurationsIdHistoryPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PatchSoftwareTitleConfigurationsAPI.V2PatchSoftwareTitleConfigurationsIdHistoryPost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PatchSoftwareTitleConfigurationsAPIService V2PatchSoftwareTitleConfigurationsIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PatchSoftwareTitleConfigurationsAPI.V2PatchSoftwareTitleConfigurationsIdPatch(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PatchSoftwareTitleConfigurationsAPIService V2PatchSoftwareTitleConfigurationsIdPatchReportGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PatchSoftwareTitleConfigurationsAPI.V2PatchSoftwareTitleConfigurationsIdPatchReportGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PatchSoftwareTitleConfigurationsAPIService V2PatchSoftwareTitleConfigurationsIdPatchSummaryGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PatchSoftwareTitleConfigurationsAPI.V2PatchSoftwareTitleConfigurationsIdPatchSummaryGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PatchSoftwareTitleConfigurationsAPIService V2PatchSoftwareTitleConfigurationsIdPatchSummaryVersionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.PatchSoftwareTitleConfigurationsAPI.V2PatchSoftwareTitleConfigurationsIdPatchSummaryVersionsGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PatchSoftwareTitleConfigurationsAPIService V2PatchSoftwareTitleConfigurationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PatchSoftwareTitleConfigurationsAPI.V2PatchSoftwareTitleConfigurationsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
