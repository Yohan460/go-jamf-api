/*
Jamf Pro API

Testing TeamViewerRemoteAdministrationAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/yohan460/go-jamf-api"
)

func Test_api_TeamViewerRemoteAdministrationAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TeamViewerRemoteAdministrationAPIService PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var configurationId string

		resp, httpRes, err := apiClient.TeamViewerRemoteAdministrationAPI.PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsGet(context.Background(), configurationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamViewerRemoteAdministrationAPIService PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var configurationId string

		resp, httpRes, err := apiClient.TeamViewerRemoteAdministrationAPI.PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsPost(context.Background(), configurationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamViewerRemoteAdministrationAPIService PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdClosePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var configurationId string
		var sessionId string

		httpRes, err := apiClient.TeamViewerRemoteAdministrationAPI.PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdClosePost(context.Background(), configurationId, sessionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamViewerRemoteAdministrationAPIService PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var configurationId string
		var sessionId string

		resp, httpRes, err := apiClient.TeamViewerRemoteAdministrationAPI.PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdGet(context.Background(), configurationId, sessionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamViewerRemoteAdministrationAPIService PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var configurationId string
		var sessionId string

		httpRes, err := apiClient.TeamViewerRemoteAdministrationAPI.PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationPost(context.Background(), configurationId, sessionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamViewerRemoteAdministrationAPIService PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var configurationId string
		var sessionId string

		resp, httpRes, err := apiClient.TeamViewerRemoteAdministrationAPI.PreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusGet(context.Background(), configurationId, sessionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamViewerRemoteAdministrationAPIService PreviewRemoteAdministrationConfigurationsTeamViewerIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.TeamViewerRemoteAdministrationAPI.PreviewRemoteAdministrationConfigurationsTeamViewerIdDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamViewerRemoteAdministrationAPIService PreviewRemoteAdministrationConfigurationsTeamViewerIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.TeamViewerRemoteAdministrationAPI.PreviewRemoteAdministrationConfigurationsTeamViewerIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamViewerRemoteAdministrationAPIService PreviewRemoteAdministrationConfigurationsTeamViewerIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.TeamViewerRemoteAdministrationAPI.PreviewRemoteAdministrationConfigurationsTeamViewerIdPatch(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamViewerRemoteAdministrationAPIService PreviewRemoteAdministrationConfigurationsTeamViewerIdStatusGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.TeamViewerRemoteAdministrationAPI.PreviewRemoteAdministrationConfigurationsTeamViewerIdStatusGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TeamViewerRemoteAdministrationAPIService PreviewRemoteAdministrationConfigurationsTeamViewerPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TeamViewerRemoteAdministrationAPI.PreviewRemoteAdministrationConfigurationsTeamViewerPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
