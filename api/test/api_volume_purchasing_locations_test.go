/*
Jamf Pro API

Testing VolumePurchasingLocationsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/yohan460/go-jamf-api"
)

func Test_api_VolumePurchasingLocationsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test VolumePurchasingLocationsAPIService V1VolumePurchasingLocationsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.VolumePurchasingLocationsAPI.V1VolumePurchasingLocationsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumePurchasingLocationsAPIService V1VolumePurchasingLocationsIdContentGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.VolumePurchasingLocationsAPI.V1VolumePurchasingLocationsIdContentGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumePurchasingLocationsAPIService V1VolumePurchasingLocationsIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.VolumePurchasingLocationsAPI.V1VolumePurchasingLocationsIdDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumePurchasingLocationsAPIService V1VolumePurchasingLocationsIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.VolumePurchasingLocationsAPI.V1VolumePurchasingLocationsIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumePurchasingLocationsAPIService V1VolumePurchasingLocationsIdHistoryGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.VolumePurchasingLocationsAPI.V1VolumePurchasingLocationsIdHistoryGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumePurchasingLocationsAPIService V1VolumePurchasingLocationsIdHistoryPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.VolumePurchasingLocationsAPI.V1VolumePurchasingLocationsIdHistoryPost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumePurchasingLocationsAPIService V1VolumePurchasingLocationsIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.VolumePurchasingLocationsAPI.V1VolumePurchasingLocationsIdPatch(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumePurchasingLocationsAPIService V1VolumePurchasingLocationsIdReclaimPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.VolumePurchasingLocationsAPI.V1VolumePurchasingLocationsIdReclaimPost(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumePurchasingLocationsAPIService V1VolumePurchasingLocationsIdRevokeLicensesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.VolumePurchasingLocationsAPI.V1VolumePurchasingLocationsIdRevokeLicensesPost(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumePurchasingLocationsAPIService V1VolumePurchasingLocationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.VolumePurchasingLocationsAPI.V1VolumePurchasingLocationsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
