/*
Jamf Pro API

Testing LocalAdminPasswordAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/yohan460/go-jamf-api"
)

func Test_api_LocalAdminPasswordAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LocalAdminPasswordAPIService V1LocalAdminPasswordClientManagementIdAccountUsernameAuditGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clientManagementId string
		var username string

		resp, httpRes, err := apiClient.LocalAdminPasswordAPI.V1LocalAdminPasswordClientManagementIdAccountUsernameAuditGet(context.Background(), clientManagementId, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LocalAdminPasswordAPIService V1LocalAdminPasswordClientManagementIdAccountUsernamePasswordGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clientManagementId string
		var username string

		resp, httpRes, err := apiClient.LocalAdminPasswordAPI.V1LocalAdminPasswordClientManagementIdAccountUsernamePasswordGet(context.Background(), clientManagementId, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LocalAdminPasswordAPIService V1LocalAdminPasswordClientManagementIdAccountsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clientManagementId string

		resp, httpRes, err := apiClient.LocalAdminPasswordAPI.V1LocalAdminPasswordClientManagementIdAccountsGet(context.Background(), clientManagementId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LocalAdminPasswordAPIService V1LocalAdminPasswordClientManagementIdSetPasswordPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clientManagementId string

		resp, httpRes, err := apiClient.LocalAdminPasswordAPI.V1LocalAdminPasswordClientManagementIdSetPasswordPut(context.Background(), clientManagementId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LocalAdminPasswordAPIService V1LocalAdminPasswordSettingsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LocalAdminPasswordAPI.V1LocalAdminPasswordSettingsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LocalAdminPasswordAPIService V1LocalAdminPasswordSettingsPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LocalAdminPasswordAPI.V1LocalAdminPasswordSettingsPut(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LocalAdminPasswordAPIService V2LocalAdminPasswordClientManagementIdAccountUsernameAuditGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clientManagementId string
		var username string

		resp, httpRes, err := apiClient.LocalAdminPasswordAPI.V2LocalAdminPasswordClientManagementIdAccountUsernameAuditGet(context.Background(), clientManagementId, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LocalAdminPasswordAPIService V2LocalAdminPasswordClientManagementIdAccountUsernameHistoryGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clientManagementId string
		var username string

		resp, httpRes, err := apiClient.LocalAdminPasswordAPI.V2LocalAdminPasswordClientManagementIdAccountUsernameHistoryGet(context.Background(), clientManagementId, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LocalAdminPasswordAPIService V2LocalAdminPasswordClientManagementIdAccountUsernamePasswordGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clientManagementId string
		var username string

		resp, httpRes, err := apiClient.LocalAdminPasswordAPI.V2LocalAdminPasswordClientManagementIdAccountUsernamePasswordGet(context.Background(), clientManagementId, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LocalAdminPasswordAPIService V2LocalAdminPasswordClientManagementIdAccountsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clientManagementId string

		resp, httpRes, err := apiClient.LocalAdminPasswordAPI.V2LocalAdminPasswordClientManagementIdAccountsGet(context.Background(), clientManagementId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LocalAdminPasswordAPIService V2LocalAdminPasswordClientManagementIdSetPasswordPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clientManagementId string

		resp, httpRes, err := apiClient.LocalAdminPasswordAPI.V2LocalAdminPasswordClientManagementIdSetPasswordPut(context.Background(), clientManagementId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LocalAdminPasswordAPIService V2LocalAdminPasswordPendingRotationsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LocalAdminPasswordAPI.V2LocalAdminPasswordPendingRotationsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LocalAdminPasswordAPIService V2LocalAdminPasswordSettingsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LocalAdminPasswordAPI.V2LocalAdminPasswordSettingsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LocalAdminPasswordAPIService V2LocalAdminPasswordSettingsPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LocalAdminPasswordAPI.V2LocalAdminPasswordSettingsPut(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
