/*
Jamf Pro API

Testing ManagedSoftwareUpdatesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/yohan460/go-jamf-api"
)

func Test_api_ManagedSoftwareUpdatesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ManagedSoftwareUpdatesAPIService V1ManagedSoftwareUpdatesAvailableUpdatesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagedSoftwareUpdatesAPI.V1ManagedSoftwareUpdatesAvailableUpdatesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedSoftwareUpdatesAPIService V1ManagedSoftwareUpdatesPlansFeatureToggleGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagedSoftwareUpdatesAPI.V1ManagedSoftwareUpdatesPlansFeatureToggleGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedSoftwareUpdatesAPIService V1ManagedSoftwareUpdatesPlansFeatureTogglePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagedSoftwareUpdatesAPI.V1ManagedSoftwareUpdatesPlansFeatureTogglePut(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedSoftwareUpdatesAPIService V1ManagedSoftwareUpdatesPlansGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagedSoftwareUpdatesAPI.V1ManagedSoftwareUpdatesPlansGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedSoftwareUpdatesAPIService V1ManagedSoftwareUpdatesPlansGroupIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ManagedSoftwareUpdatesAPI.V1ManagedSoftwareUpdatesPlansGroupIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedSoftwareUpdatesAPIService V1ManagedSoftwareUpdatesPlansGroupPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagedSoftwareUpdatesAPI.V1ManagedSoftwareUpdatesPlansGroupPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedSoftwareUpdatesAPIService V1ManagedSoftwareUpdatesPlansIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ManagedSoftwareUpdatesAPI.V1ManagedSoftwareUpdatesPlansIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedSoftwareUpdatesAPIService V1ManagedSoftwareUpdatesPlansPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagedSoftwareUpdatesAPI.V1ManagedSoftwareUpdatesPlansPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedSoftwareUpdatesAPIService V1ManagedSoftwareUpdatesUpdateStatusesComputerGroupsIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ManagedSoftwareUpdatesAPI.V1ManagedSoftwareUpdatesUpdateStatusesComputerGroupsIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedSoftwareUpdatesAPIService V1ManagedSoftwareUpdatesUpdateStatusesComputersIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ManagedSoftwareUpdatesAPI.V1ManagedSoftwareUpdatesUpdateStatusesComputersIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedSoftwareUpdatesAPIService V1ManagedSoftwareUpdatesUpdateStatusesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagedSoftwareUpdatesAPI.V1ManagedSoftwareUpdatesUpdateStatusesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedSoftwareUpdatesAPIService V1ManagedSoftwareUpdatesUpdateStatusesMobileDeviceGroupsIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ManagedSoftwareUpdatesAPI.V1ManagedSoftwareUpdatesUpdateStatusesMobileDeviceGroupsIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedSoftwareUpdatesAPIService V1ManagedSoftwareUpdatesUpdateStatusesMobileDevicesIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ManagedSoftwareUpdatesAPI.V1ManagedSoftwareUpdatesUpdateStatusesMobileDevicesIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
