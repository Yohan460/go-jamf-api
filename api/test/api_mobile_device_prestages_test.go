/*
Jamf Pro API

Testing MobileDevicePrestagesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/yohan460/go-jamf-api"
)

func Test_api_MobileDevicePrestagesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MobileDevicePrestagesAPIService V1MobileDevicePrestagesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V1MobileDevicePrestagesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V1MobileDevicePrestagesIdAttachmentsDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.MobileDevicePrestagesAPI.V1MobileDevicePrestagesIdAttachmentsDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V1MobileDevicePrestagesIdAttachmentsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V1MobileDevicePrestagesIdAttachmentsGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V1MobileDevicePrestagesIdAttachmentsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V1MobileDevicePrestagesIdAttachmentsPost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V1MobileDevicePrestagesIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.MobileDevicePrestagesAPI.V1MobileDevicePrestagesIdDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V1MobileDevicePrestagesIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V1MobileDevicePrestagesIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V1MobileDevicePrestagesIdHistoryGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V1MobileDevicePrestagesIdHistoryGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V1MobileDevicePrestagesIdHistoryPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V1MobileDevicePrestagesIdHistoryPost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V1MobileDevicePrestagesIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V1MobileDevicePrestagesIdPut(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V1MobileDevicePrestagesIdScopeDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V1MobileDevicePrestagesIdScopeDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V1MobileDevicePrestagesIdScopeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V1MobileDevicePrestagesIdScopeGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V1MobileDevicePrestagesIdScopePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V1MobileDevicePrestagesIdScopePost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V1MobileDevicePrestagesIdScopePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V1MobileDevicePrestagesIdScopePut(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V1MobileDevicePrestagesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V1MobileDevicePrestagesPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V1MobileDevicePrestagesScopeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V1MobileDevicePrestagesScopeGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V1MobileDevicePrestagesSyncGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V1MobileDevicePrestagesSyncGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V1MobileDevicePrestagesSyncIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V1MobileDevicePrestagesSyncIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V1MobileDevicePrestagesSyncIdLatestGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V1MobileDevicePrestagesSyncIdLatestGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V2MobileDevicePrestagesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V2MobileDevicePrestagesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V2MobileDevicePrestagesIdAttachmentsDeleteMultiplePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.MobileDevicePrestagesAPI.V2MobileDevicePrestagesIdAttachmentsDeleteMultiplePost(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V2MobileDevicePrestagesIdAttachmentsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V2MobileDevicePrestagesIdAttachmentsGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V2MobileDevicePrestagesIdAttachmentsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V2MobileDevicePrestagesIdAttachmentsPost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V2MobileDevicePrestagesIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.MobileDevicePrestagesAPI.V2MobileDevicePrestagesIdDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V2MobileDevicePrestagesIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V2MobileDevicePrestagesIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V2MobileDevicePrestagesIdHistoryGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V2MobileDevicePrestagesIdHistoryGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V2MobileDevicePrestagesIdHistoryPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V2MobileDevicePrestagesIdHistoryPost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V2MobileDevicePrestagesIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V2MobileDevicePrestagesIdPut(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V2MobileDevicePrestagesIdScopeDeleteMultiplePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V2MobileDevicePrestagesIdScopeDeleteMultiplePost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V2MobileDevicePrestagesIdScopeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V2MobileDevicePrestagesIdScopeGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V2MobileDevicePrestagesIdScopePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V2MobileDevicePrestagesIdScopePost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V2MobileDevicePrestagesIdScopePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V2MobileDevicePrestagesIdScopePut(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V2MobileDevicePrestagesIdSyncsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V2MobileDevicePrestagesIdSyncsGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V2MobileDevicePrestagesIdSyncsLatestGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V2MobileDevicePrestagesIdSyncsLatestGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V2MobileDevicePrestagesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V2MobileDevicePrestagesPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V2MobileDevicePrestagesScopeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V2MobileDevicePrestagesScopeGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MobileDevicePrestagesAPIService V2MobileDevicePrestagesSyncsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MobileDevicePrestagesAPI.V2MobileDevicePrestagesSyncsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
