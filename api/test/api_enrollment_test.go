/*
Jamf Pro API

Testing EnrollmentAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/yohan460/go-jamf-api"
)

func Test_api_EnrollmentAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EnrollmentAPIService V1AdueSessionTokenSettingsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EnrollmentAPI.V1AdueSessionTokenSettingsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V1AdueSessionTokenSettingsPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EnrollmentAPI.V1AdueSessionTokenSettingsPut(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V2EnrollmentAccessGroupsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EnrollmentAPI.V2EnrollmentAccessGroupsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V2EnrollmentAccessGroupsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EnrollmentAPI.V2EnrollmentAccessGroupsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V2EnrollmentAccessGroupsServerIdGroupIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var groupId string

		httpRes, err := apiClient.EnrollmentAPI.V2EnrollmentAccessGroupsServerIdGroupIdDelete(context.Background(), serverId, groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V2EnrollmentAccessGroupsServerIdGroupIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var groupId string

		resp, httpRes, err := apiClient.EnrollmentAPI.V2EnrollmentAccessGroupsServerIdGroupIdGet(context.Background(), serverId, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V2EnrollmentAccessGroupsServerIdGroupIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId string
		var groupId string

		resp, httpRes, err := apiClient.EnrollmentAPI.V2EnrollmentAccessGroupsServerIdGroupIdPut(context.Background(), serverId, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V2EnrollmentFilteredLanguageCodesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EnrollmentAPI.V2EnrollmentFilteredLanguageCodesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V2EnrollmentGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EnrollmentAPI.V2EnrollmentGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V2EnrollmentHistoryExportPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EnrollmentAPI.V2EnrollmentHistoryExportPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V2EnrollmentHistoryGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EnrollmentAPI.V2EnrollmentHistoryGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V2EnrollmentHistoryPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EnrollmentAPI.V2EnrollmentHistoryPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V2EnrollmentLanguageCodesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EnrollmentAPI.V2EnrollmentLanguageCodesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V2EnrollmentLanguagesDeleteMultiplePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.EnrollmentAPI.V2EnrollmentLanguagesDeleteMultiplePost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V2EnrollmentLanguagesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EnrollmentAPI.V2EnrollmentLanguagesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V2EnrollmentLanguagesLanguageIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var languageId string

		httpRes, err := apiClient.EnrollmentAPI.V2EnrollmentLanguagesLanguageIdDelete(context.Background(), languageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V2EnrollmentLanguagesLanguageIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var languageId string

		resp, httpRes, err := apiClient.EnrollmentAPI.V2EnrollmentLanguagesLanguageIdGet(context.Background(), languageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V2EnrollmentLanguagesLanguageIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var languageId string

		resp, httpRes, err := apiClient.EnrollmentAPI.V2EnrollmentLanguagesLanguageIdPut(context.Background(), languageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V2EnrollmentPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EnrollmentAPI.V2EnrollmentPut(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V3EnrollmentAccessGroupsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EnrollmentAPI.V3EnrollmentAccessGroupsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V3EnrollmentAccessGroupsIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.EnrollmentAPI.V3EnrollmentAccessGroupsIdDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V3EnrollmentAccessGroupsIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.EnrollmentAPI.V3EnrollmentAccessGroupsIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V3EnrollmentAccessGroupsIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.EnrollmentAPI.V3EnrollmentAccessGroupsIdPut(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V3EnrollmentAccessGroupsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EnrollmentAPI.V3EnrollmentAccessGroupsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V3EnrollmentFilteredLanguageCodesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EnrollmentAPI.V3EnrollmentFilteredLanguageCodesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V3EnrollmentGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EnrollmentAPI.V3EnrollmentGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V3EnrollmentLanguageCodesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EnrollmentAPI.V3EnrollmentLanguageCodesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V3EnrollmentLanguagesDeleteMultiplePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.EnrollmentAPI.V3EnrollmentLanguagesDeleteMultiplePost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V3EnrollmentLanguagesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EnrollmentAPI.V3EnrollmentLanguagesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V3EnrollmentLanguagesLanguageIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var languageId string

		httpRes, err := apiClient.EnrollmentAPI.V3EnrollmentLanguagesLanguageIdDelete(context.Background(), languageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V3EnrollmentLanguagesLanguageIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var languageId string

		resp, httpRes, err := apiClient.EnrollmentAPI.V3EnrollmentLanguagesLanguageIdGet(context.Background(), languageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V3EnrollmentLanguagesLanguageIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var languageId string

		resp, httpRes, err := apiClient.EnrollmentAPI.V3EnrollmentLanguagesLanguageIdPut(context.Background(), languageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnrollmentAPIService V3EnrollmentPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EnrollmentAPI.V3EnrollmentPut(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
