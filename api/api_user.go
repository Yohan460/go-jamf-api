/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type UserAPI interface {

	/*
	V1UserChangePasswordPost Changes the user account password. 

	Changes the account password for a currently authenticated user.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return UserAPIV1UserChangePasswordPostRequest
	*/
	V1UserChangePasswordPost(ctx context.Context) UserAPIV1UserChangePasswordPostRequest

	// V1UserChangePasswordPostExecute executes the request
	V1UserChangePasswordPostExecute(r UserAPIV1UserChangePasswordPostRequest) (*http.Response, error)
}

// UserAPIService UserAPI service
type UserAPIService service

type UserAPIV1UserChangePasswordPostRequest struct {
	ctx context.Context
	ApiService UserAPI
	changePassword *ChangePassword
}

// Current account password and new password.
func (r UserAPIV1UserChangePasswordPostRequest) ChangePassword(changePassword ChangePassword) UserAPIV1UserChangePasswordPostRequest {
	r.changePassword = &changePassword
	return r
}

func (r UserAPIV1UserChangePasswordPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1UserChangePasswordPostExecute(r)
}

/*
V1UserChangePasswordPost Changes the user account password. 

Changes the account password for a currently authenticated user.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return UserAPIV1UserChangePasswordPostRequest
*/
func (a *UserAPIService) V1UserChangePasswordPost(ctx context.Context) UserAPIV1UserChangePasswordPostRequest {
	return UserAPIV1UserChangePasswordPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *UserAPIService) V1UserChangePasswordPostExecute(r UserAPIV1UserChangePasswordPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserAPIService.V1UserChangePasswordPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/user/change-password"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.changePassword == nil {
		return nil, reportError("changePassword is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.changePassword
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
