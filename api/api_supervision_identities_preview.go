/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


type SupervisionIdentitiesPreviewAPI interface {

	/*
	V1SupervisionIdentitiesGet Search for sorted and paged Supervision Identities 

	Search for sorted and paged supervision identities

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesGetRequest
	*/
	V1SupervisionIdentitiesGet(ctx context.Context) SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesGetRequest

	// V1SupervisionIdentitiesGetExecute executes the request
	//  @return SupervisionIdentitySearchResults
	V1SupervisionIdentitiesGetExecute(r SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesGetRequest) (*SupervisionIdentitySearchResults, *http.Response, error)

	/*
	V1SupervisionIdentitiesIdDelete Delete a Supervision Identity with the supplied id 

	Deletes a Supervision Identity with the supplied id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Supervision Identity identifier
	@return SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdDeleteRequest
	*/
	V1SupervisionIdentitiesIdDelete(ctx context.Context, id int32) SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdDeleteRequest

	// V1SupervisionIdentitiesIdDeleteExecute executes the request
	V1SupervisionIdentitiesIdDeleteExecute(r SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdDeleteRequest) (*http.Response, error)

	/*
	V1SupervisionIdentitiesIdDownloadGet Download the Supervision Identity .p12 file 

	Download the Supervision Identity .p12 file

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Supervision Identity identifier
	@return SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdDownloadGetRequest
	*/
	V1SupervisionIdentitiesIdDownloadGet(ctx context.Context, id int32) SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdDownloadGetRequest

	// V1SupervisionIdentitiesIdDownloadGetExecute executes the request
	//  @return *os.File
	V1SupervisionIdentitiesIdDownloadGetExecute(r SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdDownloadGetRequest) (*os.File, *http.Response, error)

	/*
	V1SupervisionIdentitiesIdGet Retrieve a Supervision Identity with the supplied id 

	Retrieves a Supervision Identity with the supplied id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Supervision Identity identifier
	@return SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdGetRequest
	*/
	V1SupervisionIdentitiesIdGet(ctx context.Context, id int32) SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdGetRequest

	// V1SupervisionIdentitiesIdGetExecute executes the request
	//  @return SupervisionIdentity
	V1SupervisionIdentitiesIdGetExecute(r SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdGetRequest) (*SupervisionIdentity, *http.Response, error)

	/*
	V1SupervisionIdentitiesIdPut Update a Supervision Identity with the supplied information 

	Updates a Supervision Identity with the supplied information

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Supervision Identity identifier
	@return SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdPutRequest
	*/
	V1SupervisionIdentitiesIdPut(ctx context.Context, id int32) SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdPutRequest

	// V1SupervisionIdentitiesIdPutExecute executes the request
	//  @return SupervisionIdentity
	V1SupervisionIdentitiesIdPutExecute(r SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdPutRequest) (*SupervisionIdentity, *http.Response, error)

	/*
	V1SupervisionIdentitiesPost Create a Supervision Identity for the supplied information 

	Creates a Supervision Identity for the supplied information

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesPostRequest
	*/
	V1SupervisionIdentitiesPost(ctx context.Context) SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesPostRequest

	// V1SupervisionIdentitiesPostExecute executes the request
	//  @return SupervisionIdentity
	V1SupervisionIdentitiesPostExecute(r SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesPostRequest) (*SupervisionIdentity, *http.Response, error)

	/*
	V1SupervisionIdentitiesUploadPost Upload the Supervision Identity .p12 file 

	Uploads the Supervision Identity .p12 file

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesUploadPostRequest
	*/
	V1SupervisionIdentitiesUploadPost(ctx context.Context) SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesUploadPostRequest

	// V1SupervisionIdentitiesUploadPostExecute executes the request
	//  @return SupervisionIdentity
	V1SupervisionIdentitiesUploadPostExecute(r SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesUploadPostRequest) (*SupervisionIdentity, *http.Response, error)
}

// SupervisionIdentitiesPreviewAPIService SupervisionIdentitiesPreviewAPI service
type SupervisionIdentitiesPreviewAPIService service

type SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesGetRequest struct {
	ctx context.Context
	ApiService SupervisionIdentitiesPreviewAPI
	page *int32
	size *int32
	pagesize *int32
	pageSize *int32
	sort *string
}

func (r SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesGetRequest) Page(page int32) SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesGetRequest {
	r.page = &page
	return r
}

// Deprecated
func (r SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesGetRequest) Size(size int32) SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesGetRequest {
	r.size = &size
	return r
}

// Deprecated
func (r SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesGetRequest) Pagesize(pagesize int32) SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesGetRequest {
	r.pagesize = &pagesize
	return r
}

func (r SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesGetRequest) PageSize(pageSize int32) SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc 
func (r SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesGetRequest) Sort(sort string) SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesGetRequest {
	r.sort = &sort
	return r
}

func (r SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesGetRequest) Execute() (*SupervisionIdentitySearchResults, *http.Response, error) {
	return r.ApiService.V1SupervisionIdentitiesGetExecute(r)
}

/*
V1SupervisionIdentitiesGet Search for sorted and paged Supervision Identities 

Search for sorted and paged supervision identities

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesGetRequest
*/
func (a *SupervisionIdentitiesPreviewAPIService) V1SupervisionIdentitiesGet(ctx context.Context) SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesGetRequest {
	return SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SupervisionIdentitySearchResults
func (a *SupervisionIdentitiesPreviewAPIService) V1SupervisionIdentitiesGetExecute(r SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesGetRequest) (*SupervisionIdentitySearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SupervisionIdentitySearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupervisionIdentitiesPreviewAPIService.V1SupervisionIdentitiesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/supervision-identities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	} else {
		var defaultValue int32 = 100
		r.size = &defaultValue
	}
	if r.pagesize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pagesize", r.pagesize, "")
	} else {
		var defaultValue int32 = 100
		r.pagesize = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	} else {
		var defaultValue string = "id:asc"
		r.sort = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdDeleteRequest struct {
	ctx context.Context
	ApiService SupervisionIdentitiesPreviewAPI
	id int32
}

func (r SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1SupervisionIdentitiesIdDeleteExecute(r)
}

/*
V1SupervisionIdentitiesIdDelete Delete a Supervision Identity with the supplied id 

Deletes a Supervision Identity with the supplied id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Supervision Identity identifier
 @return SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdDeleteRequest
*/
func (a *SupervisionIdentitiesPreviewAPIService) V1SupervisionIdentitiesIdDelete(ctx context.Context, id int32) SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdDeleteRequest {
	return SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *SupervisionIdentitiesPreviewAPIService) V1SupervisionIdentitiesIdDeleteExecute(r SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupervisionIdentitiesPreviewAPIService.V1SupervisionIdentitiesIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/supervision-identities/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdDownloadGetRequest struct {
	ctx context.Context
	ApiService SupervisionIdentitiesPreviewAPI
	id int32
}

func (r SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdDownloadGetRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.V1SupervisionIdentitiesIdDownloadGetExecute(r)
}

/*
V1SupervisionIdentitiesIdDownloadGet Download the Supervision Identity .p12 file 

Download the Supervision Identity .p12 file

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Supervision Identity identifier
 @return SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdDownloadGetRequest
*/
func (a *SupervisionIdentitiesPreviewAPIService) V1SupervisionIdentitiesIdDownloadGet(ctx context.Context, id int32) SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdDownloadGetRequest {
	return SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdDownloadGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return *os.File
func (a *SupervisionIdentitiesPreviewAPIService) V1SupervisionIdentitiesIdDownloadGetExecute(r SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdDownloadGetRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupervisionIdentitiesPreviewAPIService.V1SupervisionIdentitiesIdDownloadGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/supervision-identities/{id}/download"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdGetRequest struct {
	ctx context.Context
	ApiService SupervisionIdentitiesPreviewAPI
	id int32
}

func (r SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdGetRequest) Execute() (*SupervisionIdentity, *http.Response, error) {
	return r.ApiService.V1SupervisionIdentitiesIdGetExecute(r)
}

/*
V1SupervisionIdentitiesIdGet Retrieve a Supervision Identity with the supplied id 

Retrieves a Supervision Identity with the supplied id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Supervision Identity identifier
 @return SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdGetRequest
*/
func (a *SupervisionIdentitiesPreviewAPIService) V1SupervisionIdentitiesIdGet(ctx context.Context, id int32) SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdGetRequest {
	return SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SupervisionIdentity
func (a *SupervisionIdentitiesPreviewAPIService) V1SupervisionIdentitiesIdGetExecute(r SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdGetRequest) (*SupervisionIdentity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SupervisionIdentity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupervisionIdentitiesPreviewAPIService.V1SupervisionIdentitiesIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/supervision-identities/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdPutRequest struct {
	ctx context.Context
	ApiService SupervisionIdentitiesPreviewAPI
	id int32
	supervisionIdentityUpdate *SupervisionIdentityUpdate
}

func (r SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdPutRequest) SupervisionIdentityUpdate(supervisionIdentityUpdate SupervisionIdentityUpdate) SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdPutRequest {
	r.supervisionIdentityUpdate = &supervisionIdentityUpdate
	return r
}

func (r SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdPutRequest) Execute() (*SupervisionIdentity, *http.Response, error) {
	return r.ApiService.V1SupervisionIdentitiesIdPutExecute(r)
}

/*
V1SupervisionIdentitiesIdPut Update a Supervision Identity with the supplied information 

Updates a Supervision Identity with the supplied information

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Supervision Identity identifier
 @return SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdPutRequest
*/
func (a *SupervisionIdentitiesPreviewAPIService) V1SupervisionIdentitiesIdPut(ctx context.Context, id int32) SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdPutRequest {
	return SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SupervisionIdentity
func (a *SupervisionIdentitiesPreviewAPIService) V1SupervisionIdentitiesIdPutExecute(r SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesIdPutRequest) (*SupervisionIdentity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SupervisionIdentity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupervisionIdentitiesPreviewAPIService.V1SupervisionIdentitiesIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/supervision-identities/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.supervisionIdentityUpdate == nil {
		return localVarReturnValue, nil, reportError("supervisionIdentityUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.supervisionIdentityUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesPostRequest struct {
	ctx context.Context
	ApiService SupervisionIdentitiesPreviewAPI
	supervisionIdentityCreate *SupervisionIdentityCreate
}

func (r SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesPostRequest) SupervisionIdentityCreate(supervisionIdentityCreate SupervisionIdentityCreate) SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesPostRequest {
	r.supervisionIdentityCreate = &supervisionIdentityCreate
	return r
}

func (r SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesPostRequest) Execute() (*SupervisionIdentity, *http.Response, error) {
	return r.ApiService.V1SupervisionIdentitiesPostExecute(r)
}

/*
V1SupervisionIdentitiesPost Create a Supervision Identity for the supplied information 

Creates a Supervision Identity for the supplied information

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesPostRequest
*/
func (a *SupervisionIdentitiesPreviewAPIService) V1SupervisionIdentitiesPost(ctx context.Context) SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesPostRequest {
	return SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SupervisionIdentity
func (a *SupervisionIdentitiesPreviewAPIService) V1SupervisionIdentitiesPostExecute(r SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesPostRequest) (*SupervisionIdentity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SupervisionIdentity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupervisionIdentitiesPreviewAPIService.V1SupervisionIdentitiesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/supervision-identities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.supervisionIdentityCreate == nil {
		return localVarReturnValue, nil, reportError("supervisionIdentityCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.supervisionIdentityCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesUploadPostRequest struct {
	ctx context.Context
	ApiService SupervisionIdentitiesPreviewAPI
	supervisionIdentityCertificateUpload *SupervisionIdentityCertificateUpload
}

// The base 64 encoded .p12 file alone with other needed information
func (r SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesUploadPostRequest) SupervisionIdentityCertificateUpload(supervisionIdentityCertificateUpload SupervisionIdentityCertificateUpload) SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesUploadPostRequest {
	r.supervisionIdentityCertificateUpload = &supervisionIdentityCertificateUpload
	return r
}

func (r SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesUploadPostRequest) Execute() (*SupervisionIdentity, *http.Response, error) {
	return r.ApiService.V1SupervisionIdentitiesUploadPostExecute(r)
}

/*
V1SupervisionIdentitiesUploadPost Upload the Supervision Identity .p12 file 

Uploads the Supervision Identity .p12 file

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesUploadPostRequest
*/
func (a *SupervisionIdentitiesPreviewAPIService) V1SupervisionIdentitiesUploadPost(ctx context.Context) SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesUploadPostRequest {
	return SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesUploadPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SupervisionIdentity
func (a *SupervisionIdentitiesPreviewAPIService) V1SupervisionIdentitiesUploadPostExecute(r SupervisionIdentitiesPreviewAPIV1SupervisionIdentitiesUploadPostRequest) (*SupervisionIdentity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SupervisionIdentity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupervisionIdentitiesPreviewAPIService.V1SupervisionIdentitiesUploadPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/supervision-identities/upload"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.supervisionIdentityCertificateUpload == nil {
		return localVarReturnValue, nil, reportError("supervisionIdentityCertificateUpload is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.supervisionIdentityCertificateUpload
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
