/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GsxTestResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GsxTestResponse{}

// GsxTestResponse struct for GsxTestResponse
type GsxTestResponse struct {
	Message string `json:"message"`
	Request string `json:"request"`
	Response string `json:"response"`
}

type _GsxTestResponse GsxTestResponse

// NewGsxTestResponse instantiates a new GsxTestResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGsxTestResponse(message string, request string, response string) *GsxTestResponse {
	this := GsxTestResponse{}
	this.Message = message
	this.Request = request
	this.Response = response
	return &this
}

// NewGsxTestResponseWithDefaults instantiates a new GsxTestResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGsxTestResponseWithDefaults() *GsxTestResponse {
	this := GsxTestResponse{}
	return &this
}

// GetMessage returns the Message field value
func (o *GsxTestResponse) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *GsxTestResponse) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *GsxTestResponse) SetMessage(v string) {
	o.Message = v
}

// GetRequest returns the Request field value
func (o *GsxTestResponse) GetRequest() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Request
}

// GetRequestOk returns a tuple with the Request field value
// and a boolean to check if the value has been set.
func (o *GsxTestResponse) GetRequestOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Request, true
}

// SetRequest sets field value
func (o *GsxTestResponse) SetRequest(v string) {
	o.Request = v
}

// GetResponse returns the Response field value
func (o *GsxTestResponse) GetResponse() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Response
}

// GetResponseOk returns a tuple with the Response field value
// and a boolean to check if the value has been set.
func (o *GsxTestResponse) GetResponseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Response, true
}

// SetResponse sets field value
func (o *GsxTestResponse) SetResponse(v string) {
	o.Response = v
}

func (o GsxTestResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GsxTestResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message"] = o.Message
	toSerialize["request"] = o.Request
	toSerialize["response"] = o.Response
	return toSerialize, nil
}

func (o *GsxTestResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message",
		"request",
		"response",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGsxTestResponse := _GsxTestResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGsxTestResponse)

	if err != nil {
		return err
	}

	*o = GsxTestResponse(varGsxTestResponse)

	return err
}

type NullableGsxTestResponse struct {
	value *GsxTestResponse
	isSet bool
}

func (v NullableGsxTestResponse) Get() *GsxTestResponse {
	return v.value
}

func (v *NullableGsxTestResponse) Set(val *GsxTestResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGsxTestResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGsxTestResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGsxTestResponse(val *GsxTestResponse) *NullableGsxTestResponse {
	return &NullableGsxTestResponse{value: val, isSet: true}
}

func (v NullableGsxTestResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGsxTestResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


