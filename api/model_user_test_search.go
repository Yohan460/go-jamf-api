/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// UserTestSearch struct for UserTestSearch
type UserTestSearch struct {
	DistinguishedName *string `json:"distinguishedName,omitempty"`
	Id *string `json:"id,omitempty"`
	Uuid *string `json:"uuid,omitempty"`
	ServerId *string `json:"serverId,omitempty"`
	Name *string `json:"name,omitempty"`
	Attributes *UserAttributes `json:"attributes,omitempty"`
}

// NewUserTestSearch instantiates a new UserTestSearch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserTestSearch() *UserTestSearch {
	this := UserTestSearch{}
	return &this
}

// NewUserTestSearchWithDefaults instantiates a new UserTestSearch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserTestSearchWithDefaults() *UserTestSearch {
	this := UserTestSearch{}
	return &this
}

// GetDistinguishedName returns the DistinguishedName field value if set, zero value otherwise.
func (o *UserTestSearch) GetDistinguishedName() string {
	if o == nil || o.DistinguishedName == nil {
		var ret string
		return ret
	}
	return *o.DistinguishedName
}

// GetDistinguishedNameOk returns a tuple with the DistinguishedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTestSearch) GetDistinguishedNameOk() (*string, bool) {
	if o == nil || o.DistinguishedName == nil {
		return nil, false
	}
	return o.DistinguishedName, true
}

// HasDistinguishedName returns a boolean if a field has been set.
func (o *UserTestSearch) HasDistinguishedName() bool {
	if o != nil && o.DistinguishedName != nil {
		return true
	}

	return false
}

// SetDistinguishedName gets a reference to the given string and assigns it to the DistinguishedName field.
func (o *UserTestSearch) SetDistinguishedName(v string) {
	o.DistinguishedName = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserTestSearch) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTestSearch) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserTestSearch) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UserTestSearch) SetId(v string) {
	o.Id = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *UserTestSearch) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTestSearch) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *UserTestSearch) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *UserTestSearch) SetUuid(v string) {
	o.Uuid = &v
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *UserTestSearch) GetServerId() string {
	if o == nil || o.ServerId == nil {
		var ret string
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTestSearch) GetServerIdOk() (*string, bool) {
	if o == nil || o.ServerId == nil {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *UserTestSearch) HasServerId() bool {
	if o != nil && o.ServerId != nil {
		return true
	}

	return false
}

// SetServerId gets a reference to the given string and assigns it to the ServerId field.
func (o *UserTestSearch) SetServerId(v string) {
	o.ServerId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UserTestSearch) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTestSearch) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UserTestSearch) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UserTestSearch) SetName(v string) {
	o.Name = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *UserTestSearch) GetAttributes() UserAttributes {
	if o == nil || o.Attributes == nil {
		var ret UserAttributes
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTestSearch) GetAttributesOk() (*UserAttributes, bool) {
	if o == nil || o.Attributes == nil {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *UserTestSearch) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given UserAttributes and assigns it to the Attributes field.
func (o *UserTestSearch) SetAttributes(v UserAttributes) {
	o.Attributes = &v
}

func (o UserTestSearch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DistinguishedName != nil {
		toSerialize["distinguishedName"] = o.DistinguishedName
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Uuid != nil {
		toSerialize["uuid"] = o.Uuid
	}
	if o.ServerId != nil {
		toSerialize["serverId"] = o.ServerId
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}
	return json.Marshal(toSerialize)
}

type NullableUserTestSearch struct {
	value *UserTestSearch
	isSet bool
}

func (v NullableUserTestSearch) Get() *UserTestSearch {
	return v.value
}

func (v *NullableUserTestSearch) Set(val *UserTestSearch) {
	v.value = val
	v.isSet = true
}

func (v NullableUserTestSearch) IsSet() bool {
	return v.isSet
}

func (v *NullableUserTestSearch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserTestSearch(val *UserTestSearch) *NullableUserTestSearch {
	return &NullableUserTestSearch{value: val, isSet: true}
}

func (v NullableUserTestSearch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserTestSearch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


