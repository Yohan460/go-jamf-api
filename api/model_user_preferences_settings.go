/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserPreferencesSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserPreferencesSettings{}

// UserPreferencesSettings Response object.
type UserPreferencesSettings struct {
	Username string `json:"username"`
	Key string `json:"key"`
	// List of preferences for the specific key and user.
	Values []string `json:"values"`
}

type _UserPreferencesSettings UserPreferencesSettings

// NewUserPreferencesSettings instantiates a new UserPreferencesSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPreferencesSettings(username string, key string, values []string) *UserPreferencesSettings {
	this := UserPreferencesSettings{}
	this.Username = username
	this.Key = key
	this.Values = values
	return &this
}

// NewUserPreferencesSettingsWithDefaults instantiates a new UserPreferencesSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPreferencesSettingsWithDefaults() *UserPreferencesSettings {
	this := UserPreferencesSettings{}
	return &this
}

// GetUsername returns the Username field value
func (o *UserPreferencesSettings) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *UserPreferencesSettings) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *UserPreferencesSettings) SetUsername(v string) {
	o.Username = v
}

// GetKey returns the Key field value
func (o *UserPreferencesSettings) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *UserPreferencesSettings) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *UserPreferencesSettings) SetKey(v string) {
	o.Key = v
}

// GetValues returns the Values field value
func (o *UserPreferencesSettings) GetValues() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *UserPreferencesSettings) GetValuesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *UserPreferencesSettings) SetValues(v []string) {
	o.Values = v
}

func (o UserPreferencesSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserPreferencesSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["username"] = o.Username
	toSerialize["key"] = o.Key
	toSerialize["values"] = o.Values
	return toSerialize, nil
}

func (o *UserPreferencesSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"username",
		"key",
		"values",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserPreferencesSettings := _UserPreferencesSettings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserPreferencesSettings)

	if err != nil {
		return err
	}

	*o = UserPreferencesSettings(varUserPreferencesSettings)

	return err
}

type NullableUserPreferencesSettings struct {
	value *UserPreferencesSettings
	isSet bool
}

func (v NullableUserPreferencesSettings) Get() *UserPreferencesSettings {
	return v.value
}

func (v *NullableUserPreferencesSettings) Set(val *UserPreferencesSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPreferencesSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPreferencesSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPreferencesSettings(val *UserPreferencesSettings) *NullableUserPreferencesSettings {
	return &NullableUserPreferencesSettings{value: val, isSet: true}
}

func (v NullableUserPreferencesSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPreferencesSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


