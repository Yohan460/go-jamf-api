/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the DssDeclaration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DssDeclaration{}

// DssDeclaration struct for DssDeclaration
type DssDeclaration struct {
	Uuid *string `json:"uuid,omitempty"`
	PayloadJson NullableString `json:"payloadJson,omitempty"`
	Type NullableString `json:"type,omitempty"`
	Group NullableString `json:"group,omitempty"`
}

// NewDssDeclaration instantiates a new DssDeclaration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDssDeclaration() *DssDeclaration {
	this := DssDeclaration{}
	return &this
}

// NewDssDeclarationWithDefaults instantiates a new DssDeclaration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDssDeclarationWithDefaults() *DssDeclaration {
	this := DssDeclaration{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *DssDeclaration) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DssDeclaration) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *DssDeclaration) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *DssDeclaration) SetUuid(v string) {
	o.Uuid = &v
}

// GetPayloadJson returns the PayloadJson field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DssDeclaration) GetPayloadJson() string {
	if o == nil || IsNil(o.PayloadJson.Get()) {
		var ret string
		return ret
	}
	return *o.PayloadJson.Get()
}

// GetPayloadJsonOk returns a tuple with the PayloadJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DssDeclaration) GetPayloadJsonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PayloadJson.Get(), o.PayloadJson.IsSet()
}

// HasPayloadJson returns a boolean if a field has been set.
func (o *DssDeclaration) HasPayloadJson() bool {
	if o != nil && o.PayloadJson.IsSet() {
		return true
	}

	return false
}

// SetPayloadJson gets a reference to the given NullableString and assigns it to the PayloadJson field.
func (o *DssDeclaration) SetPayloadJson(v string) {
	o.PayloadJson.Set(&v)
}
// SetPayloadJsonNil sets the value for PayloadJson to be an explicit nil
func (o *DssDeclaration) SetPayloadJsonNil() {
	o.PayloadJson.Set(nil)
}

// UnsetPayloadJson ensures that no value is present for PayloadJson, not even an explicit nil
func (o *DssDeclaration) UnsetPayloadJson() {
	o.PayloadJson.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DssDeclaration) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DssDeclaration) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *DssDeclaration) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *DssDeclaration) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *DssDeclaration) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *DssDeclaration) UnsetType() {
	o.Type.Unset()
}

// GetGroup returns the Group field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DssDeclaration) GetGroup() string {
	if o == nil || IsNil(o.Group.Get()) {
		var ret string
		return ret
	}
	return *o.Group.Get()
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DssDeclaration) GetGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Group.Get(), o.Group.IsSet()
}

// HasGroup returns a boolean if a field has been set.
func (o *DssDeclaration) HasGroup() bool {
	if o != nil && o.Group.IsSet() {
		return true
	}

	return false
}

// SetGroup gets a reference to the given NullableString and assigns it to the Group field.
func (o *DssDeclaration) SetGroup(v string) {
	o.Group.Set(&v)
}
// SetGroupNil sets the value for Group to be an explicit nil
func (o *DssDeclaration) SetGroupNil() {
	o.Group.Set(nil)
}

// UnsetGroup ensures that no value is present for Group, not even an explicit nil
func (o *DssDeclaration) UnsetGroup() {
	o.Group.Unset()
}

func (o DssDeclaration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DssDeclaration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if o.PayloadJson.IsSet() {
		toSerialize["payloadJson"] = o.PayloadJson.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Group.IsSet() {
		toSerialize["group"] = o.Group.Get()
	}
	return toSerialize, nil
}

type NullableDssDeclaration struct {
	value *DssDeclaration
	isSet bool
}

func (v NullableDssDeclaration) Get() *DssDeclaration {
	return v.value
}

func (v *NullableDssDeclaration) Set(val *DssDeclaration) {
	v.value = val
	v.isSet = true
}

func (v NullableDssDeclaration) IsSet() bool {
	return v.isSet
}

func (v *NullableDssDeclaration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDssDeclaration(val *DssDeclaration) *NullableDssDeclaration {
	return &NullableDssDeclaration{value: val, isSet: true}
}

func (v NullableDssDeclaration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDssDeclaration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


