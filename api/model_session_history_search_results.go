/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SessionHistorySearchResults type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SessionHistorySearchResults{}

// SessionHistorySearchResults struct for SessionHistorySearchResults
type SessionHistorySearchResults struct {
	Results []SessionHistoryItem `json:"results"`
	TotalCount int64 `json:"totalCount"`
}

type _SessionHistorySearchResults SessionHistorySearchResults

// NewSessionHistorySearchResults instantiates a new SessionHistorySearchResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSessionHistorySearchResults(results []SessionHistoryItem, totalCount int64) *SessionHistorySearchResults {
	this := SessionHistorySearchResults{}
	this.Results = results
	this.TotalCount = totalCount
	return &this
}

// NewSessionHistorySearchResultsWithDefaults instantiates a new SessionHistorySearchResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionHistorySearchResultsWithDefaults() *SessionHistorySearchResults {
	this := SessionHistorySearchResults{}
	return &this
}

// GetResults returns the Results field value
func (o *SessionHistorySearchResults) GetResults() []SessionHistoryItem {
	if o == nil {
		var ret []SessionHistoryItem
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *SessionHistorySearchResults) GetResultsOk() ([]SessionHistoryItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *SessionHistorySearchResults) SetResults(v []SessionHistoryItem) {
	o.Results = v
}

// GetTotalCount returns the TotalCount field value
func (o *SessionHistorySearchResults) GetTotalCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value
// and a boolean to check if the value has been set.
func (o *SessionHistorySearchResults) GetTotalCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCount, true
}

// SetTotalCount sets field value
func (o *SessionHistorySearchResults) SetTotalCount(v int64) {
	o.TotalCount = v
}

func (o SessionHistorySearchResults) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SessionHistorySearchResults) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["results"] = o.Results
	toSerialize["totalCount"] = o.TotalCount
	return toSerialize, nil
}

func (o *SessionHistorySearchResults) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"results",
		"totalCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSessionHistorySearchResults := _SessionHistorySearchResults{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSessionHistorySearchResults)

	if err != nil {
		return err
	}

	*o = SessionHistorySearchResults(varSessionHistorySearchResults)

	return err
}

type NullableSessionHistorySearchResults struct {
	value *SessionHistorySearchResults
	isSet bool
}

func (v NullableSessionHistorySearchResults) Get() *SessionHistorySearchResults {
	return v.value
}

func (v *NullableSessionHistorySearchResults) Set(val *SessionHistorySearchResults) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionHistorySearchResults) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionHistorySearchResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionHistorySearchResults(val *SessionHistorySearchResults) *NullableSessionHistorySearchResults {
	return &NullableSessionHistorySearchResults{value: val, isSet: true}
}

func (v NullableSessionHistorySearchResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionHistorySearchResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


