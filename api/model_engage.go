/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// Engage struct for Engage
type Engage struct {
	IsEnabled *bool `json:"isEnabled,omitempty"`
}

// NewEngage instantiates a new Engage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEngage() *Engage {
	this := Engage{}
	return &this
}

// NewEngageWithDefaults instantiates a new Engage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEngageWithDefaults() *Engage {
	this := Engage{}
	return &this
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *Engage) GetIsEnabled() bool {
	if o == nil || o.IsEnabled == nil {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Engage) GetIsEnabledOk() (*bool, bool) {
	if o == nil || o.IsEnabled == nil {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *Engage) HasIsEnabled() bool {
	if o != nil && o.IsEnabled != nil {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *Engage) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

func (o Engage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsEnabled != nil {
		toSerialize["isEnabled"] = o.IsEnabled
	}
	return json.Marshal(toSerialize)
}

type NullableEngage struct {
	value *Engage
	isSet bool
}

func (v NullableEngage) Get() *Engage {
	return v.value
}

func (v *NullableEngage) Set(val *Engage) {
	v.value = val
	v.isSet = true
}

func (v NullableEngage) IsSet() bool {
	return v.isSet
}

func (v *NullableEngage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEngage(val *Engage) *NullableEngage {
	return &NullableEngage{value: val, isSet: true}
}

func (v NullableEngage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEngage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


