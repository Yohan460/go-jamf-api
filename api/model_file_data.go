/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the FileData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileData{}

// FileData Metadata pertaining to the file.
type FileData struct {
	// The name of the file
	FileName *string `json:"fileName,omitempty"`
	// The length in bytes
	Length *int64 `json:"length,omitempty"`
	// The MD5 in hex
	Md5 *string `json:"md5,omitempty"`
	// The region the file is hosted in
	Region *string `json:"region,omitempty"`
	// The SHA3_512 in hex
	Sha3 *string `json:"sha3,omitempty"`
}

// NewFileData instantiates a new FileData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileData() *FileData {
	this := FileData{}
	return &this
}

// NewFileDataWithDefaults instantiates a new FileData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileDataWithDefaults() *FileData {
	this := FileData{}
	return &this
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *FileData) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileData) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *FileData) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *FileData) SetFileName(v string) {
	o.FileName = &v
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *FileData) GetLength() int64 {
	if o == nil || IsNil(o.Length) {
		var ret int64
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileData) GetLengthOk() (*int64, bool) {
	if o == nil || IsNil(o.Length) {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *FileData) HasLength() bool {
	if o != nil && !IsNil(o.Length) {
		return true
	}

	return false
}

// SetLength gets a reference to the given int64 and assigns it to the Length field.
func (o *FileData) SetLength(v int64) {
	o.Length = &v
}

// GetMd5 returns the Md5 field value if set, zero value otherwise.
func (o *FileData) GetMd5() string {
	if o == nil || IsNil(o.Md5) {
		var ret string
		return ret
	}
	return *o.Md5
}

// GetMd5Ok returns a tuple with the Md5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileData) GetMd5Ok() (*string, bool) {
	if o == nil || IsNil(o.Md5) {
		return nil, false
	}
	return o.Md5, true
}

// HasMd5 returns a boolean if a field has been set.
func (o *FileData) HasMd5() bool {
	if o != nil && !IsNil(o.Md5) {
		return true
	}

	return false
}

// SetMd5 gets a reference to the given string and assigns it to the Md5 field.
func (o *FileData) SetMd5(v string) {
	o.Md5 = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *FileData) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileData) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *FileData) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *FileData) SetRegion(v string) {
	o.Region = &v
}

// GetSha3 returns the Sha3 field value if set, zero value otherwise.
func (o *FileData) GetSha3() string {
	if o == nil || IsNil(o.Sha3) {
		var ret string
		return ret
	}
	return *o.Sha3
}

// GetSha3Ok returns a tuple with the Sha3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileData) GetSha3Ok() (*string, bool) {
	if o == nil || IsNil(o.Sha3) {
		return nil, false
	}
	return o.Sha3, true
}

// HasSha3 returns a boolean if a field has been set.
func (o *FileData) HasSha3() bool {
	if o != nil && !IsNil(o.Sha3) {
		return true
	}

	return false
}

// SetSha3 gets a reference to the given string and assigns it to the Sha3 field.
func (o *FileData) SetSha3(v string) {
	o.Sha3 = &v
}

func (o FileData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FileName) {
		toSerialize["fileName"] = o.FileName
	}
	if !IsNil(o.Length) {
		toSerialize["length"] = o.Length
	}
	if !IsNil(o.Md5) {
		toSerialize["md5"] = o.Md5
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.Sha3) {
		toSerialize["sha3"] = o.Sha3
	}
	return toSerialize, nil
}

type NullableFileData struct {
	value *FileData
	isSet bool
}

func (v NullableFileData) Get() *FileData {
	return v.value
}

func (v *NullableFileData) Set(val *FileData) {
	v.value = val
	v.isSet = true
}

func (v NullableFileData) IsSet() bool {
	return v.isSet
}

func (v *NullableFileData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileData(val *FileData) *NullableFileData {
	return &NullableFileData{value: val, isSet: true}
}

func (v NullableFileData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


