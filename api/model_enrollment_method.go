/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// EnrollmentMethod struct for EnrollmentMethod
type EnrollmentMethod struct {
	Id *string `json:"id,omitempty"`
	ObjectName *string `json:"objectName,omitempty"`
	ObjectType *string `json:"objectType,omitempty"`
}

// NewEnrollmentMethod instantiates a new EnrollmentMethod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnrollmentMethod() *EnrollmentMethod {
	this := EnrollmentMethod{}
	return &this
}

// NewEnrollmentMethodWithDefaults instantiates a new EnrollmentMethod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnrollmentMethodWithDefaults() *EnrollmentMethod {
	this := EnrollmentMethod{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EnrollmentMethod) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentMethod) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EnrollmentMethod) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EnrollmentMethod) SetId(v string) {
	o.Id = &v
}

// GetObjectName returns the ObjectName field value if set, zero value otherwise.
func (o *EnrollmentMethod) GetObjectName() string {
	if o == nil || o.ObjectName == nil {
		var ret string
		return ret
	}
	return *o.ObjectName
}

// GetObjectNameOk returns a tuple with the ObjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentMethod) GetObjectNameOk() (*string, bool) {
	if o == nil || o.ObjectName == nil {
		return nil, false
	}
	return o.ObjectName, true
}

// HasObjectName returns a boolean if a field has been set.
func (o *EnrollmentMethod) HasObjectName() bool {
	if o != nil && o.ObjectName != nil {
		return true
	}

	return false
}

// SetObjectName gets a reference to the given string and assigns it to the ObjectName field.
func (o *EnrollmentMethod) SetObjectName(v string) {
	o.ObjectName = &v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *EnrollmentMethod) GetObjectType() string {
	if o == nil || o.ObjectType == nil {
		var ret string
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrollmentMethod) GetObjectTypeOk() (*string, bool) {
	if o == nil || o.ObjectType == nil {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *EnrollmentMethod) HasObjectType() bool {
	if o != nil && o.ObjectType != nil {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given string and assigns it to the ObjectType field.
func (o *EnrollmentMethod) SetObjectType(v string) {
	o.ObjectType = &v
}

func (o EnrollmentMethod) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ObjectName != nil {
		toSerialize["objectName"] = o.ObjectName
	}
	if o.ObjectType != nil {
		toSerialize["objectType"] = o.ObjectType
	}
	return json.Marshal(toSerialize)
}

type NullableEnrollmentMethod struct {
	value *EnrollmentMethod
	isSet bool
}

func (v NullableEnrollmentMethod) Get() *EnrollmentMethod {
	return v.value
}

func (v *NullableEnrollmentMethod) Set(val *EnrollmentMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableEnrollmentMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableEnrollmentMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnrollmentMethod(val *EnrollmentMethod) *NullableEnrollmentMethod {
	return &NullableEnrollmentMethod{value: val, isSet: true}
}

func (v NullableEnrollmentMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnrollmentMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


