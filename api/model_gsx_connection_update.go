/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the GsxConnectionUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GsxConnectionUpdate{}

// GsxConnectionUpdate struct for GsxConnectionUpdate
type GsxConnectionUpdate struct {
	Enabled *bool `json:"enabled,omitempty"`
	Username *string `json:"username,omitempty"`
	ServiceAccountNo *string `json:"serviceAccountNo,omitempty"`
	ShipToNo *string `json:"shipToNo,omitempty"`
	Token *string `json:"token,omitempty"`
	GsxKeystore *GsxKeystore `json:"gsxKeystore,omitempty"`
}

// NewGsxConnectionUpdate instantiates a new GsxConnectionUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGsxConnectionUpdate() *GsxConnectionUpdate {
	this := GsxConnectionUpdate{}
	var enabled bool = false
	this.Enabled = &enabled
	var username string = " "
	this.Username = &username
	return &this
}

// NewGsxConnectionUpdateWithDefaults instantiates a new GsxConnectionUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGsxConnectionUpdateWithDefaults() *GsxConnectionUpdate {
	this := GsxConnectionUpdate{}
	var enabled bool = false
	this.Enabled = &enabled
	var username string = " "
	this.Username = &username
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *GsxConnectionUpdate) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GsxConnectionUpdate) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *GsxConnectionUpdate) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *GsxConnectionUpdate) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *GsxConnectionUpdate) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GsxConnectionUpdate) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *GsxConnectionUpdate) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *GsxConnectionUpdate) SetUsername(v string) {
	o.Username = &v
}

// GetServiceAccountNo returns the ServiceAccountNo field value if set, zero value otherwise.
func (o *GsxConnectionUpdate) GetServiceAccountNo() string {
	if o == nil || IsNil(o.ServiceAccountNo) {
		var ret string
		return ret
	}
	return *o.ServiceAccountNo
}

// GetServiceAccountNoOk returns a tuple with the ServiceAccountNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GsxConnectionUpdate) GetServiceAccountNoOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceAccountNo) {
		return nil, false
	}
	return o.ServiceAccountNo, true
}

// HasServiceAccountNo returns a boolean if a field has been set.
func (o *GsxConnectionUpdate) HasServiceAccountNo() bool {
	if o != nil && !IsNil(o.ServiceAccountNo) {
		return true
	}

	return false
}

// SetServiceAccountNo gets a reference to the given string and assigns it to the ServiceAccountNo field.
func (o *GsxConnectionUpdate) SetServiceAccountNo(v string) {
	o.ServiceAccountNo = &v
}

// GetShipToNo returns the ShipToNo field value if set, zero value otherwise.
func (o *GsxConnectionUpdate) GetShipToNo() string {
	if o == nil || IsNil(o.ShipToNo) {
		var ret string
		return ret
	}
	return *o.ShipToNo
}

// GetShipToNoOk returns a tuple with the ShipToNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GsxConnectionUpdate) GetShipToNoOk() (*string, bool) {
	if o == nil || IsNil(o.ShipToNo) {
		return nil, false
	}
	return o.ShipToNo, true
}

// HasShipToNo returns a boolean if a field has been set.
func (o *GsxConnectionUpdate) HasShipToNo() bool {
	if o != nil && !IsNil(o.ShipToNo) {
		return true
	}

	return false
}

// SetShipToNo gets a reference to the given string and assigns it to the ShipToNo field.
func (o *GsxConnectionUpdate) SetShipToNo(v string) {
	o.ShipToNo = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *GsxConnectionUpdate) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GsxConnectionUpdate) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *GsxConnectionUpdate) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *GsxConnectionUpdate) SetToken(v string) {
	o.Token = &v
}

// GetGsxKeystore returns the GsxKeystore field value if set, zero value otherwise.
func (o *GsxConnectionUpdate) GetGsxKeystore() GsxKeystore {
	if o == nil || IsNil(o.GsxKeystore) {
		var ret GsxKeystore
		return ret
	}
	return *o.GsxKeystore
}

// GetGsxKeystoreOk returns a tuple with the GsxKeystore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GsxConnectionUpdate) GetGsxKeystoreOk() (*GsxKeystore, bool) {
	if o == nil || IsNil(o.GsxKeystore) {
		return nil, false
	}
	return o.GsxKeystore, true
}

// HasGsxKeystore returns a boolean if a field has been set.
func (o *GsxConnectionUpdate) HasGsxKeystore() bool {
	if o != nil && !IsNil(o.GsxKeystore) {
		return true
	}

	return false
}

// SetGsxKeystore gets a reference to the given GsxKeystore and assigns it to the GsxKeystore field.
func (o *GsxConnectionUpdate) SetGsxKeystore(v GsxKeystore) {
	o.GsxKeystore = &v
}

func (o GsxConnectionUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GsxConnectionUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.ServiceAccountNo) {
		toSerialize["serviceAccountNo"] = o.ServiceAccountNo
	}
	if !IsNil(o.ShipToNo) {
		toSerialize["shipToNo"] = o.ShipToNo
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.GsxKeystore) {
		toSerialize["gsxKeystore"] = o.GsxKeystore
	}
	return toSerialize, nil
}

type NullableGsxConnectionUpdate struct {
	value *GsxConnectionUpdate
	isSet bool
}

func (v NullableGsxConnectionUpdate) Get() *GsxConnectionUpdate {
	return v.value
}

func (v *NullableGsxConnectionUpdate) Set(val *GsxConnectionUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableGsxConnectionUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableGsxConnectionUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGsxConnectionUpdate(val *GsxConnectionUpdate) *NullableGsxConnectionUpdate {
	return &NullableGsxConnectionUpdate{value: val, isSet: true}
}

func (v NullableGsxConnectionUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGsxConnectionUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


