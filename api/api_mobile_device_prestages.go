/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
	"reflect"
)


type MobileDevicePrestagesAPI interface {

	/*
	V1MobileDevicePrestagesGet Search for sorted and paged Mobile Device Prestages 

	Search for sorted and paged mobile device prestages

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MobileDevicePrestagesAPIV1MobileDevicePrestagesGetRequest

	Deprecated
	*/
	V1MobileDevicePrestagesGet(ctx context.Context) MobileDevicePrestagesAPIV1MobileDevicePrestagesGetRequest

	// V1MobileDevicePrestagesGetExecute executes the request
	//  @return MobileDevicePrestageSearchResults
	// Deprecated
	V1MobileDevicePrestagesGetExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesGetRequest) (*MobileDevicePrestageSearchResults, *http.Response, error)

	/*
	V1MobileDevicePrestagesIdAttachmentsDelete Remove an attachment for a Mobile Device Prestage 

	Remove an attachment for a Mobile Device Prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Mobile Device Prestage identifier
	@return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdAttachmentsDeleteRequest

	Deprecated
	*/
	V1MobileDevicePrestagesIdAttachmentsDelete(ctx context.Context, id int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdAttachmentsDeleteRequest

	// V1MobileDevicePrestagesIdAttachmentsDeleteExecute executes the request
	// Deprecated
	V1MobileDevicePrestagesIdAttachmentsDeleteExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdAttachmentsDeleteRequest) (*http.Response, error)

	/*
	V1MobileDevicePrestagesIdAttachmentsGet Get attachments for a Mobile Device Prestage 

	Get attachments for a Mobile Device Prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Mobile Device Prestage identifier
	@return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdAttachmentsGetRequest

	Deprecated
	*/
	V1MobileDevicePrestagesIdAttachmentsGet(ctx context.Context, id int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdAttachmentsGetRequest

	// V1MobileDevicePrestagesIdAttachmentsGetExecute executes the request
	//  @return []FileAttachment
	// Deprecated
	V1MobileDevicePrestagesIdAttachmentsGetExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdAttachmentsGetRequest) ([]FileAttachment, *http.Response, error)

	/*
	V1MobileDevicePrestagesIdAttachmentsPost Add an attachment to a Mobile Device Prestage 

	Add an attachment to a Mobile Device prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Identifier of the Mobile Device Prestage the attachment should be assigned to
	@return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdAttachmentsPostRequest

	Deprecated
	*/
	V1MobileDevicePrestagesIdAttachmentsPost(ctx context.Context, id int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdAttachmentsPostRequest

	// V1MobileDevicePrestagesIdAttachmentsPostExecute executes the request
	//  @return PrestageFileAttachment
	// Deprecated
	V1MobileDevicePrestagesIdAttachmentsPostExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdAttachmentsPostRequest) (*PrestageFileAttachment, *http.Response, error)

	/*
	V1MobileDevicePrestagesIdDelete Delete a Mobile Device Prestage with the supplied id 

	Deletes a Mobile Device Prestage with the supplied id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Mobile Device Prestage identifier
	@return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdDeleteRequest

	Deprecated
	*/
	V1MobileDevicePrestagesIdDelete(ctx context.Context, id int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdDeleteRequest

	// V1MobileDevicePrestagesIdDeleteExecute executes the request
	// Deprecated
	V1MobileDevicePrestagesIdDeleteExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdDeleteRequest) (*http.Response, error)

	/*
	V1MobileDevicePrestagesIdGet Retrieve a Mobile Device Prestage with the supplied id 

	Retrieves a Mobile Device Prestage with the supplied id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Mobile Device Prestage identifier
	@return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdGetRequest

	Deprecated
	*/
	V1MobileDevicePrestagesIdGet(ctx context.Context, id int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdGetRequest

	// V1MobileDevicePrestagesIdGetExecute executes the request
	//  @return GetMobileDevicePrestage
	// Deprecated
	V1MobileDevicePrestagesIdGetExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdGetRequest) (*GetMobileDevicePrestage, *http.Response, error)

	/*
	V1MobileDevicePrestagesIdHistoryGet Get sorted and paged Mobile Device Prestage history objects 

	Gets sorted and paged mobile device prestage history objects

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Mobile Device Prestage identifier
	@return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdHistoryGetRequest

	Deprecated
	*/
	V1MobileDevicePrestagesIdHistoryGet(ctx context.Context, id int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdHistoryGetRequest

	// V1MobileDevicePrestagesIdHistoryGetExecute executes the request
	//  @return HistorySearchResults
	// Deprecated
	V1MobileDevicePrestagesIdHistoryGetExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdHistoryGetRequest) (*HistorySearchResults, *http.Response, error)

	/*
	V1MobileDevicePrestagesIdHistoryPost Add Mobile Device Prestage history object notes 

	Adds mobile device prestage history object notes

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Mobile Device Prestage identifier
	@return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdHistoryPostRequest

	Deprecated
	*/
	V1MobileDevicePrestagesIdHistoryPost(ctx context.Context, id int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdHistoryPostRequest

	// V1MobileDevicePrestagesIdHistoryPostExecute executes the request
	//  @return ObjectHistory
	// Deprecated
	V1MobileDevicePrestagesIdHistoryPostExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdHistoryPostRequest) (*ObjectHistory, *http.Response, error)

	/*
	V1MobileDevicePrestagesIdPut Update a Mobile Device Prestage 

	Updates a Mobile Device Prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Mobile Device Prestage identifier
	@return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdPutRequest

	Deprecated
	*/
	V1MobileDevicePrestagesIdPut(ctx context.Context, id int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdPutRequest

	// V1MobileDevicePrestagesIdPutExecute executes the request
	//  @return GetMobileDevicePrestage
	// Deprecated
	V1MobileDevicePrestagesIdPutExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdPutRequest) (*GetMobileDevicePrestage, *http.Response, error)

	/*
	V1MobileDevicePrestagesIdScopeDelete Remove Device Scope for a specific Mobile Device Prestage 

	Remove device scope for a specific mobile device prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Mobile Device Prestage identifier
	@return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopeDeleteRequest

	Deprecated
	*/
	V1MobileDevicePrestagesIdScopeDelete(ctx context.Context, id int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopeDeleteRequest

	// V1MobileDevicePrestagesIdScopeDeleteExecute executes the request
	//  @return PrestageScopeResponse
	// Deprecated
	V1MobileDevicePrestagesIdScopeDeleteExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopeDeleteRequest) (*PrestageScopeResponse, *http.Response, error)

	/*
	V1MobileDevicePrestagesIdScopeGet Get Device Scope for a specific Mobile Device Prestage 

	Get device scope for a specific mobile device prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Mobile Device Prestage identifier
	@return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopeGetRequest

	Deprecated
	*/
	V1MobileDevicePrestagesIdScopeGet(ctx context.Context, id int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopeGetRequest

	// V1MobileDevicePrestagesIdScopeGetExecute executes the request
	//  @return PrestageScopeResponse
	// Deprecated
	V1MobileDevicePrestagesIdScopeGetExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopeGetRequest) (*PrestageScopeResponse, *http.Response, error)

	/*
	V1MobileDevicePrestagesIdScopePost Add Device Scope for a specific Mobile Device Prestage 

	Add device scope for a specific mobile device prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Mobile Device Prestage identifier
	@return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopePostRequest

	Deprecated
	*/
	V1MobileDevicePrestagesIdScopePost(ctx context.Context, id int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopePostRequest

	// V1MobileDevicePrestagesIdScopePostExecute executes the request
	//  @return PrestageScopeResponse
	// Deprecated
	V1MobileDevicePrestagesIdScopePostExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopePostRequest) (*PrestageScopeResponse, *http.Response, error)

	/*
	V1MobileDevicePrestagesIdScopePut Replace Device Scope for a specific Mobile Device Prestage 

	Replace device scope for a specific mobile device prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Mobile Device Prestage identifier
	@return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopePutRequest

	Deprecated
	*/
	V1MobileDevicePrestagesIdScopePut(ctx context.Context, id int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopePutRequest

	// V1MobileDevicePrestagesIdScopePutExecute executes the request
	//  @return PrestageScopeResponse
	// Deprecated
	V1MobileDevicePrestagesIdScopePutExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopePutRequest) (*PrestageScopeResponse, *http.Response, error)

	/*
	V1MobileDevicePrestagesPost Create a Mobile Device Prestage 

	Create a mobile device prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MobileDevicePrestagesAPIV1MobileDevicePrestagesPostRequest

	Deprecated
	*/
	V1MobileDevicePrestagesPost(ctx context.Context) MobileDevicePrestagesAPIV1MobileDevicePrestagesPostRequest

	// V1MobileDevicePrestagesPostExecute executes the request
	//  @return GetMobileDevicePrestage
	// Deprecated
	V1MobileDevicePrestagesPostExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesPostRequest) (*GetMobileDevicePrestage, *http.Response, error)

	/*
	V1MobileDevicePrestagesScopeGet Get all Device Scope for all Mobile Device Prestages 

	Get all device scope for all mobile device prestages

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MobileDevicePrestagesAPIV1MobileDevicePrestagesScopeGetRequest

	Deprecated
	*/
	V1MobileDevicePrestagesScopeGet(ctx context.Context) MobileDevicePrestagesAPIV1MobileDevicePrestagesScopeGetRequest

	// V1MobileDevicePrestagesScopeGetExecute executes the request
	//  @return PrestageScope
	// Deprecated
	V1MobileDevicePrestagesScopeGetExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesScopeGetRequest) (*PrestageScope, *http.Response, error)

	/*
	V1MobileDevicePrestagesSyncGet Get all Prestage sync States for all prestages 

	Get all prestage sync states for all prestages

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MobileDevicePrestagesAPIV1MobileDevicePrestagesSyncGetRequest

	Deprecated
	*/
	V1MobileDevicePrestagesSyncGet(ctx context.Context) MobileDevicePrestagesAPIV1MobileDevicePrestagesSyncGetRequest

	// V1MobileDevicePrestagesSyncGetExecute executes the request
	//  @return []PrestageSyncStatus
	// Deprecated
	V1MobileDevicePrestagesSyncGetExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesSyncGetRequest) ([]PrestageSyncStatus, *http.Response, error)

	/*
	V1MobileDevicePrestagesSyncIdGet Get all prestage sync states for a single prestage 

	Get all prestage sync states for a single prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Mobile Device Prestage identifier
	@return MobileDevicePrestagesAPIV1MobileDevicePrestagesSyncIdGetRequest

	Deprecated
	*/
	V1MobileDevicePrestagesSyncIdGet(ctx context.Context, id int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesSyncIdGetRequest

	// V1MobileDevicePrestagesSyncIdGetExecute executes the request
	//  @return []PrestageSyncStatus
	// Deprecated
	V1MobileDevicePrestagesSyncIdGetExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesSyncIdGetRequest) ([]PrestageSyncStatus, *http.Response, error)

	/*
	V1MobileDevicePrestagesSyncIdLatestGet Get the latest Sync State for a single Prestage 

	Get the latest sync state for a single prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Mobile Device Prestage identifier
	@return MobileDevicePrestagesAPIV1MobileDevicePrestagesSyncIdLatestGetRequest

	Deprecated
	*/
	V1MobileDevicePrestagesSyncIdLatestGet(ctx context.Context, id int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesSyncIdLatestGetRequest

	// V1MobileDevicePrestagesSyncIdLatestGetExecute executes the request
	//  @return PrestageSyncStatus
	// Deprecated
	V1MobileDevicePrestagesSyncIdLatestGetExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesSyncIdLatestGetRequest) (*PrestageSyncStatus, *http.Response, error)

	/*
	V2MobileDevicePrestagesGet Get sorted and paged Mobile Device Prestages 

	Gets sorted and paged mobile device prestages

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MobileDevicePrestagesAPIV2MobileDevicePrestagesGetRequest
	*/
	V2MobileDevicePrestagesGet(ctx context.Context) MobileDevicePrestagesAPIV2MobileDevicePrestagesGetRequest

	// V2MobileDevicePrestagesGetExecute executes the request
	//  @return MobileDevicePrestageSearchResultsV2
	V2MobileDevicePrestagesGetExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesGetRequest) (*MobileDevicePrestageSearchResultsV2, *http.Response, error)

	/*
	V2MobileDevicePrestagesIdAttachmentsDeleteMultiplePost Remove an attachment for a Mobile Device Prestage 

	Remove an attachment for a Mobile Device Prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Mobile Device Prestage identifier
	@return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdAttachmentsDeleteMultiplePostRequest
	*/
	V2MobileDevicePrestagesIdAttachmentsDeleteMultiplePost(ctx context.Context, id string) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdAttachmentsDeleteMultiplePostRequest

	// V2MobileDevicePrestagesIdAttachmentsDeleteMultiplePostExecute executes the request
	V2MobileDevicePrestagesIdAttachmentsDeleteMultiplePostExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdAttachmentsDeleteMultiplePostRequest) (*http.Response, error)

	/*
	V2MobileDevicePrestagesIdAttachmentsGet Get attachments for a Mobile Device Prestage 

	Get attachments for a Mobile Device Prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Mobile Device Prestage identifier
	@return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdAttachmentsGetRequest
	*/
	V2MobileDevicePrestagesIdAttachmentsGet(ctx context.Context, id string) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdAttachmentsGetRequest

	// V2MobileDevicePrestagesIdAttachmentsGetExecute executes the request
	//  @return []FileAttachmentV2
	V2MobileDevicePrestagesIdAttachmentsGetExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdAttachmentsGetRequest) ([]FileAttachmentV2, *http.Response, error)

	/*
	V2MobileDevicePrestagesIdAttachmentsPost Add an attachment to a Mobile Device Prestage 

	Add an attachment to a Mobile Device prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Identifier of the Mobile Device Prestage the attachment should be assigned to
	@return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdAttachmentsPostRequest
	*/
	V2MobileDevicePrestagesIdAttachmentsPost(ctx context.Context, id string) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdAttachmentsPostRequest

	// V2MobileDevicePrestagesIdAttachmentsPostExecute executes the request
	//  @return PrestageFileAttachmentV2
	V2MobileDevicePrestagesIdAttachmentsPostExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdAttachmentsPostRequest) (*PrestageFileAttachmentV2, *http.Response, error)

	/*
	V2MobileDevicePrestagesIdDelete Delete a Mobile Device Prestage with the supplied id 

	Deletes a Mobile Device Prestage with the supplied id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Mobile Device Prestage identifier
	@return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdDeleteRequest
	*/
	V2MobileDevicePrestagesIdDelete(ctx context.Context, id string) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdDeleteRequest

	// V2MobileDevicePrestagesIdDeleteExecute executes the request
	V2MobileDevicePrestagesIdDeleteExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdDeleteRequest) (*http.Response, error)

	/*
	V2MobileDevicePrestagesIdGet Retrieve a Mobile Device Prestage with the supplied id 

	Retrieves a Mobile Device Prestage with the supplied id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Mobile Device Prestage identifier
	@return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdGetRequest
	*/
	V2MobileDevicePrestagesIdGet(ctx context.Context, id string) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdGetRequest

	// V2MobileDevicePrestagesIdGetExecute executes the request
	//  @return GetMobileDevicePrestageV2
	V2MobileDevicePrestagesIdGetExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdGetRequest) (*GetMobileDevicePrestageV2, *http.Response, error)

	/*
	V2MobileDevicePrestagesIdHistoryGet Get sorted and paged Mobile Device Prestage history objects 

	Gets sorted and paged mobile device prestage history objects

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Mobile Device Prestage identifier
	@return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdHistoryGetRequest
	*/
	V2MobileDevicePrestagesIdHistoryGet(ctx context.Context, id string) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdHistoryGetRequest

	// V2MobileDevicePrestagesIdHistoryGetExecute executes the request
	//  @return HistorySearchResults
	V2MobileDevicePrestagesIdHistoryGetExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdHistoryGetRequest) (*HistorySearchResults, *http.Response, error)

	/*
	V2MobileDevicePrestagesIdHistoryPost Add Mobile Device Prestage history object notes 

	Adds mobile device prestage history object notes

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Mobile Device Prestage identifier
	@return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdHistoryPostRequest
	*/
	V2MobileDevicePrestagesIdHistoryPost(ctx context.Context, id string) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdHistoryPostRequest

	// V2MobileDevicePrestagesIdHistoryPostExecute executes the request
	//  @return HrefResponse
	V2MobileDevicePrestagesIdHistoryPostExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdHistoryPostRequest) (*HrefResponse, *http.Response, error)

	/*
	V2MobileDevicePrestagesIdPut Update a Mobile Device Prestage 

	Updates a Mobile Device Prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Mobile Device Prestage identifier
	@return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdPutRequest
	*/
	V2MobileDevicePrestagesIdPut(ctx context.Context, id string) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdPutRequest

	// V2MobileDevicePrestagesIdPutExecute executes the request
	//  @return GetMobileDevicePrestageV2
	V2MobileDevicePrestagesIdPutExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdPutRequest) (*GetMobileDevicePrestageV2, *http.Response, error)

	/*
	V2MobileDevicePrestagesIdScopeDeleteMultiplePost Remove Device Scope for a specific Mobile Device Prestage 

	Remove device scope for a specific mobile device prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Mobile Device Prestage identifier
	@return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopeDeleteMultiplePostRequest
	*/
	V2MobileDevicePrestagesIdScopeDeleteMultiplePost(ctx context.Context, id string) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopeDeleteMultiplePostRequest

	// V2MobileDevicePrestagesIdScopeDeleteMultiplePostExecute executes the request
	//  @return PrestageScopeResponseV2
	V2MobileDevicePrestagesIdScopeDeleteMultiplePostExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopeDeleteMultiplePostRequest) (*PrestageScopeResponseV2, *http.Response, error)

	/*
	V2MobileDevicePrestagesIdScopeGet Get Device Scope for a specific Mobile Device Prestage 

	Get device scope for a specific mobile device prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Mobile Device Prestage identifier
	@return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopeGetRequest
	*/
	V2MobileDevicePrestagesIdScopeGet(ctx context.Context, id string) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopeGetRequest

	// V2MobileDevicePrestagesIdScopeGetExecute executes the request
	//  @return PrestageScopeResponseV2
	V2MobileDevicePrestagesIdScopeGetExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopeGetRequest) (*PrestageScopeResponseV2, *http.Response, error)

	/*
	V2MobileDevicePrestagesIdScopePost Add Device Scope for a specific Mobile Device Prestage 

	Add device scope for a specific mobile device prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Mobile Device Prestage identifier
	@return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopePostRequest
	*/
	V2MobileDevicePrestagesIdScopePost(ctx context.Context, id string) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopePostRequest

	// V2MobileDevicePrestagesIdScopePostExecute executes the request
	//  @return PrestageScopeResponseV2
	V2MobileDevicePrestagesIdScopePostExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopePostRequest) (*PrestageScopeResponseV2, *http.Response, error)

	/*
	V2MobileDevicePrestagesIdScopePut Replace Device Scope for a specific Mobile Device Prestage 

	Replace device scope for a specific mobile device prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Mobile Device Prestage identifier
	@return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopePutRequest
	*/
	V2MobileDevicePrestagesIdScopePut(ctx context.Context, id string) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopePutRequest

	// V2MobileDevicePrestagesIdScopePutExecute executes the request
	//  @return PrestageScopeResponseV2
	V2MobileDevicePrestagesIdScopePutExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopePutRequest) (*PrestageScopeResponseV2, *http.Response, error)

	/*
	V2MobileDevicePrestagesIdSyncsGet Get all prestage sync states for a single prestage 

	Get all prestage sync states for a single prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Mobile Device Prestage identifier
	@return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdSyncsGetRequest
	*/
	V2MobileDevicePrestagesIdSyncsGet(ctx context.Context, id string) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdSyncsGetRequest

	// V2MobileDevicePrestagesIdSyncsGetExecute executes the request
	//  @return []PrestageSyncStatusV2
	V2MobileDevicePrestagesIdSyncsGetExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdSyncsGetRequest) ([]PrestageSyncStatusV2, *http.Response, error)

	/*
	V2MobileDevicePrestagesIdSyncsLatestGet Get the latest Sync State for a single Prestage 

	Get the latest sync state for a single prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Mobile Device Prestage identifier
	@return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdSyncsLatestGetRequest
	*/
	V2MobileDevicePrestagesIdSyncsLatestGet(ctx context.Context, id string) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdSyncsLatestGetRequest

	// V2MobileDevicePrestagesIdSyncsLatestGetExecute executes the request
	//  @return PrestageSyncStatusV2
	V2MobileDevicePrestagesIdSyncsLatestGetExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdSyncsLatestGetRequest) (*PrestageSyncStatusV2, *http.Response, error)

	/*
	V2MobileDevicePrestagesPost Create a Mobile Device Prestage 

	Create a mobile device prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MobileDevicePrestagesAPIV2MobileDevicePrestagesPostRequest
	*/
	V2MobileDevicePrestagesPost(ctx context.Context) MobileDevicePrestagesAPIV2MobileDevicePrestagesPostRequest

	// V2MobileDevicePrestagesPostExecute executes the request
	//  @return HrefResponse
	V2MobileDevicePrestagesPostExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesPostRequest) (*HrefResponse, *http.Response, error)

	/*
	V2MobileDevicePrestagesScopeGet Get all Device Scope for all Mobile Device Prestages 

	Get all device scope for all mobile device prestages

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MobileDevicePrestagesAPIV2MobileDevicePrestagesScopeGetRequest
	*/
	V2MobileDevicePrestagesScopeGet(ctx context.Context) MobileDevicePrestagesAPIV2MobileDevicePrestagesScopeGetRequest

	// V2MobileDevicePrestagesScopeGetExecute executes the request
	//  @return PrestageScopeV2
	V2MobileDevicePrestagesScopeGetExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesScopeGetRequest) (*PrestageScopeV2, *http.Response, error)

	/*
	V2MobileDevicePrestagesSyncsGet Get all Prestage sync States for all prestages 

	Get all prestage sync states for all prestages

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MobileDevicePrestagesAPIV2MobileDevicePrestagesSyncsGetRequest
	*/
	V2MobileDevicePrestagesSyncsGet(ctx context.Context) MobileDevicePrestagesAPIV2MobileDevicePrestagesSyncsGetRequest

	// V2MobileDevicePrestagesSyncsGetExecute executes the request
	//  @return []PrestageSyncStatusV2
	V2MobileDevicePrestagesSyncsGetExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesSyncsGetRequest) ([]PrestageSyncStatusV2, *http.Response, error)
}

// MobileDevicePrestagesAPIService MobileDevicePrestagesAPI service
type MobileDevicePrestagesAPIService service

type MobileDevicePrestagesAPIV1MobileDevicePrestagesGetRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	page *int64
	size *int64
	pagesize *int64
	pageSize *int64
	sort *string
}

func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesGetRequest) Page(page int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesGetRequest {
	r.page = &page
	return r
}

// Deprecated
func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesGetRequest) Size(size int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesGetRequest {
	r.size = &size
	return r
}

// Deprecated
func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesGetRequest) Pagesize(pagesize int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesGetRequest {
	r.pagesize = &pagesize
	return r
}

func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesGetRequest) PageSize(pageSize int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc 
func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesGetRequest) Sort(sort string) MobileDevicePrestagesAPIV1MobileDevicePrestagesGetRequest {
	r.sort = &sort
	return r
}

func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesGetRequest) Execute() (*MobileDevicePrestageSearchResults, *http.Response, error) {
	return r.ApiService.V1MobileDevicePrestagesGetExecute(r)
}

/*
V1MobileDevicePrestagesGet Search for sorted and paged Mobile Device Prestages 

Search for sorted and paged mobile device prestages

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MobileDevicePrestagesAPIV1MobileDevicePrestagesGetRequest

Deprecated
*/
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesGet(ctx context.Context) MobileDevicePrestagesAPIV1MobileDevicePrestagesGetRequest {
	return MobileDevicePrestagesAPIV1MobileDevicePrestagesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MobileDevicePrestageSearchResults
// Deprecated
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesGetExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesGetRequest) (*MobileDevicePrestageSearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MobileDevicePrestageSearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V1MobileDevicePrestagesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/mobile-device-prestages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int64 = 0
		r.page = &defaultValue
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	} else {
		var defaultValue int64 = 100
		r.size = &defaultValue
	}
	if r.pagesize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pagesize", r.pagesize, "")
	} else {
		var defaultValue int64 = 100
		r.pagesize = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int64 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	} else {
		var defaultValue string = "id:asc"
		r.sort = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV1MobileDevicePrestagesIdAttachmentsDeleteRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	id int64
	fileAttachmentDelete *FileAttachmentDelete
}

func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdAttachmentsDeleteRequest) FileAttachmentDelete(fileAttachmentDelete FileAttachmentDelete) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdAttachmentsDeleteRequest {
	r.fileAttachmentDelete = &fileAttachmentDelete
	return r
}

func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdAttachmentsDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1MobileDevicePrestagesIdAttachmentsDeleteExecute(r)
}

/*
V1MobileDevicePrestagesIdAttachmentsDelete Remove an attachment for a Mobile Device Prestage 

Remove an attachment for a Mobile Device Prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Mobile Device Prestage identifier
 @return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdAttachmentsDeleteRequest

Deprecated
*/
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesIdAttachmentsDelete(ctx context.Context, id int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdAttachmentsDeleteRequest {
	return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdAttachmentsDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
// Deprecated
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesIdAttachmentsDeleteExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdAttachmentsDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V1MobileDevicePrestagesIdAttachmentsDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/mobile-device-prestages/{id}/attachments"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fileAttachmentDelete == nil {
		return nil, reportError("fileAttachmentDelete is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.fileAttachmentDelete
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV1MobileDevicePrestagesIdAttachmentsGetRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	id int64
}

func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdAttachmentsGetRequest) Execute() ([]FileAttachment, *http.Response, error) {
	return r.ApiService.V1MobileDevicePrestagesIdAttachmentsGetExecute(r)
}

/*
V1MobileDevicePrestagesIdAttachmentsGet Get attachments for a Mobile Device Prestage 

Get attachments for a Mobile Device Prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Mobile Device Prestage identifier
 @return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdAttachmentsGetRequest

Deprecated
*/
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesIdAttachmentsGet(ctx context.Context, id int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdAttachmentsGetRequest {
	return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdAttachmentsGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []FileAttachment
// Deprecated
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesIdAttachmentsGetExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdAttachmentsGetRequest) ([]FileAttachment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []FileAttachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V1MobileDevicePrestagesIdAttachmentsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/mobile-device-prestages/{id}/attachments"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV1MobileDevicePrestagesIdAttachmentsPostRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	id int64
	file *os.File
}

// The file to upload
func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdAttachmentsPostRequest) File(file *os.File) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdAttachmentsPostRequest {
	r.file = file
	return r
}

func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdAttachmentsPostRequest) Execute() (*PrestageFileAttachment, *http.Response, error) {
	return r.ApiService.V1MobileDevicePrestagesIdAttachmentsPostExecute(r)
}

/*
V1MobileDevicePrestagesIdAttachmentsPost Add an attachment to a Mobile Device Prestage 

Add an attachment to a Mobile Device prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Identifier of the Mobile Device Prestage the attachment should be assigned to
 @return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdAttachmentsPostRequest

Deprecated
*/
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesIdAttachmentsPost(ctx context.Context, id int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdAttachmentsPostRequest {
	return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdAttachmentsPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PrestageFileAttachment
// Deprecated
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesIdAttachmentsPostExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdAttachmentsPostRequest) (*PrestageFileAttachment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrestageFileAttachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V1MobileDevicePrestagesIdAttachmentsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/mobile-device-prestages/{id}/attachments"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.file == nil {
		return localVarReturnValue, nil, reportError("file is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var fileLocalVarFormFileName string
	var fileLocalVarFileName     string
	var fileLocalVarFileBytes    []byte

	fileLocalVarFormFileName = "file"
	fileLocalVarFile := r.file

	if fileLocalVarFile != nil {
		fbs, _ := io.ReadAll(fileLocalVarFile)

		fileLocalVarFileBytes = fbs
		fileLocalVarFileName = fileLocalVarFile.Name()
		fileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: fileLocalVarFileBytes, fileName: fileLocalVarFileName, formFileName: fileLocalVarFormFileName})
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 413 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV1MobileDevicePrestagesIdDeleteRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	id int64
}

func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1MobileDevicePrestagesIdDeleteExecute(r)
}

/*
V1MobileDevicePrestagesIdDelete Delete a Mobile Device Prestage with the supplied id 

Deletes a Mobile Device Prestage with the supplied id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Mobile Device Prestage identifier
 @return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdDeleteRequest

Deprecated
*/
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesIdDelete(ctx context.Context, id int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdDeleteRequest {
	return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
// Deprecated
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesIdDeleteExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V1MobileDevicePrestagesIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/mobile-device-prestages/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV1MobileDevicePrestagesIdGetRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	id int64
}

func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdGetRequest) Execute() (*GetMobileDevicePrestage, *http.Response, error) {
	return r.ApiService.V1MobileDevicePrestagesIdGetExecute(r)
}

/*
V1MobileDevicePrestagesIdGet Retrieve a Mobile Device Prestage with the supplied id 

Retrieves a Mobile Device Prestage with the supplied id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Mobile Device Prestage identifier
 @return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdGetRequest

Deprecated
*/
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesIdGet(ctx context.Context, id int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdGetRequest {
	return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetMobileDevicePrestage
// Deprecated
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesIdGetExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdGetRequest) (*GetMobileDevicePrestage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetMobileDevicePrestage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V1MobileDevicePrestagesIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/mobile-device-prestages/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV1MobileDevicePrestagesIdHistoryGetRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	id int64
	page *int64
	size *int64
	pagesize *int64
	pageSize *int64
	sort *[]string
}

func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdHistoryGetRequest) Page(page int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdHistoryGetRequest {
	r.page = &page
	return r
}

// Deprecated
func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdHistoryGetRequest) Size(size int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdHistoryGetRequest {
	r.size = &size
	return r
}

// Deprecated
func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdHistoryGetRequest) Pagesize(pagesize int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdHistoryGetRequest {
	r.pagesize = &pagesize
	return r
}

func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdHistoryGetRequest) PageSize(pageSize int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdHistoryGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property,asc/desc. Default sort order is descending. Multiple sort criteria are supported and must be entered on separate lines in Swagger UI. In the URI the &#39;sort&#39; query param is duplicated for each sort criterion, e.g., ...&amp;sort&#x3D;name%2Casc&amp;sort&#x3D;date%2Cdesc
func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdHistoryGetRequest) Sort(sort []string) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdHistoryGetRequest {
	r.sort = &sort
	return r
}

func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdHistoryGetRequest) Execute() (*HistorySearchResults, *http.Response, error) {
	return r.ApiService.V1MobileDevicePrestagesIdHistoryGetExecute(r)
}

/*
V1MobileDevicePrestagesIdHistoryGet Get sorted and paged Mobile Device Prestage history objects 

Gets sorted and paged mobile device prestage history objects

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Mobile Device Prestage identifier
 @return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdHistoryGetRequest

Deprecated
*/
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesIdHistoryGet(ctx context.Context, id int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdHistoryGetRequest {
	return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdHistoryGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return HistorySearchResults
// Deprecated
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesIdHistoryGetExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdHistoryGetRequest) (*HistorySearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HistorySearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V1MobileDevicePrestagesIdHistoryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/mobile-device-prestages/{id}/history"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int64 = 0
		r.page = &defaultValue
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	} else {
		var defaultValue int64 = 100
		r.size = &defaultValue
	}
	if r.pagesize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pagesize", r.pagesize, "")
	} else {
		var defaultValue int64 = 100
		r.pagesize = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int64 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		defaultValue := []string{"date:desc"}
		r.sort = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV1MobileDevicePrestagesIdHistoryPostRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	id int64
	objectHistoryNote *ObjectHistoryNote
}

// History notes to create
func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdHistoryPostRequest) ObjectHistoryNote(objectHistoryNote ObjectHistoryNote) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdHistoryPostRequest {
	r.objectHistoryNote = &objectHistoryNote
	return r
}

func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdHistoryPostRequest) Execute() (*ObjectHistory, *http.Response, error) {
	return r.ApiService.V1MobileDevicePrestagesIdHistoryPostExecute(r)
}

/*
V1MobileDevicePrestagesIdHistoryPost Add Mobile Device Prestage history object notes 

Adds mobile device prestage history object notes

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Mobile Device Prestage identifier
 @return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdHistoryPostRequest

Deprecated
*/
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesIdHistoryPost(ctx context.Context, id int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdHistoryPostRequest {
	return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdHistoryPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ObjectHistory
// Deprecated
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesIdHistoryPostExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdHistoryPostRequest) (*ObjectHistory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectHistory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V1MobileDevicePrestagesIdHistoryPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/mobile-device-prestages/{id}/history"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.objectHistoryNote == nil {
		return localVarReturnValue, nil, reportError("objectHistoryNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.objectHistoryNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV1MobileDevicePrestagesIdPutRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	id int64
	putMobileDevicePrestage *PutMobileDevicePrestage
}

// Mobile Device Prestage to update
func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdPutRequest) PutMobileDevicePrestage(putMobileDevicePrestage PutMobileDevicePrestage) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdPutRequest {
	r.putMobileDevicePrestage = &putMobileDevicePrestage
	return r
}

func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdPutRequest) Execute() (*GetMobileDevicePrestage, *http.Response, error) {
	return r.ApiService.V1MobileDevicePrestagesIdPutExecute(r)
}

/*
V1MobileDevicePrestagesIdPut Update a Mobile Device Prestage 

Updates a Mobile Device Prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Mobile Device Prestage identifier
 @return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdPutRequest

Deprecated
*/
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesIdPut(ctx context.Context, id int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdPutRequest {
	return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetMobileDevicePrestage
// Deprecated
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesIdPutExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdPutRequest) (*GetMobileDevicePrestage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetMobileDevicePrestage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V1MobileDevicePrestagesIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/mobile-device-prestages/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.putMobileDevicePrestage == nil {
		return localVarReturnValue, nil, reportError("putMobileDevicePrestage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.putMobileDevicePrestage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopeDeleteRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	id int64
	prestageScopeUpdate *PrestageScopeUpdate
}

// Serial Numbers to remove from scope
func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopeDeleteRequest) PrestageScopeUpdate(prestageScopeUpdate PrestageScopeUpdate) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopeDeleteRequest {
	r.prestageScopeUpdate = &prestageScopeUpdate
	return r
}

func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopeDeleteRequest) Execute() (*PrestageScopeResponse, *http.Response, error) {
	return r.ApiService.V1MobileDevicePrestagesIdScopeDeleteExecute(r)
}

/*
V1MobileDevicePrestagesIdScopeDelete Remove Device Scope for a specific Mobile Device Prestage 

Remove device scope for a specific mobile device prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Mobile Device Prestage identifier
 @return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopeDeleteRequest

Deprecated
*/
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesIdScopeDelete(ctx context.Context, id int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopeDeleteRequest {
	return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopeDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PrestageScopeResponse
// Deprecated
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesIdScopeDeleteExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopeDeleteRequest) (*PrestageScopeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrestageScopeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V1MobileDevicePrestagesIdScopeDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/mobile-device-prestages/{id}/scope"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.prestageScopeUpdate == nil {
		return localVarReturnValue, nil, reportError("prestageScopeUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.prestageScopeUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopeGetRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	id int64
}

func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopeGetRequest) Execute() (*PrestageScopeResponse, *http.Response, error) {
	return r.ApiService.V1MobileDevicePrestagesIdScopeGetExecute(r)
}

/*
V1MobileDevicePrestagesIdScopeGet Get Device Scope for a specific Mobile Device Prestage 

Get device scope for a specific mobile device prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Mobile Device Prestage identifier
 @return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopeGetRequest

Deprecated
*/
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesIdScopeGet(ctx context.Context, id int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopeGetRequest {
	return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopeGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PrestageScopeResponse
// Deprecated
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesIdScopeGetExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopeGetRequest) (*PrestageScopeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrestageScopeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V1MobileDevicePrestagesIdScopeGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/mobile-device-prestages/{id}/scope"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopePostRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	id int64
	prestageScopeUpdate *PrestageScopeUpdate
}

// Serial Numbers to scope
func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopePostRequest) PrestageScopeUpdate(prestageScopeUpdate PrestageScopeUpdate) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopePostRequest {
	r.prestageScopeUpdate = &prestageScopeUpdate
	return r
}

func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopePostRequest) Execute() (*PrestageScopeResponse, *http.Response, error) {
	return r.ApiService.V1MobileDevicePrestagesIdScopePostExecute(r)
}

/*
V1MobileDevicePrestagesIdScopePost Add Device Scope for a specific Mobile Device Prestage 

Add device scope for a specific mobile device prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Mobile Device Prestage identifier
 @return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopePostRequest

Deprecated
*/
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesIdScopePost(ctx context.Context, id int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopePostRequest {
	return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopePostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PrestageScopeResponse
// Deprecated
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesIdScopePostExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopePostRequest) (*PrestageScopeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrestageScopeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V1MobileDevicePrestagesIdScopePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/mobile-device-prestages/{id}/scope"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.prestageScopeUpdate == nil {
		return localVarReturnValue, nil, reportError("prestageScopeUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.prestageScopeUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopePutRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	id int64
	prestageScopeUpdate *PrestageScopeUpdate
}

// Serial Numbers to scope
func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopePutRequest) PrestageScopeUpdate(prestageScopeUpdate PrestageScopeUpdate) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopePutRequest {
	r.prestageScopeUpdate = &prestageScopeUpdate
	return r
}

func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopePutRequest) Execute() (*PrestageScopeResponse, *http.Response, error) {
	return r.ApiService.V1MobileDevicePrestagesIdScopePutExecute(r)
}

/*
V1MobileDevicePrestagesIdScopePut Replace Device Scope for a specific Mobile Device Prestage 

Replace device scope for a specific mobile device prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Mobile Device Prestage identifier
 @return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopePutRequest

Deprecated
*/
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesIdScopePut(ctx context.Context, id int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopePutRequest {
	return MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopePutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PrestageScopeResponse
// Deprecated
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesIdScopePutExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesIdScopePutRequest) (*PrestageScopeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrestageScopeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V1MobileDevicePrestagesIdScopePut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/mobile-device-prestages/{id}/scope"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.prestageScopeUpdate == nil {
		return localVarReturnValue, nil, reportError("prestageScopeUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.prestageScopeUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV1MobileDevicePrestagesPostRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	mobileDevicePrestage *MobileDevicePrestage
}

// Mobile Device Prestage to create. ids defined in this body will be ignored
func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesPostRequest) MobileDevicePrestage(mobileDevicePrestage MobileDevicePrestage) MobileDevicePrestagesAPIV1MobileDevicePrestagesPostRequest {
	r.mobileDevicePrestage = &mobileDevicePrestage
	return r
}

func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesPostRequest) Execute() (*GetMobileDevicePrestage, *http.Response, error) {
	return r.ApiService.V1MobileDevicePrestagesPostExecute(r)
}

/*
V1MobileDevicePrestagesPost Create a Mobile Device Prestage 

Create a mobile device prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MobileDevicePrestagesAPIV1MobileDevicePrestagesPostRequest

Deprecated
*/
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesPost(ctx context.Context) MobileDevicePrestagesAPIV1MobileDevicePrestagesPostRequest {
	return MobileDevicePrestagesAPIV1MobileDevicePrestagesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetMobileDevicePrestage
// Deprecated
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesPostExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesPostRequest) (*GetMobileDevicePrestage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetMobileDevicePrestage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V1MobileDevicePrestagesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/mobile-device-prestages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.mobileDevicePrestage == nil {
		return localVarReturnValue, nil, reportError("mobileDevicePrestage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.mobileDevicePrestage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV1MobileDevicePrestagesScopeGetRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
}

func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesScopeGetRequest) Execute() (*PrestageScope, *http.Response, error) {
	return r.ApiService.V1MobileDevicePrestagesScopeGetExecute(r)
}

/*
V1MobileDevicePrestagesScopeGet Get all Device Scope for all Mobile Device Prestages 

Get all device scope for all mobile device prestages

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MobileDevicePrestagesAPIV1MobileDevicePrestagesScopeGetRequest

Deprecated
*/
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesScopeGet(ctx context.Context) MobileDevicePrestagesAPIV1MobileDevicePrestagesScopeGetRequest {
	return MobileDevicePrestagesAPIV1MobileDevicePrestagesScopeGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PrestageScope
// Deprecated
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesScopeGetExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesScopeGetRequest) (*PrestageScope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrestageScope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V1MobileDevicePrestagesScopeGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/mobile-device-prestages/scope"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV1MobileDevicePrestagesSyncGetRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
}

func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesSyncGetRequest) Execute() ([]PrestageSyncStatus, *http.Response, error) {
	return r.ApiService.V1MobileDevicePrestagesSyncGetExecute(r)
}

/*
V1MobileDevicePrestagesSyncGet Get all Prestage sync States for all prestages 

Get all prestage sync states for all prestages

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MobileDevicePrestagesAPIV1MobileDevicePrestagesSyncGetRequest

Deprecated
*/
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesSyncGet(ctx context.Context) MobileDevicePrestagesAPIV1MobileDevicePrestagesSyncGetRequest {
	return MobileDevicePrestagesAPIV1MobileDevicePrestagesSyncGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []PrestageSyncStatus
// Deprecated
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesSyncGetExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesSyncGetRequest) ([]PrestageSyncStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PrestageSyncStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V1MobileDevicePrestagesSyncGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/mobile-device-prestages/sync"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV1MobileDevicePrestagesSyncIdGetRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	id int64
}

func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesSyncIdGetRequest) Execute() ([]PrestageSyncStatus, *http.Response, error) {
	return r.ApiService.V1MobileDevicePrestagesSyncIdGetExecute(r)
}

/*
V1MobileDevicePrestagesSyncIdGet Get all prestage sync states for a single prestage 

Get all prestage sync states for a single prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Mobile Device Prestage identifier
 @return MobileDevicePrestagesAPIV1MobileDevicePrestagesSyncIdGetRequest

Deprecated
*/
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesSyncIdGet(ctx context.Context, id int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesSyncIdGetRequest {
	return MobileDevicePrestagesAPIV1MobileDevicePrestagesSyncIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []PrestageSyncStatus
// Deprecated
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesSyncIdGetExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesSyncIdGetRequest) ([]PrestageSyncStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PrestageSyncStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V1MobileDevicePrestagesSyncIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/mobile-device-prestages/sync/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV1MobileDevicePrestagesSyncIdLatestGetRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	id int64
}

func (r MobileDevicePrestagesAPIV1MobileDevicePrestagesSyncIdLatestGetRequest) Execute() (*PrestageSyncStatus, *http.Response, error) {
	return r.ApiService.V1MobileDevicePrestagesSyncIdLatestGetExecute(r)
}

/*
V1MobileDevicePrestagesSyncIdLatestGet Get the latest Sync State for a single Prestage 

Get the latest sync state for a single prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Mobile Device Prestage identifier
 @return MobileDevicePrestagesAPIV1MobileDevicePrestagesSyncIdLatestGetRequest

Deprecated
*/
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesSyncIdLatestGet(ctx context.Context, id int64) MobileDevicePrestagesAPIV1MobileDevicePrestagesSyncIdLatestGetRequest {
	return MobileDevicePrestagesAPIV1MobileDevicePrestagesSyncIdLatestGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PrestageSyncStatus
// Deprecated
func (a *MobileDevicePrestagesAPIService) V1MobileDevicePrestagesSyncIdLatestGetExecute(r MobileDevicePrestagesAPIV1MobileDevicePrestagesSyncIdLatestGetRequest) (*PrestageSyncStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrestageSyncStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V1MobileDevicePrestagesSyncIdLatestGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/mobile-device-prestages/sync/{id}/latest"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV2MobileDevicePrestagesGetRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	page *int64
	pageSize *int64
	sort *[]string
}

func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesGetRequest) Page(page int64) MobileDevicePrestagesAPIV2MobileDevicePrestagesGetRequest {
	r.page = &page
	return r
}

func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesGetRequest) PageSize(pageSize int64) MobileDevicePrestagesAPIV2MobileDevicePrestagesGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc 
func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesGetRequest) Sort(sort []string) MobileDevicePrestagesAPIV2MobileDevicePrestagesGetRequest {
	r.sort = &sort
	return r
}

func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesGetRequest) Execute() (*MobileDevicePrestageSearchResultsV2, *http.Response, error) {
	return r.ApiService.V2MobileDevicePrestagesGetExecute(r)
}

/*
V2MobileDevicePrestagesGet Get sorted and paged Mobile Device Prestages 

Gets sorted and paged mobile device prestages

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MobileDevicePrestagesAPIV2MobileDevicePrestagesGetRequest
*/
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesGet(ctx context.Context) MobileDevicePrestagesAPIV2MobileDevicePrestagesGetRequest {
	return MobileDevicePrestagesAPIV2MobileDevicePrestagesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MobileDevicePrestageSearchResultsV2
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesGetExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesGetRequest) (*MobileDevicePrestageSearchResultsV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MobileDevicePrestageSearchResultsV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V2MobileDevicePrestagesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/mobile-device-prestages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int64 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int64 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		defaultValue := []string{"id:desc"}
		r.sort = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV2MobileDevicePrestagesIdAttachmentsDeleteMultiplePostRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	id string
	ids *Ids
}

func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdAttachmentsDeleteMultiplePostRequest) Ids(ids Ids) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdAttachmentsDeleteMultiplePostRequest {
	r.ids = &ids
	return r
}

func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdAttachmentsDeleteMultiplePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.V2MobileDevicePrestagesIdAttachmentsDeleteMultiplePostExecute(r)
}

/*
V2MobileDevicePrestagesIdAttachmentsDeleteMultiplePost Remove an attachment for a Mobile Device Prestage 

Remove an attachment for a Mobile Device Prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Mobile Device Prestage identifier
 @return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdAttachmentsDeleteMultiplePostRequest
*/
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesIdAttachmentsDeleteMultiplePost(ctx context.Context, id string) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdAttachmentsDeleteMultiplePostRequest {
	return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdAttachmentsDeleteMultiplePostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesIdAttachmentsDeleteMultiplePostExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdAttachmentsDeleteMultiplePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V2MobileDevicePrestagesIdAttachmentsDeleteMultiplePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/mobile-device-prestages/{id}/attachments/delete-multiple"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ids == nil {
		return nil, reportError("ids is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ids
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV2MobileDevicePrestagesIdAttachmentsGetRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	id string
}

func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdAttachmentsGetRequest) Execute() ([]FileAttachmentV2, *http.Response, error) {
	return r.ApiService.V2MobileDevicePrestagesIdAttachmentsGetExecute(r)
}

/*
V2MobileDevicePrestagesIdAttachmentsGet Get attachments for a Mobile Device Prestage 

Get attachments for a Mobile Device Prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Mobile Device Prestage identifier
 @return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdAttachmentsGetRequest
*/
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesIdAttachmentsGet(ctx context.Context, id string) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdAttachmentsGetRequest {
	return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdAttachmentsGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []FileAttachmentV2
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesIdAttachmentsGetExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdAttachmentsGetRequest) ([]FileAttachmentV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []FileAttachmentV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V2MobileDevicePrestagesIdAttachmentsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/mobile-device-prestages/{id}/attachments"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV2MobileDevicePrestagesIdAttachmentsPostRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	id string
	file *os.File
}

// The file to upload
func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdAttachmentsPostRequest) File(file *os.File) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdAttachmentsPostRequest {
	r.file = file
	return r
}

func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdAttachmentsPostRequest) Execute() (*PrestageFileAttachmentV2, *http.Response, error) {
	return r.ApiService.V2MobileDevicePrestagesIdAttachmentsPostExecute(r)
}

/*
V2MobileDevicePrestagesIdAttachmentsPost Add an attachment to a Mobile Device Prestage 

Add an attachment to a Mobile Device prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Identifier of the Mobile Device Prestage the attachment should be assigned to
 @return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdAttachmentsPostRequest
*/
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesIdAttachmentsPost(ctx context.Context, id string) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdAttachmentsPostRequest {
	return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdAttachmentsPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PrestageFileAttachmentV2
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesIdAttachmentsPostExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdAttachmentsPostRequest) (*PrestageFileAttachmentV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrestageFileAttachmentV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V2MobileDevicePrestagesIdAttachmentsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/mobile-device-prestages/{id}/attachments"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.file == nil {
		return localVarReturnValue, nil, reportError("file is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var fileLocalVarFormFileName string
	var fileLocalVarFileName     string
	var fileLocalVarFileBytes    []byte

	fileLocalVarFormFileName = "file"
	fileLocalVarFile := r.file

	if fileLocalVarFile != nil {
		fbs, _ := io.ReadAll(fileLocalVarFile)

		fileLocalVarFileBytes = fbs
		fileLocalVarFileName = fileLocalVarFile.Name()
		fileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: fileLocalVarFileBytes, fileName: fileLocalVarFileName, formFileName: fileLocalVarFormFileName})
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 413 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV2MobileDevicePrestagesIdDeleteRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	id string
}

func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V2MobileDevicePrestagesIdDeleteExecute(r)
}

/*
V2MobileDevicePrestagesIdDelete Delete a Mobile Device Prestage with the supplied id 

Deletes a Mobile Device Prestage with the supplied id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Mobile Device Prestage identifier
 @return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdDeleteRequest
*/
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesIdDelete(ctx context.Context, id string) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdDeleteRequest {
	return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesIdDeleteExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V2MobileDevicePrestagesIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/mobile-device-prestages/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV2MobileDevicePrestagesIdGetRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	id string
}

func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdGetRequest) Execute() (*GetMobileDevicePrestageV2, *http.Response, error) {
	return r.ApiService.V2MobileDevicePrestagesIdGetExecute(r)
}

/*
V2MobileDevicePrestagesIdGet Retrieve a Mobile Device Prestage with the supplied id 

Retrieves a Mobile Device Prestage with the supplied id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Mobile Device Prestage identifier
 @return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdGetRequest
*/
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesIdGet(ctx context.Context, id string) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdGetRequest {
	return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetMobileDevicePrestageV2
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesIdGetExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdGetRequest) (*GetMobileDevicePrestageV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetMobileDevicePrestageV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V2MobileDevicePrestagesIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/mobile-device-prestages/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV2MobileDevicePrestagesIdHistoryGetRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	id string
	page *int64
	pageSize *int64
	sort *[]string
}

func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdHistoryGetRequest) Page(page int64) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdHistoryGetRequest {
	r.page = &page
	return r
}

func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdHistoryGetRequest) PageSize(pageSize int64) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdHistoryGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property,asc/desc. Default sort order is descending. Multiple sort criteria are supported and must be entered on separate lines in Swagger UI. In the URI the &#39;sort&#39; query param is duplicated for each sort criterion, e.g., ...&amp;sort&#x3D;name%2Casc&amp;sort&#x3D;date%2Cdesc
func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdHistoryGetRequest) Sort(sort []string) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdHistoryGetRequest {
	r.sort = &sort
	return r
}

func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdHistoryGetRequest) Execute() (*HistorySearchResults, *http.Response, error) {
	return r.ApiService.V2MobileDevicePrestagesIdHistoryGetExecute(r)
}

/*
V2MobileDevicePrestagesIdHistoryGet Get sorted and paged Mobile Device Prestage history objects 

Gets sorted and paged mobile device prestage history objects

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Mobile Device Prestage identifier
 @return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdHistoryGetRequest
*/
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesIdHistoryGet(ctx context.Context, id string) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdHistoryGetRequest {
	return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdHistoryGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return HistorySearchResults
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesIdHistoryGetExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdHistoryGetRequest) (*HistorySearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HistorySearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V2MobileDevicePrestagesIdHistoryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/mobile-device-prestages/{id}/history"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int64 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int64 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		defaultValue := []string{"date:desc"}
		r.sort = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV2MobileDevicePrestagesIdHistoryPostRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	id string
	objectHistoryNote *ObjectHistoryNote
}

// History notes to create
func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdHistoryPostRequest) ObjectHistoryNote(objectHistoryNote ObjectHistoryNote) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdHistoryPostRequest {
	r.objectHistoryNote = &objectHistoryNote
	return r
}

func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdHistoryPostRequest) Execute() (*HrefResponse, *http.Response, error) {
	return r.ApiService.V2MobileDevicePrestagesIdHistoryPostExecute(r)
}

/*
V2MobileDevicePrestagesIdHistoryPost Add Mobile Device Prestage history object notes 

Adds mobile device prestage history object notes

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Mobile Device Prestage identifier
 @return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdHistoryPostRequest
*/
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesIdHistoryPost(ctx context.Context, id string) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdHistoryPostRequest {
	return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdHistoryPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return HrefResponse
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesIdHistoryPostExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdHistoryPostRequest) (*HrefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HrefResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V2MobileDevicePrestagesIdHistoryPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/mobile-device-prestages/{id}/history"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.objectHistoryNote == nil {
		return localVarReturnValue, nil, reportError("objectHistoryNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.objectHistoryNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV2MobileDevicePrestagesIdPutRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	id string
	putMobileDevicePrestageV2 *PutMobileDevicePrestageV2
}

// Mobile Device Prestage to update
func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdPutRequest) PutMobileDevicePrestageV2(putMobileDevicePrestageV2 PutMobileDevicePrestageV2) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdPutRequest {
	r.putMobileDevicePrestageV2 = &putMobileDevicePrestageV2
	return r
}

func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdPutRequest) Execute() (*GetMobileDevicePrestageV2, *http.Response, error) {
	return r.ApiService.V2MobileDevicePrestagesIdPutExecute(r)
}

/*
V2MobileDevicePrestagesIdPut Update a Mobile Device Prestage 

Updates a Mobile Device Prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Mobile Device Prestage identifier
 @return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdPutRequest
*/
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesIdPut(ctx context.Context, id string) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdPutRequest {
	return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetMobileDevicePrestageV2
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesIdPutExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdPutRequest) (*GetMobileDevicePrestageV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetMobileDevicePrestageV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V2MobileDevicePrestagesIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/mobile-device-prestages/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.putMobileDevicePrestageV2 == nil {
		return localVarReturnValue, nil, reportError("putMobileDevicePrestageV2 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.putMobileDevicePrestageV2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopeDeleteMultiplePostRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	id string
	prestageScopeUpdate *PrestageScopeUpdate
}

// Serial Numbers to remove from scope
func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopeDeleteMultiplePostRequest) PrestageScopeUpdate(prestageScopeUpdate PrestageScopeUpdate) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopeDeleteMultiplePostRequest {
	r.prestageScopeUpdate = &prestageScopeUpdate
	return r
}

func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopeDeleteMultiplePostRequest) Execute() (*PrestageScopeResponseV2, *http.Response, error) {
	return r.ApiService.V2MobileDevicePrestagesIdScopeDeleteMultiplePostExecute(r)
}

/*
V2MobileDevicePrestagesIdScopeDeleteMultiplePost Remove Device Scope for a specific Mobile Device Prestage 

Remove device scope for a specific mobile device prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Mobile Device Prestage identifier
 @return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopeDeleteMultiplePostRequest
*/
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesIdScopeDeleteMultiplePost(ctx context.Context, id string) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopeDeleteMultiplePostRequest {
	return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopeDeleteMultiplePostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PrestageScopeResponseV2
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesIdScopeDeleteMultiplePostExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopeDeleteMultiplePostRequest) (*PrestageScopeResponseV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrestageScopeResponseV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V2MobileDevicePrestagesIdScopeDeleteMultiplePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/mobile-device-prestages/{id}/scope/delete-multiple"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.prestageScopeUpdate == nil {
		return localVarReturnValue, nil, reportError("prestageScopeUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.prestageScopeUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopeGetRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	id string
}

func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopeGetRequest) Execute() (*PrestageScopeResponseV2, *http.Response, error) {
	return r.ApiService.V2MobileDevicePrestagesIdScopeGetExecute(r)
}

/*
V2MobileDevicePrestagesIdScopeGet Get Device Scope for a specific Mobile Device Prestage 

Get device scope for a specific mobile device prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Mobile Device Prestage identifier
 @return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopeGetRequest
*/
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesIdScopeGet(ctx context.Context, id string) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopeGetRequest {
	return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopeGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PrestageScopeResponseV2
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesIdScopeGetExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopeGetRequest) (*PrestageScopeResponseV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrestageScopeResponseV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V2MobileDevicePrestagesIdScopeGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/mobile-device-prestages/{id}/scope"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopePostRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	id string
	prestageScopeUpdate *PrestageScopeUpdate
}

// Serial Numbers to scope
func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopePostRequest) PrestageScopeUpdate(prestageScopeUpdate PrestageScopeUpdate) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopePostRequest {
	r.prestageScopeUpdate = &prestageScopeUpdate
	return r
}

func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopePostRequest) Execute() (*PrestageScopeResponseV2, *http.Response, error) {
	return r.ApiService.V2MobileDevicePrestagesIdScopePostExecute(r)
}

/*
V2MobileDevicePrestagesIdScopePost Add Device Scope for a specific Mobile Device Prestage 

Add device scope for a specific mobile device prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Mobile Device Prestage identifier
 @return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopePostRequest
*/
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesIdScopePost(ctx context.Context, id string) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopePostRequest {
	return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopePostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PrestageScopeResponseV2
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesIdScopePostExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopePostRequest) (*PrestageScopeResponseV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrestageScopeResponseV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V2MobileDevicePrestagesIdScopePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/mobile-device-prestages/{id}/scope"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.prestageScopeUpdate == nil {
		return localVarReturnValue, nil, reportError("prestageScopeUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.prestageScopeUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopePutRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	id string
	prestageScopeUpdate *PrestageScopeUpdate
}

// Serial Numbers to scope
func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopePutRequest) PrestageScopeUpdate(prestageScopeUpdate PrestageScopeUpdate) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopePutRequest {
	r.prestageScopeUpdate = &prestageScopeUpdate
	return r
}

func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopePutRequest) Execute() (*PrestageScopeResponseV2, *http.Response, error) {
	return r.ApiService.V2MobileDevicePrestagesIdScopePutExecute(r)
}

/*
V2MobileDevicePrestagesIdScopePut Replace Device Scope for a specific Mobile Device Prestage 

Replace device scope for a specific mobile device prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Mobile Device Prestage identifier
 @return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopePutRequest
*/
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesIdScopePut(ctx context.Context, id string) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopePutRequest {
	return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopePutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PrestageScopeResponseV2
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesIdScopePutExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdScopePutRequest) (*PrestageScopeResponseV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrestageScopeResponseV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V2MobileDevicePrestagesIdScopePut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/mobile-device-prestages/{id}/scope"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.prestageScopeUpdate == nil {
		return localVarReturnValue, nil, reportError("prestageScopeUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.prestageScopeUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV2MobileDevicePrestagesIdSyncsGetRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	id string
}

func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdSyncsGetRequest) Execute() ([]PrestageSyncStatusV2, *http.Response, error) {
	return r.ApiService.V2MobileDevicePrestagesIdSyncsGetExecute(r)
}

/*
V2MobileDevicePrestagesIdSyncsGet Get all prestage sync states for a single prestage 

Get all prestage sync states for a single prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Mobile Device Prestage identifier
 @return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdSyncsGetRequest
*/
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesIdSyncsGet(ctx context.Context, id string) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdSyncsGetRequest {
	return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdSyncsGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []PrestageSyncStatusV2
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesIdSyncsGetExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdSyncsGetRequest) ([]PrestageSyncStatusV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PrestageSyncStatusV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V2MobileDevicePrestagesIdSyncsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/mobile-device-prestages/{id}/syncs"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV2MobileDevicePrestagesIdSyncsLatestGetRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	id string
}

func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdSyncsLatestGetRequest) Execute() (*PrestageSyncStatusV2, *http.Response, error) {
	return r.ApiService.V2MobileDevicePrestagesIdSyncsLatestGetExecute(r)
}

/*
V2MobileDevicePrestagesIdSyncsLatestGet Get the latest Sync State for a single Prestage 

Get the latest sync state for a single prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Mobile Device Prestage identifier
 @return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdSyncsLatestGetRequest
*/
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesIdSyncsLatestGet(ctx context.Context, id string) MobileDevicePrestagesAPIV2MobileDevicePrestagesIdSyncsLatestGetRequest {
	return MobileDevicePrestagesAPIV2MobileDevicePrestagesIdSyncsLatestGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PrestageSyncStatusV2
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesIdSyncsLatestGetExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesIdSyncsLatestGetRequest) (*PrestageSyncStatusV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrestageSyncStatusV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V2MobileDevicePrestagesIdSyncsLatestGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/mobile-device-prestages/{id}/syncs/latest"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV2MobileDevicePrestagesPostRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
	mobileDevicePrestageV2 *MobileDevicePrestageV2
}

// Mobile Device Prestage to create. ids defined in this body will be ignored
func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesPostRequest) MobileDevicePrestageV2(mobileDevicePrestageV2 MobileDevicePrestageV2) MobileDevicePrestagesAPIV2MobileDevicePrestagesPostRequest {
	r.mobileDevicePrestageV2 = &mobileDevicePrestageV2
	return r
}

func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesPostRequest) Execute() (*HrefResponse, *http.Response, error) {
	return r.ApiService.V2MobileDevicePrestagesPostExecute(r)
}

/*
V2MobileDevicePrestagesPost Create a Mobile Device Prestage 

Create a mobile device prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MobileDevicePrestagesAPIV2MobileDevicePrestagesPostRequest
*/
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesPost(ctx context.Context) MobileDevicePrestagesAPIV2MobileDevicePrestagesPostRequest {
	return MobileDevicePrestagesAPIV2MobileDevicePrestagesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HrefResponse
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesPostExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesPostRequest) (*HrefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HrefResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V2MobileDevicePrestagesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/mobile-device-prestages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.mobileDevicePrestageV2 == nil {
		return localVarReturnValue, nil, reportError("mobileDevicePrestageV2 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.mobileDevicePrestageV2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV2MobileDevicePrestagesScopeGetRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
}

func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesScopeGetRequest) Execute() (*PrestageScopeV2, *http.Response, error) {
	return r.ApiService.V2MobileDevicePrestagesScopeGetExecute(r)
}

/*
V2MobileDevicePrestagesScopeGet Get all Device Scope for all Mobile Device Prestages 

Get all device scope for all mobile device prestages

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MobileDevicePrestagesAPIV2MobileDevicePrestagesScopeGetRequest
*/
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesScopeGet(ctx context.Context) MobileDevicePrestagesAPIV2MobileDevicePrestagesScopeGetRequest {
	return MobileDevicePrestagesAPIV2MobileDevicePrestagesScopeGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PrestageScopeV2
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesScopeGetExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesScopeGetRequest) (*PrestageScopeV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrestageScopeV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V2MobileDevicePrestagesScopeGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/mobile-device-prestages/scope"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MobileDevicePrestagesAPIV2MobileDevicePrestagesSyncsGetRequest struct {
	ctx context.Context
	ApiService MobileDevicePrestagesAPI
}

func (r MobileDevicePrestagesAPIV2MobileDevicePrestagesSyncsGetRequest) Execute() ([]PrestageSyncStatusV2, *http.Response, error) {
	return r.ApiService.V2MobileDevicePrestagesSyncsGetExecute(r)
}

/*
V2MobileDevicePrestagesSyncsGet Get all Prestage sync States for all prestages 

Get all prestage sync states for all prestages

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MobileDevicePrestagesAPIV2MobileDevicePrestagesSyncsGetRequest
*/
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesSyncsGet(ctx context.Context) MobileDevicePrestagesAPIV2MobileDevicePrestagesSyncsGetRequest {
	return MobileDevicePrestagesAPIV2MobileDevicePrestagesSyncsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []PrestageSyncStatusV2
func (a *MobileDevicePrestagesAPIService) V2MobileDevicePrestagesSyncsGetExecute(r MobileDevicePrestagesAPIV2MobileDevicePrestagesSyncsGetRequest) ([]PrestageSyncStatusV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PrestageSyncStatusV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MobileDevicePrestagesAPIService.V2MobileDevicePrestagesSyncsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/mobile-device-prestages/syncs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
