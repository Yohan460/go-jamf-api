/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type ApiIntegrationsAPI interface {

	/*
	DeleteApiIntegration Remove specified API integration

	Removes specified API integration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id instance id of api integration object
	@return ApiIntegrationsAPIDeleteApiIntegrationRequest
	*/
	DeleteApiIntegration(ctx context.Context, id string) ApiIntegrationsAPIDeleteApiIntegrationRequest

	// DeleteApiIntegrationExecute executes the request
	DeleteApiIntegrationExecute(r ApiIntegrationsAPIDeleteApiIntegrationRequest) (*http.Response, error)

	/*
	GetOneApiIntegration Get specified API integration object

	Gets specified API integration object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id instance id of api integration object
	@return ApiIntegrationsAPIGetOneApiIntegrationRequest
	*/
	GetOneApiIntegration(ctx context.Context, id string) ApiIntegrationsAPIGetOneApiIntegrationRequest

	// GetOneApiIntegrationExecute executes the request
	//  @return ApiIntegrationResponse
	GetOneApiIntegrationExecute(r ApiIntegrationsAPIGetOneApiIntegrationRequest) (*ApiIntegrationResponse, *http.Response, error)

	/*
	PostCreateApiIntegration Create API integration object

	Create API integration object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiIntegrationsAPIPostCreateApiIntegrationRequest
	*/
	PostCreateApiIntegration(ctx context.Context) ApiIntegrationsAPIPostCreateApiIntegrationRequest

	// PostCreateApiIntegrationExecute executes the request
	//  @return ApiIntegrationResponse
	PostCreateApiIntegrationExecute(r ApiIntegrationsAPIPostCreateApiIntegrationRequest) (*ApiIntegrationResponse, *http.Response, error)

	/*
	PostCreateClientCredentials Create client credentials for specified API integration

	Create client credentials for specified API integration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id instance id of api integration object
	@return ApiIntegrationsAPIPostCreateClientCredentialsRequest
	*/
	PostCreateClientCredentials(ctx context.Context, id string) ApiIntegrationsAPIPostCreateClientCredentialsRequest

	// PostCreateClientCredentialsExecute executes the request
	//  @return OAuthClientCredentials
	PostCreateClientCredentialsExecute(r ApiIntegrationsAPIPostCreateClientCredentialsRequest) (*OAuthClientCredentials, *http.Response, error)

	/*
	PutUpdateApiIntegration Update specified API integration object

	Update specified API integration object

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id instance id of api integration object
	@return ApiIntegrationsAPIPutUpdateApiIntegrationRequest
	*/
	PutUpdateApiIntegration(ctx context.Context, id string) ApiIntegrationsAPIPutUpdateApiIntegrationRequest

	// PutUpdateApiIntegrationExecute executes the request
	//  @return ApiIntegrationResponse
	PutUpdateApiIntegrationExecute(r ApiIntegrationsAPIPutUpdateApiIntegrationRequest) (*ApiIntegrationResponse, *http.Response, error)

	/*
	V1ApiIntegrationsGet Get the current API Integrations

	Get Jamf|Pro API Integrations with Search Criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiIntegrationsAPIV1ApiIntegrationsGetRequest
	*/
	V1ApiIntegrationsGet(ctx context.Context) ApiIntegrationsAPIV1ApiIntegrationsGetRequest

	// V1ApiIntegrationsGetExecute executes the request
	//  @return ApiIntegrationSearchResult
	V1ApiIntegrationsGetExecute(r ApiIntegrationsAPIV1ApiIntegrationsGetRequest) (*ApiIntegrationSearchResult, *http.Response, error)
}

// ApiIntegrationsAPIService ApiIntegrationsAPI service
type ApiIntegrationsAPIService service

type ApiIntegrationsAPIDeleteApiIntegrationRequest struct {
	ctx context.Context
	ApiService ApiIntegrationsAPI
	id string
}

func (r ApiIntegrationsAPIDeleteApiIntegrationRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteApiIntegrationExecute(r)
}

/*
DeleteApiIntegration Remove specified API integration

Removes specified API integration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id instance id of api integration object
 @return ApiIntegrationsAPIDeleteApiIntegrationRequest
*/
func (a *ApiIntegrationsAPIService) DeleteApiIntegration(ctx context.Context, id string) ApiIntegrationsAPIDeleteApiIntegrationRequest {
	return ApiIntegrationsAPIDeleteApiIntegrationRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ApiIntegrationsAPIService) DeleteApiIntegrationExecute(r ApiIntegrationsAPIDeleteApiIntegrationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApiIntegrationsAPIService.DeleteApiIntegration")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/api-integrations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIntegrationsAPIGetOneApiIntegrationRequest struct {
	ctx context.Context
	ApiService ApiIntegrationsAPI
	id string
}

func (r ApiIntegrationsAPIGetOneApiIntegrationRequest) Execute() (*ApiIntegrationResponse, *http.Response, error) {
	return r.ApiService.GetOneApiIntegrationExecute(r)
}

/*
GetOneApiIntegration Get specified API integration object

Gets specified API integration object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id instance id of api integration object
 @return ApiIntegrationsAPIGetOneApiIntegrationRequest
*/
func (a *ApiIntegrationsAPIService) GetOneApiIntegration(ctx context.Context, id string) ApiIntegrationsAPIGetOneApiIntegrationRequest {
	return ApiIntegrationsAPIGetOneApiIntegrationRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ApiIntegrationResponse
func (a *ApiIntegrationsAPIService) GetOneApiIntegrationExecute(r ApiIntegrationsAPIGetOneApiIntegrationRequest) (*ApiIntegrationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiIntegrationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApiIntegrationsAPIService.GetOneApiIntegration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/api-integrations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIntegrationsAPIPostCreateApiIntegrationRequest struct {
	ctx context.Context
	ApiService ApiIntegrationsAPI
	apiIntegrationRequest *ApiIntegrationRequest
}

// api integration object to create
func (r ApiIntegrationsAPIPostCreateApiIntegrationRequest) ApiIntegrationRequest(apiIntegrationRequest ApiIntegrationRequest) ApiIntegrationsAPIPostCreateApiIntegrationRequest {
	r.apiIntegrationRequest = &apiIntegrationRequest
	return r
}

func (r ApiIntegrationsAPIPostCreateApiIntegrationRequest) Execute() (*ApiIntegrationResponse, *http.Response, error) {
	return r.ApiService.PostCreateApiIntegrationExecute(r)
}

/*
PostCreateApiIntegration Create API integration object

Create API integration object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIntegrationsAPIPostCreateApiIntegrationRequest
*/
func (a *ApiIntegrationsAPIService) PostCreateApiIntegration(ctx context.Context) ApiIntegrationsAPIPostCreateApiIntegrationRequest {
	return ApiIntegrationsAPIPostCreateApiIntegrationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiIntegrationResponse
func (a *ApiIntegrationsAPIService) PostCreateApiIntegrationExecute(r ApiIntegrationsAPIPostCreateApiIntegrationRequest) (*ApiIntegrationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiIntegrationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApiIntegrationsAPIService.PostCreateApiIntegration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/api-integrations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiIntegrationRequest == nil {
		return localVarReturnValue, nil, reportError("apiIntegrationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiIntegrationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIntegrationsAPIPostCreateClientCredentialsRequest struct {
	ctx context.Context
	ApiService ApiIntegrationsAPI
	id string
}

func (r ApiIntegrationsAPIPostCreateClientCredentialsRequest) Execute() (*OAuthClientCredentials, *http.Response, error) {
	return r.ApiService.PostCreateClientCredentialsExecute(r)
}

/*
PostCreateClientCredentials Create client credentials for specified API integration

Create client credentials for specified API integration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id instance id of api integration object
 @return ApiIntegrationsAPIPostCreateClientCredentialsRequest
*/
func (a *ApiIntegrationsAPIService) PostCreateClientCredentials(ctx context.Context, id string) ApiIntegrationsAPIPostCreateClientCredentialsRequest {
	return ApiIntegrationsAPIPostCreateClientCredentialsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return OAuthClientCredentials
func (a *ApiIntegrationsAPIService) PostCreateClientCredentialsExecute(r ApiIntegrationsAPIPostCreateClientCredentialsRequest) (*OAuthClientCredentials, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OAuthClientCredentials
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApiIntegrationsAPIService.PostCreateClientCredentials")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/api-integrations/{id}/client-credentials"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIntegrationsAPIPutUpdateApiIntegrationRequest struct {
	ctx context.Context
	ApiService ApiIntegrationsAPI
	id string
	apiIntegrationRequest *ApiIntegrationRequest
}

// api object to update
func (r ApiIntegrationsAPIPutUpdateApiIntegrationRequest) ApiIntegrationRequest(apiIntegrationRequest ApiIntegrationRequest) ApiIntegrationsAPIPutUpdateApiIntegrationRequest {
	r.apiIntegrationRequest = &apiIntegrationRequest
	return r
}

func (r ApiIntegrationsAPIPutUpdateApiIntegrationRequest) Execute() (*ApiIntegrationResponse, *http.Response, error) {
	return r.ApiService.PutUpdateApiIntegrationExecute(r)
}

/*
PutUpdateApiIntegration Update specified API integration object

Update specified API integration object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id instance id of api integration object
 @return ApiIntegrationsAPIPutUpdateApiIntegrationRequest
*/
func (a *ApiIntegrationsAPIService) PutUpdateApiIntegration(ctx context.Context, id string) ApiIntegrationsAPIPutUpdateApiIntegrationRequest {
	return ApiIntegrationsAPIPutUpdateApiIntegrationRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ApiIntegrationResponse
func (a *ApiIntegrationsAPIService) PutUpdateApiIntegrationExecute(r ApiIntegrationsAPIPutUpdateApiIntegrationRequest) (*ApiIntegrationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiIntegrationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApiIntegrationsAPIService.PutUpdateApiIntegration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/api-integrations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiIntegrationRequest == nil {
		return localVarReturnValue, nil, reportError("apiIntegrationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiIntegrationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIntegrationsAPIV1ApiIntegrationsGetRequest struct {
	ctx context.Context
	ApiService ApiIntegrationsAPI
	page *int32
	pageSize *int32
	sort *[]string
	filter *string
}

func (r ApiIntegrationsAPIV1ApiIntegrationsGetRequest) Page(page int32) ApiIntegrationsAPIV1ApiIntegrationsGetRequest {
	r.page = &page
	return r
}

func (r ApiIntegrationsAPIV1ApiIntegrationsGetRequest) PageSize(pageSize int32) ApiIntegrationsAPIV1ApiIntegrationsGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Default sort is id:asc. Multiple sort criteria are supported and must be separated with a comma. Fields allowed in the query: id, displayName. Example: sort&#x3D;displayName:desc
func (r ApiIntegrationsAPIV1ApiIntegrationsGetRequest) Sort(sort []string) ApiIntegrationsAPIV1ApiIntegrationsGetRequest {
	r.sort = &sort
	return r
}

// Query in the RSQL format, allowing to filter app titles collection. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: id, displayName. Example: displayName&#x3D;&#x3D;\&quot;*IntegrationName*\&quot;
func (r ApiIntegrationsAPIV1ApiIntegrationsGetRequest) Filter(filter string) ApiIntegrationsAPIV1ApiIntegrationsGetRequest {
	r.filter = &filter
	return r
}

func (r ApiIntegrationsAPIV1ApiIntegrationsGetRequest) Execute() (*ApiIntegrationSearchResult, *http.Response, error) {
	return r.ApiService.V1ApiIntegrationsGetExecute(r)
}

/*
V1ApiIntegrationsGet Get the current API Integrations

Get Jamf|Pro API Integrations with Search Criteria

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIntegrationsAPIV1ApiIntegrationsGetRequest
*/
func (a *ApiIntegrationsAPIService) V1ApiIntegrationsGet(ctx context.Context) ApiIntegrationsAPIV1ApiIntegrationsGetRequest {
	return ApiIntegrationsAPIV1ApiIntegrationsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiIntegrationSearchResult
func (a *ApiIntegrationsAPIService) V1ApiIntegrationsGetExecute(r ApiIntegrationsAPIV1ApiIntegrationsGetRequest) (*ApiIntegrationSearchResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiIntegrationSearchResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApiIntegrationsAPIService.V1ApiIntegrationsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/api-integrations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		var defaultValue []string = ["id:asc"]
		r.sort = &defaultValue
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	} else {
		var defaultValue string = ""
		r.filter = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
