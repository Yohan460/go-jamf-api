/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the JamfPackageResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JamfPackageResponse{}

// JamfPackageResponse struct for JamfPackageResponse
type JamfPackageResponse struct {
	Id *string `json:"id,omitempty"`
	Filename *string `json:"filename,omitempty"`
	Version *string `json:"version,omitempty"`
	Created *string `json:"created,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewJamfPackageResponse instantiates a new JamfPackageResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJamfPackageResponse() *JamfPackageResponse {
	this := JamfPackageResponse{}
	return &this
}

// NewJamfPackageResponseWithDefaults instantiates a new JamfPackageResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJamfPackageResponseWithDefaults() *JamfPackageResponse {
	this := JamfPackageResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *JamfPackageResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JamfPackageResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *JamfPackageResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *JamfPackageResponse) SetId(v string) {
	o.Id = &v
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *JamfPackageResponse) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JamfPackageResponse) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *JamfPackageResponse) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *JamfPackageResponse) SetFilename(v string) {
	o.Filename = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *JamfPackageResponse) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JamfPackageResponse) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *JamfPackageResponse) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *JamfPackageResponse) SetVersion(v string) {
	o.Version = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *JamfPackageResponse) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JamfPackageResponse) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *JamfPackageResponse) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *JamfPackageResponse) SetCreated(v string) {
	o.Created = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *JamfPackageResponse) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JamfPackageResponse) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *JamfPackageResponse) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *JamfPackageResponse) SetUrl(v string) {
	o.Url = &v
}

func (o JamfPackageResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JamfPackageResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableJamfPackageResponse struct {
	value *JamfPackageResponse
	isSet bool
}

func (v NullableJamfPackageResponse) Get() *JamfPackageResponse {
	return v.value
}

func (v *NullableJamfPackageResponse) Set(val *JamfPackageResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableJamfPackageResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableJamfPackageResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJamfPackageResponse(val *JamfPackageResponse) *NullableJamfPackageResponse {
	return &NullableJamfPackageResponse{value: val, isSet: true}
}

func (v NullableJamfPackageResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJamfPackageResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


