/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// MdmCommandClient struct for MdmCommandClient
type MdmCommandClient struct {
	ManagementId *string `json:"managementId,omitempty"`
	ClientType *MdmClientType `json:"clientType,omitempty"`
}

// NewMdmCommandClient instantiates a new MdmCommandClient object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMdmCommandClient() *MdmCommandClient {
	this := MdmCommandClient{}
	return &this
}

// NewMdmCommandClientWithDefaults instantiates a new MdmCommandClient object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMdmCommandClientWithDefaults() *MdmCommandClient {
	this := MdmCommandClient{}
	return &this
}

// GetManagementId returns the ManagementId field value if set, zero value otherwise.
func (o *MdmCommandClient) GetManagementId() string {
	if o == nil || o.ManagementId == nil {
		var ret string
		return ret
	}
	return *o.ManagementId
}

// GetManagementIdOk returns a tuple with the ManagementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MdmCommandClient) GetManagementIdOk() (*string, bool) {
	if o == nil || o.ManagementId == nil {
		return nil, false
	}
	return o.ManagementId, true
}

// HasManagementId returns a boolean if a field has been set.
func (o *MdmCommandClient) HasManagementId() bool {
	if o != nil && o.ManagementId != nil {
		return true
	}

	return false
}

// SetManagementId gets a reference to the given string and assigns it to the ManagementId field.
func (o *MdmCommandClient) SetManagementId(v string) {
	o.ManagementId = &v
}

// GetClientType returns the ClientType field value if set, zero value otherwise.
func (o *MdmCommandClient) GetClientType() MdmClientType {
	if o == nil || o.ClientType == nil {
		var ret MdmClientType
		return ret
	}
	return *o.ClientType
}

// GetClientTypeOk returns a tuple with the ClientType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MdmCommandClient) GetClientTypeOk() (*MdmClientType, bool) {
	if o == nil || o.ClientType == nil {
		return nil, false
	}
	return o.ClientType, true
}

// HasClientType returns a boolean if a field has been set.
func (o *MdmCommandClient) HasClientType() bool {
	if o != nil && o.ClientType != nil {
		return true
	}

	return false
}

// SetClientType gets a reference to the given MdmClientType and assigns it to the ClientType field.
func (o *MdmCommandClient) SetClientType(v MdmClientType) {
	o.ClientType = &v
}

func (o MdmCommandClient) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ManagementId != nil {
		toSerialize["managementId"] = o.ManagementId
	}
	if o.ClientType != nil {
		toSerialize["clientType"] = o.ClientType
	}
	return json.Marshal(toSerialize)
}

type NullableMdmCommandClient struct {
	value *MdmCommandClient
	isSet bool
}

func (v NullableMdmCommandClient) Get() *MdmCommandClient {
	return v.value
}

func (v *NullableMdmCommandClient) Set(val *MdmCommandClient) {
	v.value = val
	v.isSet = true
}

func (v NullableMdmCommandClient) IsSet() bool {
	return v.isSet
}

func (v *NullableMdmCommandClient) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMdmCommandClient(val *MdmCommandClient) *NullableMdmCommandClient {
	return &NullableMdmCommandClient{value: val, isSet: true}
}

func (v NullableMdmCommandClient) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMdmCommandClient) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


