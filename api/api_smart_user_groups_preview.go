/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type SmartUserGroupsPreviewAPI interface {

	/*
	V1SmartUserGroupsIdRecalculatePost Recalculate the smart group for the given id and then return the ids for the users in the smart group 

	Recalculates the smart group for the given id and then
returns the ids for the users in the smart group


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id instance id of smart group
	@return SmartUserGroupsPreviewAPIV1SmartUserGroupsIdRecalculatePostRequest
	*/
	V1SmartUserGroupsIdRecalculatePost(ctx context.Context, id int64) SmartUserGroupsPreviewAPIV1SmartUserGroupsIdRecalculatePostRequest

	// V1SmartUserGroupsIdRecalculatePostExecute executes the request
	//  @return RecalculationResults
	V1SmartUserGroupsIdRecalculatePostExecute(r SmartUserGroupsPreviewAPIV1SmartUserGroupsIdRecalculatePostRequest) (*RecalculationResults, *http.Response, error)

	/*
	V1UsersIdRecalculateSmartGroupsPost Recalculate a smart group for the given user id and then return the count of smart groups the user falls into 

	Recalculates a smart group for the given user id and then
returns the count of smart groups the user falls into


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id id of user
	@return SmartUserGroupsPreviewAPIV1UsersIdRecalculateSmartGroupsPostRequest
	*/
	V1UsersIdRecalculateSmartGroupsPost(ctx context.Context, id int64) SmartUserGroupsPreviewAPIV1UsersIdRecalculateSmartGroupsPostRequest

	// V1UsersIdRecalculateSmartGroupsPostExecute executes the request
	//  @return RecalculationResults
	V1UsersIdRecalculateSmartGroupsPostExecute(r SmartUserGroupsPreviewAPIV1UsersIdRecalculateSmartGroupsPostRequest) (*RecalculationResults, *http.Response, error)
}

// SmartUserGroupsPreviewAPIService SmartUserGroupsPreviewAPI service
type SmartUserGroupsPreviewAPIService service

type SmartUserGroupsPreviewAPIV1SmartUserGroupsIdRecalculatePostRequest struct {
	ctx context.Context
	ApiService SmartUserGroupsPreviewAPI
	id int64
}

func (r SmartUserGroupsPreviewAPIV1SmartUserGroupsIdRecalculatePostRequest) Execute() (*RecalculationResults, *http.Response, error) {
	return r.ApiService.V1SmartUserGroupsIdRecalculatePostExecute(r)
}

/*
V1SmartUserGroupsIdRecalculatePost Recalculate the smart group for the given id and then return the ids for the users in the smart group 

Recalculates the smart group for the given id and then
returns the ids for the users in the smart group


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id instance id of smart group
 @return SmartUserGroupsPreviewAPIV1SmartUserGroupsIdRecalculatePostRequest
*/
func (a *SmartUserGroupsPreviewAPIService) V1SmartUserGroupsIdRecalculatePost(ctx context.Context, id int64) SmartUserGroupsPreviewAPIV1SmartUserGroupsIdRecalculatePostRequest {
	return SmartUserGroupsPreviewAPIV1SmartUserGroupsIdRecalculatePostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RecalculationResults
func (a *SmartUserGroupsPreviewAPIService) V1SmartUserGroupsIdRecalculatePostExecute(r SmartUserGroupsPreviewAPIV1SmartUserGroupsIdRecalculatePostRequest) (*RecalculationResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RecalculationResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartUserGroupsPreviewAPIService.V1SmartUserGroupsIdRecalculatePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/smart-user-groups/{id}/recalculate"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SmartUserGroupsPreviewAPIV1UsersIdRecalculateSmartGroupsPostRequest struct {
	ctx context.Context
	ApiService SmartUserGroupsPreviewAPI
	id int64
}

func (r SmartUserGroupsPreviewAPIV1UsersIdRecalculateSmartGroupsPostRequest) Execute() (*RecalculationResults, *http.Response, error) {
	return r.ApiService.V1UsersIdRecalculateSmartGroupsPostExecute(r)
}

/*
V1UsersIdRecalculateSmartGroupsPost Recalculate a smart group for the given user id and then return the count of smart groups the user falls into 

Recalculates a smart group for the given user id and then
returns the count of smart groups the user falls into


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id id of user
 @return SmartUserGroupsPreviewAPIV1UsersIdRecalculateSmartGroupsPostRequest
*/
func (a *SmartUserGroupsPreviewAPIService) V1UsersIdRecalculateSmartGroupsPost(ctx context.Context, id int64) SmartUserGroupsPreviewAPIV1UsersIdRecalculateSmartGroupsPostRequest {
	return SmartUserGroupsPreviewAPIV1UsersIdRecalculateSmartGroupsPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RecalculationResults
func (a *SmartUserGroupsPreviewAPIService) V1UsersIdRecalculateSmartGroupsPostExecute(r SmartUserGroupsPreviewAPIV1UsersIdRecalculateSmartGroupsPostRequest) (*RecalculationResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RecalculationResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartUserGroupsPreviewAPIService.V1UsersIdRecalculateSmartGroupsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/users/{id}/recalculate-smart-groups"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
