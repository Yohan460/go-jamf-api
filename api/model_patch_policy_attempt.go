/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// PatchPolicyAttempt struct for PatchPolicyAttempt
type PatchPolicyAttempt struct {
	Id *int32 `json:"id,omitempty"`
	AttemptNo *int32 `json:"attemptNo,omitempty"`
	DeviceId *int32 `json:"deviceId,omitempty"`
	Actions []PatchPolicyAttemptAction `json:"actions,omitempty"`
}

// NewPatchPolicyAttempt instantiates a new PatchPolicyAttempt object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchPolicyAttempt() *PatchPolicyAttempt {
	this := PatchPolicyAttempt{}
	return &this
}

// NewPatchPolicyAttemptWithDefaults instantiates a new PatchPolicyAttempt object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchPolicyAttemptWithDefaults() *PatchPolicyAttempt {
	this := PatchPolicyAttempt{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PatchPolicyAttempt) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyAttempt) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PatchPolicyAttempt) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PatchPolicyAttempt) SetId(v int32) {
	o.Id = &v
}

// GetAttemptNo returns the AttemptNo field value if set, zero value otherwise.
func (o *PatchPolicyAttempt) GetAttemptNo() int32 {
	if o == nil || o.AttemptNo == nil {
		var ret int32
		return ret
	}
	return *o.AttemptNo
}

// GetAttemptNoOk returns a tuple with the AttemptNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyAttempt) GetAttemptNoOk() (*int32, bool) {
	if o == nil || o.AttemptNo == nil {
		return nil, false
	}
	return o.AttemptNo, true
}

// HasAttemptNo returns a boolean if a field has been set.
func (o *PatchPolicyAttempt) HasAttemptNo() bool {
	if o != nil && o.AttemptNo != nil {
		return true
	}

	return false
}

// SetAttemptNo gets a reference to the given int32 and assigns it to the AttemptNo field.
func (o *PatchPolicyAttempt) SetAttemptNo(v int32) {
	o.AttemptNo = &v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *PatchPolicyAttempt) GetDeviceId() int32 {
	if o == nil || o.DeviceId == nil {
		var ret int32
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyAttempt) GetDeviceIdOk() (*int32, bool) {
	if o == nil || o.DeviceId == nil {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *PatchPolicyAttempt) HasDeviceId() bool {
	if o != nil && o.DeviceId != nil {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given int32 and assigns it to the DeviceId field.
func (o *PatchPolicyAttempt) SetDeviceId(v int32) {
	o.DeviceId = &v
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *PatchPolicyAttempt) GetActions() []PatchPolicyAttemptAction {
	if o == nil || o.Actions == nil {
		var ret []PatchPolicyAttemptAction
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyAttempt) GetActionsOk() ([]PatchPolicyAttemptAction, bool) {
	if o == nil || o.Actions == nil {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *PatchPolicyAttempt) HasActions() bool {
	if o != nil && o.Actions != nil {
		return true
	}

	return false
}

// SetActions gets a reference to the given []PatchPolicyAttemptAction and assigns it to the Actions field.
func (o *PatchPolicyAttempt) SetActions(v []PatchPolicyAttemptAction) {
	o.Actions = v
}

func (o PatchPolicyAttempt) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.AttemptNo != nil {
		toSerialize["attemptNo"] = o.AttemptNo
	}
	if o.DeviceId != nil {
		toSerialize["deviceId"] = o.DeviceId
	}
	if o.Actions != nil {
		toSerialize["actions"] = o.Actions
	}
	return json.Marshal(toSerialize)
}

type NullablePatchPolicyAttempt struct {
	value *PatchPolicyAttempt
	isSet bool
}

func (v NullablePatchPolicyAttempt) Get() *PatchPolicyAttempt {
	return v.value
}

func (v *NullablePatchPolicyAttempt) Set(val *PatchPolicyAttempt) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchPolicyAttempt) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchPolicyAttempt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchPolicyAttempt(val *PatchPolicyAttempt) *NullablePatchPolicyAttempt {
	return &NullablePatchPolicyAttempt{value: val, isSet: true}
}

func (v NullablePatchPolicyAttempt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchPolicyAttempt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


