/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// SsoKeystoreWithDetails struct for SsoKeystoreWithDetails
type SsoKeystoreWithDetails struct {
	Keystore *SsoKeystore `json:"keystore,omitempty"`
	KeystoreDetails *SsoKeystoreDetails `json:"keystoreDetails,omitempty"`
}

// NewSsoKeystoreWithDetails instantiates a new SsoKeystoreWithDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSsoKeystoreWithDetails() *SsoKeystoreWithDetails {
	this := SsoKeystoreWithDetails{}
	return &this
}

// NewSsoKeystoreWithDetailsWithDefaults instantiates a new SsoKeystoreWithDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSsoKeystoreWithDetailsWithDefaults() *SsoKeystoreWithDetails {
	this := SsoKeystoreWithDetails{}
	return &this
}

// GetKeystore returns the Keystore field value if set, zero value otherwise.
func (o *SsoKeystoreWithDetails) GetKeystore() SsoKeystore {
	if o == nil || o.Keystore == nil {
		var ret SsoKeystore
		return ret
	}
	return *o.Keystore
}

// GetKeystoreOk returns a tuple with the Keystore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsoKeystoreWithDetails) GetKeystoreOk() (*SsoKeystore, bool) {
	if o == nil || o.Keystore == nil {
		return nil, false
	}
	return o.Keystore, true
}

// HasKeystore returns a boolean if a field has been set.
func (o *SsoKeystoreWithDetails) HasKeystore() bool {
	if o != nil && o.Keystore != nil {
		return true
	}

	return false
}

// SetKeystore gets a reference to the given SsoKeystore and assigns it to the Keystore field.
func (o *SsoKeystoreWithDetails) SetKeystore(v SsoKeystore) {
	o.Keystore = &v
}

// GetKeystoreDetails returns the KeystoreDetails field value if set, zero value otherwise.
func (o *SsoKeystoreWithDetails) GetKeystoreDetails() SsoKeystoreDetails {
	if o == nil || o.KeystoreDetails == nil {
		var ret SsoKeystoreDetails
		return ret
	}
	return *o.KeystoreDetails
}

// GetKeystoreDetailsOk returns a tuple with the KeystoreDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsoKeystoreWithDetails) GetKeystoreDetailsOk() (*SsoKeystoreDetails, bool) {
	if o == nil || o.KeystoreDetails == nil {
		return nil, false
	}
	return o.KeystoreDetails, true
}

// HasKeystoreDetails returns a boolean if a field has been set.
func (o *SsoKeystoreWithDetails) HasKeystoreDetails() bool {
	if o != nil && o.KeystoreDetails != nil {
		return true
	}

	return false
}

// SetKeystoreDetails gets a reference to the given SsoKeystoreDetails and assigns it to the KeystoreDetails field.
func (o *SsoKeystoreWithDetails) SetKeystoreDetails(v SsoKeystoreDetails) {
	o.KeystoreDetails = &v
}

func (o SsoKeystoreWithDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Keystore != nil {
		toSerialize["keystore"] = o.Keystore
	}
	if o.KeystoreDetails != nil {
		toSerialize["keystoreDetails"] = o.KeystoreDetails
	}
	return json.Marshal(toSerialize)
}

type NullableSsoKeystoreWithDetails struct {
	value *SsoKeystoreWithDetails
	isSet bool
}

func (v NullableSsoKeystoreWithDetails) Get() *SsoKeystoreWithDetails {
	return v.value
}

func (v *NullableSsoKeystoreWithDetails) Set(val *SsoKeystoreWithDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableSsoKeystoreWithDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableSsoKeystoreWithDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSsoKeystoreWithDetails(val *SsoKeystoreWithDetails) *NullableSsoKeystoreWithDetails {
	return &NullableSsoKeystoreWithDetails{value: val, isSet: true}
}

func (v NullableSsoKeystoreWithDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSsoKeystoreWithDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


