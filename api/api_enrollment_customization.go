/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
	"os"
)


type EnrollmentCustomizationAPI interface {

	/*
	V1EnrollmentCustomizationGet Retrieve sorted and paged Enrollment Customizations 

	Retrieves sorted and paged Enrollment Customizations

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnrollmentCustomizationAPIV1EnrollmentCustomizationGetRequest

	Deprecated
	*/
	V1EnrollmentCustomizationGet(ctx context.Context) EnrollmentCustomizationAPIV1EnrollmentCustomizationGetRequest

	// V1EnrollmentCustomizationGetExecute executes the request
	//  @return EnrollmentCustomizationSearchResults
	// Deprecated
	V1EnrollmentCustomizationGetExecute(r EnrollmentCustomizationAPIV1EnrollmentCustomizationGetRequest) (*EnrollmentCustomizationSearchResults, *http.Response, error)

	/*
	V1EnrollmentCustomizationIdDelete Delete an Enrollment Customization with the supplied id 

	Deletes an Enrollment Customization with the supplied id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Enrollment Customization identifier
	@return EnrollmentCustomizationAPIV1EnrollmentCustomizationIdDeleteRequest

	Deprecated
	*/
	V1EnrollmentCustomizationIdDelete(ctx context.Context, id int32) EnrollmentCustomizationAPIV1EnrollmentCustomizationIdDeleteRequest

	// V1EnrollmentCustomizationIdDeleteExecute executes the request
	// Deprecated
	V1EnrollmentCustomizationIdDeleteExecute(r EnrollmentCustomizationAPIV1EnrollmentCustomizationIdDeleteRequest) (*http.Response, error)

	/*
	V1EnrollmentCustomizationIdGet Retrieve an Enrollment Customization with the supplied id 

	Retrieves an Enrollment Customization with the supplied id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Enrollment Customization identifier
	@return EnrollmentCustomizationAPIV1EnrollmentCustomizationIdGetRequest

	Deprecated
	*/
	V1EnrollmentCustomizationIdGet(ctx context.Context, id int32) EnrollmentCustomizationAPIV1EnrollmentCustomizationIdGetRequest

	// V1EnrollmentCustomizationIdGetExecute executes the request
	//  @return GetEnrollmentCustomization
	// Deprecated
	V1EnrollmentCustomizationIdGetExecute(r EnrollmentCustomizationAPIV1EnrollmentCustomizationIdGetRequest) (*GetEnrollmentCustomization, *http.Response, error)

	/*
	V1EnrollmentCustomizationIdHistoryGet Get sorted and paged Enrollment Customization history objects 

	Gets sorted and paged enrollment customization history objects

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Enrollment Customization identifier
	@return EnrollmentCustomizationAPIV1EnrollmentCustomizationIdHistoryGetRequest

	Deprecated
	*/
	V1EnrollmentCustomizationIdHistoryGet(ctx context.Context, id int32) EnrollmentCustomizationAPIV1EnrollmentCustomizationIdHistoryGetRequest

	// V1EnrollmentCustomizationIdHistoryGetExecute executes the request
	//  @return HistorySearchResults
	// Deprecated
	V1EnrollmentCustomizationIdHistoryGetExecute(r EnrollmentCustomizationAPIV1EnrollmentCustomizationIdHistoryGetRequest) (*HistorySearchResults, *http.Response, error)

	/*
	V1EnrollmentCustomizationIdHistoryPost Add Enrollment Customization history object notes 

	Adds enrollment customization history object notes

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Enrollment Customization identifier
	@return EnrollmentCustomizationAPIV1EnrollmentCustomizationIdHistoryPostRequest

	Deprecated
	*/
	V1EnrollmentCustomizationIdHistoryPost(ctx context.Context, id int32) EnrollmentCustomizationAPIV1EnrollmentCustomizationIdHistoryPostRequest

	// V1EnrollmentCustomizationIdHistoryPostExecute executes the request
	//  @return ObjectHistory
	// Deprecated
	V1EnrollmentCustomizationIdHistoryPostExecute(r EnrollmentCustomizationAPIV1EnrollmentCustomizationIdHistoryPostRequest) (*ObjectHistory, *http.Response, error)

	/*
	V1EnrollmentCustomizationIdPrestagesGet Retrieve the list of Prestages using this Enrollment Customization 

	Retrieves the list of Prestages using this Enrollment Customization

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Enrollment Customization identifier
	@return EnrollmentCustomizationAPIV1EnrollmentCustomizationIdPrestagesGetRequest

	Deprecated
	*/
	V1EnrollmentCustomizationIdPrestagesGet(ctx context.Context, id int32) EnrollmentCustomizationAPIV1EnrollmentCustomizationIdPrestagesGetRequest

	// V1EnrollmentCustomizationIdPrestagesGetExecute executes the request
	//  @return PrestageDependencies
	// Deprecated
	V1EnrollmentCustomizationIdPrestagesGetExecute(r EnrollmentCustomizationAPIV1EnrollmentCustomizationIdPrestagesGetRequest) (*PrestageDependencies, *http.Response, error)

	/*
	V1EnrollmentCustomizationIdPut Update an Enrollment Customization 

	Updates an Enrollment Customization

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Enrollment Customization identifier
	@return EnrollmentCustomizationAPIV1EnrollmentCustomizationIdPutRequest

	Deprecated
	*/
	V1EnrollmentCustomizationIdPut(ctx context.Context, id int32) EnrollmentCustomizationAPIV1EnrollmentCustomizationIdPutRequest

	// V1EnrollmentCustomizationIdPutExecute executes the request
	//  @return GetEnrollmentCustomization
	// Deprecated
	V1EnrollmentCustomizationIdPutExecute(r EnrollmentCustomizationAPIV1EnrollmentCustomizationIdPutRequest) (*GetEnrollmentCustomization, *http.Response, error)

	/*
	V1EnrollmentCustomizationImagesPost Upload an image

	Uploads an image

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnrollmentCustomizationAPIV1EnrollmentCustomizationImagesPostRequest

	Deprecated
	*/
	V1EnrollmentCustomizationImagesPost(ctx context.Context) EnrollmentCustomizationAPIV1EnrollmentCustomizationImagesPostRequest

	// V1EnrollmentCustomizationImagesPostExecute executes the request
	//  @return BrandingImageUrl
	// Deprecated
	V1EnrollmentCustomizationImagesPostExecute(r EnrollmentCustomizationAPIV1EnrollmentCustomizationImagesPostRequest) (*BrandingImageUrl, *http.Response, error)

	/*
	V1EnrollmentCustomizationPost Create an Enrollment Customization 

	Create an enrollment customization

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnrollmentCustomizationAPIV1EnrollmentCustomizationPostRequest

	Deprecated
	*/
	V1EnrollmentCustomizationPost(ctx context.Context) EnrollmentCustomizationAPIV1EnrollmentCustomizationPostRequest

	// V1EnrollmentCustomizationPostExecute executes the request
	//  @return GetEnrollmentCustomization
	// Deprecated
	V1EnrollmentCustomizationPostExecute(r EnrollmentCustomizationAPIV1EnrollmentCustomizationPostRequest) (*GetEnrollmentCustomization, *http.Response, error)

	/*
	V2EnrollmentCustomizationsGet Retrieve sorted and paged Enrollment Customizations 

	Retrieves sorted and paged Enrollment Customizations

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnrollmentCustomizationAPIV2EnrollmentCustomizationsGetRequest
	*/
	V2EnrollmentCustomizationsGet(ctx context.Context) EnrollmentCustomizationAPIV2EnrollmentCustomizationsGetRequest

	// V2EnrollmentCustomizationsGetExecute executes the request
	//  @return EnrollmentCustomizationSearchResultsV2
	V2EnrollmentCustomizationsGetExecute(r EnrollmentCustomizationAPIV2EnrollmentCustomizationsGetRequest) (*EnrollmentCustomizationSearchResultsV2, *http.Response, error)

	/*
	V2EnrollmentCustomizationsIdDelete Delete an Enrollment Customization with the supplied id 

	Deletes an Enrollment Customization with the supplied id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Enrollment Customization identifier
	@return EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdDeleteRequest
	*/
	V2EnrollmentCustomizationsIdDelete(ctx context.Context, id string) EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdDeleteRequest

	// V2EnrollmentCustomizationsIdDeleteExecute executes the request
	V2EnrollmentCustomizationsIdDeleteExecute(r EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdDeleteRequest) (*http.Response, error)

	/*
	V2EnrollmentCustomizationsIdGet Retrieve an Enrollment Customization with the supplied id 

	Retrieves an Enrollment Customization with the supplied id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Enrollment Customization identifier
	@return EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdGetRequest
	*/
	V2EnrollmentCustomizationsIdGet(ctx context.Context, id string) EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdGetRequest

	// V2EnrollmentCustomizationsIdGetExecute executes the request
	//  @return EnrollmentCustomizationV2
	V2EnrollmentCustomizationsIdGetExecute(r EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdGetRequest) (*EnrollmentCustomizationV2, *http.Response, error)

	/*
	V2EnrollmentCustomizationsIdHistoryGet Get sorted and paged Enrollment Customization history objects 

	Gets sorted and paged enrollment customization history objects

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Enrollment Customization identifier
	@return EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdHistoryGetRequest
	*/
	V2EnrollmentCustomizationsIdHistoryGet(ctx context.Context, id string) EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdHistoryGetRequest

	// V2EnrollmentCustomizationsIdHistoryGetExecute executes the request
	//  @return HistorySearchResults
	V2EnrollmentCustomizationsIdHistoryGetExecute(r EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdHistoryGetRequest) (*HistorySearchResults, *http.Response, error)

	/*
	V2EnrollmentCustomizationsIdHistoryPost Add Enrollment Customization history object notes 

	Adds enrollment customization history object notes

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Enrollment Customization identifier
	@return EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdHistoryPostRequest
	*/
	V2EnrollmentCustomizationsIdHistoryPost(ctx context.Context, id string) EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdHistoryPostRequest

	// V2EnrollmentCustomizationsIdHistoryPostExecute executes the request
	//  @return ObjectHistory
	V2EnrollmentCustomizationsIdHistoryPostExecute(r EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdHistoryPostRequest) (*ObjectHistory, *http.Response, error)

	/*
	V2EnrollmentCustomizationsIdPrestagesGet Retrieve the list of Prestages using this Enrollment Customization 

	Retrieves the list of Prestages using this Enrollment Customization

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Enrollment Customization identifier
	@return EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdPrestagesGetRequest
	*/
	V2EnrollmentCustomizationsIdPrestagesGet(ctx context.Context, id string) EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdPrestagesGetRequest

	// V2EnrollmentCustomizationsIdPrestagesGetExecute executes the request
	//  @return PrestageDependencies
	V2EnrollmentCustomizationsIdPrestagesGetExecute(r EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdPrestagesGetRequest) (*PrestageDependencies, *http.Response, error)

	/*
	V2EnrollmentCustomizationsIdPut Update an Enrollment Customization 

	Updates an Enrollment Customization

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Enrollment Customization identifier
	@return EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdPutRequest
	*/
	V2EnrollmentCustomizationsIdPut(ctx context.Context, id string) EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdPutRequest

	// V2EnrollmentCustomizationsIdPutExecute executes the request
	//  @return EnrollmentCustomizationV2
	V2EnrollmentCustomizationsIdPutExecute(r EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdPutRequest) (*EnrollmentCustomizationV2, *http.Response, error)

	/*
	V2EnrollmentCustomizationsImagesIdGet Download an enrollment customization image 

	Download an enrollment customization image

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id id of the enrollment customization image
	@return EnrollmentCustomizationAPIV2EnrollmentCustomizationsImagesIdGetRequest
	*/
	V2EnrollmentCustomizationsImagesIdGet(ctx context.Context, id string) EnrollmentCustomizationAPIV2EnrollmentCustomizationsImagesIdGetRequest

	// V2EnrollmentCustomizationsImagesIdGetExecute executes the request
	//  @return *os.File
	V2EnrollmentCustomizationsImagesIdGetExecute(r EnrollmentCustomizationAPIV2EnrollmentCustomizationsImagesIdGetRequest) (*os.File, *http.Response, error)

	/*
	V2EnrollmentCustomizationsImagesPost Upload an image

	Uploads an image

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnrollmentCustomizationAPIV2EnrollmentCustomizationsImagesPostRequest
	*/
	V2EnrollmentCustomizationsImagesPost(ctx context.Context) EnrollmentCustomizationAPIV2EnrollmentCustomizationsImagesPostRequest

	// V2EnrollmentCustomizationsImagesPostExecute executes the request
	//  @return BrandingImageUrl
	V2EnrollmentCustomizationsImagesPostExecute(r EnrollmentCustomizationAPIV2EnrollmentCustomizationsImagesPostRequest) (*BrandingImageUrl, *http.Response, error)

	/*
	V2EnrollmentCustomizationsPost Create an Enrollment Customization 

	Create an enrollment customization

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnrollmentCustomizationAPIV2EnrollmentCustomizationsPostRequest
	*/
	V2EnrollmentCustomizationsPost(ctx context.Context) EnrollmentCustomizationAPIV2EnrollmentCustomizationsPostRequest

	// V2EnrollmentCustomizationsPostExecute executes the request
	//  @return HrefResponse
	V2EnrollmentCustomizationsPostExecute(r EnrollmentCustomizationAPIV2EnrollmentCustomizationsPostRequest) (*HrefResponse, *http.Response, error)
}

// EnrollmentCustomizationAPIService EnrollmentCustomizationAPI service
type EnrollmentCustomizationAPIService service

type EnrollmentCustomizationAPIV1EnrollmentCustomizationGetRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationAPI
	page *int32
	size *int32
	pagesize *int32
	pageSize *int32
	sort *string
}

func (r EnrollmentCustomizationAPIV1EnrollmentCustomizationGetRequest) Page(page int32) EnrollmentCustomizationAPIV1EnrollmentCustomizationGetRequest {
	r.page = &page
	return r
}

// Deprecated
func (r EnrollmentCustomizationAPIV1EnrollmentCustomizationGetRequest) Size(size int32) EnrollmentCustomizationAPIV1EnrollmentCustomizationGetRequest {
	r.size = &size
	return r
}

// Deprecated
func (r EnrollmentCustomizationAPIV1EnrollmentCustomizationGetRequest) Pagesize(pagesize int32) EnrollmentCustomizationAPIV1EnrollmentCustomizationGetRequest {
	r.pagesize = &pagesize
	return r
}

func (r EnrollmentCustomizationAPIV1EnrollmentCustomizationGetRequest) PageSize(pageSize int32) EnrollmentCustomizationAPIV1EnrollmentCustomizationGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc 
func (r EnrollmentCustomizationAPIV1EnrollmentCustomizationGetRequest) Sort(sort string) EnrollmentCustomizationAPIV1EnrollmentCustomizationGetRequest {
	r.sort = &sort
	return r
}

func (r EnrollmentCustomizationAPIV1EnrollmentCustomizationGetRequest) Execute() (*EnrollmentCustomizationSearchResults, *http.Response, error) {
	return r.ApiService.V1EnrollmentCustomizationGetExecute(r)
}

/*
V1EnrollmentCustomizationGet Retrieve sorted and paged Enrollment Customizations 

Retrieves sorted and paged Enrollment Customizations

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnrollmentCustomizationAPIV1EnrollmentCustomizationGetRequest

Deprecated
*/
func (a *EnrollmentCustomizationAPIService) V1EnrollmentCustomizationGet(ctx context.Context) EnrollmentCustomizationAPIV1EnrollmentCustomizationGetRequest {
	return EnrollmentCustomizationAPIV1EnrollmentCustomizationGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EnrollmentCustomizationSearchResults
// Deprecated
func (a *EnrollmentCustomizationAPIService) V1EnrollmentCustomizationGetExecute(r EnrollmentCustomizationAPIV1EnrollmentCustomizationGetRequest) (*EnrollmentCustomizationSearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnrollmentCustomizationSearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationAPIService.V1EnrollmentCustomizationGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/enrollment-customization"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	} else {
		var defaultValue int32 = 100
		r.size = &defaultValue
	}
	if r.pagesize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pagesize", r.pagesize, "")
	} else {
		var defaultValue int32 = 100
		r.pagesize = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	} else {
		var defaultValue string = "id:asc"
		r.sort = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentCustomizationAPIV1EnrollmentCustomizationIdDeleteRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationAPI
	id int32
}

func (r EnrollmentCustomizationAPIV1EnrollmentCustomizationIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnrollmentCustomizationIdDeleteExecute(r)
}

/*
V1EnrollmentCustomizationIdDelete Delete an Enrollment Customization with the supplied id 

Deletes an Enrollment Customization with the supplied id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Enrollment Customization identifier
 @return EnrollmentCustomizationAPIV1EnrollmentCustomizationIdDeleteRequest

Deprecated
*/
func (a *EnrollmentCustomizationAPIService) V1EnrollmentCustomizationIdDelete(ctx context.Context, id int32) EnrollmentCustomizationAPIV1EnrollmentCustomizationIdDeleteRequest {
	return EnrollmentCustomizationAPIV1EnrollmentCustomizationIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
// Deprecated
func (a *EnrollmentCustomizationAPIService) V1EnrollmentCustomizationIdDeleteExecute(r EnrollmentCustomizationAPIV1EnrollmentCustomizationIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationAPIService.V1EnrollmentCustomizationIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/enrollment-customization/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EnrollmentCustomizationAPIV1EnrollmentCustomizationIdGetRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationAPI
	id int32
}

func (r EnrollmentCustomizationAPIV1EnrollmentCustomizationIdGetRequest) Execute() (*GetEnrollmentCustomization, *http.Response, error) {
	return r.ApiService.V1EnrollmentCustomizationIdGetExecute(r)
}

/*
V1EnrollmentCustomizationIdGet Retrieve an Enrollment Customization with the supplied id 

Retrieves an Enrollment Customization with the supplied id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Enrollment Customization identifier
 @return EnrollmentCustomizationAPIV1EnrollmentCustomizationIdGetRequest

Deprecated
*/
func (a *EnrollmentCustomizationAPIService) V1EnrollmentCustomizationIdGet(ctx context.Context, id int32) EnrollmentCustomizationAPIV1EnrollmentCustomizationIdGetRequest {
	return EnrollmentCustomizationAPIV1EnrollmentCustomizationIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetEnrollmentCustomization
// Deprecated
func (a *EnrollmentCustomizationAPIService) V1EnrollmentCustomizationIdGetExecute(r EnrollmentCustomizationAPIV1EnrollmentCustomizationIdGetRequest) (*GetEnrollmentCustomization, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetEnrollmentCustomization
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationAPIService.V1EnrollmentCustomizationIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/enrollment-customization/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentCustomizationAPIV1EnrollmentCustomizationIdHistoryGetRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationAPI
	id int32
	page *int32
	size *int32
	pagesize *int32
	pageSize *int32
	sort *[]string
}

func (r EnrollmentCustomizationAPIV1EnrollmentCustomizationIdHistoryGetRequest) Page(page int32) EnrollmentCustomizationAPIV1EnrollmentCustomizationIdHistoryGetRequest {
	r.page = &page
	return r
}

// Deprecated
func (r EnrollmentCustomizationAPIV1EnrollmentCustomizationIdHistoryGetRequest) Size(size int32) EnrollmentCustomizationAPIV1EnrollmentCustomizationIdHistoryGetRequest {
	r.size = &size
	return r
}

// Deprecated
func (r EnrollmentCustomizationAPIV1EnrollmentCustomizationIdHistoryGetRequest) Pagesize(pagesize int32) EnrollmentCustomizationAPIV1EnrollmentCustomizationIdHistoryGetRequest {
	r.pagesize = &pagesize
	return r
}

func (r EnrollmentCustomizationAPIV1EnrollmentCustomizationIdHistoryGetRequest) PageSize(pageSize int32) EnrollmentCustomizationAPIV1EnrollmentCustomizationIdHistoryGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property,asc/desc. Default sort order is descending. Multiple sort criteria are supported and must be entered on separate lines in Swagger UI. In the URI the &#39;sort&#39; query param is duplicated for each sort criterion, e.g., ...&amp;sort&#x3D;name%2Casc&amp;sort&#x3D;date%2Cdesc
func (r EnrollmentCustomizationAPIV1EnrollmentCustomizationIdHistoryGetRequest) Sort(sort []string) EnrollmentCustomizationAPIV1EnrollmentCustomizationIdHistoryGetRequest {
	r.sort = &sort
	return r
}

func (r EnrollmentCustomizationAPIV1EnrollmentCustomizationIdHistoryGetRequest) Execute() (*HistorySearchResults, *http.Response, error) {
	return r.ApiService.V1EnrollmentCustomizationIdHistoryGetExecute(r)
}

/*
V1EnrollmentCustomizationIdHistoryGet Get sorted and paged Enrollment Customization history objects 

Gets sorted and paged enrollment customization history objects

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Enrollment Customization identifier
 @return EnrollmentCustomizationAPIV1EnrollmentCustomizationIdHistoryGetRequest

Deprecated
*/
func (a *EnrollmentCustomizationAPIService) V1EnrollmentCustomizationIdHistoryGet(ctx context.Context, id int32) EnrollmentCustomizationAPIV1EnrollmentCustomizationIdHistoryGetRequest {
	return EnrollmentCustomizationAPIV1EnrollmentCustomizationIdHistoryGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return HistorySearchResults
// Deprecated
func (a *EnrollmentCustomizationAPIService) V1EnrollmentCustomizationIdHistoryGetExecute(r EnrollmentCustomizationAPIV1EnrollmentCustomizationIdHistoryGetRequest) (*HistorySearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HistorySearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationAPIService.V1EnrollmentCustomizationIdHistoryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/enrollment-customization/{id}/history"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	} else {
		var defaultValue int32 = 100
		r.size = &defaultValue
	}
	if r.pagesize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pagesize", r.pagesize, "")
	} else {
		var defaultValue int32 = 100
		r.pagesize = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		defaultValue := []string{"date:desc"}
		r.sort = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentCustomizationAPIV1EnrollmentCustomizationIdHistoryPostRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationAPI
	id int32
	objectHistoryNote *ObjectHistoryNote
}

// History notes to create
func (r EnrollmentCustomizationAPIV1EnrollmentCustomizationIdHistoryPostRequest) ObjectHistoryNote(objectHistoryNote ObjectHistoryNote) EnrollmentCustomizationAPIV1EnrollmentCustomizationIdHistoryPostRequest {
	r.objectHistoryNote = &objectHistoryNote
	return r
}

func (r EnrollmentCustomizationAPIV1EnrollmentCustomizationIdHistoryPostRequest) Execute() (*ObjectHistory, *http.Response, error) {
	return r.ApiService.V1EnrollmentCustomizationIdHistoryPostExecute(r)
}

/*
V1EnrollmentCustomizationIdHistoryPost Add Enrollment Customization history object notes 

Adds enrollment customization history object notes

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Enrollment Customization identifier
 @return EnrollmentCustomizationAPIV1EnrollmentCustomizationIdHistoryPostRequest

Deprecated
*/
func (a *EnrollmentCustomizationAPIService) V1EnrollmentCustomizationIdHistoryPost(ctx context.Context, id int32) EnrollmentCustomizationAPIV1EnrollmentCustomizationIdHistoryPostRequest {
	return EnrollmentCustomizationAPIV1EnrollmentCustomizationIdHistoryPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ObjectHistory
// Deprecated
func (a *EnrollmentCustomizationAPIService) V1EnrollmentCustomizationIdHistoryPostExecute(r EnrollmentCustomizationAPIV1EnrollmentCustomizationIdHistoryPostRequest) (*ObjectHistory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectHistory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationAPIService.V1EnrollmentCustomizationIdHistoryPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/enrollment-customization/{id}/history"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.objectHistoryNote == nil {
		return localVarReturnValue, nil, reportError("objectHistoryNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.objectHistoryNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentCustomizationAPIV1EnrollmentCustomizationIdPrestagesGetRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationAPI
	id int32
}

func (r EnrollmentCustomizationAPIV1EnrollmentCustomizationIdPrestagesGetRequest) Execute() (*PrestageDependencies, *http.Response, error) {
	return r.ApiService.V1EnrollmentCustomizationIdPrestagesGetExecute(r)
}

/*
V1EnrollmentCustomizationIdPrestagesGet Retrieve the list of Prestages using this Enrollment Customization 

Retrieves the list of Prestages using this Enrollment Customization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Enrollment Customization identifier
 @return EnrollmentCustomizationAPIV1EnrollmentCustomizationIdPrestagesGetRequest

Deprecated
*/
func (a *EnrollmentCustomizationAPIService) V1EnrollmentCustomizationIdPrestagesGet(ctx context.Context, id int32) EnrollmentCustomizationAPIV1EnrollmentCustomizationIdPrestagesGetRequest {
	return EnrollmentCustomizationAPIV1EnrollmentCustomizationIdPrestagesGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PrestageDependencies
// Deprecated
func (a *EnrollmentCustomizationAPIService) V1EnrollmentCustomizationIdPrestagesGetExecute(r EnrollmentCustomizationAPIV1EnrollmentCustomizationIdPrestagesGetRequest) (*PrestageDependencies, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrestageDependencies
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationAPIService.V1EnrollmentCustomizationIdPrestagesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/enrollment-customization/{id}/prestages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentCustomizationAPIV1EnrollmentCustomizationIdPutRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationAPI
	id int32
	enrollmentCustomization *EnrollmentCustomization
}

// Enrollment Customization to update
func (r EnrollmentCustomizationAPIV1EnrollmentCustomizationIdPutRequest) EnrollmentCustomization(enrollmentCustomization EnrollmentCustomization) EnrollmentCustomizationAPIV1EnrollmentCustomizationIdPutRequest {
	r.enrollmentCustomization = &enrollmentCustomization
	return r
}

func (r EnrollmentCustomizationAPIV1EnrollmentCustomizationIdPutRequest) Execute() (*GetEnrollmentCustomization, *http.Response, error) {
	return r.ApiService.V1EnrollmentCustomizationIdPutExecute(r)
}

/*
V1EnrollmentCustomizationIdPut Update an Enrollment Customization 

Updates an Enrollment Customization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Enrollment Customization identifier
 @return EnrollmentCustomizationAPIV1EnrollmentCustomizationIdPutRequest

Deprecated
*/
func (a *EnrollmentCustomizationAPIService) V1EnrollmentCustomizationIdPut(ctx context.Context, id int32) EnrollmentCustomizationAPIV1EnrollmentCustomizationIdPutRequest {
	return EnrollmentCustomizationAPIV1EnrollmentCustomizationIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetEnrollmentCustomization
// Deprecated
func (a *EnrollmentCustomizationAPIService) V1EnrollmentCustomizationIdPutExecute(r EnrollmentCustomizationAPIV1EnrollmentCustomizationIdPutRequest) (*GetEnrollmentCustomization, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetEnrollmentCustomization
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationAPIService.V1EnrollmentCustomizationIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/enrollment-customization/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.enrollmentCustomization == nil {
		return localVarReturnValue, nil, reportError("enrollmentCustomization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enrollmentCustomization
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentCustomizationAPIV1EnrollmentCustomizationImagesPostRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationAPI
	file *os.File
}

// The file to upload
func (r EnrollmentCustomizationAPIV1EnrollmentCustomizationImagesPostRequest) File(file *os.File) EnrollmentCustomizationAPIV1EnrollmentCustomizationImagesPostRequest {
	r.file = file
	return r
}

func (r EnrollmentCustomizationAPIV1EnrollmentCustomizationImagesPostRequest) Execute() (*BrandingImageUrl, *http.Response, error) {
	return r.ApiService.V1EnrollmentCustomizationImagesPostExecute(r)
}

/*
V1EnrollmentCustomizationImagesPost Upload an image

Uploads an image

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnrollmentCustomizationAPIV1EnrollmentCustomizationImagesPostRequest

Deprecated
*/
func (a *EnrollmentCustomizationAPIService) V1EnrollmentCustomizationImagesPost(ctx context.Context) EnrollmentCustomizationAPIV1EnrollmentCustomizationImagesPostRequest {
	return EnrollmentCustomizationAPIV1EnrollmentCustomizationImagesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BrandingImageUrl
// Deprecated
func (a *EnrollmentCustomizationAPIService) V1EnrollmentCustomizationImagesPostExecute(r EnrollmentCustomizationAPIV1EnrollmentCustomizationImagesPostRequest) (*BrandingImageUrl, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BrandingImageUrl
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationAPIService.V1EnrollmentCustomizationImagesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/enrollment-customization/images"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.file == nil {
		return localVarReturnValue, nil, reportError("file is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var fileLocalVarFormFileName string
	var fileLocalVarFileName     string
	var fileLocalVarFileBytes    []byte

	fileLocalVarFormFileName = "file"


	fileLocalVarFile := r.file

	if fileLocalVarFile != nil {
		fbs, _ := io.ReadAll(fileLocalVarFile)

		fileLocalVarFileBytes = fbs
		fileLocalVarFileName = fileLocalVarFile.Name()
		fileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: fileLocalVarFileBytes, fileName: fileLocalVarFileName, formFileName: fileLocalVarFormFileName})
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentCustomizationAPIV1EnrollmentCustomizationPostRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationAPI
	enrollmentCustomization *EnrollmentCustomization
}

// Enrollment customization to create.
func (r EnrollmentCustomizationAPIV1EnrollmentCustomizationPostRequest) EnrollmentCustomization(enrollmentCustomization EnrollmentCustomization) EnrollmentCustomizationAPIV1EnrollmentCustomizationPostRequest {
	r.enrollmentCustomization = &enrollmentCustomization
	return r
}

func (r EnrollmentCustomizationAPIV1EnrollmentCustomizationPostRequest) Execute() (*GetEnrollmentCustomization, *http.Response, error) {
	return r.ApiService.V1EnrollmentCustomizationPostExecute(r)
}

/*
V1EnrollmentCustomizationPost Create an Enrollment Customization 

Create an enrollment customization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnrollmentCustomizationAPIV1EnrollmentCustomizationPostRequest

Deprecated
*/
func (a *EnrollmentCustomizationAPIService) V1EnrollmentCustomizationPost(ctx context.Context) EnrollmentCustomizationAPIV1EnrollmentCustomizationPostRequest {
	return EnrollmentCustomizationAPIV1EnrollmentCustomizationPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetEnrollmentCustomization
// Deprecated
func (a *EnrollmentCustomizationAPIService) V1EnrollmentCustomizationPostExecute(r EnrollmentCustomizationAPIV1EnrollmentCustomizationPostRequest) (*GetEnrollmentCustomization, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetEnrollmentCustomization
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationAPIService.V1EnrollmentCustomizationPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/enrollment-customization"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.enrollmentCustomization == nil {
		return localVarReturnValue, nil, reportError("enrollmentCustomization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enrollmentCustomization
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentCustomizationAPIV2EnrollmentCustomizationsGetRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationAPI
	page *int32
	pageSize *int32
	sort *[]string
}

func (r EnrollmentCustomizationAPIV2EnrollmentCustomizationsGetRequest) Page(page int32) EnrollmentCustomizationAPIV2EnrollmentCustomizationsGetRequest {
	r.page = &page
	return r
}

func (r EnrollmentCustomizationAPIV2EnrollmentCustomizationsGetRequest) PageSize(pageSize int32) EnrollmentCustomizationAPIV2EnrollmentCustomizationsGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc 
func (r EnrollmentCustomizationAPIV2EnrollmentCustomizationsGetRequest) Sort(sort []string) EnrollmentCustomizationAPIV2EnrollmentCustomizationsGetRequest {
	r.sort = &sort
	return r
}

func (r EnrollmentCustomizationAPIV2EnrollmentCustomizationsGetRequest) Execute() (*EnrollmentCustomizationSearchResultsV2, *http.Response, error) {
	return r.ApiService.V2EnrollmentCustomizationsGetExecute(r)
}

/*
V2EnrollmentCustomizationsGet Retrieve sorted and paged Enrollment Customizations 

Retrieves sorted and paged Enrollment Customizations

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnrollmentCustomizationAPIV2EnrollmentCustomizationsGetRequest
*/
func (a *EnrollmentCustomizationAPIService) V2EnrollmentCustomizationsGet(ctx context.Context) EnrollmentCustomizationAPIV2EnrollmentCustomizationsGetRequest {
	return EnrollmentCustomizationAPIV2EnrollmentCustomizationsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EnrollmentCustomizationSearchResultsV2
func (a *EnrollmentCustomizationAPIService) V2EnrollmentCustomizationsGetExecute(r EnrollmentCustomizationAPIV2EnrollmentCustomizationsGetRequest) (*EnrollmentCustomizationSearchResultsV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnrollmentCustomizationSearchResultsV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationAPIService.V2EnrollmentCustomizationsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/enrollment-customizations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		defaultValue := []string{"id:asc"}
		r.sort = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdDeleteRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationAPI
	id string
}

func (r EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V2EnrollmentCustomizationsIdDeleteExecute(r)
}

/*
V2EnrollmentCustomizationsIdDelete Delete an Enrollment Customization with the supplied id 

Deletes an Enrollment Customization with the supplied id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Enrollment Customization identifier
 @return EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdDeleteRequest
*/
func (a *EnrollmentCustomizationAPIService) V2EnrollmentCustomizationsIdDelete(ctx context.Context, id string) EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdDeleteRequest {
	return EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *EnrollmentCustomizationAPIService) V2EnrollmentCustomizationsIdDeleteExecute(r EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationAPIService.V2EnrollmentCustomizationsIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/enrollment-customizations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdGetRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationAPI
	id string
}

func (r EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdGetRequest) Execute() (*EnrollmentCustomizationV2, *http.Response, error) {
	return r.ApiService.V2EnrollmentCustomizationsIdGetExecute(r)
}

/*
V2EnrollmentCustomizationsIdGet Retrieve an Enrollment Customization with the supplied id 

Retrieves an Enrollment Customization with the supplied id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Enrollment Customization identifier
 @return EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdGetRequest
*/
func (a *EnrollmentCustomizationAPIService) V2EnrollmentCustomizationsIdGet(ctx context.Context, id string) EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdGetRequest {
	return EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return EnrollmentCustomizationV2
func (a *EnrollmentCustomizationAPIService) V2EnrollmentCustomizationsIdGetExecute(r EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdGetRequest) (*EnrollmentCustomizationV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnrollmentCustomizationV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationAPIService.V2EnrollmentCustomizationsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/enrollment-customizations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdHistoryGetRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationAPI
	id string
	page *int32
	pageSize *int32
	sort *[]string
}

func (r EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdHistoryGetRequest) Page(page int32) EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdHistoryGetRequest {
	r.page = &page
	return r
}

func (r EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdHistoryGetRequest) PageSize(pageSize int32) EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdHistoryGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property,asc/desc. Default sort order is descending. Multiple sort criteria are supported and must be entered on separate lines in Swagger UI. In the URI the &#39;sort&#39; query param is duplicated for each sort criterion, e.g., ...&amp;sort&#x3D;name%2Casc&amp;sort&#x3D;date%2Cdesc
func (r EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdHistoryGetRequest) Sort(sort []string) EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdHistoryGetRequest {
	r.sort = &sort
	return r
}

func (r EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdHistoryGetRequest) Execute() (*HistorySearchResults, *http.Response, error) {
	return r.ApiService.V2EnrollmentCustomizationsIdHistoryGetExecute(r)
}

/*
V2EnrollmentCustomizationsIdHistoryGet Get sorted and paged Enrollment Customization history objects 

Gets sorted and paged enrollment customization history objects

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Enrollment Customization identifier
 @return EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdHistoryGetRequest
*/
func (a *EnrollmentCustomizationAPIService) V2EnrollmentCustomizationsIdHistoryGet(ctx context.Context, id string) EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdHistoryGetRequest {
	return EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdHistoryGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return HistorySearchResults
func (a *EnrollmentCustomizationAPIService) V2EnrollmentCustomizationsIdHistoryGetExecute(r EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdHistoryGetRequest) (*HistorySearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HistorySearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationAPIService.V2EnrollmentCustomizationsIdHistoryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/enrollment-customizations/{id}/history"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		defaultValue := []string{"date:desc"}
		r.sort = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdHistoryPostRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationAPI
	id string
	objectHistoryNote *ObjectHistoryNote
}

// History notes to create
func (r EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdHistoryPostRequest) ObjectHistoryNote(objectHistoryNote ObjectHistoryNote) EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdHistoryPostRequest {
	r.objectHistoryNote = &objectHistoryNote
	return r
}

func (r EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdHistoryPostRequest) Execute() (*ObjectHistory, *http.Response, error) {
	return r.ApiService.V2EnrollmentCustomizationsIdHistoryPostExecute(r)
}

/*
V2EnrollmentCustomizationsIdHistoryPost Add Enrollment Customization history object notes 

Adds enrollment customization history object notes

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Enrollment Customization identifier
 @return EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdHistoryPostRequest
*/
func (a *EnrollmentCustomizationAPIService) V2EnrollmentCustomizationsIdHistoryPost(ctx context.Context, id string) EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdHistoryPostRequest {
	return EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdHistoryPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ObjectHistory
func (a *EnrollmentCustomizationAPIService) V2EnrollmentCustomizationsIdHistoryPostExecute(r EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdHistoryPostRequest) (*ObjectHistory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectHistory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationAPIService.V2EnrollmentCustomizationsIdHistoryPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/enrollment-customizations/{id}/history"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.objectHistoryNote == nil {
		return localVarReturnValue, nil, reportError("objectHistoryNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.objectHistoryNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdPrestagesGetRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationAPI
	id string
}

func (r EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdPrestagesGetRequest) Execute() (*PrestageDependencies, *http.Response, error) {
	return r.ApiService.V2EnrollmentCustomizationsIdPrestagesGetExecute(r)
}

/*
V2EnrollmentCustomizationsIdPrestagesGet Retrieve the list of Prestages using this Enrollment Customization 

Retrieves the list of Prestages using this Enrollment Customization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Enrollment Customization identifier
 @return EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdPrestagesGetRequest
*/
func (a *EnrollmentCustomizationAPIService) V2EnrollmentCustomizationsIdPrestagesGet(ctx context.Context, id string) EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdPrestagesGetRequest {
	return EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdPrestagesGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PrestageDependencies
func (a *EnrollmentCustomizationAPIService) V2EnrollmentCustomizationsIdPrestagesGetExecute(r EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdPrestagesGetRequest) (*PrestageDependencies, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrestageDependencies
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationAPIService.V2EnrollmentCustomizationsIdPrestagesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/enrollment-customizations/{id}/prestages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdPutRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationAPI
	id string
	enrollmentCustomizationV2 *EnrollmentCustomizationV2
}

// Enrollment Customization to update
func (r EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdPutRequest) EnrollmentCustomizationV2(enrollmentCustomizationV2 EnrollmentCustomizationV2) EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdPutRequest {
	r.enrollmentCustomizationV2 = &enrollmentCustomizationV2
	return r
}

func (r EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdPutRequest) Execute() (*EnrollmentCustomizationV2, *http.Response, error) {
	return r.ApiService.V2EnrollmentCustomizationsIdPutExecute(r)
}

/*
V2EnrollmentCustomizationsIdPut Update an Enrollment Customization 

Updates an Enrollment Customization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Enrollment Customization identifier
 @return EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdPutRequest
*/
func (a *EnrollmentCustomizationAPIService) V2EnrollmentCustomizationsIdPut(ctx context.Context, id string) EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdPutRequest {
	return EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return EnrollmentCustomizationV2
func (a *EnrollmentCustomizationAPIService) V2EnrollmentCustomizationsIdPutExecute(r EnrollmentCustomizationAPIV2EnrollmentCustomizationsIdPutRequest) (*EnrollmentCustomizationV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnrollmentCustomizationV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationAPIService.V2EnrollmentCustomizationsIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/enrollment-customizations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.enrollmentCustomizationV2 == nil {
		return localVarReturnValue, nil, reportError("enrollmentCustomizationV2 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enrollmentCustomizationV2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentCustomizationAPIV2EnrollmentCustomizationsImagesIdGetRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationAPI
	id string
}

func (r EnrollmentCustomizationAPIV2EnrollmentCustomizationsImagesIdGetRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.V2EnrollmentCustomizationsImagesIdGetExecute(r)
}

/*
V2EnrollmentCustomizationsImagesIdGet Download an enrollment customization image 

Download an enrollment customization image

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id id of the enrollment customization image
 @return EnrollmentCustomizationAPIV2EnrollmentCustomizationsImagesIdGetRequest
*/
func (a *EnrollmentCustomizationAPIService) V2EnrollmentCustomizationsImagesIdGet(ctx context.Context, id string) EnrollmentCustomizationAPIV2EnrollmentCustomizationsImagesIdGetRequest {
	return EnrollmentCustomizationAPIV2EnrollmentCustomizationsImagesIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return *os.File
func (a *EnrollmentCustomizationAPIService) V2EnrollmentCustomizationsImagesIdGetExecute(r EnrollmentCustomizationAPIV2EnrollmentCustomizationsImagesIdGetRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationAPIService.V2EnrollmentCustomizationsImagesIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/enrollment-customizations/images/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"image/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentCustomizationAPIV2EnrollmentCustomizationsImagesPostRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationAPI
	file *os.File
}

// The file to upload
func (r EnrollmentCustomizationAPIV2EnrollmentCustomizationsImagesPostRequest) File(file *os.File) EnrollmentCustomizationAPIV2EnrollmentCustomizationsImagesPostRequest {
	r.file = file
	return r
}

func (r EnrollmentCustomizationAPIV2EnrollmentCustomizationsImagesPostRequest) Execute() (*BrandingImageUrl, *http.Response, error) {
	return r.ApiService.V2EnrollmentCustomizationsImagesPostExecute(r)
}

/*
V2EnrollmentCustomizationsImagesPost Upload an image

Uploads an image

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnrollmentCustomizationAPIV2EnrollmentCustomizationsImagesPostRequest
*/
func (a *EnrollmentCustomizationAPIService) V2EnrollmentCustomizationsImagesPost(ctx context.Context) EnrollmentCustomizationAPIV2EnrollmentCustomizationsImagesPostRequest {
	return EnrollmentCustomizationAPIV2EnrollmentCustomizationsImagesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BrandingImageUrl
func (a *EnrollmentCustomizationAPIService) V2EnrollmentCustomizationsImagesPostExecute(r EnrollmentCustomizationAPIV2EnrollmentCustomizationsImagesPostRequest) (*BrandingImageUrl, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BrandingImageUrl
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationAPIService.V2EnrollmentCustomizationsImagesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/enrollment-customizations/images"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.file == nil {
		return localVarReturnValue, nil, reportError("file is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var fileLocalVarFormFileName string
	var fileLocalVarFileName     string
	var fileLocalVarFileBytes    []byte

	fileLocalVarFormFileName = "file"


	fileLocalVarFile := r.file

	if fileLocalVarFile != nil {
		fbs, _ := io.ReadAll(fileLocalVarFile)

		fileLocalVarFileBytes = fbs
		fileLocalVarFileName = fileLocalVarFile.Name()
		fileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: fileLocalVarFileBytes, fileName: fileLocalVarFileName, formFileName: fileLocalVarFormFileName})
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentCustomizationAPIV2EnrollmentCustomizationsPostRequest struct {
	ctx context.Context
	ApiService EnrollmentCustomizationAPI
	enrollmentCustomizationV2 *EnrollmentCustomizationV2
}

// Enrollment customization to create.
func (r EnrollmentCustomizationAPIV2EnrollmentCustomizationsPostRequest) EnrollmentCustomizationV2(enrollmentCustomizationV2 EnrollmentCustomizationV2) EnrollmentCustomizationAPIV2EnrollmentCustomizationsPostRequest {
	r.enrollmentCustomizationV2 = &enrollmentCustomizationV2
	return r
}

func (r EnrollmentCustomizationAPIV2EnrollmentCustomizationsPostRequest) Execute() (*HrefResponse, *http.Response, error) {
	return r.ApiService.V2EnrollmentCustomizationsPostExecute(r)
}

/*
V2EnrollmentCustomizationsPost Create an Enrollment Customization 

Create an enrollment customization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnrollmentCustomizationAPIV2EnrollmentCustomizationsPostRequest
*/
func (a *EnrollmentCustomizationAPIService) V2EnrollmentCustomizationsPost(ctx context.Context) EnrollmentCustomizationAPIV2EnrollmentCustomizationsPostRequest {
	return EnrollmentCustomizationAPIV2EnrollmentCustomizationsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HrefResponse
func (a *EnrollmentCustomizationAPIService) V2EnrollmentCustomizationsPostExecute(r EnrollmentCustomizationAPIV2EnrollmentCustomizationsPostRequest) (*HrefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HrefResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentCustomizationAPIService.V2EnrollmentCustomizationsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/enrollment-customizations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.enrollmentCustomizationV2 == nil {
		return localVarReturnValue, nil, reportError("enrollmentCustomizationV2 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enrollmentCustomizationV2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
