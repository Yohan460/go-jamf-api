/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeviceLockCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceLockCommand{}

// DeviceLockCommand struct for DeviceLockCommand
type DeviceLockCommand struct {
	CommandType MdmCommandType `json:"commandType"`
	Message *string `json:"message,omitempty"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	Pin *string `json:"pin,omitempty"`
}

type _DeviceLockCommand DeviceLockCommand

// NewDeviceLockCommand instantiates a new DeviceLockCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceLockCommand(commandType MdmCommandType) *DeviceLockCommand {
	this := DeviceLockCommand{}
	this.CommandType = commandType
	return &this
}

// NewDeviceLockCommandWithDefaults instantiates a new DeviceLockCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceLockCommandWithDefaults() *DeviceLockCommand {
	this := DeviceLockCommand{}
	return &this
}

// GetCommandType returns the CommandType field value
func (o *DeviceLockCommand) GetCommandType() MdmCommandType {
	if o == nil {
		var ret MdmCommandType
		return ret
	}

	return o.CommandType
}

// GetCommandTypeOk returns a tuple with the CommandType field value
// and a boolean to check if the value has been set.
func (o *DeviceLockCommand) GetCommandTypeOk() (*MdmCommandType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommandType, true
}

// SetCommandType sets field value
func (o *DeviceLockCommand) SetCommandType(v MdmCommandType) {
	o.CommandType = v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *DeviceLockCommand) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceLockCommand) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *DeviceLockCommand) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *DeviceLockCommand) SetMessage(v string) {
	o.Message = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *DeviceLockCommand) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber) {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceLockCommand) GetPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumber) {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *DeviceLockCommand) HasPhoneNumber() bool {
	if o != nil && !IsNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *DeviceLockCommand) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetPin returns the Pin field value if set, zero value otherwise.
func (o *DeviceLockCommand) GetPin() string {
	if o == nil || IsNil(o.Pin) {
		var ret string
		return ret
	}
	return *o.Pin
}

// GetPinOk returns a tuple with the Pin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceLockCommand) GetPinOk() (*string, bool) {
	if o == nil || IsNil(o.Pin) {
		return nil, false
	}
	return o.Pin, true
}

// HasPin returns a boolean if a field has been set.
func (o *DeviceLockCommand) HasPin() bool {
	if o != nil && !IsNil(o.Pin) {
		return true
	}

	return false
}

// SetPin gets a reference to the given string and assigns it to the Pin field.
func (o *DeviceLockCommand) SetPin(v string) {
	o.Pin = &v
}

func (o DeviceLockCommand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceLockCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["commandType"] = o.CommandType
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.PhoneNumber) {
		toSerialize["phoneNumber"] = o.PhoneNumber
	}
	if !IsNil(o.Pin) {
		toSerialize["pin"] = o.Pin
	}
	return toSerialize, nil
}

func (o *DeviceLockCommand) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"commandType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceLockCommand := _DeviceLockCommand{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeviceLockCommand)

	if err != nil {
		return err
	}

	*o = DeviceLockCommand(varDeviceLockCommand)

	return err
}

type NullableDeviceLockCommand struct {
	value *DeviceLockCommand
	isSet bool
}

func (v NullableDeviceLockCommand) Get() *DeviceLockCommand {
	return v.value
}

func (v *NullableDeviceLockCommand) Set(val *DeviceLockCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceLockCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceLockCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceLockCommand(val *DeviceLockCommand) *NullableDeviceLockCommand {
	return &NullableDeviceLockCommand{value: val, isSet: true}
}

func (v NullableDeviceLockCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceLockCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


