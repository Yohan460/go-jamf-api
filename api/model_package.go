/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Package type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Package{}

// Package struct for Package
type Package struct {
	Id *string `json:"id,omitempty"`
	PackageName string `json:"packageName"`
	FileName string `json:"fileName"`
	CategoryId string `json:"categoryId"`
	Info NullableString `json:"info,omitempty"`
	Notes NullableString `json:"notes,omitempty"`
	Priority int64 `json:"priority"`
	OsRequirements NullableString `json:"osRequirements,omitempty"`
	FillUserTemplate bool `json:"fillUserTemplate"`
	Indexed *bool `json:"indexed,omitempty"`
	FillExistingUsers *bool `json:"fillExistingUsers,omitempty"`
	Swu *bool `json:"swu,omitempty"`
	RebootRequired bool `json:"rebootRequired"`
	SelfHealNotify *bool `json:"selfHealNotify,omitempty"`
	SelfHealingAction NullableString `json:"selfHealingAction,omitempty"`
	OsInstall bool `json:"osInstall"`
	SerialNumber NullableString `json:"serialNumber,omitempty"`
	ParentPackageId NullableString `json:"parentPackageId,omitempty"`
	BasePath NullableString `json:"basePath,omitempty"`
	SuppressUpdates bool `json:"suppressUpdates"`
	CloudTransferStatus *string `json:"cloudTransferStatus,omitempty"`
	IgnoreConflicts *bool `json:"ignoreConflicts,omitempty"`
	SuppressFromDock bool `json:"suppressFromDock"`
	SuppressEula bool `json:"suppressEula"`
	SuppressRegistration bool `json:"suppressRegistration"`
	InstallLanguage NullableString `json:"installLanguage,omitempty"`
	Md5 NullableString `json:"md5,omitempty"`
	Sha256 NullableString `json:"sha256,omitempty"`
	HashType NullableString `json:"hashType,omitempty"`
	HashValue NullableString `json:"hashValue,omitempty"`
	Size NullableString `json:"size,omitempty"`
	OsInstallerVersion NullableString `json:"osInstallerVersion,omitempty"`
	Manifest NullableString `json:"manifest,omitempty"`
	ManifestFileName NullableString `json:"manifestFileName,omitempty"`
	Format NullableString `json:"format,omitempty"`
}

type _Package Package

// NewPackage instantiates a new Package object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackage(packageName string, fileName string, categoryId string, priority int64, fillUserTemplate bool, rebootRequired bool, osInstall bool, suppressUpdates bool, suppressFromDock bool, suppressEula bool, suppressRegistration bool) *Package {
	this := Package{}
	this.PackageName = packageName
	this.FileName = fileName
	this.CategoryId = categoryId
	this.Priority = priority
	this.FillUserTemplate = fillUserTemplate
	this.RebootRequired = rebootRequired
	this.OsInstall = osInstall
	this.SuppressUpdates = suppressUpdates
	this.SuppressFromDock = suppressFromDock
	this.SuppressEula = suppressEula
	this.SuppressRegistration = suppressRegistration
	return &this
}

// NewPackageWithDefaults instantiates a new Package object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackageWithDefaults() *Package {
	this := Package{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Package) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Package) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Package) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Package) SetId(v string) {
	o.Id = &v
}

// GetPackageName returns the PackageName field value
func (o *Package) GetPackageName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PackageName
}

// GetPackageNameOk returns a tuple with the PackageName field value
// and a boolean to check if the value has been set.
func (o *Package) GetPackageNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PackageName, true
}

// SetPackageName sets field value
func (o *Package) SetPackageName(v string) {
	o.PackageName = v
}

// GetFileName returns the FileName field value
func (o *Package) GetFileName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value
// and a boolean to check if the value has been set.
func (o *Package) GetFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileName, true
}

// SetFileName sets field value
func (o *Package) SetFileName(v string) {
	o.FileName = v
}

// GetCategoryId returns the CategoryId field value
func (o *Package) GetCategoryId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value
// and a boolean to check if the value has been set.
func (o *Package) GetCategoryIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CategoryId, true
}

// SetCategoryId sets field value
func (o *Package) SetCategoryId(v string) {
	o.CategoryId = v
}

// GetInfo returns the Info field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Package) GetInfo() string {
	if o == nil || IsNil(o.Info.Get()) {
		var ret string
		return ret
	}
	return *o.Info.Get()
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Package) GetInfoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Info.Get(), o.Info.IsSet()
}

// HasInfo returns a boolean if a field has been set.
func (o *Package) HasInfo() bool {
	if o != nil && o.Info.IsSet() {
		return true
	}

	return false
}

// SetInfo gets a reference to the given NullableString and assigns it to the Info field.
func (o *Package) SetInfo(v string) {
	o.Info.Set(&v)
}
// SetInfoNil sets the value for Info to be an explicit nil
func (o *Package) SetInfoNil() {
	o.Info.Set(nil)
}

// UnsetInfo ensures that no value is present for Info, not even an explicit nil
func (o *Package) UnsetInfo() {
	o.Info.Unset()
}

// GetNotes returns the Notes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Package) GetNotes() string {
	if o == nil || IsNil(o.Notes.Get()) {
		var ret string
		return ret
	}
	return *o.Notes.Get()
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Package) GetNotesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Notes.Get(), o.Notes.IsSet()
}

// HasNotes returns a boolean if a field has been set.
func (o *Package) HasNotes() bool {
	if o != nil && o.Notes.IsSet() {
		return true
	}

	return false
}

// SetNotes gets a reference to the given NullableString and assigns it to the Notes field.
func (o *Package) SetNotes(v string) {
	o.Notes.Set(&v)
}
// SetNotesNil sets the value for Notes to be an explicit nil
func (o *Package) SetNotesNil() {
	o.Notes.Set(nil)
}

// UnsetNotes ensures that no value is present for Notes, not even an explicit nil
func (o *Package) UnsetNotes() {
	o.Notes.Unset()
}

// GetPriority returns the Priority field value
func (o *Package) GetPriority() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
func (o *Package) GetPriorityOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Priority, true
}

// SetPriority sets field value
func (o *Package) SetPriority(v int64) {
	o.Priority = v
}

// GetOsRequirements returns the OsRequirements field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Package) GetOsRequirements() string {
	if o == nil || IsNil(o.OsRequirements.Get()) {
		var ret string
		return ret
	}
	return *o.OsRequirements.Get()
}

// GetOsRequirementsOk returns a tuple with the OsRequirements field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Package) GetOsRequirementsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OsRequirements.Get(), o.OsRequirements.IsSet()
}

// HasOsRequirements returns a boolean if a field has been set.
func (o *Package) HasOsRequirements() bool {
	if o != nil && o.OsRequirements.IsSet() {
		return true
	}

	return false
}

// SetOsRequirements gets a reference to the given NullableString and assigns it to the OsRequirements field.
func (o *Package) SetOsRequirements(v string) {
	o.OsRequirements.Set(&v)
}
// SetOsRequirementsNil sets the value for OsRequirements to be an explicit nil
func (o *Package) SetOsRequirementsNil() {
	o.OsRequirements.Set(nil)
}

// UnsetOsRequirements ensures that no value is present for OsRequirements, not even an explicit nil
func (o *Package) UnsetOsRequirements() {
	o.OsRequirements.Unset()
}

// GetFillUserTemplate returns the FillUserTemplate field value
func (o *Package) GetFillUserTemplate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.FillUserTemplate
}

// GetFillUserTemplateOk returns a tuple with the FillUserTemplate field value
// and a boolean to check if the value has been set.
func (o *Package) GetFillUserTemplateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FillUserTemplate, true
}

// SetFillUserTemplate sets field value
func (o *Package) SetFillUserTemplate(v bool) {
	o.FillUserTemplate = v
}

// GetIndexed returns the Indexed field value if set, zero value otherwise.
func (o *Package) GetIndexed() bool {
	if o == nil || IsNil(o.Indexed) {
		var ret bool
		return ret
	}
	return *o.Indexed
}

// GetIndexedOk returns a tuple with the Indexed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Package) GetIndexedOk() (*bool, bool) {
	if o == nil || IsNil(o.Indexed) {
		return nil, false
	}
	return o.Indexed, true
}

// HasIndexed returns a boolean if a field has been set.
func (o *Package) HasIndexed() bool {
	if o != nil && !IsNil(o.Indexed) {
		return true
	}

	return false
}

// SetIndexed gets a reference to the given bool and assigns it to the Indexed field.
func (o *Package) SetIndexed(v bool) {
	o.Indexed = &v
}

// GetFillExistingUsers returns the FillExistingUsers field value if set, zero value otherwise.
func (o *Package) GetFillExistingUsers() bool {
	if o == nil || IsNil(o.FillExistingUsers) {
		var ret bool
		return ret
	}
	return *o.FillExistingUsers
}

// GetFillExistingUsersOk returns a tuple with the FillExistingUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Package) GetFillExistingUsersOk() (*bool, bool) {
	if o == nil || IsNil(o.FillExistingUsers) {
		return nil, false
	}
	return o.FillExistingUsers, true
}

// HasFillExistingUsers returns a boolean if a field has been set.
func (o *Package) HasFillExistingUsers() bool {
	if o != nil && !IsNil(o.FillExistingUsers) {
		return true
	}

	return false
}

// SetFillExistingUsers gets a reference to the given bool and assigns it to the FillExistingUsers field.
func (o *Package) SetFillExistingUsers(v bool) {
	o.FillExistingUsers = &v
}

// GetSwu returns the Swu field value if set, zero value otherwise.
func (o *Package) GetSwu() bool {
	if o == nil || IsNil(o.Swu) {
		var ret bool
		return ret
	}
	return *o.Swu
}

// GetSwuOk returns a tuple with the Swu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Package) GetSwuOk() (*bool, bool) {
	if o == nil || IsNil(o.Swu) {
		return nil, false
	}
	return o.Swu, true
}

// HasSwu returns a boolean if a field has been set.
func (o *Package) HasSwu() bool {
	if o != nil && !IsNil(o.Swu) {
		return true
	}

	return false
}

// SetSwu gets a reference to the given bool and assigns it to the Swu field.
func (o *Package) SetSwu(v bool) {
	o.Swu = &v
}

// GetRebootRequired returns the RebootRequired field value
func (o *Package) GetRebootRequired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RebootRequired
}

// GetRebootRequiredOk returns a tuple with the RebootRequired field value
// and a boolean to check if the value has been set.
func (o *Package) GetRebootRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RebootRequired, true
}

// SetRebootRequired sets field value
func (o *Package) SetRebootRequired(v bool) {
	o.RebootRequired = v
}

// GetSelfHealNotify returns the SelfHealNotify field value if set, zero value otherwise.
func (o *Package) GetSelfHealNotify() bool {
	if o == nil || IsNil(o.SelfHealNotify) {
		var ret bool
		return ret
	}
	return *o.SelfHealNotify
}

// GetSelfHealNotifyOk returns a tuple with the SelfHealNotify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Package) GetSelfHealNotifyOk() (*bool, bool) {
	if o == nil || IsNil(o.SelfHealNotify) {
		return nil, false
	}
	return o.SelfHealNotify, true
}

// HasSelfHealNotify returns a boolean if a field has been set.
func (o *Package) HasSelfHealNotify() bool {
	if o != nil && !IsNil(o.SelfHealNotify) {
		return true
	}

	return false
}

// SetSelfHealNotify gets a reference to the given bool and assigns it to the SelfHealNotify field.
func (o *Package) SetSelfHealNotify(v bool) {
	o.SelfHealNotify = &v
}

// GetSelfHealingAction returns the SelfHealingAction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Package) GetSelfHealingAction() string {
	if o == nil || IsNil(o.SelfHealingAction.Get()) {
		var ret string
		return ret
	}
	return *o.SelfHealingAction.Get()
}

// GetSelfHealingActionOk returns a tuple with the SelfHealingAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Package) GetSelfHealingActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SelfHealingAction.Get(), o.SelfHealingAction.IsSet()
}

// HasSelfHealingAction returns a boolean if a field has been set.
func (o *Package) HasSelfHealingAction() bool {
	if o != nil && o.SelfHealingAction.IsSet() {
		return true
	}

	return false
}

// SetSelfHealingAction gets a reference to the given NullableString and assigns it to the SelfHealingAction field.
func (o *Package) SetSelfHealingAction(v string) {
	o.SelfHealingAction.Set(&v)
}
// SetSelfHealingActionNil sets the value for SelfHealingAction to be an explicit nil
func (o *Package) SetSelfHealingActionNil() {
	o.SelfHealingAction.Set(nil)
}

// UnsetSelfHealingAction ensures that no value is present for SelfHealingAction, not even an explicit nil
func (o *Package) UnsetSelfHealingAction() {
	o.SelfHealingAction.Unset()
}

// GetOsInstall returns the OsInstall field value
func (o *Package) GetOsInstall() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.OsInstall
}

// GetOsInstallOk returns a tuple with the OsInstall field value
// and a boolean to check if the value has been set.
func (o *Package) GetOsInstallOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OsInstall, true
}

// SetOsInstall sets field value
func (o *Package) SetOsInstall(v bool) {
	o.OsInstall = v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Package) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber.Get()) {
		var ret string
		return ret
	}
	return *o.SerialNumber.Get()
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Package) GetSerialNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SerialNumber.Get(), o.SerialNumber.IsSet()
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *Package) HasSerialNumber() bool {
	if o != nil && o.SerialNumber.IsSet() {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given NullableString and assigns it to the SerialNumber field.
func (o *Package) SetSerialNumber(v string) {
	o.SerialNumber.Set(&v)
}
// SetSerialNumberNil sets the value for SerialNumber to be an explicit nil
func (o *Package) SetSerialNumberNil() {
	o.SerialNumber.Set(nil)
}

// UnsetSerialNumber ensures that no value is present for SerialNumber, not even an explicit nil
func (o *Package) UnsetSerialNumber() {
	o.SerialNumber.Unset()
}

// GetParentPackageId returns the ParentPackageId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Package) GetParentPackageId() string {
	if o == nil || IsNil(o.ParentPackageId.Get()) {
		var ret string
		return ret
	}
	return *o.ParentPackageId.Get()
}

// GetParentPackageIdOk returns a tuple with the ParentPackageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Package) GetParentPackageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentPackageId.Get(), o.ParentPackageId.IsSet()
}

// HasParentPackageId returns a boolean if a field has been set.
func (o *Package) HasParentPackageId() bool {
	if o != nil && o.ParentPackageId.IsSet() {
		return true
	}

	return false
}

// SetParentPackageId gets a reference to the given NullableString and assigns it to the ParentPackageId field.
func (o *Package) SetParentPackageId(v string) {
	o.ParentPackageId.Set(&v)
}
// SetParentPackageIdNil sets the value for ParentPackageId to be an explicit nil
func (o *Package) SetParentPackageIdNil() {
	o.ParentPackageId.Set(nil)
}

// UnsetParentPackageId ensures that no value is present for ParentPackageId, not even an explicit nil
func (o *Package) UnsetParentPackageId() {
	o.ParentPackageId.Unset()
}

// GetBasePath returns the BasePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Package) GetBasePath() string {
	if o == nil || IsNil(o.BasePath.Get()) {
		var ret string
		return ret
	}
	return *o.BasePath.Get()
}

// GetBasePathOk returns a tuple with the BasePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Package) GetBasePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BasePath.Get(), o.BasePath.IsSet()
}

// HasBasePath returns a boolean if a field has been set.
func (o *Package) HasBasePath() bool {
	if o != nil && o.BasePath.IsSet() {
		return true
	}

	return false
}

// SetBasePath gets a reference to the given NullableString and assigns it to the BasePath field.
func (o *Package) SetBasePath(v string) {
	o.BasePath.Set(&v)
}
// SetBasePathNil sets the value for BasePath to be an explicit nil
func (o *Package) SetBasePathNil() {
	o.BasePath.Set(nil)
}

// UnsetBasePath ensures that no value is present for BasePath, not even an explicit nil
func (o *Package) UnsetBasePath() {
	o.BasePath.Unset()
}

// GetSuppressUpdates returns the SuppressUpdates field value
func (o *Package) GetSuppressUpdates() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SuppressUpdates
}

// GetSuppressUpdatesOk returns a tuple with the SuppressUpdates field value
// and a boolean to check if the value has been set.
func (o *Package) GetSuppressUpdatesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SuppressUpdates, true
}

// SetSuppressUpdates sets field value
func (o *Package) SetSuppressUpdates(v bool) {
	o.SuppressUpdates = v
}

// GetCloudTransferStatus returns the CloudTransferStatus field value if set, zero value otherwise.
func (o *Package) GetCloudTransferStatus() string {
	if o == nil || IsNil(o.CloudTransferStatus) {
		var ret string
		return ret
	}
	return *o.CloudTransferStatus
}

// GetCloudTransferStatusOk returns a tuple with the CloudTransferStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Package) GetCloudTransferStatusOk() (*string, bool) {
	if o == nil || IsNil(o.CloudTransferStatus) {
		return nil, false
	}
	return o.CloudTransferStatus, true
}

// HasCloudTransferStatus returns a boolean if a field has been set.
func (o *Package) HasCloudTransferStatus() bool {
	if o != nil && !IsNil(o.CloudTransferStatus) {
		return true
	}

	return false
}

// SetCloudTransferStatus gets a reference to the given string and assigns it to the CloudTransferStatus field.
func (o *Package) SetCloudTransferStatus(v string) {
	o.CloudTransferStatus = &v
}

// GetIgnoreConflicts returns the IgnoreConflicts field value if set, zero value otherwise.
func (o *Package) GetIgnoreConflicts() bool {
	if o == nil || IsNil(o.IgnoreConflicts) {
		var ret bool
		return ret
	}
	return *o.IgnoreConflicts
}

// GetIgnoreConflictsOk returns a tuple with the IgnoreConflicts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Package) GetIgnoreConflictsOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreConflicts) {
		return nil, false
	}
	return o.IgnoreConflicts, true
}

// HasIgnoreConflicts returns a boolean if a field has been set.
func (o *Package) HasIgnoreConflicts() bool {
	if o != nil && !IsNil(o.IgnoreConflicts) {
		return true
	}

	return false
}

// SetIgnoreConflicts gets a reference to the given bool and assigns it to the IgnoreConflicts field.
func (o *Package) SetIgnoreConflicts(v bool) {
	o.IgnoreConflicts = &v
}

// GetSuppressFromDock returns the SuppressFromDock field value
func (o *Package) GetSuppressFromDock() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SuppressFromDock
}

// GetSuppressFromDockOk returns a tuple with the SuppressFromDock field value
// and a boolean to check if the value has been set.
func (o *Package) GetSuppressFromDockOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SuppressFromDock, true
}

// SetSuppressFromDock sets field value
func (o *Package) SetSuppressFromDock(v bool) {
	o.SuppressFromDock = v
}

// GetSuppressEula returns the SuppressEula field value
func (o *Package) GetSuppressEula() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SuppressEula
}

// GetSuppressEulaOk returns a tuple with the SuppressEula field value
// and a boolean to check if the value has been set.
func (o *Package) GetSuppressEulaOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SuppressEula, true
}

// SetSuppressEula sets field value
func (o *Package) SetSuppressEula(v bool) {
	o.SuppressEula = v
}

// GetSuppressRegistration returns the SuppressRegistration field value
func (o *Package) GetSuppressRegistration() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SuppressRegistration
}

// GetSuppressRegistrationOk returns a tuple with the SuppressRegistration field value
// and a boolean to check if the value has been set.
func (o *Package) GetSuppressRegistrationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SuppressRegistration, true
}

// SetSuppressRegistration sets field value
func (o *Package) SetSuppressRegistration(v bool) {
	o.SuppressRegistration = v
}

// GetInstallLanguage returns the InstallLanguage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Package) GetInstallLanguage() string {
	if o == nil || IsNil(o.InstallLanguage.Get()) {
		var ret string
		return ret
	}
	return *o.InstallLanguage.Get()
}

// GetInstallLanguageOk returns a tuple with the InstallLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Package) GetInstallLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InstallLanguage.Get(), o.InstallLanguage.IsSet()
}

// HasInstallLanguage returns a boolean if a field has been set.
func (o *Package) HasInstallLanguage() bool {
	if o != nil && o.InstallLanguage.IsSet() {
		return true
	}

	return false
}

// SetInstallLanguage gets a reference to the given NullableString and assigns it to the InstallLanguage field.
func (o *Package) SetInstallLanguage(v string) {
	o.InstallLanguage.Set(&v)
}
// SetInstallLanguageNil sets the value for InstallLanguage to be an explicit nil
func (o *Package) SetInstallLanguageNil() {
	o.InstallLanguage.Set(nil)
}

// UnsetInstallLanguage ensures that no value is present for InstallLanguage, not even an explicit nil
func (o *Package) UnsetInstallLanguage() {
	o.InstallLanguage.Unset()
}

// GetMd5 returns the Md5 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Package) GetMd5() string {
	if o == nil || IsNil(o.Md5.Get()) {
		var ret string
		return ret
	}
	return *o.Md5.Get()
}

// GetMd5Ok returns a tuple with the Md5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Package) GetMd5Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Md5.Get(), o.Md5.IsSet()
}

// HasMd5 returns a boolean if a field has been set.
func (o *Package) HasMd5() bool {
	if o != nil && o.Md5.IsSet() {
		return true
	}

	return false
}

// SetMd5 gets a reference to the given NullableString and assigns it to the Md5 field.
func (o *Package) SetMd5(v string) {
	o.Md5.Set(&v)
}
// SetMd5Nil sets the value for Md5 to be an explicit nil
func (o *Package) SetMd5Nil() {
	o.Md5.Set(nil)
}

// UnsetMd5 ensures that no value is present for Md5, not even an explicit nil
func (o *Package) UnsetMd5() {
	o.Md5.Unset()
}

// GetSha256 returns the Sha256 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Package) GetSha256() string {
	if o == nil || IsNil(o.Sha256.Get()) {
		var ret string
		return ret
	}
	return *o.Sha256.Get()
}

// GetSha256Ok returns a tuple with the Sha256 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Package) GetSha256Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sha256.Get(), o.Sha256.IsSet()
}

// HasSha256 returns a boolean if a field has been set.
func (o *Package) HasSha256() bool {
	if o != nil && o.Sha256.IsSet() {
		return true
	}

	return false
}

// SetSha256 gets a reference to the given NullableString and assigns it to the Sha256 field.
func (o *Package) SetSha256(v string) {
	o.Sha256.Set(&v)
}
// SetSha256Nil sets the value for Sha256 to be an explicit nil
func (o *Package) SetSha256Nil() {
	o.Sha256.Set(nil)
}

// UnsetSha256 ensures that no value is present for Sha256, not even an explicit nil
func (o *Package) UnsetSha256() {
	o.Sha256.Unset()
}

// GetHashType returns the HashType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Package) GetHashType() string {
	if o == nil || IsNil(o.HashType.Get()) {
		var ret string
		return ret
	}
	return *o.HashType.Get()
}

// GetHashTypeOk returns a tuple with the HashType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Package) GetHashTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HashType.Get(), o.HashType.IsSet()
}

// HasHashType returns a boolean if a field has been set.
func (o *Package) HasHashType() bool {
	if o != nil && o.HashType.IsSet() {
		return true
	}

	return false
}

// SetHashType gets a reference to the given NullableString and assigns it to the HashType field.
func (o *Package) SetHashType(v string) {
	o.HashType.Set(&v)
}
// SetHashTypeNil sets the value for HashType to be an explicit nil
func (o *Package) SetHashTypeNil() {
	o.HashType.Set(nil)
}

// UnsetHashType ensures that no value is present for HashType, not even an explicit nil
func (o *Package) UnsetHashType() {
	o.HashType.Unset()
}

// GetHashValue returns the HashValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Package) GetHashValue() string {
	if o == nil || IsNil(o.HashValue.Get()) {
		var ret string
		return ret
	}
	return *o.HashValue.Get()
}

// GetHashValueOk returns a tuple with the HashValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Package) GetHashValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HashValue.Get(), o.HashValue.IsSet()
}

// HasHashValue returns a boolean if a field has been set.
func (o *Package) HasHashValue() bool {
	if o != nil && o.HashValue.IsSet() {
		return true
	}

	return false
}

// SetHashValue gets a reference to the given NullableString and assigns it to the HashValue field.
func (o *Package) SetHashValue(v string) {
	o.HashValue.Set(&v)
}
// SetHashValueNil sets the value for HashValue to be an explicit nil
func (o *Package) SetHashValueNil() {
	o.HashValue.Set(nil)
}

// UnsetHashValue ensures that no value is present for HashValue, not even an explicit nil
func (o *Package) UnsetHashValue() {
	o.HashValue.Unset()
}

// GetSize returns the Size field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Package) GetSize() string {
	if o == nil || IsNil(o.Size.Get()) {
		var ret string
		return ret
	}
	return *o.Size.Get()
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Package) GetSizeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Size.Get(), o.Size.IsSet()
}

// HasSize returns a boolean if a field has been set.
func (o *Package) HasSize() bool {
	if o != nil && o.Size.IsSet() {
		return true
	}

	return false
}

// SetSize gets a reference to the given NullableString and assigns it to the Size field.
func (o *Package) SetSize(v string) {
	o.Size.Set(&v)
}
// SetSizeNil sets the value for Size to be an explicit nil
func (o *Package) SetSizeNil() {
	o.Size.Set(nil)
}

// UnsetSize ensures that no value is present for Size, not even an explicit nil
func (o *Package) UnsetSize() {
	o.Size.Unset()
}

// GetOsInstallerVersion returns the OsInstallerVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Package) GetOsInstallerVersion() string {
	if o == nil || IsNil(o.OsInstallerVersion.Get()) {
		var ret string
		return ret
	}
	return *o.OsInstallerVersion.Get()
}

// GetOsInstallerVersionOk returns a tuple with the OsInstallerVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Package) GetOsInstallerVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OsInstallerVersion.Get(), o.OsInstallerVersion.IsSet()
}

// HasOsInstallerVersion returns a boolean if a field has been set.
func (o *Package) HasOsInstallerVersion() bool {
	if o != nil && o.OsInstallerVersion.IsSet() {
		return true
	}

	return false
}

// SetOsInstallerVersion gets a reference to the given NullableString and assigns it to the OsInstallerVersion field.
func (o *Package) SetOsInstallerVersion(v string) {
	o.OsInstallerVersion.Set(&v)
}
// SetOsInstallerVersionNil sets the value for OsInstallerVersion to be an explicit nil
func (o *Package) SetOsInstallerVersionNil() {
	o.OsInstallerVersion.Set(nil)
}

// UnsetOsInstallerVersion ensures that no value is present for OsInstallerVersion, not even an explicit nil
func (o *Package) UnsetOsInstallerVersion() {
	o.OsInstallerVersion.Unset()
}

// GetManifest returns the Manifest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Package) GetManifest() string {
	if o == nil || IsNil(o.Manifest.Get()) {
		var ret string
		return ret
	}
	return *o.Manifest.Get()
}

// GetManifestOk returns a tuple with the Manifest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Package) GetManifestOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Manifest.Get(), o.Manifest.IsSet()
}

// HasManifest returns a boolean if a field has been set.
func (o *Package) HasManifest() bool {
	if o != nil && o.Manifest.IsSet() {
		return true
	}

	return false
}

// SetManifest gets a reference to the given NullableString and assigns it to the Manifest field.
func (o *Package) SetManifest(v string) {
	o.Manifest.Set(&v)
}
// SetManifestNil sets the value for Manifest to be an explicit nil
func (o *Package) SetManifestNil() {
	o.Manifest.Set(nil)
}

// UnsetManifest ensures that no value is present for Manifest, not even an explicit nil
func (o *Package) UnsetManifest() {
	o.Manifest.Unset()
}

// GetManifestFileName returns the ManifestFileName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Package) GetManifestFileName() string {
	if o == nil || IsNil(o.ManifestFileName.Get()) {
		var ret string
		return ret
	}
	return *o.ManifestFileName.Get()
}

// GetManifestFileNameOk returns a tuple with the ManifestFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Package) GetManifestFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ManifestFileName.Get(), o.ManifestFileName.IsSet()
}

// HasManifestFileName returns a boolean if a field has been set.
func (o *Package) HasManifestFileName() bool {
	if o != nil && o.ManifestFileName.IsSet() {
		return true
	}

	return false
}

// SetManifestFileName gets a reference to the given NullableString and assigns it to the ManifestFileName field.
func (o *Package) SetManifestFileName(v string) {
	o.ManifestFileName.Set(&v)
}
// SetManifestFileNameNil sets the value for ManifestFileName to be an explicit nil
func (o *Package) SetManifestFileNameNil() {
	o.ManifestFileName.Set(nil)
}

// UnsetManifestFileName ensures that no value is present for ManifestFileName, not even an explicit nil
func (o *Package) UnsetManifestFileName() {
	o.ManifestFileName.Unset()
}

// GetFormat returns the Format field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Package) GetFormat() string {
	if o == nil || IsNil(o.Format.Get()) {
		var ret string
		return ret
	}
	return *o.Format.Get()
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Package) GetFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Format.Get(), o.Format.IsSet()
}

// HasFormat returns a boolean if a field has been set.
func (o *Package) HasFormat() bool {
	if o != nil && o.Format.IsSet() {
		return true
	}

	return false
}

// SetFormat gets a reference to the given NullableString and assigns it to the Format field.
func (o *Package) SetFormat(v string) {
	o.Format.Set(&v)
}
// SetFormatNil sets the value for Format to be an explicit nil
func (o *Package) SetFormatNil() {
	o.Format.Set(nil)
}

// UnsetFormat ensures that no value is present for Format, not even an explicit nil
func (o *Package) UnsetFormat() {
	o.Format.Unset()
}

func (o Package) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Package) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["packageName"] = o.PackageName
	toSerialize["fileName"] = o.FileName
	toSerialize["categoryId"] = o.CategoryId
	if o.Info.IsSet() {
		toSerialize["info"] = o.Info.Get()
	}
	if o.Notes.IsSet() {
		toSerialize["notes"] = o.Notes.Get()
	}
	toSerialize["priority"] = o.Priority
	if o.OsRequirements.IsSet() {
		toSerialize["osRequirements"] = o.OsRequirements.Get()
	}
	toSerialize["fillUserTemplate"] = o.FillUserTemplate
	if !IsNil(o.Indexed) {
		toSerialize["indexed"] = o.Indexed
	}
	if !IsNil(o.FillExistingUsers) {
		toSerialize["fillExistingUsers"] = o.FillExistingUsers
	}
	if !IsNil(o.Swu) {
		toSerialize["swu"] = o.Swu
	}
	toSerialize["rebootRequired"] = o.RebootRequired
	if !IsNil(o.SelfHealNotify) {
		toSerialize["selfHealNotify"] = o.SelfHealNotify
	}
	if o.SelfHealingAction.IsSet() {
		toSerialize["selfHealingAction"] = o.SelfHealingAction.Get()
	}
	toSerialize["osInstall"] = o.OsInstall
	if o.SerialNumber.IsSet() {
		toSerialize["serialNumber"] = o.SerialNumber.Get()
	}
	if o.ParentPackageId.IsSet() {
		toSerialize["parentPackageId"] = o.ParentPackageId.Get()
	}
	if o.BasePath.IsSet() {
		toSerialize["basePath"] = o.BasePath.Get()
	}
	toSerialize["suppressUpdates"] = o.SuppressUpdates
	if !IsNil(o.CloudTransferStatus) {
		toSerialize["cloudTransferStatus"] = o.CloudTransferStatus
	}
	if !IsNil(o.IgnoreConflicts) {
		toSerialize["ignoreConflicts"] = o.IgnoreConflicts
	}
	toSerialize["suppressFromDock"] = o.SuppressFromDock
	toSerialize["suppressEula"] = o.SuppressEula
	toSerialize["suppressRegistration"] = o.SuppressRegistration
	if o.InstallLanguage.IsSet() {
		toSerialize["installLanguage"] = o.InstallLanguage.Get()
	}
	if o.Md5.IsSet() {
		toSerialize["md5"] = o.Md5.Get()
	}
	if o.Sha256.IsSet() {
		toSerialize["sha256"] = o.Sha256.Get()
	}
	if o.HashType.IsSet() {
		toSerialize["hashType"] = o.HashType.Get()
	}
	if o.HashValue.IsSet() {
		toSerialize["hashValue"] = o.HashValue.Get()
	}
	if o.Size.IsSet() {
		toSerialize["size"] = o.Size.Get()
	}
	if o.OsInstallerVersion.IsSet() {
		toSerialize["osInstallerVersion"] = o.OsInstallerVersion.Get()
	}
	if o.Manifest.IsSet() {
		toSerialize["manifest"] = o.Manifest.Get()
	}
	if o.ManifestFileName.IsSet() {
		toSerialize["manifestFileName"] = o.ManifestFileName.Get()
	}
	if o.Format.IsSet() {
		toSerialize["format"] = o.Format.Get()
	}
	return toSerialize, nil
}

func (o *Package) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"packageName",
		"fileName",
		"categoryId",
		"priority",
		"fillUserTemplate",
		"rebootRequired",
		"osInstall",
		"suppressUpdates",
		"suppressFromDock",
		"suppressEula",
		"suppressRegistration",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPackage := _Package{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPackage)

	if err != nil {
		return err
	}

	*o = Package(varPackage)

	return err
}

type NullablePackage struct {
	value *Package
	isSet bool
}

func (v NullablePackage) Get() *Package {
	return v.value
}

func (v *NullablePackage) Set(val *Package) {
	v.value = val
	v.isSet = true
}

func (v NullablePackage) IsSet() bool {
	return v.isSet
}

func (v *NullablePackage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackage(val *Package) *NullablePackage {
	return &NullablePackage{value: val, isSet: true}
}

func (v NullablePackage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


