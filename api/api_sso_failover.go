/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type SsoFailoverAPI interface {

	/*
	V1SsoFailoverGeneratePost Regenerates failover url

	Regenerates failover url, by changing failover key to new one, and returns new failover settings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SsoFailoverAPIV1SsoFailoverGeneratePostRequest
	*/
	V1SsoFailoverGeneratePost(ctx context.Context) SsoFailoverAPIV1SsoFailoverGeneratePostRequest

	// V1SsoFailoverGeneratePostExecute executes the request
	//  @return SsoFailoverData
	V1SsoFailoverGeneratePostExecute(r SsoFailoverAPIV1SsoFailoverGeneratePostRequest) (*SsoFailoverData, *http.Response, error)

	/*
	V1SsoFailoverGet Retrieve the current failover settings

	Retrieve the current failover settings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SsoFailoverAPIV1SsoFailoverGetRequest
	*/
	V1SsoFailoverGet(ctx context.Context) SsoFailoverAPIV1SsoFailoverGetRequest

	// V1SsoFailoverGetExecute executes the request
	//  @return SsoFailoverData
	V1SsoFailoverGetExecute(r SsoFailoverAPIV1SsoFailoverGetRequest) (*SsoFailoverData, *http.Response, error)
}

// SsoFailoverAPIService SsoFailoverAPI service
type SsoFailoverAPIService service

type SsoFailoverAPIV1SsoFailoverGeneratePostRequest struct {
	ctx context.Context
	ApiService SsoFailoverAPI
}

func (r SsoFailoverAPIV1SsoFailoverGeneratePostRequest) Execute() (*SsoFailoverData, *http.Response, error) {
	return r.ApiService.V1SsoFailoverGeneratePostExecute(r)
}

/*
V1SsoFailoverGeneratePost Regenerates failover url

Regenerates failover url, by changing failover key to new one, and returns new failover settings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SsoFailoverAPIV1SsoFailoverGeneratePostRequest
*/
func (a *SsoFailoverAPIService) V1SsoFailoverGeneratePost(ctx context.Context) SsoFailoverAPIV1SsoFailoverGeneratePostRequest {
	return SsoFailoverAPIV1SsoFailoverGeneratePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SsoFailoverData
func (a *SsoFailoverAPIService) V1SsoFailoverGeneratePostExecute(r SsoFailoverAPIV1SsoFailoverGeneratePostRequest) (*SsoFailoverData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SsoFailoverData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SsoFailoverAPIService.V1SsoFailoverGeneratePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/sso/failover/generate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SsoFailoverAPIV1SsoFailoverGetRequest struct {
	ctx context.Context
	ApiService SsoFailoverAPI
}

func (r SsoFailoverAPIV1SsoFailoverGetRequest) Execute() (*SsoFailoverData, *http.Response, error) {
	return r.ApiService.V1SsoFailoverGetExecute(r)
}

/*
V1SsoFailoverGet Retrieve the current failover settings

Retrieve the current failover settings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SsoFailoverAPIV1SsoFailoverGetRequest
*/
func (a *SsoFailoverAPIService) V1SsoFailoverGet(ctx context.Context) SsoFailoverAPIV1SsoFailoverGetRequest {
	return SsoFailoverAPIV1SsoFailoverGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SsoFailoverData
func (a *SsoFailoverAPIService) V1SsoFailoverGetExecute(r SsoFailoverAPIV1SsoFailoverGetRequest) (*SsoFailoverData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SsoFailoverData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SsoFailoverAPIService.V1SsoFailoverGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/sso/failover"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
