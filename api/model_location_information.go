/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the LocationInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocationInformation{}

// LocationInformation struct for LocationInformation
type LocationInformation struct {
	Username string `json:"username"`
	Realname string `json:"realname"`
	Phone string `json:"phone"`
	Email string `json:"email"`
	Room string `json:"room"`
	Position string `json:"position"`
	DepartmentId int32 `json:"departmentId"`
	BuildingId int32 `json:"buildingId"`
	Id int32 `json:"id"`
	VersionLock int32 `json:"versionLock"`
}

// NewLocationInformation instantiates a new LocationInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationInformation(username string, realname string, phone string, email string, room string, position string, departmentId int32, buildingId int32, id int32, versionLock int32) *LocationInformation {
	this := LocationInformation{}
	this.Username = username
	this.Realname = realname
	this.Phone = phone
	this.Email = email
	this.Room = room
	this.Position = position
	this.DepartmentId = departmentId
	this.BuildingId = buildingId
	this.Id = id
	this.VersionLock = versionLock
	return &this
}

// NewLocationInformationWithDefaults instantiates a new LocationInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationInformationWithDefaults() *LocationInformation {
	this := LocationInformation{}
	return &this
}

// GetUsername returns the Username field value
func (o *LocationInformation) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *LocationInformation) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *LocationInformation) SetUsername(v string) {
	o.Username = v
}

// GetRealname returns the Realname field value
func (o *LocationInformation) GetRealname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Realname
}

// GetRealnameOk returns a tuple with the Realname field value
// and a boolean to check if the value has been set.
func (o *LocationInformation) GetRealnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Realname, true
}

// SetRealname sets field value
func (o *LocationInformation) SetRealname(v string) {
	o.Realname = v
}

// GetPhone returns the Phone field value
func (o *LocationInformation) GetPhone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value
// and a boolean to check if the value has been set.
func (o *LocationInformation) GetPhoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Phone, true
}

// SetPhone sets field value
func (o *LocationInformation) SetPhone(v string) {
	o.Phone = v
}

// GetEmail returns the Email field value
func (o *LocationInformation) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *LocationInformation) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *LocationInformation) SetEmail(v string) {
	o.Email = v
}

// GetRoom returns the Room field value
func (o *LocationInformation) GetRoom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Room
}

// GetRoomOk returns a tuple with the Room field value
// and a boolean to check if the value has been set.
func (o *LocationInformation) GetRoomOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Room, true
}

// SetRoom sets field value
func (o *LocationInformation) SetRoom(v string) {
	o.Room = v
}

// GetPosition returns the Position field value
func (o *LocationInformation) GetPosition() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Position
}

// GetPositionOk returns a tuple with the Position field value
// and a boolean to check if the value has been set.
func (o *LocationInformation) GetPositionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Position, true
}

// SetPosition sets field value
func (o *LocationInformation) SetPosition(v string) {
	o.Position = v
}

// GetDepartmentId returns the DepartmentId field value
func (o *LocationInformation) GetDepartmentId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DepartmentId
}

// GetDepartmentIdOk returns a tuple with the DepartmentId field value
// and a boolean to check if the value has been set.
func (o *LocationInformation) GetDepartmentIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepartmentId, true
}

// SetDepartmentId sets field value
func (o *LocationInformation) SetDepartmentId(v int32) {
	o.DepartmentId = v
}

// GetBuildingId returns the BuildingId field value
func (o *LocationInformation) GetBuildingId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BuildingId
}

// GetBuildingIdOk returns a tuple with the BuildingId field value
// and a boolean to check if the value has been set.
func (o *LocationInformation) GetBuildingIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BuildingId, true
}

// SetBuildingId sets field value
func (o *LocationInformation) SetBuildingId(v int32) {
	o.BuildingId = v
}

// GetId returns the Id field value
func (o *LocationInformation) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LocationInformation) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LocationInformation) SetId(v int32) {
	o.Id = v
}

// GetVersionLock returns the VersionLock field value
func (o *LocationInformation) GetVersionLock() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VersionLock
}

// GetVersionLockOk returns a tuple with the VersionLock field value
// and a boolean to check if the value has been set.
func (o *LocationInformation) GetVersionLockOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VersionLock, true
}

// SetVersionLock sets field value
func (o *LocationInformation) SetVersionLock(v int32) {
	o.VersionLock = v
}

func (o LocationInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocationInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["username"] = o.Username
	toSerialize["realname"] = o.Realname
	toSerialize["phone"] = o.Phone
	toSerialize["email"] = o.Email
	toSerialize["room"] = o.Room
	toSerialize["position"] = o.Position
	toSerialize["departmentId"] = o.DepartmentId
	toSerialize["buildingId"] = o.BuildingId
	toSerialize["id"] = o.Id
	toSerialize["versionLock"] = o.VersionLock
	return toSerialize, nil
}

type NullableLocationInformation struct {
	value *LocationInformation
	isSet bool
}

func (v NullableLocationInformation) Get() *LocationInformation {
	return v.value
}

func (v *NullableLocationInformation) Set(val *LocationInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationInformation(val *LocationInformation) *NullableLocationInformation {
	return &NullableLocationInformation{value: val, isSet: true}
}

func (v NullableLocationInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


