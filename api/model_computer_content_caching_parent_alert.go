/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// checks if the ComputerContentCachingParentAlert type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComputerContentCachingParentAlert{}

// ComputerContentCachingParentAlert struct for ComputerContentCachingParentAlert
type ComputerContentCachingParentAlert struct {
	ContentCachingParentAlertId *string `json:"contentCachingParentAlertId,omitempty"`
	Addresses []string `json:"addresses,omitempty"`
	ClassName *string `json:"className,omitempty"`
	PostDate *time.Time `json:"postDate,omitempty"`
}

// NewComputerContentCachingParentAlert instantiates a new ComputerContentCachingParentAlert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputerContentCachingParentAlert() *ComputerContentCachingParentAlert {
	this := ComputerContentCachingParentAlert{}
	return &this
}

// NewComputerContentCachingParentAlertWithDefaults instantiates a new ComputerContentCachingParentAlert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputerContentCachingParentAlertWithDefaults() *ComputerContentCachingParentAlert {
	this := ComputerContentCachingParentAlert{}
	return &this
}

// GetContentCachingParentAlertId returns the ContentCachingParentAlertId field value if set, zero value otherwise.
func (o *ComputerContentCachingParentAlert) GetContentCachingParentAlertId() string {
	if o == nil || IsNil(o.ContentCachingParentAlertId) {
		var ret string
		return ret
	}
	return *o.ContentCachingParentAlertId
}

// GetContentCachingParentAlertIdOk returns a tuple with the ContentCachingParentAlertId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCachingParentAlert) GetContentCachingParentAlertIdOk() (*string, bool) {
	if o == nil || IsNil(o.ContentCachingParentAlertId) {
		return nil, false
	}
	return o.ContentCachingParentAlertId, true
}

// HasContentCachingParentAlertId returns a boolean if a field has been set.
func (o *ComputerContentCachingParentAlert) HasContentCachingParentAlertId() bool {
	if o != nil && !IsNil(o.ContentCachingParentAlertId) {
		return true
	}

	return false
}

// SetContentCachingParentAlertId gets a reference to the given string and assigns it to the ContentCachingParentAlertId field.
func (o *ComputerContentCachingParentAlert) SetContentCachingParentAlertId(v string) {
	o.ContentCachingParentAlertId = &v
}

// GetAddresses returns the Addresses field value if set, zero value otherwise.
func (o *ComputerContentCachingParentAlert) GetAddresses() []string {
	if o == nil || IsNil(o.Addresses) {
		var ret []string
		return ret
	}
	return o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCachingParentAlert) GetAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.Addresses) {
		return nil, false
	}
	return o.Addresses, true
}

// HasAddresses returns a boolean if a field has been set.
func (o *ComputerContentCachingParentAlert) HasAddresses() bool {
	if o != nil && !IsNil(o.Addresses) {
		return true
	}

	return false
}

// SetAddresses gets a reference to the given []string and assigns it to the Addresses field.
func (o *ComputerContentCachingParentAlert) SetAddresses(v []string) {
	o.Addresses = v
}

// GetClassName returns the ClassName field value if set, zero value otherwise.
func (o *ComputerContentCachingParentAlert) GetClassName() string {
	if o == nil || IsNil(o.ClassName) {
		var ret string
		return ret
	}
	return *o.ClassName
}

// GetClassNameOk returns a tuple with the ClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCachingParentAlert) GetClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.ClassName) {
		return nil, false
	}
	return o.ClassName, true
}

// HasClassName returns a boolean if a field has been set.
func (o *ComputerContentCachingParentAlert) HasClassName() bool {
	if o != nil && !IsNil(o.ClassName) {
		return true
	}

	return false
}

// SetClassName gets a reference to the given string and assigns it to the ClassName field.
func (o *ComputerContentCachingParentAlert) SetClassName(v string) {
	o.ClassName = &v
}

// GetPostDate returns the PostDate field value if set, zero value otherwise.
func (o *ComputerContentCachingParentAlert) GetPostDate() time.Time {
	if o == nil || IsNil(o.PostDate) {
		var ret time.Time
		return ret
	}
	return *o.PostDate
}

// GetPostDateOk returns a tuple with the PostDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCachingParentAlert) GetPostDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PostDate) {
		return nil, false
	}
	return o.PostDate, true
}

// HasPostDate returns a boolean if a field has been set.
func (o *ComputerContentCachingParentAlert) HasPostDate() bool {
	if o != nil && !IsNil(o.PostDate) {
		return true
	}

	return false
}

// SetPostDate gets a reference to the given time.Time and assigns it to the PostDate field.
func (o *ComputerContentCachingParentAlert) SetPostDate(v time.Time) {
	o.PostDate = &v
}

func (o ComputerContentCachingParentAlert) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComputerContentCachingParentAlert) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContentCachingParentAlertId) {
		toSerialize["contentCachingParentAlertId"] = o.ContentCachingParentAlertId
	}
	if !IsNil(o.Addresses) {
		toSerialize["addresses"] = o.Addresses
	}
	if !IsNil(o.ClassName) {
		toSerialize["className"] = o.ClassName
	}
	if !IsNil(o.PostDate) {
		toSerialize["postDate"] = o.PostDate
	}
	return toSerialize, nil
}

type NullableComputerContentCachingParentAlert struct {
	value *ComputerContentCachingParentAlert
	isSet bool
}

func (v NullableComputerContentCachingParentAlert) Get() *ComputerContentCachingParentAlert {
	return v.value
}

func (v *NullableComputerContentCachingParentAlert) Set(val *ComputerContentCachingParentAlert) {
	v.value = val
	v.isSet = true
}

func (v NullableComputerContentCachingParentAlert) IsSet() bool {
	return v.isSet
}

func (v *NullableComputerContentCachingParentAlert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputerContentCachingParentAlert(val *ComputerContentCachingParentAlert) *NullableComputerContentCachingParentAlert {
	return &NullableComputerContentCachingParentAlert{value: val, isSet: true}
}

func (v NullableComputerContentCachingParentAlert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputerContentCachingParentAlert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


