/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the AvailableOsUpdatesAvailableUpdates type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AvailableOsUpdatesAvailableUpdates{}

// AvailableOsUpdatesAvailableUpdates struct for AvailableOsUpdatesAvailableUpdates
type AvailableOsUpdatesAvailableUpdates struct {
	MacOS []string `json:"macOS,omitempty"`
	IOS []string `json:"iOS,omitempty"`
}

// NewAvailableOsUpdatesAvailableUpdates instantiates a new AvailableOsUpdatesAvailableUpdates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailableOsUpdatesAvailableUpdates() *AvailableOsUpdatesAvailableUpdates {
	this := AvailableOsUpdatesAvailableUpdates{}
	return &this
}

// NewAvailableOsUpdatesAvailableUpdatesWithDefaults instantiates a new AvailableOsUpdatesAvailableUpdates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailableOsUpdatesAvailableUpdatesWithDefaults() *AvailableOsUpdatesAvailableUpdates {
	this := AvailableOsUpdatesAvailableUpdates{}
	return &this
}

// GetMacOS returns the MacOS field value if set, zero value otherwise.
func (o *AvailableOsUpdatesAvailableUpdates) GetMacOS() []string {
	if o == nil || IsNil(o.MacOS) {
		var ret []string
		return ret
	}
	return o.MacOS
}

// GetMacOSOk returns a tuple with the MacOS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableOsUpdatesAvailableUpdates) GetMacOSOk() ([]string, bool) {
	if o == nil || IsNil(o.MacOS) {
		return nil, false
	}
	return o.MacOS, true
}

// HasMacOS returns a boolean if a field has been set.
func (o *AvailableOsUpdatesAvailableUpdates) HasMacOS() bool {
	if o != nil && !IsNil(o.MacOS) {
		return true
	}

	return false
}

// SetMacOS gets a reference to the given []string and assigns it to the MacOS field.
func (o *AvailableOsUpdatesAvailableUpdates) SetMacOS(v []string) {
	o.MacOS = v
}

// GetIOS returns the IOS field value if set, zero value otherwise.
func (o *AvailableOsUpdatesAvailableUpdates) GetIOS() []string {
	if o == nil || IsNil(o.IOS) {
		var ret []string
		return ret
	}
	return o.IOS
}

// GetIOSOk returns a tuple with the IOS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableOsUpdatesAvailableUpdates) GetIOSOk() ([]string, bool) {
	if o == nil || IsNil(o.IOS) {
		return nil, false
	}
	return o.IOS, true
}

// HasIOS returns a boolean if a field has been set.
func (o *AvailableOsUpdatesAvailableUpdates) HasIOS() bool {
	if o != nil && !IsNil(o.IOS) {
		return true
	}

	return false
}

// SetIOS gets a reference to the given []string and assigns it to the IOS field.
func (o *AvailableOsUpdatesAvailableUpdates) SetIOS(v []string) {
	o.IOS = v
}

func (o AvailableOsUpdatesAvailableUpdates) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AvailableOsUpdatesAvailableUpdates) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MacOS) {
		toSerialize["macOS"] = o.MacOS
	}
	if !IsNil(o.IOS) {
		toSerialize["iOS"] = o.IOS
	}
	return toSerialize, nil
}

type NullableAvailableOsUpdatesAvailableUpdates struct {
	value *AvailableOsUpdatesAvailableUpdates
	isSet bool
}

func (v NullableAvailableOsUpdatesAvailableUpdates) Get() *AvailableOsUpdatesAvailableUpdates {
	return v.value
}

func (v *NullableAvailableOsUpdatesAvailableUpdates) Set(val *AvailableOsUpdatesAvailableUpdates) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailableOsUpdatesAvailableUpdates) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailableOsUpdatesAvailableUpdates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailableOsUpdatesAvailableUpdates(val *AvailableOsUpdatesAvailableUpdates) *NullableAvailableOsUpdatesAvailableUpdates {
	return &NullableAvailableOsUpdatesAvailableUpdates{value: val, isSet: true}
}

func (v NullableAvailableOsUpdatesAvailableUpdates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailableOsUpdatesAvailableUpdates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


