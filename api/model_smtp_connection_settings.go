/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SmtpConnectionSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmtpConnectionSettings{}

// SmtpConnectionSettings struct for SmtpConnectionSettings
type SmtpConnectionSettings struct {
	Host string `json:"host"`
	Port int64 `json:"port"`
	EncryptionType string `json:"encryptionType"`
	ConnectionTimeout int64 `json:"connectionTimeout"`
}

type _SmtpConnectionSettings SmtpConnectionSettings

// NewSmtpConnectionSettings instantiates a new SmtpConnectionSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmtpConnectionSettings(host string, port int64, encryptionType string, connectionTimeout int64) *SmtpConnectionSettings {
	this := SmtpConnectionSettings{}
	this.Host = host
	this.Port = port
	this.EncryptionType = encryptionType
	this.ConnectionTimeout = connectionTimeout
	return &this
}

// NewSmtpConnectionSettingsWithDefaults instantiates a new SmtpConnectionSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmtpConnectionSettingsWithDefaults() *SmtpConnectionSettings {
	this := SmtpConnectionSettings{}
	var host string = ""
	this.Host = host
	var port int64 = 25
	this.Port = port
	var encryptionType string = "NONE"
	this.EncryptionType = encryptionType
	var connectionTimeout int64 = 5
	this.ConnectionTimeout = connectionTimeout
	return &this
}

// GetHost returns the Host field value
func (o *SmtpConnectionSettings) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *SmtpConnectionSettings) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *SmtpConnectionSettings) SetHost(v string) {
	o.Host = v
}

// GetPort returns the Port field value
func (o *SmtpConnectionSettings) GetPort() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *SmtpConnectionSettings) GetPortOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *SmtpConnectionSettings) SetPort(v int64) {
	o.Port = v
}

// GetEncryptionType returns the EncryptionType field value
func (o *SmtpConnectionSettings) GetEncryptionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EncryptionType
}

// GetEncryptionTypeOk returns a tuple with the EncryptionType field value
// and a boolean to check if the value has been set.
func (o *SmtpConnectionSettings) GetEncryptionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EncryptionType, true
}

// SetEncryptionType sets field value
func (o *SmtpConnectionSettings) SetEncryptionType(v string) {
	o.EncryptionType = v
}

// GetConnectionTimeout returns the ConnectionTimeout field value
func (o *SmtpConnectionSettings) GetConnectionTimeout() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ConnectionTimeout
}

// GetConnectionTimeoutOk returns a tuple with the ConnectionTimeout field value
// and a boolean to check if the value has been set.
func (o *SmtpConnectionSettings) GetConnectionTimeoutOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionTimeout, true
}

// SetConnectionTimeout sets field value
func (o *SmtpConnectionSettings) SetConnectionTimeout(v int64) {
	o.ConnectionTimeout = v
}

func (o SmtpConnectionSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmtpConnectionSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["host"] = o.Host
	toSerialize["port"] = o.Port
	toSerialize["encryptionType"] = o.EncryptionType
	toSerialize["connectionTimeout"] = o.ConnectionTimeout
	return toSerialize, nil
}

func (o *SmtpConnectionSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"host",
		"port",
		"encryptionType",
		"connectionTimeout",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSmtpConnectionSettings := _SmtpConnectionSettings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSmtpConnectionSettings)

	if err != nil {
		return err
	}

	*o = SmtpConnectionSettings(varSmtpConnectionSettings)

	return err
}

type NullableSmtpConnectionSettings struct {
	value *SmtpConnectionSettings
	isSet bool
}

func (v NullableSmtpConnectionSettings) Get() *SmtpConnectionSettings {
	return v.value
}

func (v *NullableSmtpConnectionSettings) Set(val *SmtpConnectionSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableSmtpConnectionSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableSmtpConnectionSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmtpConnectionSettings(val *SmtpConnectionSettings) *NullableSmtpConnectionSettings {
	return &NullableSmtpConnectionSettings{value: val, isSet: true}
}

func (v NullableSmtpConnectionSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmtpConnectionSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


