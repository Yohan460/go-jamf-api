/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ComputerContentCachingParentDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComputerContentCachingParentDetails{}

// ComputerContentCachingParentDetails struct for ComputerContentCachingParentDetails
type ComputerContentCachingParentDetails struct {
	ContentCachingParentDetailsId *string `json:"contentCachingParentDetailsId,omitempty"`
	AcPower *bool `json:"acPower,omitempty"`
	CacheSizeBytes *int64 `json:"cacheSizeBytes,omitempty"`
	Capabilities *ComputerContentCachingParentCapabilities `json:"capabilities,omitempty"`
	Portable *bool `json:"portable,omitempty"`
	LocalNetwork []ComputerContentCachingParentLocalNetwork `json:"localNetwork,omitempty"`
}

// NewComputerContentCachingParentDetails instantiates a new ComputerContentCachingParentDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputerContentCachingParentDetails() *ComputerContentCachingParentDetails {
	this := ComputerContentCachingParentDetails{}
	return &this
}

// NewComputerContentCachingParentDetailsWithDefaults instantiates a new ComputerContentCachingParentDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputerContentCachingParentDetailsWithDefaults() *ComputerContentCachingParentDetails {
	this := ComputerContentCachingParentDetails{}
	return &this
}

// GetContentCachingParentDetailsId returns the ContentCachingParentDetailsId field value if set, zero value otherwise.
func (o *ComputerContentCachingParentDetails) GetContentCachingParentDetailsId() string {
	if o == nil || IsNil(o.ContentCachingParentDetailsId) {
		var ret string
		return ret
	}
	return *o.ContentCachingParentDetailsId
}

// GetContentCachingParentDetailsIdOk returns a tuple with the ContentCachingParentDetailsId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCachingParentDetails) GetContentCachingParentDetailsIdOk() (*string, bool) {
	if o == nil || IsNil(o.ContentCachingParentDetailsId) {
		return nil, false
	}
	return o.ContentCachingParentDetailsId, true
}

// HasContentCachingParentDetailsId returns a boolean if a field has been set.
func (o *ComputerContentCachingParentDetails) HasContentCachingParentDetailsId() bool {
	if o != nil && !IsNil(o.ContentCachingParentDetailsId) {
		return true
	}

	return false
}

// SetContentCachingParentDetailsId gets a reference to the given string and assigns it to the ContentCachingParentDetailsId field.
func (o *ComputerContentCachingParentDetails) SetContentCachingParentDetailsId(v string) {
	o.ContentCachingParentDetailsId = &v
}

// GetAcPower returns the AcPower field value if set, zero value otherwise.
func (o *ComputerContentCachingParentDetails) GetAcPower() bool {
	if o == nil || IsNil(o.AcPower) {
		var ret bool
		return ret
	}
	return *o.AcPower
}

// GetAcPowerOk returns a tuple with the AcPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCachingParentDetails) GetAcPowerOk() (*bool, bool) {
	if o == nil || IsNil(o.AcPower) {
		return nil, false
	}
	return o.AcPower, true
}

// HasAcPower returns a boolean if a field has been set.
func (o *ComputerContentCachingParentDetails) HasAcPower() bool {
	if o != nil && !IsNil(o.AcPower) {
		return true
	}

	return false
}

// SetAcPower gets a reference to the given bool and assigns it to the AcPower field.
func (o *ComputerContentCachingParentDetails) SetAcPower(v bool) {
	o.AcPower = &v
}

// GetCacheSizeBytes returns the CacheSizeBytes field value if set, zero value otherwise.
func (o *ComputerContentCachingParentDetails) GetCacheSizeBytes() int64 {
	if o == nil || IsNil(o.CacheSizeBytes) {
		var ret int64
		return ret
	}
	return *o.CacheSizeBytes
}

// GetCacheSizeBytesOk returns a tuple with the CacheSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCachingParentDetails) GetCacheSizeBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.CacheSizeBytes) {
		return nil, false
	}
	return o.CacheSizeBytes, true
}

// HasCacheSizeBytes returns a boolean if a field has been set.
func (o *ComputerContentCachingParentDetails) HasCacheSizeBytes() bool {
	if o != nil && !IsNil(o.CacheSizeBytes) {
		return true
	}

	return false
}

// SetCacheSizeBytes gets a reference to the given int64 and assigns it to the CacheSizeBytes field.
func (o *ComputerContentCachingParentDetails) SetCacheSizeBytes(v int64) {
	o.CacheSizeBytes = &v
}

// GetCapabilities returns the Capabilities field value if set, zero value otherwise.
func (o *ComputerContentCachingParentDetails) GetCapabilities() ComputerContentCachingParentCapabilities {
	if o == nil || IsNil(o.Capabilities) {
		var ret ComputerContentCachingParentCapabilities
		return ret
	}
	return *o.Capabilities
}

// GetCapabilitiesOk returns a tuple with the Capabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCachingParentDetails) GetCapabilitiesOk() (*ComputerContentCachingParentCapabilities, bool) {
	if o == nil || IsNil(o.Capabilities) {
		return nil, false
	}
	return o.Capabilities, true
}

// HasCapabilities returns a boolean if a field has been set.
func (o *ComputerContentCachingParentDetails) HasCapabilities() bool {
	if o != nil && !IsNil(o.Capabilities) {
		return true
	}

	return false
}

// SetCapabilities gets a reference to the given ComputerContentCachingParentCapabilities and assigns it to the Capabilities field.
func (o *ComputerContentCachingParentDetails) SetCapabilities(v ComputerContentCachingParentCapabilities) {
	o.Capabilities = &v
}

// GetPortable returns the Portable field value if set, zero value otherwise.
func (o *ComputerContentCachingParentDetails) GetPortable() bool {
	if o == nil || IsNil(o.Portable) {
		var ret bool
		return ret
	}
	return *o.Portable
}

// GetPortableOk returns a tuple with the Portable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCachingParentDetails) GetPortableOk() (*bool, bool) {
	if o == nil || IsNil(o.Portable) {
		return nil, false
	}
	return o.Portable, true
}

// HasPortable returns a boolean if a field has been set.
func (o *ComputerContentCachingParentDetails) HasPortable() bool {
	if o != nil && !IsNil(o.Portable) {
		return true
	}

	return false
}

// SetPortable gets a reference to the given bool and assigns it to the Portable field.
func (o *ComputerContentCachingParentDetails) SetPortable(v bool) {
	o.Portable = &v
}

// GetLocalNetwork returns the LocalNetwork field value if set, zero value otherwise.
func (o *ComputerContentCachingParentDetails) GetLocalNetwork() []ComputerContentCachingParentLocalNetwork {
	if o == nil || IsNil(o.LocalNetwork) {
		var ret []ComputerContentCachingParentLocalNetwork
		return ret
	}
	return o.LocalNetwork
}

// GetLocalNetworkOk returns a tuple with the LocalNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerContentCachingParentDetails) GetLocalNetworkOk() ([]ComputerContentCachingParentLocalNetwork, bool) {
	if o == nil || IsNil(o.LocalNetwork) {
		return nil, false
	}
	return o.LocalNetwork, true
}

// HasLocalNetwork returns a boolean if a field has been set.
func (o *ComputerContentCachingParentDetails) HasLocalNetwork() bool {
	if o != nil && !IsNil(o.LocalNetwork) {
		return true
	}

	return false
}

// SetLocalNetwork gets a reference to the given []ComputerContentCachingParentLocalNetwork and assigns it to the LocalNetwork field.
func (o *ComputerContentCachingParentDetails) SetLocalNetwork(v []ComputerContentCachingParentLocalNetwork) {
	o.LocalNetwork = v
}

func (o ComputerContentCachingParentDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComputerContentCachingParentDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContentCachingParentDetailsId) {
		toSerialize["contentCachingParentDetailsId"] = o.ContentCachingParentDetailsId
	}
	if !IsNil(o.AcPower) {
		toSerialize["acPower"] = o.AcPower
	}
	if !IsNil(o.CacheSizeBytes) {
		toSerialize["cacheSizeBytes"] = o.CacheSizeBytes
	}
	if !IsNil(o.Capabilities) {
		toSerialize["capabilities"] = o.Capabilities
	}
	if !IsNil(o.Portable) {
		toSerialize["portable"] = o.Portable
	}
	if !IsNil(o.LocalNetwork) {
		toSerialize["localNetwork"] = o.LocalNetwork
	}
	return toSerialize, nil
}

type NullableComputerContentCachingParentDetails struct {
	value *ComputerContentCachingParentDetails
	isSet bool
}

func (v NullableComputerContentCachingParentDetails) Get() *ComputerContentCachingParentDetails {
	return v.value
}

func (v *NullableComputerContentCachingParentDetails) Set(val *ComputerContentCachingParentDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableComputerContentCachingParentDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableComputerContentCachingParentDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputerContentCachingParentDetails(val *ComputerContentCachingParentDetails) *NullableComputerContentCachingParentDetails {
	return &NullableComputerContentCachingParentDetails{value: val, isSet: true}
}

func (v NullableComputerContentCachingParentDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputerContentCachingParentDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


