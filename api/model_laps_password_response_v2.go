/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the LapsPasswordResponseV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LapsPasswordResponseV2{}

// LapsPasswordResponseV2 struct for LapsPasswordResponseV2
type LapsPasswordResponseV2 struct {
	Password *string `json:"password,omitempty"`
}

// NewLapsPasswordResponseV2 instantiates a new LapsPasswordResponseV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLapsPasswordResponseV2() *LapsPasswordResponseV2 {
	this := LapsPasswordResponseV2{}
	return &this
}

// NewLapsPasswordResponseV2WithDefaults instantiates a new LapsPasswordResponseV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLapsPasswordResponseV2WithDefaults() *LapsPasswordResponseV2 {
	this := LapsPasswordResponseV2{}
	return &this
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *LapsPasswordResponseV2) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LapsPasswordResponseV2) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *LapsPasswordResponseV2) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *LapsPasswordResponseV2) SetPassword(v string) {
	o.Password = &v
}

func (o LapsPasswordResponseV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LapsPasswordResponseV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	return toSerialize, nil
}

type NullableLapsPasswordResponseV2 struct {
	value *LapsPasswordResponseV2
	isSet bool
}

func (v NullableLapsPasswordResponseV2) Get() *LapsPasswordResponseV2 {
	return v.value
}

func (v *NullableLapsPasswordResponseV2) Set(val *LapsPasswordResponseV2) {
	v.value = val
	v.isSet = true
}

func (v NullableLapsPasswordResponseV2) IsSet() bool {
	return v.isSet
}

func (v *NullableLapsPasswordResponseV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLapsPasswordResponseV2(val *LapsPasswordResponseV2) *NullableLapsPasswordResponseV2 {
	return &NullableLapsPasswordResponseV2{value: val, isSet: true}
}

func (v NullableLapsPasswordResponseV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLapsPasswordResponseV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


