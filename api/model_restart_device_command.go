/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// RestartDeviceCommand struct for RestartDeviceCommand
type RestartDeviceCommand struct {
	RebuildKernelCache *bool `json:"rebuildKernelCache,omitempty"`
	// Only used if RebuildKernelCache is true
	KextPaths []string `json:"kextPaths,omitempty"`
	NotifyUser *bool `json:"notifyUser,omitempty"`
}

// NewRestartDeviceCommand instantiates a new RestartDeviceCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestartDeviceCommand() *RestartDeviceCommand {
	this := RestartDeviceCommand{}
	return &this
}

// NewRestartDeviceCommandWithDefaults instantiates a new RestartDeviceCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestartDeviceCommandWithDefaults() *RestartDeviceCommand {
	this := RestartDeviceCommand{}
	return &this
}

// GetRebuildKernelCache returns the RebuildKernelCache field value if set, zero value otherwise.
func (o *RestartDeviceCommand) GetRebuildKernelCache() bool {
	if o == nil || o.RebuildKernelCache == nil {
		var ret bool
		return ret
	}
	return *o.RebuildKernelCache
}

// GetRebuildKernelCacheOk returns a tuple with the RebuildKernelCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestartDeviceCommand) GetRebuildKernelCacheOk() (*bool, bool) {
	if o == nil || o.RebuildKernelCache == nil {
		return nil, false
	}
	return o.RebuildKernelCache, true
}

// HasRebuildKernelCache returns a boolean if a field has been set.
func (o *RestartDeviceCommand) HasRebuildKernelCache() bool {
	if o != nil && o.RebuildKernelCache != nil {
		return true
	}

	return false
}

// SetRebuildKernelCache gets a reference to the given bool and assigns it to the RebuildKernelCache field.
func (o *RestartDeviceCommand) SetRebuildKernelCache(v bool) {
	o.RebuildKernelCache = &v
}

// GetKextPaths returns the KextPaths field value if set, zero value otherwise.
func (o *RestartDeviceCommand) GetKextPaths() []string {
	if o == nil || o.KextPaths == nil {
		var ret []string
		return ret
	}
	return o.KextPaths
}

// GetKextPathsOk returns a tuple with the KextPaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestartDeviceCommand) GetKextPathsOk() ([]string, bool) {
	if o == nil || o.KextPaths == nil {
		return nil, false
	}
	return o.KextPaths, true
}

// HasKextPaths returns a boolean if a field has been set.
func (o *RestartDeviceCommand) HasKextPaths() bool {
	if o != nil && o.KextPaths != nil {
		return true
	}

	return false
}

// SetKextPaths gets a reference to the given []string and assigns it to the KextPaths field.
func (o *RestartDeviceCommand) SetKextPaths(v []string) {
	o.KextPaths = v
}

// GetNotifyUser returns the NotifyUser field value if set, zero value otherwise.
func (o *RestartDeviceCommand) GetNotifyUser() bool {
	if o == nil || o.NotifyUser == nil {
		var ret bool
		return ret
	}
	return *o.NotifyUser
}

// GetNotifyUserOk returns a tuple with the NotifyUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestartDeviceCommand) GetNotifyUserOk() (*bool, bool) {
	if o == nil || o.NotifyUser == nil {
		return nil, false
	}
	return o.NotifyUser, true
}

// HasNotifyUser returns a boolean if a field has been set.
func (o *RestartDeviceCommand) HasNotifyUser() bool {
	if o != nil && o.NotifyUser != nil {
		return true
	}

	return false
}

// SetNotifyUser gets a reference to the given bool and assigns it to the NotifyUser field.
func (o *RestartDeviceCommand) SetNotifyUser(v bool) {
	o.NotifyUser = &v
}

func (o RestartDeviceCommand) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RebuildKernelCache != nil {
		toSerialize["rebuildKernelCache"] = o.RebuildKernelCache
	}
	if o.KextPaths != nil {
		toSerialize["kextPaths"] = o.KextPaths
	}
	if o.NotifyUser != nil {
		toSerialize["notifyUser"] = o.NotifyUser
	}
	return json.Marshal(toSerialize)
}

type NullableRestartDeviceCommand struct {
	value *RestartDeviceCommand
	isSet bool
}

func (v NullableRestartDeviceCommand) Get() *RestartDeviceCommand {
	return v.value
}

func (v *NullableRestartDeviceCommand) Set(val *RestartDeviceCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableRestartDeviceCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableRestartDeviceCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestartDeviceCommand(val *RestartDeviceCommand) *NullableRestartDeviceCommand {
	return &NullableRestartDeviceCommand{value: val, isSet: true}
}

func (v NullableRestartDeviceCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestartDeviceCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


