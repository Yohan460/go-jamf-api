/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RestartDeviceCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestartDeviceCommand{}

// RestartDeviceCommand struct for RestartDeviceCommand
type RestartDeviceCommand struct {
	CommandType MdmCommandType `json:"commandType"`
	RebuildKernelCache *bool `json:"rebuildKernelCache,omitempty"`
	// Only used if RebuildKernelCache is true
	KextPaths []string `json:"kextPaths,omitempty"`
	NotifyUser *bool `json:"notifyUser,omitempty"`
}

type _RestartDeviceCommand RestartDeviceCommand

// NewRestartDeviceCommand instantiates a new RestartDeviceCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestartDeviceCommand(commandType MdmCommandType) *RestartDeviceCommand {
	this := RestartDeviceCommand{}
	this.CommandType = commandType
	return &this
}

// NewRestartDeviceCommandWithDefaults instantiates a new RestartDeviceCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestartDeviceCommandWithDefaults() *RestartDeviceCommand {
	this := RestartDeviceCommand{}
	return &this
}

// GetCommandType returns the CommandType field value
func (o *RestartDeviceCommand) GetCommandType() MdmCommandType {
	if o == nil {
		var ret MdmCommandType
		return ret
	}

	return o.CommandType
}

// GetCommandTypeOk returns a tuple with the CommandType field value
// and a boolean to check if the value has been set.
func (o *RestartDeviceCommand) GetCommandTypeOk() (*MdmCommandType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommandType, true
}

// SetCommandType sets field value
func (o *RestartDeviceCommand) SetCommandType(v MdmCommandType) {
	o.CommandType = v
}

// GetRebuildKernelCache returns the RebuildKernelCache field value if set, zero value otherwise.
func (o *RestartDeviceCommand) GetRebuildKernelCache() bool {
	if o == nil || IsNil(o.RebuildKernelCache) {
		var ret bool
		return ret
	}
	return *o.RebuildKernelCache
}

// GetRebuildKernelCacheOk returns a tuple with the RebuildKernelCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestartDeviceCommand) GetRebuildKernelCacheOk() (*bool, bool) {
	if o == nil || IsNil(o.RebuildKernelCache) {
		return nil, false
	}
	return o.RebuildKernelCache, true
}

// HasRebuildKernelCache returns a boolean if a field has been set.
func (o *RestartDeviceCommand) HasRebuildKernelCache() bool {
	if o != nil && !IsNil(o.RebuildKernelCache) {
		return true
	}

	return false
}

// SetRebuildKernelCache gets a reference to the given bool and assigns it to the RebuildKernelCache field.
func (o *RestartDeviceCommand) SetRebuildKernelCache(v bool) {
	o.RebuildKernelCache = &v
}

// GetKextPaths returns the KextPaths field value if set, zero value otherwise.
func (o *RestartDeviceCommand) GetKextPaths() []string {
	if o == nil || IsNil(o.KextPaths) {
		var ret []string
		return ret
	}
	return o.KextPaths
}

// GetKextPathsOk returns a tuple with the KextPaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestartDeviceCommand) GetKextPathsOk() ([]string, bool) {
	if o == nil || IsNil(o.KextPaths) {
		return nil, false
	}
	return o.KextPaths, true
}

// HasKextPaths returns a boolean if a field has been set.
func (o *RestartDeviceCommand) HasKextPaths() bool {
	if o != nil && !IsNil(o.KextPaths) {
		return true
	}

	return false
}

// SetKextPaths gets a reference to the given []string and assigns it to the KextPaths field.
func (o *RestartDeviceCommand) SetKextPaths(v []string) {
	o.KextPaths = v
}

// GetNotifyUser returns the NotifyUser field value if set, zero value otherwise.
func (o *RestartDeviceCommand) GetNotifyUser() bool {
	if o == nil || IsNil(o.NotifyUser) {
		var ret bool
		return ret
	}
	return *o.NotifyUser
}

// GetNotifyUserOk returns a tuple with the NotifyUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestartDeviceCommand) GetNotifyUserOk() (*bool, bool) {
	if o == nil || IsNil(o.NotifyUser) {
		return nil, false
	}
	return o.NotifyUser, true
}

// HasNotifyUser returns a boolean if a field has been set.
func (o *RestartDeviceCommand) HasNotifyUser() bool {
	if o != nil && !IsNil(o.NotifyUser) {
		return true
	}

	return false
}

// SetNotifyUser gets a reference to the given bool and assigns it to the NotifyUser field.
func (o *RestartDeviceCommand) SetNotifyUser(v bool) {
	o.NotifyUser = &v
}

func (o RestartDeviceCommand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestartDeviceCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["commandType"] = o.CommandType
	if !IsNil(o.RebuildKernelCache) {
		toSerialize["rebuildKernelCache"] = o.RebuildKernelCache
	}
	if !IsNil(o.KextPaths) {
		toSerialize["kextPaths"] = o.KextPaths
	}
	if !IsNil(o.NotifyUser) {
		toSerialize["notifyUser"] = o.NotifyUser
	}
	return toSerialize, nil
}

func (o *RestartDeviceCommand) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"commandType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRestartDeviceCommand := _RestartDeviceCommand{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRestartDeviceCommand)

	if err != nil {
		return err
	}

	*o = RestartDeviceCommand(varRestartDeviceCommand)

	return err
}

type NullableRestartDeviceCommand struct {
	value *RestartDeviceCommand
	isSet bool
}

func (v NullableRestartDeviceCommand) Get() *RestartDeviceCommand {
	return v.value
}

func (v *NullableRestartDeviceCommand) Set(val *RestartDeviceCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableRestartDeviceCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableRestartDeviceCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestartDeviceCommand(val *RestartDeviceCommand) *NullableRestartDeviceCommand {
	return &NullableRestartDeviceCommand{value: val, isSet: true}
}

func (v NullableRestartDeviceCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestartDeviceCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


