/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MembershipMappings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MembershipMappings{}

// MembershipMappings Cloud Identity Provider user group membership mappings configuration
type MembershipMappings struct {
	GroupMembershipMapping string `json:"groupMembershipMapping"`
}

type _MembershipMappings MembershipMappings

// NewMembershipMappings instantiates a new MembershipMappings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMembershipMappings(groupMembershipMapping string) *MembershipMappings {
	this := MembershipMappings{}
	this.GroupMembershipMapping = groupMembershipMapping
	return &this
}

// NewMembershipMappingsWithDefaults instantiates a new MembershipMappings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMembershipMappingsWithDefaults() *MembershipMappings {
	this := MembershipMappings{}
	return &this
}

// GetGroupMembershipMapping returns the GroupMembershipMapping field value
func (o *MembershipMappings) GetGroupMembershipMapping() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupMembershipMapping
}

// GetGroupMembershipMappingOk returns a tuple with the GroupMembershipMapping field value
// and a boolean to check if the value has been set.
func (o *MembershipMappings) GetGroupMembershipMappingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupMembershipMapping, true
}

// SetGroupMembershipMapping sets field value
func (o *MembershipMappings) SetGroupMembershipMapping(v string) {
	o.GroupMembershipMapping = v
}

func (o MembershipMappings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MembershipMappings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["groupMembershipMapping"] = o.GroupMembershipMapping
	return toSerialize, nil
}

func (o *MembershipMappings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"groupMembershipMapping",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMembershipMappings := _MembershipMappings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMembershipMappings)

	if err != nil {
		return err
	}

	*o = MembershipMappings(varMembershipMappings)

	return err
}

type NullableMembershipMappings struct {
	value *MembershipMappings
	isSet bool
}

func (v NullableMembershipMappings) Get() *MembershipMappings {
	return v.value
}

func (v *NullableMembershipMappings) Set(val *MembershipMappings) {
	v.value = val
	v.isSet = true
}

func (v NullableMembershipMappings) IsSet() bool {
	return v.isSet
}

func (v *NullableMembershipMappings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembershipMappings(val *MembershipMappings) *NullableMembershipMappings {
	return &NullableMembershipMappings{value: val, isSet: true}
}

func (v NullableMembershipMappings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembershipMappings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


