/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PlanDevicePost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanDevicePost{}

// PlanDevicePost struct for PlanDevicePost
type PlanDevicePost struct {
	DeviceId string `json:"deviceId"`
	ObjectType string `json:"objectType"`
}

type _PlanDevicePost PlanDevicePost

// NewPlanDevicePost instantiates a new PlanDevicePost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanDevicePost(deviceId string, objectType string) *PlanDevicePost {
	this := PlanDevicePost{}
	this.DeviceId = deviceId
	this.ObjectType = objectType
	return &this
}

// NewPlanDevicePostWithDefaults instantiates a new PlanDevicePost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanDevicePostWithDefaults() *PlanDevicePost {
	this := PlanDevicePost{}
	return &this
}

// GetDeviceId returns the DeviceId field value
func (o *PlanDevicePost) GetDeviceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value
// and a boolean to check if the value has been set.
func (o *PlanDevicePost) GetDeviceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceId, true
}

// SetDeviceId sets field value
func (o *PlanDevicePost) SetDeviceId(v string) {
	o.DeviceId = v
}

// GetObjectType returns the ObjectType field value
func (o *PlanDevicePost) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *PlanDevicePost) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *PlanDevicePost) SetObjectType(v string) {
	o.ObjectType = v
}

func (o PlanDevicePost) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanDevicePost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["deviceId"] = o.DeviceId
	toSerialize["objectType"] = o.ObjectType
	return toSerialize, nil
}

func (o *PlanDevicePost) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"deviceId",
		"objectType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlanDevicePost := _PlanDevicePost{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPlanDevicePost)

	if err != nil {
		return err
	}

	*o = PlanDevicePost(varPlanDevicePost)

	return err
}

type NullablePlanDevicePost struct {
	value *PlanDevicePost
	isSet bool
}

func (v NullablePlanDevicePost) Get() *PlanDevicePost {
	return v.value
}

func (v *NullablePlanDevicePost) Set(val *PlanDevicePost) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanDevicePost) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanDevicePost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanDevicePost(val *PlanDevicePost) *NullablePlanDevicePost {
	return &NullablePlanDevicePost{value: val, isSet: true}
}

func (v NullablePlanDevicePost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanDevicePost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


