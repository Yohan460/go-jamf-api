/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ExtensionAttribute struct for ExtensionAttribute
type ExtensionAttribute struct {
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
	Value []string `json:"value,omitempty"`
	IsExtensionAttributeCollectionAllowed *bool `json:"isExtensionAttributeCollectionAllowed,omitempty"`
}

// NewExtensionAttribute instantiates a new ExtensionAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionAttribute() *ExtensionAttribute {
	this := ExtensionAttribute{}
	return &this
}

// NewExtensionAttributeWithDefaults instantiates a new ExtensionAttribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionAttributeWithDefaults() *ExtensionAttribute {
	this := ExtensionAttribute{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ExtensionAttribute) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionAttribute) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ExtensionAttribute) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ExtensionAttribute) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ExtensionAttribute) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionAttribute) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ExtensionAttribute) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ExtensionAttribute) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ExtensionAttribute) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionAttribute) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ExtensionAttribute) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ExtensionAttribute) SetType(v string) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ExtensionAttribute) GetValue() []string {
	if o == nil || o.Value == nil {
		var ret []string
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionAttribute) GetValueOk() ([]string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ExtensionAttribute) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given []string and assigns it to the Value field.
func (o *ExtensionAttribute) SetValue(v []string) {
	o.Value = v
}

// GetIsExtensionAttributeCollectionAllowed returns the IsExtensionAttributeCollectionAllowed field value if set, zero value otherwise.
func (o *ExtensionAttribute) GetIsExtensionAttributeCollectionAllowed() bool {
	if o == nil || o.IsExtensionAttributeCollectionAllowed == nil {
		var ret bool
		return ret
	}
	return *o.IsExtensionAttributeCollectionAllowed
}

// GetIsExtensionAttributeCollectionAllowedOk returns a tuple with the IsExtensionAttributeCollectionAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionAttribute) GetIsExtensionAttributeCollectionAllowedOk() (*bool, bool) {
	if o == nil || o.IsExtensionAttributeCollectionAllowed == nil {
		return nil, false
	}
	return o.IsExtensionAttributeCollectionAllowed, true
}

// HasIsExtensionAttributeCollectionAllowed returns a boolean if a field has been set.
func (o *ExtensionAttribute) HasIsExtensionAttributeCollectionAllowed() bool {
	if o != nil && o.IsExtensionAttributeCollectionAllowed != nil {
		return true
	}

	return false
}

// SetIsExtensionAttributeCollectionAllowed gets a reference to the given bool and assigns it to the IsExtensionAttributeCollectionAllowed field.
func (o *ExtensionAttribute) SetIsExtensionAttributeCollectionAllowed(v bool) {
	o.IsExtensionAttributeCollectionAllowed = &v
}

func (o ExtensionAttribute) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.IsExtensionAttributeCollectionAllowed != nil {
		toSerialize["isExtensionAttributeCollectionAllowed"] = o.IsExtensionAttributeCollectionAllowed
	}
	return json.Marshal(toSerialize)
}

type NullableExtensionAttribute struct {
	value *ExtensionAttribute
	isSet bool
}

func (v NullableExtensionAttribute) Get() *ExtensionAttribute {
	return v.value
}

func (v *NullableExtensionAttribute) Set(val *ExtensionAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionAttribute(val *ExtensionAttribute) *NullableExtensionAttribute {
	return &NullableExtensionAttribute{value: val, isSet: true}
}

func (v NullableExtensionAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


