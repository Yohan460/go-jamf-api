/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the PrestageScopeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrestageScopeResponse{}

// PrestageScopeResponse struct for PrestageScopeResponse
type PrestageScopeResponse struct {
	PrestageId *int64 `json:"prestageId,omitempty"`
	Assignments []PrestageScopeAssignment `json:"assignments,omitempty"`
	VersionLock *int64 `json:"versionLock,omitempty"`
}

// NewPrestageScopeResponse instantiates a new PrestageScopeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrestageScopeResponse() *PrestageScopeResponse {
	this := PrestageScopeResponse{}
	return &this
}

// NewPrestageScopeResponseWithDefaults instantiates a new PrestageScopeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrestageScopeResponseWithDefaults() *PrestageScopeResponse {
	this := PrestageScopeResponse{}
	return &this
}

// GetPrestageId returns the PrestageId field value if set, zero value otherwise.
func (o *PrestageScopeResponse) GetPrestageId() int64 {
	if o == nil || IsNil(o.PrestageId) {
		var ret int64
		return ret
	}
	return *o.PrestageId
}

// GetPrestageIdOk returns a tuple with the PrestageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrestageScopeResponse) GetPrestageIdOk() (*int64, bool) {
	if o == nil || IsNil(o.PrestageId) {
		return nil, false
	}
	return o.PrestageId, true
}

// HasPrestageId returns a boolean if a field has been set.
func (o *PrestageScopeResponse) HasPrestageId() bool {
	if o != nil && !IsNil(o.PrestageId) {
		return true
	}

	return false
}

// SetPrestageId gets a reference to the given int64 and assigns it to the PrestageId field.
func (o *PrestageScopeResponse) SetPrestageId(v int64) {
	o.PrestageId = &v
}

// GetAssignments returns the Assignments field value if set, zero value otherwise.
func (o *PrestageScopeResponse) GetAssignments() []PrestageScopeAssignment {
	if o == nil || IsNil(o.Assignments) {
		var ret []PrestageScopeAssignment
		return ret
	}
	return o.Assignments
}

// GetAssignmentsOk returns a tuple with the Assignments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrestageScopeResponse) GetAssignmentsOk() ([]PrestageScopeAssignment, bool) {
	if o == nil || IsNil(o.Assignments) {
		return nil, false
	}
	return o.Assignments, true
}

// HasAssignments returns a boolean if a field has been set.
func (o *PrestageScopeResponse) HasAssignments() bool {
	if o != nil && !IsNil(o.Assignments) {
		return true
	}

	return false
}

// SetAssignments gets a reference to the given []PrestageScopeAssignment and assigns it to the Assignments field.
func (o *PrestageScopeResponse) SetAssignments(v []PrestageScopeAssignment) {
	o.Assignments = v
}

// GetVersionLock returns the VersionLock field value if set, zero value otherwise.
func (o *PrestageScopeResponse) GetVersionLock() int64 {
	if o == nil || IsNil(o.VersionLock) {
		var ret int64
		return ret
	}
	return *o.VersionLock
}

// GetVersionLockOk returns a tuple with the VersionLock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrestageScopeResponse) GetVersionLockOk() (*int64, bool) {
	if o == nil || IsNil(o.VersionLock) {
		return nil, false
	}
	return o.VersionLock, true
}

// HasVersionLock returns a boolean if a field has been set.
func (o *PrestageScopeResponse) HasVersionLock() bool {
	if o != nil && !IsNil(o.VersionLock) {
		return true
	}

	return false
}

// SetVersionLock gets a reference to the given int64 and assigns it to the VersionLock field.
func (o *PrestageScopeResponse) SetVersionLock(v int64) {
	o.VersionLock = &v
}

func (o PrestageScopeResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrestageScopeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PrestageId) {
		toSerialize["prestageId"] = o.PrestageId
	}
	if !IsNil(o.Assignments) {
		toSerialize["assignments"] = o.Assignments
	}
	if !IsNil(o.VersionLock) {
		toSerialize["versionLock"] = o.VersionLock
	}
	return toSerialize, nil
}

type NullablePrestageScopeResponse struct {
	value *PrestageScopeResponse
	isSet bool
}

func (v NullablePrestageScopeResponse) Get() *PrestageScopeResponse {
	return v.value
}

func (v *NullablePrestageScopeResponse) Set(val *PrestageScopeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePrestageScopeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePrestageScopeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrestageScopeResponse(val *PrestageScopeResponse) *NullablePrestageScopeResponse {
	return &NullablePrestageScopeResponse{value: val, isSet: true}
}

func (v NullablePrestageScopeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrestageScopeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


