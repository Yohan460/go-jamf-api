/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the UpdateIos type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateIos{}

// UpdateIos struct for UpdateIos
type UpdateIos struct {
	Purchasing *Purchasing `json:"purchasing,omitempty"`
}

// NewUpdateIos instantiates a new UpdateIos object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateIos() *UpdateIos {
	this := UpdateIos{}
	return &this
}

// NewUpdateIosWithDefaults instantiates a new UpdateIos object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateIosWithDefaults() *UpdateIos {
	this := UpdateIos{}
	return &this
}

// GetPurchasing returns the Purchasing field value if set, zero value otherwise.
func (o *UpdateIos) GetPurchasing() Purchasing {
	if o == nil || IsNil(o.Purchasing) {
		var ret Purchasing
		return ret
	}
	return *o.Purchasing
}

// GetPurchasingOk returns a tuple with the Purchasing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIos) GetPurchasingOk() (*Purchasing, bool) {
	if o == nil || IsNil(o.Purchasing) {
		return nil, false
	}
	return o.Purchasing, true
}

// HasPurchasing returns a boolean if a field has been set.
func (o *UpdateIos) HasPurchasing() bool {
	if o != nil && !IsNil(o.Purchasing) {
		return true
	}

	return false
}

// SetPurchasing gets a reference to the given Purchasing and assigns it to the Purchasing field.
func (o *UpdateIos) SetPurchasing(v Purchasing) {
	o.Purchasing = &v
}

func (o UpdateIos) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateIos) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Purchasing) {
		toSerialize["purchasing"] = o.Purchasing
	}
	return toSerialize, nil
}

type NullableUpdateIos struct {
	value *UpdateIos
	isSet bool
}

func (v NullableUpdateIos) Get() *UpdateIos {
	return v.value
}

func (v *NullableUpdateIos) Set(val *UpdateIos) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateIos) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateIos) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateIos(val *UpdateIos) *NullableUpdateIos {
	return &NullableUpdateIos{value: val, isSet: true}
}

func (v NullableUpdateIos) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateIos) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


