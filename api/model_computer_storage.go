/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ComputerStorage struct for ComputerStorage
type ComputerStorage struct {
	BootDriveAvailableSpaceMegabytes *int64 `json:"bootDriveAvailableSpaceMegabytes,omitempty"`
	Disks []ComputerDisk `json:"disks,omitempty"`
}

// NewComputerStorage instantiates a new ComputerStorage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputerStorage() *ComputerStorage {
	this := ComputerStorage{}
	return &this
}

// NewComputerStorageWithDefaults instantiates a new ComputerStorage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputerStorageWithDefaults() *ComputerStorage {
	this := ComputerStorage{}
	return &this
}

// GetBootDriveAvailableSpaceMegabytes returns the BootDriveAvailableSpaceMegabytes field value if set, zero value otherwise.
func (o *ComputerStorage) GetBootDriveAvailableSpaceMegabytes() int64 {
	if o == nil || o.BootDriveAvailableSpaceMegabytes == nil {
		var ret int64
		return ret
	}
	return *o.BootDriveAvailableSpaceMegabytes
}

// GetBootDriveAvailableSpaceMegabytesOk returns a tuple with the BootDriveAvailableSpaceMegabytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerStorage) GetBootDriveAvailableSpaceMegabytesOk() (*int64, bool) {
	if o == nil || o.BootDriveAvailableSpaceMegabytes == nil {
		return nil, false
	}
	return o.BootDriveAvailableSpaceMegabytes, true
}

// HasBootDriveAvailableSpaceMegabytes returns a boolean if a field has been set.
func (o *ComputerStorage) HasBootDriveAvailableSpaceMegabytes() bool {
	if o != nil && o.BootDriveAvailableSpaceMegabytes != nil {
		return true
	}

	return false
}

// SetBootDriveAvailableSpaceMegabytes gets a reference to the given int64 and assigns it to the BootDriveAvailableSpaceMegabytes field.
func (o *ComputerStorage) SetBootDriveAvailableSpaceMegabytes(v int64) {
	o.BootDriveAvailableSpaceMegabytes = &v
}

// GetDisks returns the Disks field value if set, zero value otherwise.
func (o *ComputerStorage) GetDisks() []ComputerDisk {
	if o == nil || o.Disks == nil {
		var ret []ComputerDisk
		return ret
	}
	return o.Disks
}

// GetDisksOk returns a tuple with the Disks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerStorage) GetDisksOk() ([]ComputerDisk, bool) {
	if o == nil || o.Disks == nil {
		return nil, false
	}
	return o.Disks, true
}

// HasDisks returns a boolean if a field has been set.
func (o *ComputerStorage) HasDisks() bool {
	if o != nil && o.Disks != nil {
		return true
	}

	return false
}

// SetDisks gets a reference to the given []ComputerDisk and assigns it to the Disks field.
func (o *ComputerStorage) SetDisks(v []ComputerDisk) {
	o.Disks = v
}

func (o ComputerStorage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BootDriveAvailableSpaceMegabytes != nil {
		toSerialize["bootDriveAvailableSpaceMegabytes"] = o.BootDriveAvailableSpaceMegabytes
	}
	if o.Disks != nil {
		toSerialize["disks"] = o.Disks
	}
	return json.Marshal(toSerialize)
}

type NullableComputerStorage struct {
	value *ComputerStorage
	isSet bool
}

func (v NullableComputerStorage) Get() *ComputerStorage {
	return v.value
}

func (v *NullableComputerStorage) Set(val *ComputerStorage) {
	v.value = val
	v.isSet = true
}

func (v NullableComputerStorage) IsSet() bool {
	return v.isSet
}

func (v *NullableComputerStorage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputerStorage(val *ComputerStorage) *NullableComputerStorage {
	return &NullableComputerStorage{value: val, isSet: true}
}

func (v NullableComputerStorage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputerStorage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


