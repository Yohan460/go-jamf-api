/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the PlanStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanStatus{}

// PlanStatus struct for PlanStatus
type PlanStatus struct {
	State *string `json:"state,omitempty"`
	ErrorReasons []string `json:"errorReasons,omitempty"`
}

// NewPlanStatus instantiates a new PlanStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanStatus() *PlanStatus {
	this := PlanStatus{}
	return &this
}

// NewPlanStatusWithDefaults instantiates a new PlanStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanStatusWithDefaults() *PlanStatus {
	this := PlanStatus{}
	return &this
}

// GetState returns the State field value if set, zero value otherwise.
func (o *PlanStatus) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanStatus) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *PlanStatus) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *PlanStatus) SetState(v string) {
	o.State = &v
}

// GetErrorReasons returns the ErrorReasons field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlanStatus) GetErrorReasons() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ErrorReasons
}

// GetErrorReasonsOk returns a tuple with the ErrorReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlanStatus) GetErrorReasonsOk() ([]string, bool) {
	if o == nil || IsNil(o.ErrorReasons) {
		return nil, false
	}
	return o.ErrorReasons, true
}

// HasErrorReasons returns a boolean if a field has been set.
func (o *PlanStatus) HasErrorReasons() bool {
	if o != nil && !IsNil(o.ErrorReasons) {
		return true
	}

	return false
}

// SetErrorReasons gets a reference to the given []string and assigns it to the ErrorReasons field.
func (o *PlanStatus) SetErrorReasons(v []string) {
	o.ErrorReasons = v
}

func (o PlanStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if o.ErrorReasons != nil {
		toSerialize["errorReasons"] = o.ErrorReasons
	}
	return toSerialize, nil
}

type NullablePlanStatus struct {
	value *PlanStatus
	isSet bool
}

func (v NullablePlanStatus) Get() *PlanStatus {
	return v.value
}

func (v *NullablePlanStatus) Set(val *PlanStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanStatus(val *PlanStatus) *NullablePlanStatus {
	return &NullablePlanStatus{value: val, isSet: true}
}

func (v NullablePlanStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


