/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type PatchPolicyLogsAPI interface {

	/*
	V2PatchPoliciesIdLogsDeviceIdDetailsGet Return attempt details for a specific log

	Return attempt details for a specific log

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id patch policy id
	@param deviceId device id
	@return PatchPolicyLogsAPIV2PatchPoliciesIdLogsDeviceIdDetailsGetRequest
	*/
	V2PatchPoliciesIdLogsDeviceIdDetailsGet(ctx context.Context, id string, deviceId string) PatchPolicyLogsAPIV2PatchPoliciesIdLogsDeviceIdDetailsGetRequest

	// V2PatchPoliciesIdLogsDeviceIdDetailsGetExecute executes the request
	//  @return []PatchPolicyLogDetail
	V2PatchPoliciesIdLogsDeviceIdDetailsGetExecute(r PatchPolicyLogsAPIV2PatchPoliciesIdLogsDeviceIdDetailsGetRequest) ([]PatchPolicyLogDetail, *http.Response, error)

	/*
	V2PatchPoliciesIdLogsDeviceIdGet Retrieves a single Patch Policy Log 

	Retrieves a single Patch Policy Log

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id patch policy id
	@param deviceId device id
	@return PatchPolicyLogsAPIV2PatchPoliciesIdLogsDeviceIdGetRequest
	*/
	V2PatchPoliciesIdLogsDeviceIdGet(ctx context.Context, id string, deviceId string) PatchPolicyLogsAPIV2PatchPoliciesIdLogsDeviceIdGetRequest

	// V2PatchPoliciesIdLogsDeviceIdGetExecute executes the request
	//  @return PatchPolicyLogV2
	V2PatchPoliciesIdLogsDeviceIdGetExecute(r PatchPolicyLogsAPIV2PatchPoliciesIdLogsDeviceIdGetRequest) (*PatchPolicyLogV2, *http.Response, error)

	/*
	V2PatchPoliciesIdLogsEligibleRetryCountGet Return the count of the Patch Policy Logs for the patch policy id that are eligible for a retry attempt 

	return the count of the patch policy logs for the patch policy id that  are eligible for a retry attempt

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id patch policy id
	@return PatchPolicyLogsAPIV2PatchPoliciesIdLogsEligibleRetryCountGetRequest
	*/
	V2PatchPoliciesIdLogsEligibleRetryCountGet(ctx context.Context, id string) PatchPolicyLogsAPIV2PatchPoliciesIdLogsEligibleRetryCountGetRequest

	// V2PatchPoliciesIdLogsEligibleRetryCountGetExecute executes the request
	//  @return PatchPolicyLogEligibleRetryCount
	V2PatchPoliciesIdLogsEligibleRetryCountGetExecute(r PatchPolicyLogsAPIV2PatchPoliciesIdLogsEligibleRetryCountGetRequest) (*PatchPolicyLogEligibleRetryCount, *http.Response, error)

	/*
	V2PatchPoliciesIdLogsGet Retrieve Patch Policy Logs 

	Retrieves Patch Policy Logs

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id patch policy id
	@return PatchPolicyLogsAPIV2PatchPoliciesIdLogsGetRequest
	*/
	V2PatchPoliciesIdLogsGet(ctx context.Context, id string) PatchPolicyLogsAPIV2PatchPoliciesIdLogsGetRequest

	// V2PatchPoliciesIdLogsGetExecute executes the request
	//  @return PatchPolicyLogs
	V2PatchPoliciesIdLogsGetExecute(r PatchPolicyLogsAPIV2PatchPoliciesIdLogsGetRequest) (*PatchPolicyLogs, *http.Response, error)

	/*
	V2PatchPoliciesIdLogsRetryAllPost Send retry attempts for all devices

	Send retry attempts for all devices

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id patch policy id
	@return PatchPolicyLogsAPIV2PatchPoliciesIdLogsRetryAllPostRequest
	*/
	V2PatchPoliciesIdLogsRetryAllPost(ctx context.Context, id string) PatchPolicyLogsAPIV2PatchPoliciesIdLogsRetryAllPostRequest

	// V2PatchPoliciesIdLogsRetryAllPostExecute executes the request
	V2PatchPoliciesIdLogsRetryAllPostExecute(r PatchPolicyLogsAPIV2PatchPoliciesIdLogsRetryAllPostRequest) (*http.Response, error)

	/*
	V2PatchPoliciesIdLogsRetryPost Send retry attempts for specific devices

	Send retry attempts for specific devices

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id patch policy id
	@return PatchPolicyLogsAPIV2PatchPoliciesIdLogsRetryPostRequest
	*/
	V2PatchPoliciesIdLogsRetryPost(ctx context.Context, id string) PatchPolicyLogsAPIV2PatchPoliciesIdLogsRetryPostRequest

	// V2PatchPoliciesIdLogsRetryPostExecute executes the request
	V2PatchPoliciesIdLogsRetryPostExecute(r PatchPolicyLogsAPIV2PatchPoliciesIdLogsRetryPostRequest) (*http.Response, error)
}

// PatchPolicyLogsAPIService PatchPolicyLogsAPI service
type PatchPolicyLogsAPIService service

type PatchPolicyLogsAPIV2PatchPoliciesIdLogsDeviceIdDetailsGetRequest struct {
	ctx context.Context
	ApiService PatchPolicyLogsAPI
	id string
	deviceId string
}

func (r PatchPolicyLogsAPIV2PatchPoliciesIdLogsDeviceIdDetailsGetRequest) Execute() ([]PatchPolicyLogDetail, *http.Response, error) {
	return r.ApiService.V2PatchPoliciesIdLogsDeviceIdDetailsGetExecute(r)
}

/*
V2PatchPoliciesIdLogsDeviceIdDetailsGet Return attempt details for a specific log

Return attempt details for a specific log

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id patch policy id
 @param deviceId device id
 @return PatchPolicyLogsAPIV2PatchPoliciesIdLogsDeviceIdDetailsGetRequest
*/
func (a *PatchPolicyLogsAPIService) V2PatchPoliciesIdLogsDeviceIdDetailsGet(ctx context.Context, id string, deviceId string) PatchPolicyLogsAPIV2PatchPoliciesIdLogsDeviceIdDetailsGetRequest {
	return PatchPolicyLogsAPIV2PatchPoliciesIdLogsDeviceIdDetailsGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		deviceId: deviceId,
	}
}

// Execute executes the request
//  @return []PatchPolicyLogDetail
func (a *PatchPolicyLogsAPIService) V2PatchPoliciesIdLogsDeviceIdDetailsGetExecute(r PatchPolicyLogsAPIV2PatchPoliciesIdLogsDeviceIdDetailsGetRequest) ([]PatchPolicyLogDetail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PatchPolicyLogDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchPolicyLogsAPIService.V2PatchPoliciesIdLogsDeviceIdDetailsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/patch-policies/{id}/logs/{deviceId}/details"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceId"+"}", url.PathEscape(parameterValueToString(r.deviceId, "deviceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PatchPolicyLogsAPIV2PatchPoliciesIdLogsDeviceIdGetRequest struct {
	ctx context.Context
	ApiService PatchPolicyLogsAPI
	id string
	deviceId string
}

func (r PatchPolicyLogsAPIV2PatchPoliciesIdLogsDeviceIdGetRequest) Execute() (*PatchPolicyLogV2, *http.Response, error) {
	return r.ApiService.V2PatchPoliciesIdLogsDeviceIdGetExecute(r)
}

/*
V2PatchPoliciesIdLogsDeviceIdGet Retrieves a single Patch Policy Log 

Retrieves a single Patch Policy Log

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id patch policy id
 @param deviceId device id
 @return PatchPolicyLogsAPIV2PatchPoliciesIdLogsDeviceIdGetRequest
*/
func (a *PatchPolicyLogsAPIService) V2PatchPoliciesIdLogsDeviceIdGet(ctx context.Context, id string, deviceId string) PatchPolicyLogsAPIV2PatchPoliciesIdLogsDeviceIdGetRequest {
	return PatchPolicyLogsAPIV2PatchPoliciesIdLogsDeviceIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		deviceId: deviceId,
	}
}

// Execute executes the request
//  @return PatchPolicyLogV2
func (a *PatchPolicyLogsAPIService) V2PatchPoliciesIdLogsDeviceIdGetExecute(r PatchPolicyLogsAPIV2PatchPoliciesIdLogsDeviceIdGetRequest) (*PatchPolicyLogV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PatchPolicyLogV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchPolicyLogsAPIService.V2PatchPoliciesIdLogsDeviceIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/patch-policies/{id}/logs/{deviceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceId"+"}", url.PathEscape(parameterValueToString(r.deviceId, "deviceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PatchPolicyLogsAPIV2PatchPoliciesIdLogsEligibleRetryCountGetRequest struct {
	ctx context.Context
	ApiService PatchPolicyLogsAPI
	id string
}

func (r PatchPolicyLogsAPIV2PatchPoliciesIdLogsEligibleRetryCountGetRequest) Execute() (*PatchPolicyLogEligibleRetryCount, *http.Response, error) {
	return r.ApiService.V2PatchPoliciesIdLogsEligibleRetryCountGetExecute(r)
}

/*
V2PatchPoliciesIdLogsEligibleRetryCountGet Return the count of the Patch Policy Logs for the patch policy id that are eligible for a retry attempt 

return the count of the patch policy logs for the patch policy id that  are eligible for a retry attempt

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id patch policy id
 @return PatchPolicyLogsAPIV2PatchPoliciesIdLogsEligibleRetryCountGetRequest
*/
func (a *PatchPolicyLogsAPIService) V2PatchPoliciesIdLogsEligibleRetryCountGet(ctx context.Context, id string) PatchPolicyLogsAPIV2PatchPoliciesIdLogsEligibleRetryCountGetRequest {
	return PatchPolicyLogsAPIV2PatchPoliciesIdLogsEligibleRetryCountGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PatchPolicyLogEligibleRetryCount
func (a *PatchPolicyLogsAPIService) V2PatchPoliciesIdLogsEligibleRetryCountGetExecute(r PatchPolicyLogsAPIV2PatchPoliciesIdLogsEligibleRetryCountGetRequest) (*PatchPolicyLogEligibleRetryCount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PatchPolicyLogEligibleRetryCount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchPolicyLogsAPIService.V2PatchPoliciesIdLogsEligibleRetryCountGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/patch-policies/{id}/logs/eligible-retry-count"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PatchPolicyLogsAPIV2PatchPoliciesIdLogsGetRequest struct {
	ctx context.Context
	ApiService PatchPolicyLogsAPI
	id string
	page *int32
	pageSize *int32
	sort *[]string
	filter *string
}

func (r PatchPolicyLogsAPIV2PatchPoliciesIdLogsGetRequest) Page(page int32) PatchPolicyLogsAPIV2PatchPoliciesIdLogsGetRequest {
	r.page = &page
	return r
}

func (r PatchPolicyLogsAPIV2PatchPoliciesIdLogsGetRequest) PageSize(pageSize int32) PatchPolicyLogsAPIV2PatchPoliciesIdLogsGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Default sort is deviceName:asc. Multiple sort criteria are supported and must be separated with a comma.
func (r PatchPolicyLogsAPIV2PatchPoliciesIdLogsGetRequest) Sort(sort []string) PatchPolicyLogsAPIV2PatchPoliciesIdLogsGetRequest {
	r.sort = &sort
	return r
}

// Query in the RSQL format, allowing to filter Patch Policy Logs collection. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: deviceId, deviceName, statusCode, statusDate, attemptNumber, ignoredForPatchPolicyId. This param can be combined with paging and sorting.
func (r PatchPolicyLogsAPIV2PatchPoliciesIdLogsGetRequest) Filter(filter string) PatchPolicyLogsAPIV2PatchPoliciesIdLogsGetRequest {
	r.filter = &filter
	return r
}

func (r PatchPolicyLogsAPIV2PatchPoliciesIdLogsGetRequest) Execute() (*PatchPolicyLogs, *http.Response, error) {
	return r.ApiService.V2PatchPoliciesIdLogsGetExecute(r)
}

/*
V2PatchPoliciesIdLogsGet Retrieve Patch Policy Logs 

Retrieves Patch Policy Logs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id patch policy id
 @return PatchPolicyLogsAPIV2PatchPoliciesIdLogsGetRequest
*/
func (a *PatchPolicyLogsAPIService) V2PatchPoliciesIdLogsGet(ctx context.Context, id string) PatchPolicyLogsAPIV2PatchPoliciesIdLogsGetRequest {
	return PatchPolicyLogsAPIV2PatchPoliciesIdLogsGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PatchPolicyLogs
func (a *PatchPolicyLogsAPIService) V2PatchPoliciesIdLogsGetExecute(r PatchPolicyLogsAPIV2PatchPoliciesIdLogsGetRequest) (*PatchPolicyLogs, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PatchPolicyLogs
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchPolicyLogsAPIService.V2PatchPoliciesIdLogsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/patch-policies/{id}/logs"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		var defaultValue []string = ["deviceName:asc"]
		r.sort = &defaultValue
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	} else {
		var defaultValue string = ""
		r.filter = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PatchPolicyLogsAPIV2PatchPoliciesIdLogsRetryAllPostRequest struct {
	ctx context.Context
	ApiService PatchPolicyLogsAPI
	id string
}

func (r PatchPolicyLogsAPIV2PatchPoliciesIdLogsRetryAllPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.V2PatchPoliciesIdLogsRetryAllPostExecute(r)
}

/*
V2PatchPoliciesIdLogsRetryAllPost Send retry attempts for all devices

Send retry attempts for all devices

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id patch policy id
 @return PatchPolicyLogsAPIV2PatchPoliciesIdLogsRetryAllPostRequest
*/
func (a *PatchPolicyLogsAPIService) V2PatchPoliciesIdLogsRetryAllPost(ctx context.Context, id string) PatchPolicyLogsAPIV2PatchPoliciesIdLogsRetryAllPostRequest {
	return PatchPolicyLogsAPIV2PatchPoliciesIdLogsRetryAllPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *PatchPolicyLogsAPIService) V2PatchPoliciesIdLogsRetryAllPostExecute(r PatchPolicyLogsAPIV2PatchPoliciesIdLogsRetryAllPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchPolicyLogsAPIService.V2PatchPoliciesIdLogsRetryAllPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/patch-policies/{id}/logs/retry-all"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PatchPolicyLogsAPIV2PatchPoliciesIdLogsRetryPostRequest struct {
	ctx context.Context
	ApiService PatchPolicyLogsAPI
	id string
	patchPolicyLogRetry *PatchPolicyLogRetry
}

func (r PatchPolicyLogsAPIV2PatchPoliciesIdLogsRetryPostRequest) PatchPolicyLogRetry(patchPolicyLogRetry PatchPolicyLogRetry) PatchPolicyLogsAPIV2PatchPoliciesIdLogsRetryPostRequest {
	r.patchPolicyLogRetry = &patchPolicyLogRetry
	return r
}

func (r PatchPolicyLogsAPIV2PatchPoliciesIdLogsRetryPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.V2PatchPoliciesIdLogsRetryPostExecute(r)
}

/*
V2PatchPoliciesIdLogsRetryPost Send retry attempts for specific devices

Send retry attempts for specific devices

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id patch policy id
 @return PatchPolicyLogsAPIV2PatchPoliciesIdLogsRetryPostRequest
*/
func (a *PatchPolicyLogsAPIService) V2PatchPoliciesIdLogsRetryPost(ctx context.Context, id string) PatchPolicyLogsAPIV2PatchPoliciesIdLogsRetryPostRequest {
	return PatchPolicyLogsAPIV2PatchPoliciesIdLogsRetryPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *PatchPolicyLogsAPIService) V2PatchPoliciesIdLogsRetryPostExecute(r PatchPolicyLogsAPIV2PatchPoliciesIdLogsRetryPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchPolicyLogsAPIService.V2PatchPoliciesIdLogsRetryPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/patch-policies/{id}/logs/retry"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchPolicyLogRetry == nil {
		return nil, reportError("patchPolicyLogRetry is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchPolicyLogRetry
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
