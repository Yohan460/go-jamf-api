/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// Signature struct for Signature
type Signature struct {
	Algorithm *string `json:"algorithm,omitempty"`
	AlgorithmOid *string `json:"algorithmOid,omitempty"`
	Value *string `json:"value,omitempty"`
}

// NewSignature instantiates a new Signature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignature() *Signature {
	this := Signature{}
	return &this
}

// NewSignatureWithDefaults instantiates a new Signature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignatureWithDefaults() *Signature {
	this := Signature{}
	return &this
}

// GetAlgorithm returns the Algorithm field value if set, zero value otherwise.
func (o *Signature) GetAlgorithm() string {
	if o == nil || o.Algorithm == nil {
		var ret string
		return ret
	}
	return *o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Signature) GetAlgorithmOk() (*string, bool) {
	if o == nil || o.Algorithm == nil {
		return nil, false
	}
	return o.Algorithm, true
}

// HasAlgorithm returns a boolean if a field has been set.
func (o *Signature) HasAlgorithm() bool {
	if o != nil && o.Algorithm != nil {
		return true
	}

	return false
}

// SetAlgorithm gets a reference to the given string and assigns it to the Algorithm field.
func (o *Signature) SetAlgorithm(v string) {
	o.Algorithm = &v
}

// GetAlgorithmOid returns the AlgorithmOid field value if set, zero value otherwise.
func (o *Signature) GetAlgorithmOid() string {
	if o == nil || o.AlgorithmOid == nil {
		var ret string
		return ret
	}
	return *o.AlgorithmOid
}

// GetAlgorithmOidOk returns a tuple with the AlgorithmOid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Signature) GetAlgorithmOidOk() (*string, bool) {
	if o == nil || o.AlgorithmOid == nil {
		return nil, false
	}
	return o.AlgorithmOid, true
}

// HasAlgorithmOid returns a boolean if a field has been set.
func (o *Signature) HasAlgorithmOid() bool {
	if o != nil && o.AlgorithmOid != nil {
		return true
	}

	return false
}

// SetAlgorithmOid gets a reference to the given string and assigns it to the AlgorithmOid field.
func (o *Signature) SetAlgorithmOid(v string) {
	o.AlgorithmOid = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Signature) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Signature) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Signature) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *Signature) SetValue(v string) {
	o.Value = &v
}

func (o Signature) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Algorithm != nil {
		toSerialize["algorithm"] = o.Algorithm
	}
	if o.AlgorithmOid != nil {
		toSerialize["algorithmOid"] = o.AlgorithmOid
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableSignature struct {
	value *Signature
	isSet bool
}

func (v NullableSignature) Get() *Signature {
	return v.value
}

func (v *NullableSignature) Set(val *Signature) {
	v.value = val
	v.isSet = true
}

func (v NullableSignature) IsSet() bool {
	return v.isSet
}

func (v *NullableSignature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignature(val *Signature) *NullableSignature {
	return &NullableSignature{value: val, isSet: true}
}

func (v NullableSignature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


