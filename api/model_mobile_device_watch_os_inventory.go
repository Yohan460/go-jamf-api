/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MobileDeviceWatchOsInventory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MobileDeviceWatchOsInventory{}

// MobileDeviceWatchOsInventory struct for MobileDeviceWatchOsInventory
type MobileDeviceWatchOsInventory struct {
	MobileDeviceId *string `json:"mobileDeviceId,omitempty"`
	// Based on the value of this type either ios, appleTv, watch or visionOS objects will be populated.
	DeviceType string `json:"deviceType"`
	Hardware *MobileDeviceHardware `json:"hardware,omitempty"`
	UserAndLocation *MobileDeviceUserAndLocation `json:"userAndLocation,omitempty"`
	Applications []MobileDeviceApplicationInventoryDetail `json:"applications,omitempty"`
	Certificates []MobileDeviceCertificate `json:"certificates,omitempty"`
	Profiles []MobileDeviceProfile `json:"profiles,omitempty"`
	ExtensionAttributes []MobileDeviceExtensionAttribute `json:"extensionAttributes,omitempty"`
	General *MobileDeviceWatchOsGeneral `json:"general,omitempty"`
	Security *MobileDeviceSecurity `json:"security,omitempty"`
	ProvisioningProfiles []MobileDeviceProvisioningProfiles `json:"provisioningProfiles,omitempty"`
}

type _MobileDeviceWatchOsInventory MobileDeviceWatchOsInventory

// NewMobileDeviceWatchOsInventory instantiates a new MobileDeviceWatchOsInventory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMobileDeviceWatchOsInventory(deviceType string) *MobileDeviceWatchOsInventory {
	this := MobileDeviceWatchOsInventory{}
	this.DeviceType = deviceType
	return &this
}

// NewMobileDeviceWatchOsInventoryWithDefaults instantiates a new MobileDeviceWatchOsInventory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMobileDeviceWatchOsInventoryWithDefaults() *MobileDeviceWatchOsInventory {
	this := MobileDeviceWatchOsInventory{}
	return &this
}

// GetMobileDeviceId returns the MobileDeviceId field value if set, zero value otherwise.
func (o *MobileDeviceWatchOsInventory) GetMobileDeviceId() string {
	if o == nil || IsNil(o.MobileDeviceId) {
		var ret string
		return ret
	}
	return *o.MobileDeviceId
}

// GetMobileDeviceIdOk returns a tuple with the MobileDeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDeviceWatchOsInventory) GetMobileDeviceIdOk() (*string, bool) {
	if o == nil || IsNil(o.MobileDeviceId) {
		return nil, false
	}
	return o.MobileDeviceId, true
}

// HasMobileDeviceId returns a boolean if a field has been set.
func (o *MobileDeviceWatchOsInventory) HasMobileDeviceId() bool {
	if o != nil && !IsNil(o.MobileDeviceId) {
		return true
	}

	return false
}

// SetMobileDeviceId gets a reference to the given string and assigns it to the MobileDeviceId field.
func (o *MobileDeviceWatchOsInventory) SetMobileDeviceId(v string) {
	o.MobileDeviceId = &v
}

// GetDeviceType returns the DeviceType field value
func (o *MobileDeviceWatchOsInventory) GetDeviceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value
// and a boolean to check if the value has been set.
func (o *MobileDeviceWatchOsInventory) GetDeviceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceType, true
}

// SetDeviceType sets field value
func (o *MobileDeviceWatchOsInventory) SetDeviceType(v string) {
	o.DeviceType = v
}

// GetHardware returns the Hardware field value if set, zero value otherwise.
func (o *MobileDeviceWatchOsInventory) GetHardware() MobileDeviceHardware {
	if o == nil || IsNil(o.Hardware) {
		var ret MobileDeviceHardware
		return ret
	}
	return *o.Hardware
}

// GetHardwareOk returns a tuple with the Hardware field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDeviceWatchOsInventory) GetHardwareOk() (*MobileDeviceHardware, bool) {
	if o == nil || IsNil(o.Hardware) {
		return nil, false
	}
	return o.Hardware, true
}

// HasHardware returns a boolean if a field has been set.
func (o *MobileDeviceWatchOsInventory) HasHardware() bool {
	if o != nil && !IsNil(o.Hardware) {
		return true
	}

	return false
}

// SetHardware gets a reference to the given MobileDeviceHardware and assigns it to the Hardware field.
func (o *MobileDeviceWatchOsInventory) SetHardware(v MobileDeviceHardware) {
	o.Hardware = &v
}

// GetUserAndLocation returns the UserAndLocation field value if set, zero value otherwise.
func (o *MobileDeviceWatchOsInventory) GetUserAndLocation() MobileDeviceUserAndLocation {
	if o == nil || IsNil(o.UserAndLocation) {
		var ret MobileDeviceUserAndLocation
		return ret
	}
	return *o.UserAndLocation
}

// GetUserAndLocationOk returns a tuple with the UserAndLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDeviceWatchOsInventory) GetUserAndLocationOk() (*MobileDeviceUserAndLocation, bool) {
	if o == nil || IsNil(o.UserAndLocation) {
		return nil, false
	}
	return o.UserAndLocation, true
}

// HasUserAndLocation returns a boolean if a field has been set.
func (o *MobileDeviceWatchOsInventory) HasUserAndLocation() bool {
	if o != nil && !IsNil(o.UserAndLocation) {
		return true
	}

	return false
}

// SetUserAndLocation gets a reference to the given MobileDeviceUserAndLocation and assigns it to the UserAndLocation field.
func (o *MobileDeviceWatchOsInventory) SetUserAndLocation(v MobileDeviceUserAndLocation) {
	o.UserAndLocation = &v
}

// GetApplications returns the Applications field value if set, zero value otherwise.
func (o *MobileDeviceWatchOsInventory) GetApplications() []MobileDeviceApplicationInventoryDetail {
	if o == nil || IsNil(o.Applications) {
		var ret []MobileDeviceApplicationInventoryDetail
		return ret
	}
	return o.Applications
}

// GetApplicationsOk returns a tuple with the Applications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDeviceWatchOsInventory) GetApplicationsOk() ([]MobileDeviceApplicationInventoryDetail, bool) {
	if o == nil || IsNil(o.Applications) {
		return nil, false
	}
	return o.Applications, true
}

// HasApplications returns a boolean if a field has been set.
func (o *MobileDeviceWatchOsInventory) HasApplications() bool {
	if o != nil && !IsNil(o.Applications) {
		return true
	}

	return false
}

// SetApplications gets a reference to the given []MobileDeviceApplicationInventoryDetail and assigns it to the Applications field.
func (o *MobileDeviceWatchOsInventory) SetApplications(v []MobileDeviceApplicationInventoryDetail) {
	o.Applications = v
}

// GetCertificates returns the Certificates field value if set, zero value otherwise.
func (o *MobileDeviceWatchOsInventory) GetCertificates() []MobileDeviceCertificate {
	if o == nil || IsNil(o.Certificates) {
		var ret []MobileDeviceCertificate
		return ret
	}
	return o.Certificates
}

// GetCertificatesOk returns a tuple with the Certificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDeviceWatchOsInventory) GetCertificatesOk() ([]MobileDeviceCertificate, bool) {
	if o == nil || IsNil(o.Certificates) {
		return nil, false
	}
	return o.Certificates, true
}

// HasCertificates returns a boolean if a field has been set.
func (o *MobileDeviceWatchOsInventory) HasCertificates() bool {
	if o != nil && !IsNil(o.Certificates) {
		return true
	}

	return false
}

// SetCertificates gets a reference to the given []MobileDeviceCertificate and assigns it to the Certificates field.
func (o *MobileDeviceWatchOsInventory) SetCertificates(v []MobileDeviceCertificate) {
	o.Certificates = v
}

// GetProfiles returns the Profiles field value if set, zero value otherwise.
func (o *MobileDeviceWatchOsInventory) GetProfiles() []MobileDeviceProfile {
	if o == nil || IsNil(o.Profiles) {
		var ret []MobileDeviceProfile
		return ret
	}
	return o.Profiles
}

// GetProfilesOk returns a tuple with the Profiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDeviceWatchOsInventory) GetProfilesOk() ([]MobileDeviceProfile, bool) {
	if o == nil || IsNil(o.Profiles) {
		return nil, false
	}
	return o.Profiles, true
}

// HasProfiles returns a boolean if a field has been set.
func (o *MobileDeviceWatchOsInventory) HasProfiles() bool {
	if o != nil && !IsNil(o.Profiles) {
		return true
	}

	return false
}

// SetProfiles gets a reference to the given []MobileDeviceProfile and assigns it to the Profiles field.
func (o *MobileDeviceWatchOsInventory) SetProfiles(v []MobileDeviceProfile) {
	o.Profiles = v
}

// GetExtensionAttributes returns the ExtensionAttributes field value if set, zero value otherwise.
func (o *MobileDeviceWatchOsInventory) GetExtensionAttributes() []MobileDeviceExtensionAttribute {
	if o == nil || IsNil(o.ExtensionAttributes) {
		var ret []MobileDeviceExtensionAttribute
		return ret
	}
	return o.ExtensionAttributes
}

// GetExtensionAttributesOk returns a tuple with the ExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDeviceWatchOsInventory) GetExtensionAttributesOk() ([]MobileDeviceExtensionAttribute, bool) {
	if o == nil || IsNil(o.ExtensionAttributes) {
		return nil, false
	}
	return o.ExtensionAttributes, true
}

// HasExtensionAttributes returns a boolean if a field has been set.
func (o *MobileDeviceWatchOsInventory) HasExtensionAttributes() bool {
	if o != nil && !IsNil(o.ExtensionAttributes) {
		return true
	}

	return false
}

// SetExtensionAttributes gets a reference to the given []MobileDeviceExtensionAttribute and assigns it to the ExtensionAttributes field.
func (o *MobileDeviceWatchOsInventory) SetExtensionAttributes(v []MobileDeviceExtensionAttribute) {
	o.ExtensionAttributes = v
}

// GetGeneral returns the General field value if set, zero value otherwise.
func (o *MobileDeviceWatchOsInventory) GetGeneral() MobileDeviceWatchOsGeneral {
	if o == nil || IsNil(o.General) {
		var ret MobileDeviceWatchOsGeneral
		return ret
	}
	return *o.General
}

// GetGeneralOk returns a tuple with the General field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDeviceWatchOsInventory) GetGeneralOk() (*MobileDeviceWatchOsGeneral, bool) {
	if o == nil || IsNil(o.General) {
		return nil, false
	}
	return o.General, true
}

// HasGeneral returns a boolean if a field has been set.
func (o *MobileDeviceWatchOsInventory) HasGeneral() bool {
	if o != nil && !IsNil(o.General) {
		return true
	}

	return false
}

// SetGeneral gets a reference to the given MobileDeviceWatchOsGeneral and assigns it to the General field.
func (o *MobileDeviceWatchOsInventory) SetGeneral(v MobileDeviceWatchOsGeneral) {
	o.General = &v
}

// GetSecurity returns the Security field value if set, zero value otherwise.
func (o *MobileDeviceWatchOsInventory) GetSecurity() MobileDeviceSecurity {
	if o == nil || IsNil(o.Security) {
		var ret MobileDeviceSecurity
		return ret
	}
	return *o.Security
}

// GetSecurityOk returns a tuple with the Security field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDeviceWatchOsInventory) GetSecurityOk() (*MobileDeviceSecurity, bool) {
	if o == nil || IsNil(o.Security) {
		return nil, false
	}
	return o.Security, true
}

// HasSecurity returns a boolean if a field has been set.
func (o *MobileDeviceWatchOsInventory) HasSecurity() bool {
	if o != nil && !IsNil(o.Security) {
		return true
	}

	return false
}

// SetSecurity gets a reference to the given MobileDeviceSecurity and assigns it to the Security field.
func (o *MobileDeviceWatchOsInventory) SetSecurity(v MobileDeviceSecurity) {
	o.Security = &v
}

// GetProvisioningProfiles returns the ProvisioningProfiles field value if set, zero value otherwise.
func (o *MobileDeviceWatchOsInventory) GetProvisioningProfiles() []MobileDeviceProvisioningProfiles {
	if o == nil || IsNil(o.ProvisioningProfiles) {
		var ret []MobileDeviceProvisioningProfiles
		return ret
	}
	return o.ProvisioningProfiles
}

// GetProvisioningProfilesOk returns a tuple with the ProvisioningProfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileDeviceWatchOsInventory) GetProvisioningProfilesOk() ([]MobileDeviceProvisioningProfiles, bool) {
	if o == nil || IsNil(o.ProvisioningProfiles) {
		return nil, false
	}
	return o.ProvisioningProfiles, true
}

// HasProvisioningProfiles returns a boolean if a field has been set.
func (o *MobileDeviceWatchOsInventory) HasProvisioningProfiles() bool {
	if o != nil && !IsNil(o.ProvisioningProfiles) {
		return true
	}

	return false
}

// SetProvisioningProfiles gets a reference to the given []MobileDeviceProvisioningProfiles and assigns it to the ProvisioningProfiles field.
func (o *MobileDeviceWatchOsInventory) SetProvisioningProfiles(v []MobileDeviceProvisioningProfiles) {
	o.ProvisioningProfiles = v
}

func (o MobileDeviceWatchOsInventory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MobileDeviceWatchOsInventory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MobileDeviceId) {
		toSerialize["mobileDeviceId"] = o.MobileDeviceId
	}
	toSerialize["deviceType"] = o.DeviceType
	if !IsNil(o.Hardware) {
		toSerialize["hardware"] = o.Hardware
	}
	if !IsNil(o.UserAndLocation) {
		toSerialize["userAndLocation"] = o.UserAndLocation
	}
	if !IsNil(o.Applications) {
		toSerialize["applications"] = o.Applications
	}
	if !IsNil(o.Certificates) {
		toSerialize["certificates"] = o.Certificates
	}
	if !IsNil(o.Profiles) {
		toSerialize["profiles"] = o.Profiles
	}
	if !IsNil(o.ExtensionAttributes) {
		toSerialize["extensionAttributes"] = o.ExtensionAttributes
	}
	if !IsNil(o.General) {
		toSerialize["general"] = o.General
	}
	if !IsNil(o.Security) {
		toSerialize["security"] = o.Security
	}
	if !IsNil(o.ProvisioningProfiles) {
		toSerialize["provisioningProfiles"] = o.ProvisioningProfiles
	}
	return toSerialize, nil
}

func (o *MobileDeviceWatchOsInventory) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"deviceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMobileDeviceWatchOsInventory := _MobileDeviceWatchOsInventory{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMobileDeviceWatchOsInventory)

	if err != nil {
		return err
	}

	*o = MobileDeviceWatchOsInventory(varMobileDeviceWatchOsInventory)

	return err
}

type NullableMobileDeviceWatchOsInventory struct {
	value *MobileDeviceWatchOsInventory
	isSet bool
}

func (v NullableMobileDeviceWatchOsInventory) Get() *MobileDeviceWatchOsInventory {
	return v.value
}

func (v *NullableMobileDeviceWatchOsInventory) Set(val *MobileDeviceWatchOsInventory) {
	v.value = val
	v.isSet = true
}

func (v NullableMobileDeviceWatchOsInventory) IsSet() bool {
	return v.isSet
}

func (v *NullableMobileDeviceWatchOsInventory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMobileDeviceWatchOsInventory(val *MobileDeviceWatchOsInventory) *NullableMobileDeviceWatchOsInventory {
	return &NullableMobileDeviceWatchOsInventory{value: val, isSet: true}
}

func (v NullableMobileDeviceWatchOsInventory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMobileDeviceWatchOsInventory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


