/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the MemcachedEndpoints type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemcachedEndpoints{}

// MemcachedEndpoints struct for MemcachedEndpoints
type MemcachedEndpoints struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	HostName *string `json:"hostName,omitempty"`
	Port *int64 `json:"port,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	JssCacheConfigurationId *int64 `json:"jssCacheConfigurationId,omitempty"`
}

// NewMemcachedEndpoints instantiates a new MemcachedEndpoints object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemcachedEndpoints() *MemcachedEndpoints {
	this := MemcachedEndpoints{}
	return &this
}

// NewMemcachedEndpointsWithDefaults instantiates a new MemcachedEndpoints object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemcachedEndpointsWithDefaults() *MemcachedEndpoints {
	this := MemcachedEndpoints{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MemcachedEndpoints) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemcachedEndpoints) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MemcachedEndpoints) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MemcachedEndpoints) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MemcachedEndpoints) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemcachedEndpoints) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MemcachedEndpoints) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MemcachedEndpoints) SetName(v string) {
	o.Name = &v
}

// GetHostName returns the HostName field value if set, zero value otherwise.
func (o *MemcachedEndpoints) GetHostName() string {
	if o == nil || IsNil(o.HostName) {
		var ret string
		return ret
	}
	return *o.HostName
}

// GetHostNameOk returns a tuple with the HostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemcachedEndpoints) GetHostNameOk() (*string, bool) {
	if o == nil || IsNil(o.HostName) {
		return nil, false
	}
	return o.HostName, true
}

// HasHostName returns a boolean if a field has been set.
func (o *MemcachedEndpoints) HasHostName() bool {
	if o != nil && !IsNil(o.HostName) {
		return true
	}

	return false
}

// SetHostName gets a reference to the given string and assigns it to the HostName field.
func (o *MemcachedEndpoints) SetHostName(v string) {
	o.HostName = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *MemcachedEndpoints) GetPort() int64 {
	if o == nil || IsNil(o.Port) {
		var ret int64
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemcachedEndpoints) GetPortOk() (*int64, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *MemcachedEndpoints) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int64 and assigns it to the Port field.
func (o *MemcachedEndpoints) SetPort(v int64) {
	o.Port = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *MemcachedEndpoints) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemcachedEndpoints) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *MemcachedEndpoints) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *MemcachedEndpoints) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetJssCacheConfigurationId returns the JssCacheConfigurationId field value if set, zero value otherwise.
func (o *MemcachedEndpoints) GetJssCacheConfigurationId() int64 {
	if o == nil || IsNil(o.JssCacheConfigurationId) {
		var ret int64
		return ret
	}
	return *o.JssCacheConfigurationId
}

// GetJssCacheConfigurationIdOk returns a tuple with the JssCacheConfigurationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemcachedEndpoints) GetJssCacheConfigurationIdOk() (*int64, bool) {
	if o == nil || IsNil(o.JssCacheConfigurationId) {
		return nil, false
	}
	return o.JssCacheConfigurationId, true
}

// HasJssCacheConfigurationId returns a boolean if a field has been set.
func (o *MemcachedEndpoints) HasJssCacheConfigurationId() bool {
	if o != nil && !IsNil(o.JssCacheConfigurationId) {
		return true
	}

	return false
}

// SetJssCacheConfigurationId gets a reference to the given int64 and assigns it to the JssCacheConfigurationId field.
func (o *MemcachedEndpoints) SetJssCacheConfigurationId(v int64) {
	o.JssCacheConfigurationId = &v
}

func (o MemcachedEndpoints) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemcachedEndpoints) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.HostName) {
		toSerialize["hostName"] = o.HostName
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.JssCacheConfigurationId) {
		toSerialize["jssCacheConfigurationId"] = o.JssCacheConfigurationId
	}
	return toSerialize, nil
}

type NullableMemcachedEndpoints struct {
	value *MemcachedEndpoints
	isSet bool
}

func (v NullableMemcachedEndpoints) Get() *MemcachedEndpoints {
	return v.value
}

func (v *NullableMemcachedEndpoints) Set(val *MemcachedEndpoints) {
	v.value = val
	v.isSet = true
}

func (v NullableMemcachedEndpoints) IsSet() bool {
	return v.isSet
}

func (v *NullableMemcachedEndpoints) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemcachedEndpoints(val *MemcachedEndpoints) *NullableMemcachedEndpoints {
	return &NullableMemcachedEndpoints{value: val, isSet: true}
}

func (v NullableMemcachedEndpoints) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemcachedEndpoints) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


