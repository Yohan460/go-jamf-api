/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the MembershipTestSearchResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MembershipTestSearchResponse{}

// MembershipTestSearchResponse struct for MembershipTestSearchResponse
type MembershipTestSearchResponse struct {
	Username *string `json:"username,omitempty"`
	IsMember *bool `json:"isMember,omitempty"`
}

// NewMembershipTestSearchResponse instantiates a new MembershipTestSearchResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMembershipTestSearchResponse() *MembershipTestSearchResponse {
	this := MembershipTestSearchResponse{}
	return &this
}

// NewMembershipTestSearchResponseWithDefaults instantiates a new MembershipTestSearchResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMembershipTestSearchResponseWithDefaults() *MembershipTestSearchResponse {
	this := MembershipTestSearchResponse{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *MembershipTestSearchResponse) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTestSearchResponse) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *MembershipTestSearchResponse) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *MembershipTestSearchResponse) SetUsername(v string) {
	o.Username = &v
}

// GetIsMember returns the IsMember field value if set, zero value otherwise.
func (o *MembershipTestSearchResponse) GetIsMember() bool {
	if o == nil || IsNil(o.IsMember) {
		var ret bool
		return ret
	}
	return *o.IsMember
}

// GetIsMemberOk returns a tuple with the IsMember field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTestSearchResponse) GetIsMemberOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMember) {
		return nil, false
	}
	return o.IsMember, true
}

// HasIsMember returns a boolean if a field has been set.
func (o *MembershipTestSearchResponse) HasIsMember() bool {
	if o != nil && !IsNil(o.IsMember) {
		return true
	}

	return false
}

// SetIsMember gets a reference to the given bool and assigns it to the IsMember field.
func (o *MembershipTestSearchResponse) SetIsMember(v bool) {
	o.IsMember = &v
}

func (o MembershipTestSearchResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MembershipTestSearchResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.IsMember) {
		toSerialize["isMember"] = o.IsMember
	}
	return toSerialize, nil
}

type NullableMembershipTestSearchResponse struct {
	value *MembershipTestSearchResponse
	isSet bool
}

func (v NullableMembershipTestSearchResponse) Get() *MembershipTestSearchResponse {
	return v.value
}

func (v *NullableMembershipTestSearchResponse) Set(val *MembershipTestSearchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMembershipTestSearchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMembershipTestSearchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembershipTestSearchResponse(val *MembershipTestSearchResponse) *NullableMembershipTestSearchResponse {
	return &NullableMembershipTestSearchResponse{value: val, isSet: true}
}

func (v NullableMembershipTestSearchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembershipTestSearchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


