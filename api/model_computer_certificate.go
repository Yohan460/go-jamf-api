/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// checks if the ComputerCertificate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComputerCertificate{}

// ComputerCertificate struct for ComputerCertificate
type ComputerCertificate struct {
	CommonName *string `json:"commonName,omitempty"`
	Identity *bool `json:"identity,omitempty"`
	ExpirationDate *time.Time `json:"expirationDate,omitempty"`
	Username *string `json:"username,omitempty"`
	LifecycleStatus *string `json:"lifecycleStatus,omitempty"`
	CertificateStatus *string `json:"certificateStatus,omitempty"`
	SubjectName *string `json:"subjectName,omitempty"`
	SerialNumber *string `json:"serialNumber,omitempty"`
	Sha1Fingerprint *string `json:"sha1Fingerprint,omitempty"`
	IssuedDate *string `json:"issuedDate,omitempty"`
}

// NewComputerCertificate instantiates a new ComputerCertificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputerCertificate() *ComputerCertificate {
	this := ComputerCertificate{}
	return &this
}

// NewComputerCertificateWithDefaults instantiates a new ComputerCertificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputerCertificateWithDefaults() *ComputerCertificate {
	this := ComputerCertificate{}
	return &this
}

// GetCommonName returns the CommonName field value if set, zero value otherwise.
func (o *ComputerCertificate) GetCommonName() string {
	if o == nil || IsNil(o.CommonName) {
		var ret string
		return ret
	}
	return *o.CommonName
}

// GetCommonNameOk returns a tuple with the CommonName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerCertificate) GetCommonNameOk() (*string, bool) {
	if o == nil || IsNil(o.CommonName) {
		return nil, false
	}
	return o.CommonName, true
}

// HasCommonName returns a boolean if a field has been set.
func (o *ComputerCertificate) HasCommonName() bool {
	if o != nil && !IsNil(o.CommonName) {
		return true
	}

	return false
}

// SetCommonName gets a reference to the given string and assigns it to the CommonName field.
func (o *ComputerCertificate) SetCommonName(v string) {
	o.CommonName = &v
}

// GetIdentity returns the Identity field value if set, zero value otherwise.
func (o *ComputerCertificate) GetIdentity() bool {
	if o == nil || IsNil(o.Identity) {
		var ret bool
		return ret
	}
	return *o.Identity
}

// GetIdentityOk returns a tuple with the Identity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerCertificate) GetIdentityOk() (*bool, bool) {
	if o == nil || IsNil(o.Identity) {
		return nil, false
	}
	return o.Identity, true
}

// HasIdentity returns a boolean if a field has been set.
func (o *ComputerCertificate) HasIdentity() bool {
	if o != nil && !IsNil(o.Identity) {
		return true
	}

	return false
}

// SetIdentity gets a reference to the given bool and assigns it to the Identity field.
func (o *ComputerCertificate) SetIdentity(v bool) {
	o.Identity = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *ComputerCertificate) GetExpirationDate() time.Time {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerCertificate) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *ComputerCertificate) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given time.Time and assigns it to the ExpirationDate field.
func (o *ComputerCertificate) SetExpirationDate(v time.Time) {
	o.ExpirationDate = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ComputerCertificate) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerCertificate) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *ComputerCertificate) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *ComputerCertificate) SetUsername(v string) {
	o.Username = &v
}

// GetLifecycleStatus returns the LifecycleStatus field value if set, zero value otherwise.
func (o *ComputerCertificate) GetLifecycleStatus() string {
	if o == nil || IsNil(o.LifecycleStatus) {
		var ret string
		return ret
	}
	return *o.LifecycleStatus
}

// GetLifecycleStatusOk returns a tuple with the LifecycleStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerCertificate) GetLifecycleStatusOk() (*string, bool) {
	if o == nil || IsNil(o.LifecycleStatus) {
		return nil, false
	}
	return o.LifecycleStatus, true
}

// HasLifecycleStatus returns a boolean if a field has been set.
func (o *ComputerCertificate) HasLifecycleStatus() bool {
	if o != nil && !IsNil(o.LifecycleStatus) {
		return true
	}

	return false
}

// SetLifecycleStatus gets a reference to the given string and assigns it to the LifecycleStatus field.
func (o *ComputerCertificate) SetLifecycleStatus(v string) {
	o.LifecycleStatus = &v
}

// GetCertificateStatus returns the CertificateStatus field value if set, zero value otherwise.
func (o *ComputerCertificate) GetCertificateStatus() string {
	if o == nil || IsNil(o.CertificateStatus) {
		var ret string
		return ret
	}
	return *o.CertificateStatus
}

// GetCertificateStatusOk returns a tuple with the CertificateStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerCertificate) GetCertificateStatusOk() (*string, bool) {
	if o == nil || IsNil(o.CertificateStatus) {
		return nil, false
	}
	return o.CertificateStatus, true
}

// HasCertificateStatus returns a boolean if a field has been set.
func (o *ComputerCertificate) HasCertificateStatus() bool {
	if o != nil && !IsNil(o.CertificateStatus) {
		return true
	}

	return false
}

// SetCertificateStatus gets a reference to the given string and assigns it to the CertificateStatus field.
func (o *ComputerCertificate) SetCertificateStatus(v string) {
	o.CertificateStatus = &v
}

// GetSubjectName returns the SubjectName field value if set, zero value otherwise.
func (o *ComputerCertificate) GetSubjectName() string {
	if o == nil || IsNil(o.SubjectName) {
		var ret string
		return ret
	}
	return *o.SubjectName
}

// GetSubjectNameOk returns a tuple with the SubjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerCertificate) GetSubjectNameOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectName) {
		return nil, false
	}
	return o.SubjectName, true
}

// HasSubjectName returns a boolean if a field has been set.
func (o *ComputerCertificate) HasSubjectName() bool {
	if o != nil && !IsNil(o.SubjectName) {
		return true
	}

	return false
}

// SetSubjectName gets a reference to the given string and assigns it to the SubjectName field.
func (o *ComputerCertificate) SetSubjectName(v string) {
	o.SubjectName = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *ComputerCertificate) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerCertificate) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *ComputerCertificate) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *ComputerCertificate) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetSha1Fingerprint returns the Sha1Fingerprint field value if set, zero value otherwise.
func (o *ComputerCertificate) GetSha1Fingerprint() string {
	if o == nil || IsNil(o.Sha1Fingerprint) {
		var ret string
		return ret
	}
	return *o.Sha1Fingerprint
}

// GetSha1FingerprintOk returns a tuple with the Sha1Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerCertificate) GetSha1FingerprintOk() (*string, bool) {
	if o == nil || IsNil(o.Sha1Fingerprint) {
		return nil, false
	}
	return o.Sha1Fingerprint, true
}

// HasSha1Fingerprint returns a boolean if a field has been set.
func (o *ComputerCertificate) HasSha1Fingerprint() bool {
	if o != nil && !IsNil(o.Sha1Fingerprint) {
		return true
	}

	return false
}

// SetSha1Fingerprint gets a reference to the given string and assigns it to the Sha1Fingerprint field.
func (o *ComputerCertificate) SetSha1Fingerprint(v string) {
	o.Sha1Fingerprint = &v
}

// GetIssuedDate returns the IssuedDate field value if set, zero value otherwise.
func (o *ComputerCertificate) GetIssuedDate() string {
	if o == nil || IsNil(o.IssuedDate) {
		var ret string
		return ret
	}
	return *o.IssuedDate
}

// GetIssuedDateOk returns a tuple with the IssuedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerCertificate) GetIssuedDateOk() (*string, bool) {
	if o == nil || IsNil(o.IssuedDate) {
		return nil, false
	}
	return o.IssuedDate, true
}

// HasIssuedDate returns a boolean if a field has been set.
func (o *ComputerCertificate) HasIssuedDate() bool {
	if o != nil && !IsNil(o.IssuedDate) {
		return true
	}

	return false
}

// SetIssuedDate gets a reference to the given string and assigns it to the IssuedDate field.
func (o *ComputerCertificate) SetIssuedDate(v string) {
	o.IssuedDate = &v
}

func (o ComputerCertificate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComputerCertificate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CommonName) {
		toSerialize["commonName"] = o.CommonName
	}
	if !IsNil(o.Identity) {
		toSerialize["identity"] = o.Identity
	}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.LifecycleStatus) {
		toSerialize["lifecycleStatus"] = o.LifecycleStatus
	}
	if !IsNil(o.CertificateStatus) {
		toSerialize["certificateStatus"] = o.CertificateStatus
	}
	if !IsNil(o.SubjectName) {
		toSerialize["subjectName"] = o.SubjectName
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	if !IsNil(o.Sha1Fingerprint) {
		toSerialize["sha1Fingerprint"] = o.Sha1Fingerprint
	}
	if !IsNil(o.IssuedDate) {
		toSerialize["issuedDate"] = o.IssuedDate
	}
	return toSerialize, nil
}

type NullableComputerCertificate struct {
	value *ComputerCertificate
	isSet bool
}

func (v NullableComputerCertificate) Get() *ComputerCertificate {
	return v.value
}

func (v *NullableComputerCertificate) Set(val *ComputerCertificate) {
	v.value = val
	v.isSet = true
}

func (v NullableComputerCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableComputerCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputerCertificate(val *ComputerCertificate) *NullableComputerCertificate {
	return &NullableComputerCertificate{value: val, isSet: true}
}

func (v NullableComputerCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputerCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


