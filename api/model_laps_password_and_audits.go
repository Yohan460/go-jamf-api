/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// checks if the LapsPasswordAndAudits type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LapsPasswordAndAudits{}

// LapsPasswordAndAudits struct for LapsPasswordAndAudits
type LapsPasswordAndAudits struct {
	Password *string `json:"password,omitempty"`
	DateLastSeen NullableTime `json:"dateLastSeen,omitempty"`
	ExpirationTime NullableTime `json:"expirationTime,omitempty"`
	Audits []LapsAudit `json:"audits,omitempty"`
}

// NewLapsPasswordAndAudits instantiates a new LapsPasswordAndAudits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLapsPasswordAndAudits() *LapsPasswordAndAudits {
	this := LapsPasswordAndAudits{}
	return &this
}

// NewLapsPasswordAndAuditsWithDefaults instantiates a new LapsPasswordAndAudits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLapsPasswordAndAuditsWithDefaults() *LapsPasswordAndAudits {
	this := LapsPasswordAndAudits{}
	return &this
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *LapsPasswordAndAudits) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LapsPasswordAndAudits) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *LapsPasswordAndAudits) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *LapsPasswordAndAudits) SetPassword(v string) {
	o.Password = &v
}

// GetDateLastSeen returns the DateLastSeen field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LapsPasswordAndAudits) GetDateLastSeen() time.Time {
	if o == nil || IsNil(o.DateLastSeen.Get()) {
		var ret time.Time
		return ret
	}
	return *o.DateLastSeen.Get()
}

// GetDateLastSeenOk returns a tuple with the DateLastSeen field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LapsPasswordAndAudits) GetDateLastSeenOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.DateLastSeen.Get(), o.DateLastSeen.IsSet()
}

// HasDateLastSeen returns a boolean if a field has been set.
func (o *LapsPasswordAndAudits) HasDateLastSeen() bool {
	if o != nil && o.DateLastSeen.IsSet() {
		return true
	}

	return false
}

// SetDateLastSeen gets a reference to the given NullableTime and assigns it to the DateLastSeen field.
func (o *LapsPasswordAndAudits) SetDateLastSeen(v time.Time) {
	o.DateLastSeen.Set(&v)
}
// SetDateLastSeenNil sets the value for DateLastSeen to be an explicit nil
func (o *LapsPasswordAndAudits) SetDateLastSeenNil() {
	o.DateLastSeen.Set(nil)
}

// UnsetDateLastSeen ensures that no value is present for DateLastSeen, not even an explicit nil
func (o *LapsPasswordAndAudits) UnsetDateLastSeen() {
	o.DateLastSeen.Unset()
}

// GetExpirationTime returns the ExpirationTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LapsPasswordAndAudits) GetExpirationTime() time.Time {
	if o == nil || IsNil(o.ExpirationTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationTime.Get()
}

// GetExpirationTimeOk returns a tuple with the ExpirationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LapsPasswordAndAudits) GetExpirationTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpirationTime.Get(), o.ExpirationTime.IsSet()
}

// HasExpirationTime returns a boolean if a field has been set.
func (o *LapsPasswordAndAudits) HasExpirationTime() bool {
	if o != nil && o.ExpirationTime.IsSet() {
		return true
	}

	return false
}

// SetExpirationTime gets a reference to the given NullableTime and assigns it to the ExpirationTime field.
func (o *LapsPasswordAndAudits) SetExpirationTime(v time.Time) {
	o.ExpirationTime.Set(&v)
}
// SetExpirationTimeNil sets the value for ExpirationTime to be an explicit nil
func (o *LapsPasswordAndAudits) SetExpirationTimeNil() {
	o.ExpirationTime.Set(nil)
}

// UnsetExpirationTime ensures that no value is present for ExpirationTime, not even an explicit nil
func (o *LapsPasswordAndAudits) UnsetExpirationTime() {
	o.ExpirationTime.Unset()
}

// GetAudits returns the Audits field value if set, zero value otherwise.
func (o *LapsPasswordAndAudits) GetAudits() []LapsAudit {
	if o == nil || IsNil(o.Audits) {
		var ret []LapsAudit
		return ret
	}
	return o.Audits
}

// GetAuditsOk returns a tuple with the Audits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LapsPasswordAndAudits) GetAuditsOk() ([]LapsAudit, bool) {
	if o == nil || IsNil(o.Audits) {
		return nil, false
	}
	return o.Audits, true
}

// HasAudits returns a boolean if a field has been set.
func (o *LapsPasswordAndAudits) HasAudits() bool {
	if o != nil && !IsNil(o.Audits) {
		return true
	}

	return false
}

// SetAudits gets a reference to the given []LapsAudit and assigns it to the Audits field.
func (o *LapsPasswordAndAudits) SetAudits(v []LapsAudit) {
	o.Audits = v
}

func (o LapsPasswordAndAudits) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LapsPasswordAndAudits) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if o.DateLastSeen.IsSet() {
		toSerialize["dateLastSeen"] = o.DateLastSeen.Get()
	}
	if o.ExpirationTime.IsSet() {
		toSerialize["expirationTime"] = o.ExpirationTime.Get()
	}
	if !IsNil(o.Audits) {
		toSerialize["audits"] = o.Audits
	}
	return toSerialize, nil
}

type NullableLapsPasswordAndAudits struct {
	value *LapsPasswordAndAudits
	isSet bool
}

func (v NullableLapsPasswordAndAudits) Get() *LapsPasswordAndAudits {
	return v.value
}

func (v *NullableLapsPasswordAndAudits) Set(val *LapsPasswordAndAudits) {
	v.value = val
	v.isSet = true
}

func (v NullableLapsPasswordAndAudits) IsSet() bool {
	return v.isSet
}

func (v *NullableLapsPasswordAndAudits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLapsPasswordAndAudits(val *LapsPasswordAndAudits) *NullableLapsPasswordAndAudits {
	return &NullableLapsPasswordAndAudits{value: val, isSet: true}
}

func (v NullableLapsPasswordAndAudits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLapsPasswordAndAudits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


