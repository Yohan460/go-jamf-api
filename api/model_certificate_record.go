/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// CertificateRecord struct for CertificateRecord
type CertificateRecord struct {
	SubjectX500Principal *string `json:"subjectX500Principal,omitempty"`
	IssuerX500Principal *string `json:"issuerX500Principal,omitempty"`
	SerialNumber *string `json:"serialNumber,omitempty"`
	Version *int32 `json:"version,omitempty"`
	NotAfter *int32 `json:"notAfter,omitempty"`
	NotBefore *int32 `json:"notBefore,omitempty"`
	Signature *Signature `json:"signature,omitempty"`
	KeyUsage []string `json:"keyUsage,omitempty"`
	KeyUsageExtended []string `json:"keyUsageExtended,omitempty"`
	Sha1Fingerprint *string `json:"sha1Fingerprint,omitempty"`
	Sha256Fingerprint *string `json:"sha256Fingerprint,omitempty"`
}

// NewCertificateRecord instantiates a new CertificateRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateRecord() *CertificateRecord {
	this := CertificateRecord{}
	return &this
}

// NewCertificateRecordWithDefaults instantiates a new CertificateRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateRecordWithDefaults() *CertificateRecord {
	this := CertificateRecord{}
	return &this
}

// GetSubjectX500Principal returns the SubjectX500Principal field value if set, zero value otherwise.
func (o *CertificateRecord) GetSubjectX500Principal() string {
	if o == nil || o.SubjectX500Principal == nil {
		var ret string
		return ret
	}
	return *o.SubjectX500Principal
}

// GetSubjectX500PrincipalOk returns a tuple with the SubjectX500Principal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateRecord) GetSubjectX500PrincipalOk() (*string, bool) {
	if o == nil || o.SubjectX500Principal == nil {
		return nil, false
	}
	return o.SubjectX500Principal, true
}

// HasSubjectX500Principal returns a boolean if a field has been set.
func (o *CertificateRecord) HasSubjectX500Principal() bool {
	if o != nil && o.SubjectX500Principal != nil {
		return true
	}

	return false
}

// SetSubjectX500Principal gets a reference to the given string and assigns it to the SubjectX500Principal field.
func (o *CertificateRecord) SetSubjectX500Principal(v string) {
	o.SubjectX500Principal = &v
}

// GetIssuerX500Principal returns the IssuerX500Principal field value if set, zero value otherwise.
func (o *CertificateRecord) GetIssuerX500Principal() string {
	if o == nil || o.IssuerX500Principal == nil {
		var ret string
		return ret
	}
	return *o.IssuerX500Principal
}

// GetIssuerX500PrincipalOk returns a tuple with the IssuerX500Principal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateRecord) GetIssuerX500PrincipalOk() (*string, bool) {
	if o == nil || o.IssuerX500Principal == nil {
		return nil, false
	}
	return o.IssuerX500Principal, true
}

// HasIssuerX500Principal returns a boolean if a field has been set.
func (o *CertificateRecord) HasIssuerX500Principal() bool {
	if o != nil && o.IssuerX500Principal != nil {
		return true
	}

	return false
}

// SetIssuerX500Principal gets a reference to the given string and assigns it to the IssuerX500Principal field.
func (o *CertificateRecord) SetIssuerX500Principal(v string) {
	o.IssuerX500Principal = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *CertificateRecord) GetSerialNumber() string {
	if o == nil || o.SerialNumber == nil {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateRecord) GetSerialNumberOk() (*string, bool) {
	if o == nil || o.SerialNumber == nil {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *CertificateRecord) HasSerialNumber() bool {
	if o != nil && o.SerialNumber != nil {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *CertificateRecord) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *CertificateRecord) GetVersion() int32 {
	if o == nil || o.Version == nil {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateRecord) GetVersionOk() (*int32, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *CertificateRecord) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *CertificateRecord) SetVersion(v int32) {
	o.Version = &v
}

// GetNotAfter returns the NotAfter field value if set, zero value otherwise.
func (o *CertificateRecord) GetNotAfter() int32 {
	if o == nil || o.NotAfter == nil {
		var ret int32
		return ret
	}
	return *o.NotAfter
}

// GetNotAfterOk returns a tuple with the NotAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateRecord) GetNotAfterOk() (*int32, bool) {
	if o == nil || o.NotAfter == nil {
		return nil, false
	}
	return o.NotAfter, true
}

// HasNotAfter returns a boolean if a field has been set.
func (o *CertificateRecord) HasNotAfter() bool {
	if o != nil && o.NotAfter != nil {
		return true
	}

	return false
}

// SetNotAfter gets a reference to the given int32 and assigns it to the NotAfter field.
func (o *CertificateRecord) SetNotAfter(v int32) {
	o.NotAfter = &v
}

// GetNotBefore returns the NotBefore field value if set, zero value otherwise.
func (o *CertificateRecord) GetNotBefore() int32 {
	if o == nil || o.NotBefore == nil {
		var ret int32
		return ret
	}
	return *o.NotBefore
}

// GetNotBeforeOk returns a tuple with the NotBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateRecord) GetNotBeforeOk() (*int32, bool) {
	if o == nil || o.NotBefore == nil {
		return nil, false
	}
	return o.NotBefore, true
}

// HasNotBefore returns a boolean if a field has been set.
func (o *CertificateRecord) HasNotBefore() bool {
	if o != nil && o.NotBefore != nil {
		return true
	}

	return false
}

// SetNotBefore gets a reference to the given int32 and assigns it to the NotBefore field.
func (o *CertificateRecord) SetNotBefore(v int32) {
	o.NotBefore = &v
}

// GetSignature returns the Signature field value if set, zero value otherwise.
func (o *CertificateRecord) GetSignature() Signature {
	if o == nil || o.Signature == nil {
		var ret Signature
		return ret
	}
	return *o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateRecord) GetSignatureOk() (*Signature, bool) {
	if o == nil || o.Signature == nil {
		return nil, false
	}
	return o.Signature, true
}

// HasSignature returns a boolean if a field has been set.
func (o *CertificateRecord) HasSignature() bool {
	if o != nil && o.Signature != nil {
		return true
	}

	return false
}

// SetSignature gets a reference to the given Signature and assigns it to the Signature field.
func (o *CertificateRecord) SetSignature(v Signature) {
	o.Signature = &v
}

// GetKeyUsage returns the KeyUsage field value if set, zero value otherwise.
func (o *CertificateRecord) GetKeyUsage() []string {
	if o == nil || o.KeyUsage == nil {
		var ret []string
		return ret
	}
	return o.KeyUsage
}

// GetKeyUsageOk returns a tuple with the KeyUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateRecord) GetKeyUsageOk() ([]string, bool) {
	if o == nil || o.KeyUsage == nil {
		return nil, false
	}
	return o.KeyUsage, true
}

// HasKeyUsage returns a boolean if a field has been set.
func (o *CertificateRecord) HasKeyUsage() bool {
	if o != nil && o.KeyUsage != nil {
		return true
	}

	return false
}

// SetKeyUsage gets a reference to the given []string and assigns it to the KeyUsage field.
func (o *CertificateRecord) SetKeyUsage(v []string) {
	o.KeyUsage = v
}

// GetKeyUsageExtended returns the KeyUsageExtended field value if set, zero value otherwise.
func (o *CertificateRecord) GetKeyUsageExtended() []string {
	if o == nil || o.KeyUsageExtended == nil {
		var ret []string
		return ret
	}
	return o.KeyUsageExtended
}

// GetKeyUsageExtendedOk returns a tuple with the KeyUsageExtended field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateRecord) GetKeyUsageExtendedOk() ([]string, bool) {
	if o == nil || o.KeyUsageExtended == nil {
		return nil, false
	}
	return o.KeyUsageExtended, true
}

// HasKeyUsageExtended returns a boolean if a field has been set.
func (o *CertificateRecord) HasKeyUsageExtended() bool {
	if o != nil && o.KeyUsageExtended != nil {
		return true
	}

	return false
}

// SetKeyUsageExtended gets a reference to the given []string and assigns it to the KeyUsageExtended field.
func (o *CertificateRecord) SetKeyUsageExtended(v []string) {
	o.KeyUsageExtended = v
}

// GetSha1Fingerprint returns the Sha1Fingerprint field value if set, zero value otherwise.
func (o *CertificateRecord) GetSha1Fingerprint() string {
	if o == nil || o.Sha1Fingerprint == nil {
		var ret string
		return ret
	}
	return *o.Sha1Fingerprint
}

// GetSha1FingerprintOk returns a tuple with the Sha1Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateRecord) GetSha1FingerprintOk() (*string, bool) {
	if o == nil || o.Sha1Fingerprint == nil {
		return nil, false
	}
	return o.Sha1Fingerprint, true
}

// HasSha1Fingerprint returns a boolean if a field has been set.
func (o *CertificateRecord) HasSha1Fingerprint() bool {
	if o != nil && o.Sha1Fingerprint != nil {
		return true
	}

	return false
}

// SetSha1Fingerprint gets a reference to the given string and assigns it to the Sha1Fingerprint field.
func (o *CertificateRecord) SetSha1Fingerprint(v string) {
	o.Sha1Fingerprint = &v
}

// GetSha256Fingerprint returns the Sha256Fingerprint field value if set, zero value otherwise.
func (o *CertificateRecord) GetSha256Fingerprint() string {
	if o == nil || o.Sha256Fingerprint == nil {
		var ret string
		return ret
	}
	return *o.Sha256Fingerprint
}

// GetSha256FingerprintOk returns a tuple with the Sha256Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateRecord) GetSha256FingerprintOk() (*string, bool) {
	if o == nil || o.Sha256Fingerprint == nil {
		return nil, false
	}
	return o.Sha256Fingerprint, true
}

// HasSha256Fingerprint returns a boolean if a field has been set.
func (o *CertificateRecord) HasSha256Fingerprint() bool {
	if o != nil && o.Sha256Fingerprint != nil {
		return true
	}

	return false
}

// SetSha256Fingerprint gets a reference to the given string and assigns it to the Sha256Fingerprint field.
func (o *CertificateRecord) SetSha256Fingerprint(v string) {
	o.Sha256Fingerprint = &v
}

func (o CertificateRecord) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SubjectX500Principal != nil {
		toSerialize["subjectX500Principal"] = o.SubjectX500Principal
	}
	if o.IssuerX500Principal != nil {
		toSerialize["issuerX500Principal"] = o.IssuerX500Principal
	}
	if o.SerialNumber != nil {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.NotAfter != nil {
		toSerialize["notAfter"] = o.NotAfter
	}
	if o.NotBefore != nil {
		toSerialize["notBefore"] = o.NotBefore
	}
	if o.Signature != nil {
		toSerialize["signature"] = o.Signature
	}
	if o.KeyUsage != nil {
		toSerialize["keyUsage"] = o.KeyUsage
	}
	if o.KeyUsageExtended != nil {
		toSerialize["keyUsageExtended"] = o.KeyUsageExtended
	}
	if o.Sha1Fingerprint != nil {
		toSerialize["sha1Fingerprint"] = o.Sha1Fingerprint
	}
	if o.Sha256Fingerprint != nil {
		toSerialize["sha256Fingerprint"] = o.Sha256Fingerprint
	}
	return json.Marshal(toSerialize)
}

type NullableCertificateRecord struct {
	value *CertificateRecord
	isSet bool
}

func (v NullableCertificateRecord) Get() *CertificateRecord {
	return v.value
}

func (v *NullableCertificateRecord) Set(val *CertificateRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateRecord(val *CertificateRecord) *NullableCertificateRecord {
	return &NullableCertificateRecord{value: val, isSet: true}
}

func (v NullableCertificateRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


