/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type ComputerPrestagesAPI interface {

	/*
	V1ComputerPrestagesIdScopeDelete Remove device Scope for a specific Computer Prestage 

	Remove device scope for a specific computer prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Computer Prestage identifier
	@return ComputerPrestagesAPIV1ComputerPrestagesIdScopeDeleteRequest

	Deprecated
	*/
	V1ComputerPrestagesIdScopeDelete(ctx context.Context, id int32) ComputerPrestagesAPIV1ComputerPrestagesIdScopeDeleteRequest

	// V1ComputerPrestagesIdScopeDeleteExecute executes the request
	//  @return PrestageScopeResponse
	// Deprecated
	V1ComputerPrestagesIdScopeDeleteExecute(r ComputerPrestagesAPIV1ComputerPrestagesIdScopeDeleteRequest) (*PrestageScopeResponse, *http.Response, error)

	/*
	V1ComputerPrestagesIdScopeGet Get device Scope for a specific Computer Prestage 

	Get device scope for a specific computer prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Computer Prestage identifier
	@return ComputerPrestagesAPIV1ComputerPrestagesIdScopeGetRequest

	Deprecated
	*/
	V1ComputerPrestagesIdScopeGet(ctx context.Context, id int32) ComputerPrestagesAPIV1ComputerPrestagesIdScopeGetRequest

	// V1ComputerPrestagesIdScopeGetExecute executes the request
	//  @return PrestageScopeResponse
	// Deprecated
	V1ComputerPrestagesIdScopeGetExecute(r ComputerPrestagesAPIV1ComputerPrestagesIdScopeGetRequest) (*PrestageScopeResponse, *http.Response, error)

	/*
	V1ComputerPrestagesIdScopePost Add device Scope for a specific Computer Prestage 

	Add device scope for a specific computer prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Computer Prestage identifier
	@return ComputerPrestagesAPIV1ComputerPrestagesIdScopePostRequest

	Deprecated
	*/
	V1ComputerPrestagesIdScopePost(ctx context.Context, id int32) ComputerPrestagesAPIV1ComputerPrestagesIdScopePostRequest

	// V1ComputerPrestagesIdScopePostExecute executes the request
	//  @return PrestageScopeResponse
	// Deprecated
	V1ComputerPrestagesIdScopePostExecute(r ComputerPrestagesAPIV1ComputerPrestagesIdScopePostRequest) (*PrestageScopeResponse, *http.Response, error)

	/*
	V1ComputerPrestagesIdScopePut Replace device Scope for a specific Computer Prestage 

	Replace device scope for a specific computer prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Computer Prestage identifier
	@return ComputerPrestagesAPIV1ComputerPrestagesIdScopePutRequest

	Deprecated
	*/
	V1ComputerPrestagesIdScopePut(ctx context.Context, id int32) ComputerPrestagesAPIV1ComputerPrestagesIdScopePutRequest

	// V1ComputerPrestagesIdScopePutExecute executes the request
	//  @return PrestageScopeResponse
	// Deprecated
	V1ComputerPrestagesIdScopePutExecute(r ComputerPrestagesAPIV1ComputerPrestagesIdScopePutRequest) (*PrestageScopeResponse, *http.Response, error)

	/*
	V1ComputerPrestagesScopeGet Get all device Scope for all Computer Prestages 

	Get all device scope for all computer prestages

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ComputerPrestagesAPIV1ComputerPrestagesScopeGetRequest

	Deprecated
	*/
	V1ComputerPrestagesScopeGet(ctx context.Context) ComputerPrestagesAPIV1ComputerPrestagesScopeGetRequest

	// V1ComputerPrestagesScopeGetExecute executes the request
	//  @return PrestageScope
	// Deprecated
	V1ComputerPrestagesScopeGetExecute(r ComputerPrestagesAPIV1ComputerPrestagesScopeGetRequest) (*PrestageScope, *http.Response, error)

	/*
	V2ComputerPrestagesGet Get sorted and paged Computer Prestages 

	Gets sorted and paged computer prestages

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ComputerPrestagesAPIV2ComputerPrestagesGetRequest

	Deprecated
	*/
	V2ComputerPrestagesGet(ctx context.Context) ComputerPrestagesAPIV2ComputerPrestagesGetRequest

	// V2ComputerPrestagesGetExecute executes the request
	//  @return ComputerPrestageSearchResultsV2
	// Deprecated
	V2ComputerPrestagesGetExecute(r ComputerPrestagesAPIV2ComputerPrestagesGetRequest) (*ComputerPrestageSearchResultsV2, *http.Response, error)

	/*
	V2ComputerPrestagesIdDelete Delete a Computer Prestage with the supplied id 

	Deletes a Computer Prestage with the supplied id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Computer Prestage identifier
	@return ComputerPrestagesAPIV2ComputerPrestagesIdDeleteRequest

	Deprecated
	*/
	V2ComputerPrestagesIdDelete(ctx context.Context, id string) ComputerPrestagesAPIV2ComputerPrestagesIdDeleteRequest

	// V2ComputerPrestagesIdDeleteExecute executes the request
	// Deprecated
	V2ComputerPrestagesIdDeleteExecute(r ComputerPrestagesAPIV2ComputerPrestagesIdDeleteRequest) (*http.Response, error)

	/*
	V2ComputerPrestagesIdGet Retrieve a Computer Prestage with the supplied id 

	Retrieves a Computer Prestage with the supplied id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Computer Prestage identifier
	@return ComputerPrestagesAPIV2ComputerPrestagesIdGetRequest

	Deprecated
	*/
	V2ComputerPrestagesIdGet(ctx context.Context, id string) ComputerPrestagesAPIV2ComputerPrestagesIdGetRequest

	// V2ComputerPrestagesIdGetExecute executes the request
	//  @return GetComputerPrestageV2
	// Deprecated
	V2ComputerPrestagesIdGetExecute(r ComputerPrestagesAPIV2ComputerPrestagesIdGetRequest) (*GetComputerPrestageV2, *http.Response, error)

	/*
	V2ComputerPrestagesIdPut Update a Computer Prestage 

	Updates a Computer Prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Computer Prestage identifier
	@return ComputerPrestagesAPIV2ComputerPrestagesIdPutRequest

	Deprecated
	*/
	V2ComputerPrestagesIdPut(ctx context.Context, id string) ComputerPrestagesAPIV2ComputerPrestagesIdPutRequest

	// V2ComputerPrestagesIdPutExecute executes the request
	//  @return GetComputerPrestageV2
	// Deprecated
	V2ComputerPrestagesIdPutExecute(r ComputerPrestagesAPIV2ComputerPrestagesIdPutRequest) (*GetComputerPrestageV2, *http.Response, error)

	/*
	V2ComputerPrestagesIdScopeDeleteMultiplePost Remove device Scope for a specific Computer Prestage 

	Remove device scope for a specific computer prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Computer Prestage identifier
	@return ComputerPrestagesAPIV2ComputerPrestagesIdScopeDeleteMultiplePostRequest
	*/
	V2ComputerPrestagesIdScopeDeleteMultiplePost(ctx context.Context, id string) ComputerPrestagesAPIV2ComputerPrestagesIdScopeDeleteMultiplePostRequest

	// V2ComputerPrestagesIdScopeDeleteMultiplePostExecute executes the request
	//  @return PrestageScopeResponseV2
	V2ComputerPrestagesIdScopeDeleteMultiplePostExecute(r ComputerPrestagesAPIV2ComputerPrestagesIdScopeDeleteMultiplePostRequest) (*PrestageScopeResponseV2, *http.Response, error)

	/*
	V2ComputerPrestagesIdScopeGet Get device Scope for a specific Computer Prestage 

	Get device scope for a specific computer prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Computer Prestage identifier
	@return ComputerPrestagesAPIV2ComputerPrestagesIdScopeGetRequest
	*/
	V2ComputerPrestagesIdScopeGet(ctx context.Context, id string) ComputerPrestagesAPIV2ComputerPrestagesIdScopeGetRequest

	// V2ComputerPrestagesIdScopeGetExecute executes the request
	//  @return PrestageScopeResponseV2
	V2ComputerPrestagesIdScopeGetExecute(r ComputerPrestagesAPIV2ComputerPrestagesIdScopeGetRequest) (*PrestageScopeResponseV2, *http.Response, error)

	/*
	V2ComputerPrestagesIdScopePost Add device Scope for a specific Computer Prestage 

	Add device scope for a specific computer prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Computer Prestage identifier
	@return ComputerPrestagesAPIV2ComputerPrestagesIdScopePostRequest
	*/
	V2ComputerPrestagesIdScopePost(ctx context.Context, id string) ComputerPrestagesAPIV2ComputerPrestagesIdScopePostRequest

	// V2ComputerPrestagesIdScopePostExecute executes the request
	//  @return PrestageScopeResponseV2
	V2ComputerPrestagesIdScopePostExecute(r ComputerPrestagesAPIV2ComputerPrestagesIdScopePostRequest) (*PrestageScopeResponseV2, *http.Response, error)

	/*
	V2ComputerPrestagesIdScopePut Replace device Scope for a specific Computer Prestage 

	Replace device scope for a specific computer prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Computer Prestage identifier
	@return ComputerPrestagesAPIV2ComputerPrestagesIdScopePutRequest
	*/
	V2ComputerPrestagesIdScopePut(ctx context.Context, id string) ComputerPrestagesAPIV2ComputerPrestagesIdScopePutRequest

	// V2ComputerPrestagesIdScopePutExecute executes the request
	//  @return PrestageScopeResponseV2
	V2ComputerPrestagesIdScopePutExecute(r ComputerPrestagesAPIV2ComputerPrestagesIdScopePutRequest) (*PrestageScopeResponseV2, *http.Response, error)

	/*
	V2ComputerPrestagesPost Create a Computer Prestage 

	Create a computer prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ComputerPrestagesAPIV2ComputerPrestagesPostRequest

	Deprecated
	*/
	V2ComputerPrestagesPost(ctx context.Context) ComputerPrestagesAPIV2ComputerPrestagesPostRequest

	// V2ComputerPrestagesPostExecute executes the request
	//  @return HrefResponse
	// Deprecated
	V2ComputerPrestagesPostExecute(r ComputerPrestagesAPIV2ComputerPrestagesPostRequest) (*HrefResponse, *http.Response, error)

	/*
	V2ComputerPrestagesScopeGet Get all device Scope for all Computer Prestages 

	Get all device scope for all computer prestages

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ComputerPrestagesAPIV2ComputerPrestagesScopeGetRequest
	*/
	V2ComputerPrestagesScopeGet(ctx context.Context) ComputerPrestagesAPIV2ComputerPrestagesScopeGetRequest

	// V2ComputerPrestagesScopeGetExecute executes the request
	//  @return PrestageScopeV2
	V2ComputerPrestagesScopeGetExecute(r ComputerPrestagesAPIV2ComputerPrestagesScopeGetRequest) (*PrestageScopeV2, *http.Response, error)

	/*
	V3ComputerPrestagesGet Get sorted and paged Computer Prestages 

	Gets sorted and paged computer prestages

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ComputerPrestagesAPIV3ComputerPrestagesGetRequest
	*/
	V3ComputerPrestagesGet(ctx context.Context) ComputerPrestagesAPIV3ComputerPrestagesGetRequest

	// V3ComputerPrestagesGetExecute executes the request
	//  @return ComputerPrestageSearchResultsV3
	V3ComputerPrestagesGetExecute(r ComputerPrestagesAPIV3ComputerPrestagesGetRequest) (*ComputerPrestageSearchResultsV3, *http.Response, error)

	/*
	V3ComputerPrestagesIdDelete Delete a Computer Prestage with the supplied id 

	Deletes a Computer Prestage with the supplied id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Computer Prestage identifier
	@return ComputerPrestagesAPIV3ComputerPrestagesIdDeleteRequest
	*/
	V3ComputerPrestagesIdDelete(ctx context.Context, id string) ComputerPrestagesAPIV3ComputerPrestagesIdDeleteRequest

	// V3ComputerPrestagesIdDeleteExecute executes the request
	V3ComputerPrestagesIdDeleteExecute(r ComputerPrestagesAPIV3ComputerPrestagesIdDeleteRequest) (*http.Response, error)

	/*
	V3ComputerPrestagesIdGet Retrieve a Computer Prestage with the supplied id 

	Retrieves a Computer Prestage with the supplied id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Computer Prestage identifier
	@return ComputerPrestagesAPIV3ComputerPrestagesIdGetRequest
	*/
	V3ComputerPrestagesIdGet(ctx context.Context, id string) ComputerPrestagesAPIV3ComputerPrestagesIdGetRequest

	// V3ComputerPrestagesIdGetExecute executes the request
	//  @return GetComputerPrestageV3
	V3ComputerPrestagesIdGetExecute(r ComputerPrestagesAPIV3ComputerPrestagesIdGetRequest) (*GetComputerPrestageV3, *http.Response, error)

	/*
	V3ComputerPrestagesIdPut Update a Computer Prestage 

	Updates a Computer Prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Computer Prestage identifier
	@return ComputerPrestagesAPIV3ComputerPrestagesIdPutRequest
	*/
	V3ComputerPrestagesIdPut(ctx context.Context, id string) ComputerPrestagesAPIV3ComputerPrestagesIdPutRequest

	// V3ComputerPrestagesIdPutExecute executes the request
	//  @return GetComputerPrestageV3
	V3ComputerPrestagesIdPutExecute(r ComputerPrestagesAPIV3ComputerPrestagesIdPutRequest) (*GetComputerPrestageV3, *http.Response, error)

	/*
	V3ComputerPrestagesPost Create a Computer Prestage 

	Create a computer prestage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ComputerPrestagesAPIV3ComputerPrestagesPostRequest
	*/
	V3ComputerPrestagesPost(ctx context.Context) ComputerPrestagesAPIV3ComputerPrestagesPostRequest

	// V3ComputerPrestagesPostExecute executes the request
	//  @return HrefResponse
	V3ComputerPrestagesPostExecute(r ComputerPrestagesAPIV3ComputerPrestagesPostRequest) (*HrefResponse, *http.Response, error)
}

// ComputerPrestagesAPIService ComputerPrestagesAPI service
type ComputerPrestagesAPIService service

type ComputerPrestagesAPIV1ComputerPrestagesIdScopeDeleteRequest struct {
	ctx context.Context
	ApiService ComputerPrestagesAPI
	id int32
	prestageScopeUpdate *PrestageScopeUpdate
}

// Serial Numbers to remove from scope
func (r ComputerPrestagesAPIV1ComputerPrestagesIdScopeDeleteRequest) PrestageScopeUpdate(prestageScopeUpdate PrestageScopeUpdate) ComputerPrestagesAPIV1ComputerPrestagesIdScopeDeleteRequest {
	r.prestageScopeUpdate = &prestageScopeUpdate
	return r
}

func (r ComputerPrestagesAPIV1ComputerPrestagesIdScopeDeleteRequest) Execute() (*PrestageScopeResponse, *http.Response, error) {
	return r.ApiService.V1ComputerPrestagesIdScopeDeleteExecute(r)
}

/*
V1ComputerPrestagesIdScopeDelete Remove device Scope for a specific Computer Prestage 

Remove device scope for a specific computer prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Computer Prestage identifier
 @return ComputerPrestagesAPIV1ComputerPrestagesIdScopeDeleteRequest

Deprecated
*/
func (a *ComputerPrestagesAPIService) V1ComputerPrestagesIdScopeDelete(ctx context.Context, id int32) ComputerPrestagesAPIV1ComputerPrestagesIdScopeDeleteRequest {
	return ComputerPrestagesAPIV1ComputerPrestagesIdScopeDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PrestageScopeResponse
// Deprecated
func (a *ComputerPrestagesAPIService) V1ComputerPrestagesIdScopeDeleteExecute(r ComputerPrestagesAPIV1ComputerPrestagesIdScopeDeleteRequest) (*PrestageScopeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrestageScopeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComputerPrestagesAPIService.V1ComputerPrestagesIdScopeDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/computer-prestages/{id}/scope"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.prestageScopeUpdate == nil {
		return localVarReturnValue, nil, reportError("prestageScopeUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.prestageScopeUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ComputerPrestagesAPIV1ComputerPrestagesIdScopeGetRequest struct {
	ctx context.Context
	ApiService ComputerPrestagesAPI
	id int32
}

func (r ComputerPrestagesAPIV1ComputerPrestagesIdScopeGetRequest) Execute() (*PrestageScopeResponse, *http.Response, error) {
	return r.ApiService.V1ComputerPrestagesIdScopeGetExecute(r)
}

/*
V1ComputerPrestagesIdScopeGet Get device Scope for a specific Computer Prestage 

Get device scope for a specific computer prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Computer Prestage identifier
 @return ComputerPrestagesAPIV1ComputerPrestagesIdScopeGetRequest

Deprecated
*/
func (a *ComputerPrestagesAPIService) V1ComputerPrestagesIdScopeGet(ctx context.Context, id int32) ComputerPrestagesAPIV1ComputerPrestagesIdScopeGetRequest {
	return ComputerPrestagesAPIV1ComputerPrestagesIdScopeGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PrestageScopeResponse
// Deprecated
func (a *ComputerPrestagesAPIService) V1ComputerPrestagesIdScopeGetExecute(r ComputerPrestagesAPIV1ComputerPrestagesIdScopeGetRequest) (*PrestageScopeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrestageScopeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComputerPrestagesAPIService.V1ComputerPrestagesIdScopeGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/computer-prestages/{id}/scope"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ComputerPrestagesAPIV1ComputerPrestagesIdScopePostRequest struct {
	ctx context.Context
	ApiService ComputerPrestagesAPI
	id int32
	prestageScopeUpdate *PrestageScopeUpdate
}

// Serial Numbers to scope
func (r ComputerPrestagesAPIV1ComputerPrestagesIdScopePostRequest) PrestageScopeUpdate(prestageScopeUpdate PrestageScopeUpdate) ComputerPrestagesAPIV1ComputerPrestagesIdScopePostRequest {
	r.prestageScopeUpdate = &prestageScopeUpdate
	return r
}

func (r ComputerPrestagesAPIV1ComputerPrestagesIdScopePostRequest) Execute() (*PrestageScopeResponse, *http.Response, error) {
	return r.ApiService.V1ComputerPrestagesIdScopePostExecute(r)
}

/*
V1ComputerPrestagesIdScopePost Add device Scope for a specific Computer Prestage 

Add device scope for a specific computer prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Computer Prestage identifier
 @return ComputerPrestagesAPIV1ComputerPrestagesIdScopePostRequest

Deprecated
*/
func (a *ComputerPrestagesAPIService) V1ComputerPrestagesIdScopePost(ctx context.Context, id int32) ComputerPrestagesAPIV1ComputerPrestagesIdScopePostRequest {
	return ComputerPrestagesAPIV1ComputerPrestagesIdScopePostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PrestageScopeResponse
// Deprecated
func (a *ComputerPrestagesAPIService) V1ComputerPrestagesIdScopePostExecute(r ComputerPrestagesAPIV1ComputerPrestagesIdScopePostRequest) (*PrestageScopeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrestageScopeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComputerPrestagesAPIService.V1ComputerPrestagesIdScopePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/computer-prestages/{id}/scope"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.prestageScopeUpdate == nil {
		return localVarReturnValue, nil, reportError("prestageScopeUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.prestageScopeUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ComputerPrestagesAPIV1ComputerPrestagesIdScopePutRequest struct {
	ctx context.Context
	ApiService ComputerPrestagesAPI
	id int32
	prestageScopeUpdate *PrestageScopeUpdate
}

// Serial Numbers to scope
func (r ComputerPrestagesAPIV1ComputerPrestagesIdScopePutRequest) PrestageScopeUpdate(prestageScopeUpdate PrestageScopeUpdate) ComputerPrestagesAPIV1ComputerPrestagesIdScopePutRequest {
	r.prestageScopeUpdate = &prestageScopeUpdate
	return r
}

func (r ComputerPrestagesAPIV1ComputerPrestagesIdScopePutRequest) Execute() (*PrestageScopeResponse, *http.Response, error) {
	return r.ApiService.V1ComputerPrestagesIdScopePutExecute(r)
}

/*
V1ComputerPrestagesIdScopePut Replace device Scope for a specific Computer Prestage 

Replace device scope for a specific computer prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Computer Prestage identifier
 @return ComputerPrestagesAPIV1ComputerPrestagesIdScopePutRequest

Deprecated
*/
func (a *ComputerPrestagesAPIService) V1ComputerPrestagesIdScopePut(ctx context.Context, id int32) ComputerPrestagesAPIV1ComputerPrestagesIdScopePutRequest {
	return ComputerPrestagesAPIV1ComputerPrestagesIdScopePutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PrestageScopeResponse
// Deprecated
func (a *ComputerPrestagesAPIService) V1ComputerPrestagesIdScopePutExecute(r ComputerPrestagesAPIV1ComputerPrestagesIdScopePutRequest) (*PrestageScopeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrestageScopeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComputerPrestagesAPIService.V1ComputerPrestagesIdScopePut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/computer-prestages/{id}/scope"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.prestageScopeUpdate == nil {
		return localVarReturnValue, nil, reportError("prestageScopeUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.prestageScopeUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ComputerPrestagesAPIV1ComputerPrestagesScopeGetRequest struct {
	ctx context.Context
	ApiService ComputerPrestagesAPI
}

func (r ComputerPrestagesAPIV1ComputerPrestagesScopeGetRequest) Execute() (*PrestageScope, *http.Response, error) {
	return r.ApiService.V1ComputerPrestagesScopeGetExecute(r)
}

/*
V1ComputerPrestagesScopeGet Get all device Scope for all Computer Prestages 

Get all device scope for all computer prestages

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ComputerPrestagesAPIV1ComputerPrestagesScopeGetRequest

Deprecated
*/
func (a *ComputerPrestagesAPIService) V1ComputerPrestagesScopeGet(ctx context.Context) ComputerPrestagesAPIV1ComputerPrestagesScopeGetRequest {
	return ComputerPrestagesAPIV1ComputerPrestagesScopeGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PrestageScope
// Deprecated
func (a *ComputerPrestagesAPIService) V1ComputerPrestagesScopeGetExecute(r ComputerPrestagesAPIV1ComputerPrestagesScopeGetRequest) (*PrestageScope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrestageScope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComputerPrestagesAPIService.V1ComputerPrestagesScopeGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/computer-prestages/scope"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ComputerPrestagesAPIV2ComputerPrestagesGetRequest struct {
	ctx context.Context
	ApiService ComputerPrestagesAPI
	page *int32
	pageSize *int32
	sort *[]string
}

func (r ComputerPrestagesAPIV2ComputerPrestagesGetRequest) Page(page int32) ComputerPrestagesAPIV2ComputerPrestagesGetRequest {
	r.page = &page
	return r
}

func (r ComputerPrestagesAPIV2ComputerPrestagesGetRequest) PageSize(pageSize int32) ComputerPrestagesAPIV2ComputerPrestagesGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc 
func (r ComputerPrestagesAPIV2ComputerPrestagesGetRequest) Sort(sort []string) ComputerPrestagesAPIV2ComputerPrestagesGetRequest {
	r.sort = &sort
	return r
}

func (r ComputerPrestagesAPIV2ComputerPrestagesGetRequest) Execute() (*ComputerPrestageSearchResultsV2, *http.Response, error) {
	return r.ApiService.V2ComputerPrestagesGetExecute(r)
}

/*
V2ComputerPrestagesGet Get sorted and paged Computer Prestages 

Gets sorted and paged computer prestages

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ComputerPrestagesAPIV2ComputerPrestagesGetRequest

Deprecated
*/
func (a *ComputerPrestagesAPIService) V2ComputerPrestagesGet(ctx context.Context) ComputerPrestagesAPIV2ComputerPrestagesGetRequest {
	return ComputerPrestagesAPIV2ComputerPrestagesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ComputerPrestageSearchResultsV2
// Deprecated
func (a *ComputerPrestagesAPIService) V2ComputerPrestagesGetExecute(r ComputerPrestagesAPIV2ComputerPrestagesGetRequest) (*ComputerPrestageSearchResultsV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComputerPrestageSearchResultsV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComputerPrestagesAPIService.V2ComputerPrestagesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/computer-prestages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		var defaultValue []string = ["id:desc"]
		r.sort = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ComputerPrestagesAPIV2ComputerPrestagesIdDeleteRequest struct {
	ctx context.Context
	ApiService ComputerPrestagesAPI
	id string
}

func (r ComputerPrestagesAPIV2ComputerPrestagesIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V2ComputerPrestagesIdDeleteExecute(r)
}

/*
V2ComputerPrestagesIdDelete Delete a Computer Prestage with the supplied id 

Deletes a Computer Prestage with the supplied id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Computer Prestage identifier
 @return ComputerPrestagesAPIV2ComputerPrestagesIdDeleteRequest

Deprecated
*/
func (a *ComputerPrestagesAPIService) V2ComputerPrestagesIdDelete(ctx context.Context, id string) ComputerPrestagesAPIV2ComputerPrestagesIdDeleteRequest {
	return ComputerPrestagesAPIV2ComputerPrestagesIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
// Deprecated
func (a *ComputerPrestagesAPIService) V2ComputerPrestagesIdDeleteExecute(r ComputerPrestagesAPIV2ComputerPrestagesIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComputerPrestagesAPIService.V2ComputerPrestagesIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/computer-prestages/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ComputerPrestagesAPIV2ComputerPrestagesIdGetRequest struct {
	ctx context.Context
	ApiService ComputerPrestagesAPI
	id string
}

func (r ComputerPrestagesAPIV2ComputerPrestagesIdGetRequest) Execute() (*GetComputerPrestageV2, *http.Response, error) {
	return r.ApiService.V2ComputerPrestagesIdGetExecute(r)
}

/*
V2ComputerPrestagesIdGet Retrieve a Computer Prestage with the supplied id 

Retrieves a Computer Prestage with the supplied id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Computer Prestage identifier
 @return ComputerPrestagesAPIV2ComputerPrestagesIdGetRequest

Deprecated
*/
func (a *ComputerPrestagesAPIService) V2ComputerPrestagesIdGet(ctx context.Context, id string) ComputerPrestagesAPIV2ComputerPrestagesIdGetRequest {
	return ComputerPrestagesAPIV2ComputerPrestagesIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetComputerPrestageV2
// Deprecated
func (a *ComputerPrestagesAPIService) V2ComputerPrestagesIdGetExecute(r ComputerPrestagesAPIV2ComputerPrestagesIdGetRequest) (*GetComputerPrestageV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetComputerPrestageV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComputerPrestagesAPIService.V2ComputerPrestagesIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/computer-prestages/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ComputerPrestagesAPIV2ComputerPrestagesIdPutRequest struct {
	ctx context.Context
	ApiService ComputerPrestagesAPI
	id string
	putComputerPrestageV2 *PutComputerPrestageV2
}

// Computer Prestage to update
func (r ComputerPrestagesAPIV2ComputerPrestagesIdPutRequest) PutComputerPrestageV2(putComputerPrestageV2 PutComputerPrestageV2) ComputerPrestagesAPIV2ComputerPrestagesIdPutRequest {
	r.putComputerPrestageV2 = &putComputerPrestageV2
	return r
}

func (r ComputerPrestagesAPIV2ComputerPrestagesIdPutRequest) Execute() (*GetComputerPrestageV2, *http.Response, error) {
	return r.ApiService.V2ComputerPrestagesIdPutExecute(r)
}

/*
V2ComputerPrestagesIdPut Update a Computer Prestage 

Updates a Computer Prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Computer Prestage identifier
 @return ComputerPrestagesAPIV2ComputerPrestagesIdPutRequest

Deprecated
*/
func (a *ComputerPrestagesAPIService) V2ComputerPrestagesIdPut(ctx context.Context, id string) ComputerPrestagesAPIV2ComputerPrestagesIdPutRequest {
	return ComputerPrestagesAPIV2ComputerPrestagesIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetComputerPrestageV2
// Deprecated
func (a *ComputerPrestagesAPIService) V2ComputerPrestagesIdPutExecute(r ComputerPrestagesAPIV2ComputerPrestagesIdPutRequest) (*GetComputerPrestageV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetComputerPrestageV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComputerPrestagesAPIService.V2ComputerPrestagesIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/computer-prestages/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.putComputerPrestageV2 == nil {
		return localVarReturnValue, nil, reportError("putComputerPrestageV2 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.putComputerPrestageV2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ComputerPrestagesAPIV2ComputerPrestagesIdScopeDeleteMultiplePostRequest struct {
	ctx context.Context
	ApiService ComputerPrestagesAPI
	id string
	prestageScopeUpdate *PrestageScopeUpdate
}

// Serial Numbers to remove from scope
func (r ComputerPrestagesAPIV2ComputerPrestagesIdScopeDeleteMultiplePostRequest) PrestageScopeUpdate(prestageScopeUpdate PrestageScopeUpdate) ComputerPrestagesAPIV2ComputerPrestagesIdScopeDeleteMultiplePostRequest {
	r.prestageScopeUpdate = &prestageScopeUpdate
	return r
}

func (r ComputerPrestagesAPIV2ComputerPrestagesIdScopeDeleteMultiplePostRequest) Execute() (*PrestageScopeResponseV2, *http.Response, error) {
	return r.ApiService.V2ComputerPrestagesIdScopeDeleteMultiplePostExecute(r)
}

/*
V2ComputerPrestagesIdScopeDeleteMultiplePost Remove device Scope for a specific Computer Prestage 

Remove device scope for a specific computer prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Computer Prestage identifier
 @return ComputerPrestagesAPIV2ComputerPrestagesIdScopeDeleteMultiplePostRequest
*/
func (a *ComputerPrestagesAPIService) V2ComputerPrestagesIdScopeDeleteMultiplePost(ctx context.Context, id string) ComputerPrestagesAPIV2ComputerPrestagesIdScopeDeleteMultiplePostRequest {
	return ComputerPrestagesAPIV2ComputerPrestagesIdScopeDeleteMultiplePostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PrestageScopeResponseV2
func (a *ComputerPrestagesAPIService) V2ComputerPrestagesIdScopeDeleteMultiplePostExecute(r ComputerPrestagesAPIV2ComputerPrestagesIdScopeDeleteMultiplePostRequest) (*PrestageScopeResponseV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrestageScopeResponseV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComputerPrestagesAPIService.V2ComputerPrestagesIdScopeDeleteMultiplePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/computer-prestages/{id}/scope/delete-multiple"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.prestageScopeUpdate == nil {
		return localVarReturnValue, nil, reportError("prestageScopeUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.prestageScopeUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ComputerPrestagesAPIV2ComputerPrestagesIdScopeGetRequest struct {
	ctx context.Context
	ApiService ComputerPrestagesAPI
	id string
}

func (r ComputerPrestagesAPIV2ComputerPrestagesIdScopeGetRequest) Execute() (*PrestageScopeResponseV2, *http.Response, error) {
	return r.ApiService.V2ComputerPrestagesIdScopeGetExecute(r)
}

/*
V2ComputerPrestagesIdScopeGet Get device Scope for a specific Computer Prestage 

Get device scope for a specific computer prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Computer Prestage identifier
 @return ComputerPrestagesAPIV2ComputerPrestagesIdScopeGetRequest
*/
func (a *ComputerPrestagesAPIService) V2ComputerPrestagesIdScopeGet(ctx context.Context, id string) ComputerPrestagesAPIV2ComputerPrestagesIdScopeGetRequest {
	return ComputerPrestagesAPIV2ComputerPrestagesIdScopeGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PrestageScopeResponseV2
func (a *ComputerPrestagesAPIService) V2ComputerPrestagesIdScopeGetExecute(r ComputerPrestagesAPIV2ComputerPrestagesIdScopeGetRequest) (*PrestageScopeResponseV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrestageScopeResponseV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComputerPrestagesAPIService.V2ComputerPrestagesIdScopeGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/computer-prestages/{id}/scope"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ComputerPrestagesAPIV2ComputerPrestagesIdScopePostRequest struct {
	ctx context.Context
	ApiService ComputerPrestagesAPI
	id string
	prestageScopeUpdate *PrestageScopeUpdate
}

// Serial Numbers to scope
func (r ComputerPrestagesAPIV2ComputerPrestagesIdScopePostRequest) PrestageScopeUpdate(prestageScopeUpdate PrestageScopeUpdate) ComputerPrestagesAPIV2ComputerPrestagesIdScopePostRequest {
	r.prestageScopeUpdate = &prestageScopeUpdate
	return r
}

func (r ComputerPrestagesAPIV2ComputerPrestagesIdScopePostRequest) Execute() (*PrestageScopeResponseV2, *http.Response, error) {
	return r.ApiService.V2ComputerPrestagesIdScopePostExecute(r)
}

/*
V2ComputerPrestagesIdScopePost Add device Scope for a specific Computer Prestage 

Add device scope for a specific computer prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Computer Prestage identifier
 @return ComputerPrestagesAPIV2ComputerPrestagesIdScopePostRequest
*/
func (a *ComputerPrestagesAPIService) V2ComputerPrestagesIdScopePost(ctx context.Context, id string) ComputerPrestagesAPIV2ComputerPrestagesIdScopePostRequest {
	return ComputerPrestagesAPIV2ComputerPrestagesIdScopePostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PrestageScopeResponseV2
func (a *ComputerPrestagesAPIService) V2ComputerPrestagesIdScopePostExecute(r ComputerPrestagesAPIV2ComputerPrestagesIdScopePostRequest) (*PrestageScopeResponseV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrestageScopeResponseV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComputerPrestagesAPIService.V2ComputerPrestagesIdScopePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/computer-prestages/{id}/scope"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.prestageScopeUpdate == nil {
		return localVarReturnValue, nil, reportError("prestageScopeUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.prestageScopeUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ComputerPrestagesAPIV2ComputerPrestagesIdScopePutRequest struct {
	ctx context.Context
	ApiService ComputerPrestagesAPI
	id string
	prestageScopeUpdate *PrestageScopeUpdate
}

// Serial Numbers to scope
func (r ComputerPrestagesAPIV2ComputerPrestagesIdScopePutRequest) PrestageScopeUpdate(prestageScopeUpdate PrestageScopeUpdate) ComputerPrestagesAPIV2ComputerPrestagesIdScopePutRequest {
	r.prestageScopeUpdate = &prestageScopeUpdate
	return r
}

func (r ComputerPrestagesAPIV2ComputerPrestagesIdScopePutRequest) Execute() (*PrestageScopeResponseV2, *http.Response, error) {
	return r.ApiService.V2ComputerPrestagesIdScopePutExecute(r)
}

/*
V2ComputerPrestagesIdScopePut Replace device Scope for a specific Computer Prestage 

Replace device scope for a specific computer prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Computer Prestage identifier
 @return ComputerPrestagesAPIV2ComputerPrestagesIdScopePutRequest
*/
func (a *ComputerPrestagesAPIService) V2ComputerPrestagesIdScopePut(ctx context.Context, id string) ComputerPrestagesAPIV2ComputerPrestagesIdScopePutRequest {
	return ComputerPrestagesAPIV2ComputerPrestagesIdScopePutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PrestageScopeResponseV2
func (a *ComputerPrestagesAPIService) V2ComputerPrestagesIdScopePutExecute(r ComputerPrestagesAPIV2ComputerPrestagesIdScopePutRequest) (*PrestageScopeResponseV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrestageScopeResponseV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComputerPrestagesAPIService.V2ComputerPrestagesIdScopePut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/computer-prestages/{id}/scope"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.prestageScopeUpdate == nil {
		return localVarReturnValue, nil, reportError("prestageScopeUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.prestageScopeUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ComputerPrestagesAPIV2ComputerPrestagesPostRequest struct {
	ctx context.Context
	ApiService ComputerPrestagesAPI
	postComputerPrestageV2 *PostComputerPrestageV2
}

// Computer Prestage to create. ids defined in this body will be ignored
func (r ComputerPrestagesAPIV2ComputerPrestagesPostRequest) PostComputerPrestageV2(postComputerPrestageV2 PostComputerPrestageV2) ComputerPrestagesAPIV2ComputerPrestagesPostRequest {
	r.postComputerPrestageV2 = &postComputerPrestageV2
	return r
}

func (r ComputerPrestagesAPIV2ComputerPrestagesPostRequest) Execute() (*HrefResponse, *http.Response, error) {
	return r.ApiService.V2ComputerPrestagesPostExecute(r)
}

/*
V2ComputerPrestagesPost Create a Computer Prestage 

Create a computer prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ComputerPrestagesAPIV2ComputerPrestagesPostRequest

Deprecated
*/
func (a *ComputerPrestagesAPIService) V2ComputerPrestagesPost(ctx context.Context) ComputerPrestagesAPIV2ComputerPrestagesPostRequest {
	return ComputerPrestagesAPIV2ComputerPrestagesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HrefResponse
// Deprecated
func (a *ComputerPrestagesAPIService) V2ComputerPrestagesPostExecute(r ComputerPrestagesAPIV2ComputerPrestagesPostRequest) (*HrefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HrefResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComputerPrestagesAPIService.V2ComputerPrestagesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/computer-prestages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.postComputerPrestageV2 == nil {
		return localVarReturnValue, nil, reportError("postComputerPrestageV2 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.postComputerPrestageV2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ComputerPrestagesAPIV2ComputerPrestagesScopeGetRequest struct {
	ctx context.Context
	ApiService ComputerPrestagesAPI
}

func (r ComputerPrestagesAPIV2ComputerPrestagesScopeGetRequest) Execute() (*PrestageScopeV2, *http.Response, error) {
	return r.ApiService.V2ComputerPrestagesScopeGetExecute(r)
}

/*
V2ComputerPrestagesScopeGet Get all device Scope for all Computer Prestages 

Get all device scope for all computer prestages

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ComputerPrestagesAPIV2ComputerPrestagesScopeGetRequest
*/
func (a *ComputerPrestagesAPIService) V2ComputerPrestagesScopeGet(ctx context.Context) ComputerPrestagesAPIV2ComputerPrestagesScopeGetRequest {
	return ComputerPrestagesAPIV2ComputerPrestagesScopeGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PrestageScopeV2
func (a *ComputerPrestagesAPIService) V2ComputerPrestagesScopeGetExecute(r ComputerPrestagesAPIV2ComputerPrestagesScopeGetRequest) (*PrestageScopeV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrestageScopeV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComputerPrestagesAPIService.V2ComputerPrestagesScopeGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/computer-prestages/scope"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ComputerPrestagesAPIV3ComputerPrestagesGetRequest struct {
	ctx context.Context
	ApiService ComputerPrestagesAPI
	page *int32
	pageSize *int32
	sort *[]string
}

func (r ComputerPrestagesAPIV3ComputerPrestagesGetRequest) Page(page int32) ComputerPrestagesAPIV3ComputerPrestagesGetRequest {
	r.page = &page
	return r
}

func (r ComputerPrestagesAPIV3ComputerPrestagesGetRequest) PageSize(pageSize int32) ComputerPrestagesAPIV3ComputerPrestagesGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc 
func (r ComputerPrestagesAPIV3ComputerPrestagesGetRequest) Sort(sort []string) ComputerPrestagesAPIV3ComputerPrestagesGetRequest {
	r.sort = &sort
	return r
}

func (r ComputerPrestagesAPIV3ComputerPrestagesGetRequest) Execute() (*ComputerPrestageSearchResultsV3, *http.Response, error) {
	return r.ApiService.V3ComputerPrestagesGetExecute(r)
}

/*
V3ComputerPrestagesGet Get sorted and paged Computer Prestages 

Gets sorted and paged computer prestages

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ComputerPrestagesAPIV3ComputerPrestagesGetRequest
*/
func (a *ComputerPrestagesAPIService) V3ComputerPrestagesGet(ctx context.Context) ComputerPrestagesAPIV3ComputerPrestagesGetRequest {
	return ComputerPrestagesAPIV3ComputerPrestagesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ComputerPrestageSearchResultsV3
func (a *ComputerPrestagesAPIService) V3ComputerPrestagesGetExecute(r ComputerPrestagesAPIV3ComputerPrestagesGetRequest) (*ComputerPrestageSearchResultsV3, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComputerPrestageSearchResultsV3
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComputerPrestagesAPIService.V3ComputerPrestagesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/computer-prestages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		var defaultValue []string = ["id:desc"]
		r.sort = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ComputerPrestagesAPIV3ComputerPrestagesIdDeleteRequest struct {
	ctx context.Context
	ApiService ComputerPrestagesAPI
	id string
}

func (r ComputerPrestagesAPIV3ComputerPrestagesIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V3ComputerPrestagesIdDeleteExecute(r)
}

/*
V3ComputerPrestagesIdDelete Delete a Computer Prestage with the supplied id 

Deletes a Computer Prestage with the supplied id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Computer Prestage identifier
 @return ComputerPrestagesAPIV3ComputerPrestagesIdDeleteRequest
*/
func (a *ComputerPrestagesAPIService) V3ComputerPrestagesIdDelete(ctx context.Context, id string) ComputerPrestagesAPIV3ComputerPrestagesIdDeleteRequest {
	return ComputerPrestagesAPIV3ComputerPrestagesIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ComputerPrestagesAPIService) V3ComputerPrestagesIdDeleteExecute(r ComputerPrestagesAPIV3ComputerPrestagesIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComputerPrestagesAPIService.V3ComputerPrestagesIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/computer-prestages/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ComputerPrestagesAPIV3ComputerPrestagesIdGetRequest struct {
	ctx context.Context
	ApiService ComputerPrestagesAPI
	id string
}

func (r ComputerPrestagesAPIV3ComputerPrestagesIdGetRequest) Execute() (*GetComputerPrestageV3, *http.Response, error) {
	return r.ApiService.V3ComputerPrestagesIdGetExecute(r)
}

/*
V3ComputerPrestagesIdGet Retrieve a Computer Prestage with the supplied id 

Retrieves a Computer Prestage with the supplied id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Computer Prestage identifier
 @return ComputerPrestagesAPIV3ComputerPrestagesIdGetRequest
*/
func (a *ComputerPrestagesAPIService) V3ComputerPrestagesIdGet(ctx context.Context, id string) ComputerPrestagesAPIV3ComputerPrestagesIdGetRequest {
	return ComputerPrestagesAPIV3ComputerPrestagesIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetComputerPrestageV3
func (a *ComputerPrestagesAPIService) V3ComputerPrestagesIdGetExecute(r ComputerPrestagesAPIV3ComputerPrestagesIdGetRequest) (*GetComputerPrestageV3, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetComputerPrestageV3
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComputerPrestagesAPIService.V3ComputerPrestagesIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/computer-prestages/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ComputerPrestagesAPIV3ComputerPrestagesIdPutRequest struct {
	ctx context.Context
	ApiService ComputerPrestagesAPI
	id string
	putComputerPrestageV3 *PutComputerPrestageV3
}

// Computer Prestage to update
func (r ComputerPrestagesAPIV3ComputerPrestagesIdPutRequest) PutComputerPrestageV3(putComputerPrestageV3 PutComputerPrestageV3) ComputerPrestagesAPIV3ComputerPrestagesIdPutRequest {
	r.putComputerPrestageV3 = &putComputerPrestageV3
	return r
}

func (r ComputerPrestagesAPIV3ComputerPrestagesIdPutRequest) Execute() (*GetComputerPrestageV3, *http.Response, error) {
	return r.ApiService.V3ComputerPrestagesIdPutExecute(r)
}

/*
V3ComputerPrestagesIdPut Update a Computer Prestage 

Updates a Computer Prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Computer Prestage identifier
 @return ComputerPrestagesAPIV3ComputerPrestagesIdPutRequest
*/
func (a *ComputerPrestagesAPIService) V3ComputerPrestagesIdPut(ctx context.Context, id string) ComputerPrestagesAPIV3ComputerPrestagesIdPutRequest {
	return ComputerPrestagesAPIV3ComputerPrestagesIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetComputerPrestageV3
func (a *ComputerPrestagesAPIService) V3ComputerPrestagesIdPutExecute(r ComputerPrestagesAPIV3ComputerPrestagesIdPutRequest) (*GetComputerPrestageV3, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetComputerPrestageV3
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComputerPrestagesAPIService.V3ComputerPrestagesIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/computer-prestages/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.putComputerPrestageV3 == nil {
		return localVarReturnValue, nil, reportError("putComputerPrestageV3 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.putComputerPrestageV3
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ComputerPrestagesAPIV3ComputerPrestagesPostRequest struct {
	ctx context.Context
	ApiService ComputerPrestagesAPI
	postComputerPrestageV3 *PostComputerPrestageV3
}

// Computer Prestage to create. ids defined in this body will be ignored
func (r ComputerPrestagesAPIV3ComputerPrestagesPostRequest) PostComputerPrestageV3(postComputerPrestageV3 PostComputerPrestageV3) ComputerPrestagesAPIV3ComputerPrestagesPostRequest {
	r.postComputerPrestageV3 = &postComputerPrestageV3
	return r
}

func (r ComputerPrestagesAPIV3ComputerPrestagesPostRequest) Execute() (*HrefResponse, *http.Response, error) {
	return r.ApiService.V3ComputerPrestagesPostExecute(r)
}

/*
V3ComputerPrestagesPost Create a Computer Prestage 

Create a computer prestage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ComputerPrestagesAPIV3ComputerPrestagesPostRequest
*/
func (a *ComputerPrestagesAPIService) V3ComputerPrestagesPost(ctx context.Context) ComputerPrestagesAPIV3ComputerPrestagesPostRequest {
	return ComputerPrestagesAPIV3ComputerPrestagesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HrefResponse
func (a *ComputerPrestagesAPIService) V3ComputerPrestagesPostExecute(r ComputerPrestagesAPIV3ComputerPrestagesPostRequest) (*HrefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HrefResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComputerPrestagesAPIService.V3ComputerPrestagesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/computer-prestages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.postComputerPrestageV3 == nil {
		return localVarReturnValue, nil, reportError("postComputerPrestageV3 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.postComputerPrestageV3
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
