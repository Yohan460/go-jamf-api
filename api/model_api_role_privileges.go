/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiRolePrivileges type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiRolePrivileges{}

// ApiRolePrivileges struct for ApiRolePrivileges
type ApiRolePrivileges struct {
	Privileges []string `json:"privileges"`
}

type _ApiRolePrivileges ApiRolePrivileges

// NewApiRolePrivileges instantiates a new ApiRolePrivileges object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiRolePrivileges(privileges []string) *ApiRolePrivileges {
	this := ApiRolePrivileges{}
	this.Privileges = privileges
	return &this
}

// NewApiRolePrivilegesWithDefaults instantiates a new ApiRolePrivileges object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiRolePrivilegesWithDefaults() *ApiRolePrivileges {
	this := ApiRolePrivileges{}
	return &this
}

// GetPrivileges returns the Privileges field value
func (o *ApiRolePrivileges) GetPrivileges() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Privileges
}

// GetPrivilegesOk returns a tuple with the Privileges field value
// and a boolean to check if the value has been set.
func (o *ApiRolePrivileges) GetPrivilegesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Privileges, true
}

// SetPrivileges sets field value
func (o *ApiRolePrivileges) SetPrivileges(v []string) {
	o.Privileges = v
}

func (o ApiRolePrivileges) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiRolePrivileges) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["privileges"] = o.Privileges
	return toSerialize, nil
}

func (o *ApiRolePrivileges) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"privileges",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiRolePrivileges := _ApiRolePrivileges{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiRolePrivileges)

	if err != nil {
		return err
	}

	*o = ApiRolePrivileges(varApiRolePrivileges)

	return err
}

type NullableApiRolePrivileges struct {
	value *ApiRolePrivileges
	isSet bool
}

func (v NullableApiRolePrivileges) Get() *ApiRolePrivileges {
	return v.value
}

func (v *NullableApiRolePrivileges) Set(val *ApiRolePrivileges) {
	v.value = val
	v.isSet = true
}

func (v NullableApiRolePrivileges) IsSet() bool {
	return v.isSet
}

func (v *NullableApiRolePrivileges) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiRolePrivileges(val *ApiRolePrivileges) *NullableApiRolePrivileges {
	return &NullableApiRolePrivileges{value: val, isSet: true}
}

func (v NullableApiRolePrivileges) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiRolePrivileges) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


