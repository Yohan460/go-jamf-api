/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ApiRolePrivileges type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiRolePrivileges{}

// ApiRolePrivileges struct for ApiRolePrivileges
type ApiRolePrivileges struct {
	Privileges []string `json:"privileges"`
}

// NewApiRolePrivileges instantiates a new ApiRolePrivileges object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiRolePrivileges(privileges []string) *ApiRolePrivileges {
	this := ApiRolePrivileges{}
	this.Privileges = privileges
	return &this
}

// NewApiRolePrivilegesWithDefaults instantiates a new ApiRolePrivileges object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiRolePrivilegesWithDefaults() *ApiRolePrivileges {
	this := ApiRolePrivileges{}
	return &this
}

// GetPrivileges returns the Privileges field value
func (o *ApiRolePrivileges) GetPrivileges() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Privileges
}

// GetPrivilegesOk returns a tuple with the Privileges field value
// and a boolean to check if the value has been set.
func (o *ApiRolePrivileges) GetPrivilegesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Privileges, true
}

// SetPrivileges sets field value
func (o *ApiRolePrivileges) SetPrivileges(v []string) {
	o.Privileges = v
}

func (o ApiRolePrivileges) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiRolePrivileges) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["privileges"] = o.Privileges
	return toSerialize, nil
}

type NullableApiRolePrivileges struct {
	value *ApiRolePrivileges
	isSet bool
}

func (v NullableApiRolePrivileges) Get() *ApiRolePrivileges {
	return v.value
}

func (v *NullableApiRolePrivileges) Set(val *ApiRolePrivileges) {
	v.value = val
	v.isSet = true
}

func (v NullableApiRolePrivileges) IsSet() bool {
	return v.isSet
}

func (v *NullableApiRolePrivileges) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiRolePrivileges(val *ApiRolePrivileges) *NullableApiRolePrivileges {
	return &NullableApiRolePrivileges{value: val, isSet: true}
}

func (v NullableApiRolePrivileges) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiRolePrivileges) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


