/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// CountryCodes struct for CountryCodes
type CountryCodes struct {
	CountryCodes []Country `json:"countryCodes,omitempty"`
}

// NewCountryCodes instantiates a new CountryCodes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountryCodes() *CountryCodes {
	this := CountryCodes{}
	return &this
}

// NewCountryCodesWithDefaults instantiates a new CountryCodes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountryCodesWithDefaults() *CountryCodes {
	this := CountryCodes{}
	return &this
}

// GetCountryCodes returns the CountryCodes field value if set, zero value otherwise.
func (o *CountryCodes) GetCountryCodes() []Country {
	if o == nil || o.CountryCodes == nil {
		var ret []Country
		return ret
	}
	return o.CountryCodes
}

// GetCountryCodesOk returns a tuple with the CountryCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryCodes) GetCountryCodesOk() ([]Country, bool) {
	if o == nil || o.CountryCodes == nil {
		return nil, false
	}
	return o.CountryCodes, true
}

// HasCountryCodes returns a boolean if a field has been set.
func (o *CountryCodes) HasCountryCodes() bool {
	if o != nil && o.CountryCodes != nil {
		return true
	}

	return false
}

// SetCountryCodes gets a reference to the given []Country and assigns it to the CountryCodes field.
func (o *CountryCodes) SetCountryCodes(v []Country) {
	o.CountryCodes = v
}

func (o CountryCodes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CountryCodes != nil {
		toSerialize["countryCodes"] = o.CountryCodes
	}
	return json.Marshal(toSerialize)
}

type NullableCountryCodes struct {
	value *CountryCodes
	isSet bool
}

func (v NullableCountryCodes) Get() *CountryCodes {
	return v.value
}

func (v *NullableCountryCodes) Set(val *CountryCodes) {
	v.value = val
	v.isSet = true
}

func (v NullableCountryCodes) IsSet() bool {
	return v.isSet
}

func (v *NullableCountryCodes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountryCodes(val *CountryCodes) *NullableCountryCodes {
	return &NullableCountryCodes{value: val, isSet: true}
}

func (v NullableCountryCodes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountryCodes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


