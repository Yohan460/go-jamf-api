/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// SearchActivePatchHistoryParams struct for SearchActivePatchHistoryParams
type SearchActivePatchHistoryParams struct {
	PageNumber *int32 `json:"pageNumber,omitempty"`
	PageSize *int32 `json:"pageSize,omitempty"`
	IsLoadToEnd *bool `json:"isLoadToEnd,omitempty"`
	SoftwareTitleID *int32 `json:"softwareTitleID,omitempty"`
	SoftwareTitleConfigurationID *int32 `json:"softwareTitleConfigurationID,omitempty"`
	OrderBy []OrderBy `json:"orderBy,omitempty"`
	Filter []Filter `json:"filter,omitempty"`
}

// NewSearchActivePatchHistoryParams instantiates a new SearchActivePatchHistoryParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchActivePatchHistoryParams() *SearchActivePatchHistoryParams {
	this := SearchActivePatchHistoryParams{}
	return &this
}

// NewSearchActivePatchHistoryParamsWithDefaults instantiates a new SearchActivePatchHistoryParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchActivePatchHistoryParamsWithDefaults() *SearchActivePatchHistoryParams {
	this := SearchActivePatchHistoryParams{}
	return &this
}

// GetPageNumber returns the PageNumber field value if set, zero value otherwise.
func (o *SearchActivePatchHistoryParams) GetPageNumber() int32 {
	if o == nil || o.PageNumber == nil {
		var ret int32
		return ret
	}
	return *o.PageNumber
}

// GetPageNumberOk returns a tuple with the PageNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchActivePatchHistoryParams) GetPageNumberOk() (*int32, bool) {
	if o == nil || o.PageNumber == nil {
		return nil, false
	}
	return o.PageNumber, true
}

// HasPageNumber returns a boolean if a field has been set.
func (o *SearchActivePatchHistoryParams) HasPageNumber() bool {
	if o != nil && o.PageNumber != nil {
		return true
	}

	return false
}

// SetPageNumber gets a reference to the given int32 and assigns it to the PageNumber field.
func (o *SearchActivePatchHistoryParams) SetPageNumber(v int32) {
	o.PageNumber = &v
}

// GetPageSize returns the PageSize field value if set, zero value otherwise.
func (o *SearchActivePatchHistoryParams) GetPageSize() int32 {
	if o == nil || o.PageSize == nil {
		var ret int32
		return ret
	}
	return *o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchActivePatchHistoryParams) GetPageSizeOk() (*int32, bool) {
	if o == nil || o.PageSize == nil {
		return nil, false
	}
	return o.PageSize, true
}

// HasPageSize returns a boolean if a field has been set.
func (o *SearchActivePatchHistoryParams) HasPageSize() bool {
	if o != nil && o.PageSize != nil {
		return true
	}

	return false
}

// SetPageSize gets a reference to the given int32 and assigns it to the PageSize field.
func (o *SearchActivePatchHistoryParams) SetPageSize(v int32) {
	o.PageSize = &v
}

// GetIsLoadToEnd returns the IsLoadToEnd field value if set, zero value otherwise.
func (o *SearchActivePatchHistoryParams) GetIsLoadToEnd() bool {
	if o == nil || o.IsLoadToEnd == nil {
		var ret bool
		return ret
	}
	return *o.IsLoadToEnd
}

// GetIsLoadToEndOk returns a tuple with the IsLoadToEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchActivePatchHistoryParams) GetIsLoadToEndOk() (*bool, bool) {
	if o == nil || o.IsLoadToEnd == nil {
		return nil, false
	}
	return o.IsLoadToEnd, true
}

// HasIsLoadToEnd returns a boolean if a field has been set.
func (o *SearchActivePatchHistoryParams) HasIsLoadToEnd() bool {
	if o != nil && o.IsLoadToEnd != nil {
		return true
	}

	return false
}

// SetIsLoadToEnd gets a reference to the given bool and assigns it to the IsLoadToEnd field.
func (o *SearchActivePatchHistoryParams) SetIsLoadToEnd(v bool) {
	o.IsLoadToEnd = &v
}

// GetSoftwareTitleID returns the SoftwareTitleID field value if set, zero value otherwise.
func (o *SearchActivePatchHistoryParams) GetSoftwareTitleID() int32 {
	if o == nil || o.SoftwareTitleID == nil {
		var ret int32
		return ret
	}
	return *o.SoftwareTitleID
}

// GetSoftwareTitleIDOk returns a tuple with the SoftwareTitleID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchActivePatchHistoryParams) GetSoftwareTitleIDOk() (*int32, bool) {
	if o == nil || o.SoftwareTitleID == nil {
		return nil, false
	}
	return o.SoftwareTitleID, true
}

// HasSoftwareTitleID returns a boolean if a field has been set.
func (o *SearchActivePatchHistoryParams) HasSoftwareTitleID() bool {
	if o != nil && o.SoftwareTitleID != nil {
		return true
	}

	return false
}

// SetSoftwareTitleID gets a reference to the given int32 and assigns it to the SoftwareTitleID field.
func (o *SearchActivePatchHistoryParams) SetSoftwareTitleID(v int32) {
	o.SoftwareTitleID = &v
}

// GetSoftwareTitleConfigurationID returns the SoftwareTitleConfigurationID field value if set, zero value otherwise.
func (o *SearchActivePatchHistoryParams) GetSoftwareTitleConfigurationID() int32 {
	if o == nil || o.SoftwareTitleConfigurationID == nil {
		var ret int32
		return ret
	}
	return *o.SoftwareTitleConfigurationID
}

// GetSoftwareTitleConfigurationIDOk returns a tuple with the SoftwareTitleConfigurationID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchActivePatchHistoryParams) GetSoftwareTitleConfigurationIDOk() (*int32, bool) {
	if o == nil || o.SoftwareTitleConfigurationID == nil {
		return nil, false
	}
	return o.SoftwareTitleConfigurationID, true
}

// HasSoftwareTitleConfigurationID returns a boolean if a field has been set.
func (o *SearchActivePatchHistoryParams) HasSoftwareTitleConfigurationID() bool {
	if o != nil && o.SoftwareTitleConfigurationID != nil {
		return true
	}

	return false
}

// SetSoftwareTitleConfigurationID gets a reference to the given int32 and assigns it to the SoftwareTitleConfigurationID field.
func (o *SearchActivePatchHistoryParams) SetSoftwareTitleConfigurationID(v int32) {
	o.SoftwareTitleConfigurationID = &v
}

// GetOrderBy returns the OrderBy field value if set, zero value otherwise.
func (o *SearchActivePatchHistoryParams) GetOrderBy() []OrderBy {
	if o == nil || o.OrderBy == nil {
		var ret []OrderBy
		return ret
	}
	return o.OrderBy
}

// GetOrderByOk returns a tuple with the OrderBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchActivePatchHistoryParams) GetOrderByOk() ([]OrderBy, bool) {
	if o == nil || o.OrderBy == nil {
		return nil, false
	}
	return o.OrderBy, true
}

// HasOrderBy returns a boolean if a field has been set.
func (o *SearchActivePatchHistoryParams) HasOrderBy() bool {
	if o != nil && o.OrderBy != nil {
		return true
	}

	return false
}

// SetOrderBy gets a reference to the given []OrderBy and assigns it to the OrderBy field.
func (o *SearchActivePatchHistoryParams) SetOrderBy(v []OrderBy) {
	o.OrderBy = v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *SearchActivePatchHistoryParams) GetFilter() []Filter {
	if o == nil || o.Filter == nil {
		var ret []Filter
		return ret
	}
	return o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchActivePatchHistoryParams) GetFilterOk() ([]Filter, bool) {
	if o == nil || o.Filter == nil {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *SearchActivePatchHistoryParams) HasFilter() bool {
	if o != nil && o.Filter != nil {
		return true
	}

	return false
}

// SetFilter gets a reference to the given []Filter and assigns it to the Filter field.
func (o *SearchActivePatchHistoryParams) SetFilter(v []Filter) {
	o.Filter = v
}

func (o SearchActivePatchHistoryParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PageNumber != nil {
		toSerialize["pageNumber"] = o.PageNumber
	}
	if o.PageSize != nil {
		toSerialize["pageSize"] = o.PageSize
	}
	if o.IsLoadToEnd != nil {
		toSerialize["isLoadToEnd"] = o.IsLoadToEnd
	}
	if o.SoftwareTitleID != nil {
		toSerialize["softwareTitleID"] = o.SoftwareTitleID
	}
	if o.SoftwareTitleConfigurationID != nil {
		toSerialize["softwareTitleConfigurationID"] = o.SoftwareTitleConfigurationID
	}
	if o.OrderBy != nil {
		toSerialize["orderBy"] = o.OrderBy
	}
	if o.Filter != nil {
		toSerialize["filter"] = o.Filter
	}
	return json.Marshal(toSerialize)
}

type NullableSearchActivePatchHistoryParams struct {
	value *SearchActivePatchHistoryParams
	isSet bool
}

func (v NullableSearchActivePatchHistoryParams) Get() *SearchActivePatchHistoryParams {
	return v.value
}

func (v *NullableSearchActivePatchHistoryParams) Set(val *SearchActivePatchHistoryParams) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchActivePatchHistoryParams) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchActivePatchHistoryParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchActivePatchHistoryParams(val *SearchActivePatchHistoryParams) *NullableSearchActivePatchHistoryParams {
	return &NullableSearchActivePatchHistoryParams{value: val, isSet: true}
}

func (v NullableSearchActivePatchHistoryParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchActivePatchHistoryParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


