/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// checks if the LapsAccountManagementHistory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LapsAccountManagementHistory{}

// LapsAccountManagementHistory struct for LapsAccountManagementHistory
type LapsAccountManagementHistory struct {
	Username *string `json:"username,omitempty"`
	EventType *string `json:"eventType,omitempty"`
	EventTime NullableTime `json:"eventTime,omitempty"`
	ViewedBy NullableString `json:"viewedBy,omitempty"`
	UserSource *string `json:"userSource,omitempty"`
}

// NewLapsAccountManagementHistory instantiates a new LapsAccountManagementHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLapsAccountManagementHistory() *LapsAccountManagementHistory {
	this := LapsAccountManagementHistory{}
	return &this
}

// NewLapsAccountManagementHistoryWithDefaults instantiates a new LapsAccountManagementHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLapsAccountManagementHistoryWithDefaults() *LapsAccountManagementHistory {
	this := LapsAccountManagementHistory{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *LapsAccountManagementHistory) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LapsAccountManagementHistory) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *LapsAccountManagementHistory) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *LapsAccountManagementHistory) SetUsername(v string) {
	o.Username = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *LapsAccountManagementHistory) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LapsAccountManagementHistory) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *LapsAccountManagementHistory) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *LapsAccountManagementHistory) SetEventType(v string) {
	o.EventType = &v
}

// GetEventTime returns the EventTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LapsAccountManagementHistory) GetEventTime() time.Time {
	if o == nil || IsNil(o.EventTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.EventTime.Get()
}

// GetEventTimeOk returns a tuple with the EventTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LapsAccountManagementHistory) GetEventTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventTime.Get(), o.EventTime.IsSet()
}

// HasEventTime returns a boolean if a field has been set.
func (o *LapsAccountManagementHistory) HasEventTime() bool {
	if o != nil && o.EventTime.IsSet() {
		return true
	}

	return false
}

// SetEventTime gets a reference to the given NullableTime and assigns it to the EventTime field.
func (o *LapsAccountManagementHistory) SetEventTime(v time.Time) {
	o.EventTime.Set(&v)
}
// SetEventTimeNil sets the value for EventTime to be an explicit nil
func (o *LapsAccountManagementHistory) SetEventTimeNil() {
	o.EventTime.Set(nil)
}

// UnsetEventTime ensures that no value is present for EventTime, not even an explicit nil
func (o *LapsAccountManagementHistory) UnsetEventTime() {
	o.EventTime.Unset()
}

// GetViewedBy returns the ViewedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LapsAccountManagementHistory) GetViewedBy() string {
	if o == nil || IsNil(o.ViewedBy.Get()) {
		var ret string
		return ret
	}
	return *o.ViewedBy.Get()
}

// GetViewedByOk returns a tuple with the ViewedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LapsAccountManagementHistory) GetViewedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ViewedBy.Get(), o.ViewedBy.IsSet()
}

// HasViewedBy returns a boolean if a field has been set.
func (o *LapsAccountManagementHistory) HasViewedBy() bool {
	if o != nil && o.ViewedBy.IsSet() {
		return true
	}

	return false
}

// SetViewedBy gets a reference to the given NullableString and assigns it to the ViewedBy field.
func (o *LapsAccountManagementHistory) SetViewedBy(v string) {
	o.ViewedBy.Set(&v)
}
// SetViewedByNil sets the value for ViewedBy to be an explicit nil
func (o *LapsAccountManagementHistory) SetViewedByNil() {
	o.ViewedBy.Set(nil)
}

// UnsetViewedBy ensures that no value is present for ViewedBy, not even an explicit nil
func (o *LapsAccountManagementHistory) UnsetViewedBy() {
	o.ViewedBy.Unset()
}

// GetUserSource returns the UserSource field value if set, zero value otherwise.
func (o *LapsAccountManagementHistory) GetUserSource() string {
	if o == nil || IsNil(o.UserSource) {
		var ret string
		return ret
	}
	return *o.UserSource
}

// GetUserSourceOk returns a tuple with the UserSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LapsAccountManagementHistory) GetUserSourceOk() (*string, bool) {
	if o == nil || IsNil(o.UserSource) {
		return nil, false
	}
	return o.UserSource, true
}

// HasUserSource returns a boolean if a field has been set.
func (o *LapsAccountManagementHistory) HasUserSource() bool {
	if o != nil && !IsNil(o.UserSource) {
		return true
	}

	return false
}

// SetUserSource gets a reference to the given string and assigns it to the UserSource field.
func (o *LapsAccountManagementHistory) SetUserSource(v string) {
	o.UserSource = &v
}

func (o LapsAccountManagementHistory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LapsAccountManagementHistory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	if o.EventTime.IsSet() {
		toSerialize["eventTime"] = o.EventTime.Get()
	}
	if o.ViewedBy.IsSet() {
		toSerialize["viewedBy"] = o.ViewedBy.Get()
	}
	if !IsNil(o.UserSource) {
		toSerialize["userSource"] = o.UserSource
	}
	return toSerialize, nil
}

type NullableLapsAccountManagementHistory struct {
	value *LapsAccountManagementHistory
	isSet bool
}

func (v NullableLapsAccountManagementHistory) Get() *LapsAccountManagementHistory {
	return v.value
}

func (v *NullableLapsAccountManagementHistory) Set(val *LapsAccountManagementHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableLapsAccountManagementHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableLapsAccountManagementHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLapsAccountManagementHistory(val *LapsAccountManagementHistory) *NullableLapsAccountManagementHistory {
	return &NullableLapsAccountManagementHistory{value: val, isSet: true}
}

func (v NullableLapsAccountManagementHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLapsAccountManagementHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


