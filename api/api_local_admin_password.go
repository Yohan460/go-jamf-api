/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type LocalAdminPasswordAPI interface {

	/*
	V1LocalAdminPasswordClientManagementIdAccountUsernameAuditGet Get LAPS password viewed history.

	Get the full history of all local admin passwords for a specific username on a target device. History will include password, who viewed the password and when it was viewed. Get audit history by using the client management id and username as the path parameters.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clientManagementId client management id of target device.
	@param username user name to view audit information for
	@return LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdAccountUsernameAuditGetRequest

	Deprecated
	*/
	V1LocalAdminPasswordClientManagementIdAccountUsernameAuditGet(ctx context.Context, clientManagementId string, username string) LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdAccountUsernameAuditGetRequest

	// V1LocalAdminPasswordClientManagementIdAccountUsernameAuditGetExecute executes the request
	//  @return LapsPasswordAuditsResults
	// Deprecated
	V1LocalAdminPasswordClientManagementIdAccountUsernameAuditGetExecute(r LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdAccountUsernameAuditGetRequest) (*LapsPasswordAuditsResults, *http.Response, error)

	/*
	V1LocalAdminPasswordClientManagementIdAccountUsernamePasswordGet Get current LAPS password for specified username on a client.

	Get current LAPS password for specified client by using the client management id and username as the path parameters. Once the password is viewed it will be rotated out with a new password based on the rotation time settings.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clientManagementId client management id of target device.
	@param username user name for the account
	@return LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdAccountUsernamePasswordGetRequest

	Deprecated
	*/
	V1LocalAdminPasswordClientManagementIdAccountUsernamePasswordGet(ctx context.Context, clientManagementId string, username string) LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdAccountUsernamePasswordGetRequest

	// V1LocalAdminPasswordClientManagementIdAccountUsernamePasswordGetExecute executes the request
	//  @return LapsPasswordResponse
	// Deprecated
	V1LocalAdminPasswordClientManagementIdAccountUsernamePasswordGetExecute(r LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdAccountUsernamePasswordGetRequest) (*LapsPasswordResponse, *http.Response, error)

	/*
	V1LocalAdminPasswordClientManagementIdAccountsGet Get the LAPS capable admin accounts for a device.

	Get a full list of admin accounts that are LAPS capable. Capable accounts are returned in the AutoSetupAdminAccounts from QueryResponses.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clientManagementId client management id of target device.
	@return LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdAccountsGetRequest

	Deprecated
	*/
	V1LocalAdminPasswordClientManagementIdAccountsGet(ctx context.Context, clientManagementId string) LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdAccountsGetRequest

	// V1LocalAdminPasswordClientManagementIdAccountsGetExecute executes the request
	//  @return LapsUserResults
	// Deprecated
	V1LocalAdminPasswordClientManagementIdAccountsGetExecute(r LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdAccountsGetRequest) (*LapsUserResults, *http.Response, error)

	/*
	V1LocalAdminPasswordClientManagementIdSetPasswordPut Set the LAPS password for a device.

	Set the LAPS password for a device. This will set the password for all LAPS capable accounts.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clientManagementId client management id of target device.
	@return LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdSetPasswordPutRequest

	Deprecated
	*/
	V1LocalAdminPasswordClientManagementIdSetPasswordPut(ctx context.Context, clientManagementId string) LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdSetPasswordPutRequest

	// V1LocalAdminPasswordClientManagementIdSetPasswordPutExecute executes the request
	//  @return LapsUserPasswordResponse
	// Deprecated
	V1LocalAdminPasswordClientManagementIdSetPasswordPutExecute(r LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdSetPasswordPutRequest) (*LapsUserPasswordResponse, *http.Response, error)

	/*
	V1LocalAdminPasswordSettingsGet Get the current LAPS settings.

	Return information about the current LAPS settings.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LocalAdminPasswordAPIV1LocalAdminPasswordSettingsGetRequest

	Deprecated
	*/
	V1LocalAdminPasswordSettingsGet(ctx context.Context) LocalAdminPasswordAPIV1LocalAdminPasswordSettingsGetRequest

	// V1LocalAdminPasswordSettingsGetExecute executes the request
	//  @return LapsSettingsResponse
	// Deprecated
	V1LocalAdminPasswordSettingsGetExecute(r LocalAdminPasswordAPIV1LocalAdminPasswordSettingsGetRequest) (*LapsSettingsResponse, *http.Response, error)

	/*
	V1LocalAdminPasswordSettingsPut Update settings for LAPS.

	Update settings for LAPS.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LocalAdminPasswordAPIV1LocalAdminPasswordSettingsPutRequest

	Deprecated
	*/
	V1LocalAdminPasswordSettingsPut(ctx context.Context) LocalAdminPasswordAPIV1LocalAdminPasswordSettingsPutRequest

	// V1LocalAdminPasswordSettingsPutExecute executes the request
	//  @return LapsSettingsResponse
	// Deprecated
	V1LocalAdminPasswordSettingsPutExecute(r LocalAdminPasswordAPIV1LocalAdminPasswordSettingsPutRequest) (*LapsSettingsResponse, *http.Response, error)

	/*
	V2LocalAdminPasswordClientManagementIdAccountUsernameAuditGet Get LAPS password viewed history.

	Get the full history of all local admin passwords for a specific username on a target device. History will include password, who viewed the password and when it was viewed. Get audit history by using the client management id and username as the path parameters. If multiple accounts with the same username exist, the MDM source will be selected by default.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clientManagementId client management id of target device.
	@param username user name to view audit information for
	@return LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameAuditGetRequest
	*/
	V2LocalAdminPasswordClientManagementIdAccountUsernameAuditGet(ctx context.Context, clientManagementId string, username string) LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameAuditGetRequest

	// V2LocalAdminPasswordClientManagementIdAccountUsernameAuditGetExecute executes the request
	//  @return LapsPasswordAuditsResultsV2
	V2LocalAdminPasswordClientManagementIdAccountUsernameAuditGetExecute(r LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameAuditGetRequest) (*LapsPasswordAuditsResultsV2, *http.Response, error)

	/*
	V2LocalAdminPasswordClientManagementIdAccountUsernameGuidAuditGet Get LAPS password viewed history.

	Get the full history of all local admin passwords for a specific user guid on a target device. History will include password, who viewed the password and when it was viewed. Get audit history by using the client management id, username, and user guid as the path parameters.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clientManagementId client management id of target device.
	@param username user name to view audit information for
	@param guid user guid to view audit information for
	@return LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameGuidAuditGetRequest
	*/
	V2LocalAdminPasswordClientManagementIdAccountUsernameGuidAuditGet(ctx context.Context, clientManagementId string, username string, guid string) LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameGuidAuditGetRequest

	// V2LocalAdminPasswordClientManagementIdAccountUsernameGuidAuditGetExecute executes the request
	//  @return LapsPasswordAuditsResultsV2
	V2LocalAdminPasswordClientManagementIdAccountUsernameGuidAuditGetExecute(r LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameGuidAuditGetRequest) (*LapsPasswordAuditsResultsV2, *http.Response, error)

	/*
	V2LocalAdminPasswordClientManagementIdAccountUsernameGuidHistoryGet Get LAPS historical records for target device and user guid.

	Get the full history of all for a specific user guid on a target device. History will include date created, date last seen, expiration time, and rotational status. Get audit history by using the client management id, username, and user guid as the path parameters.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clientManagementId client management id of target device.
	@param username user name to view history for
	@param guid user guid to view history for
	@return LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameGuidHistoryGetRequest
	*/
	V2LocalAdminPasswordClientManagementIdAccountUsernameGuidHistoryGet(ctx context.Context, clientManagementId string, username string, guid string) LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameGuidHistoryGetRequest

	// V2LocalAdminPasswordClientManagementIdAccountUsernameGuidHistoryGetExecute executes the request
	//  @return LapsHistoryResponse
	V2LocalAdminPasswordClientManagementIdAccountUsernameGuidHistoryGetExecute(r LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameGuidHistoryGetRequest) (*LapsHistoryResponse, *http.Response, error)

	/*
	V2LocalAdminPasswordClientManagementIdAccountUsernameGuidPasswordGet Get current LAPS password for specified user guid on a client.

	Get current LAPS password for specified client by using the client management id, username, and user guid as the path parameters. Once the password is viewed it will be rotated out with a new password based on the rotation time settings.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clientManagementId client management id of target device.
	@param username user name for the account
	@param guid user guid for the account
	@return LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameGuidPasswordGetRequest
	*/
	V2LocalAdminPasswordClientManagementIdAccountUsernameGuidPasswordGet(ctx context.Context, clientManagementId string, username string, guid string) LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameGuidPasswordGetRequest

	// V2LocalAdminPasswordClientManagementIdAccountUsernameGuidPasswordGetExecute executes the request
	//  @return LapsPasswordResponseV2
	V2LocalAdminPasswordClientManagementIdAccountUsernameGuidPasswordGetExecute(r LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameGuidPasswordGetRequest) (*LapsPasswordResponseV2, *http.Response, error)

	/*
	V2LocalAdminPasswordClientManagementIdAccountUsernameHistoryGet Get LAPS historical records for target device and username.

	Get the full history of all for a specific username on a target device. History will include date created, date last seen, expiration time, and rotational status. Get audit history by using the client management id and username as the path parameters.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clientManagementId client management id of target device.
	@param username user name to view history for
	@return LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameHistoryGetRequest
	*/
	V2LocalAdminPasswordClientManagementIdAccountUsernameHistoryGet(ctx context.Context, clientManagementId string, username string) LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameHistoryGetRequest

	// V2LocalAdminPasswordClientManagementIdAccountUsernameHistoryGetExecute executes the request
	//  @return LapsHistoryResponse
	V2LocalAdminPasswordClientManagementIdAccountUsernameHistoryGetExecute(r LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameHistoryGetRequest) (*LapsHistoryResponse, *http.Response, error)

	/*
	V2LocalAdminPasswordClientManagementIdAccountUsernamePasswordGet Get current LAPS password for specified username on a client.

	Get current LAPS password for specified client by using the client management id and username as the path parameters. Once the password is viewed it will be rotated out with a new password based on the rotation time settings. If multiple accounts with the same username exist, the MDM source will be selected by default.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clientManagementId client management id of target device.
	@param username user name for the account
	@return LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernamePasswordGetRequest
	*/
	V2LocalAdminPasswordClientManagementIdAccountUsernamePasswordGet(ctx context.Context, clientManagementId string, username string) LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernamePasswordGetRequest

	// V2LocalAdminPasswordClientManagementIdAccountUsernamePasswordGetExecute executes the request
	//  @return LapsPasswordResponseV2
	V2LocalAdminPasswordClientManagementIdAccountUsernamePasswordGetExecute(r LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernamePasswordGetRequest) (*LapsPasswordResponseV2, *http.Response, error)

	/*
	V2LocalAdminPasswordClientManagementIdAccountsGet Get the LAPS capable admin accounts for a device.

	Get a full list of admin accounts that are LAPS capable. Capable accounts are returned in the AutoSetupAdminAccounts from QueryResponses.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clientManagementId client management id of target device.
	@return LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountsGetRequest
	*/
	V2LocalAdminPasswordClientManagementIdAccountsGet(ctx context.Context, clientManagementId string) LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountsGetRequest

	// V2LocalAdminPasswordClientManagementIdAccountsGetExecute executes the request
	//  @return LapsUserResultsV2
	V2LocalAdminPasswordClientManagementIdAccountsGetExecute(r LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountsGetRequest) (*LapsUserResultsV2, *http.Response, error)

	/*
	V2LocalAdminPasswordClientManagementIdHistoryGet Get LAPS password viewed history, and rotation history.

	Get the full history of all local admin passwords for all accounts for a specific management ID. History will include password, who viewed the password and when it was viewed. This will include rotation history as well.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clientManagementId client management id of target device.
	@return LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdHistoryGetRequest
	*/
	V2LocalAdminPasswordClientManagementIdHistoryGet(ctx context.Context, clientManagementId string) LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdHistoryGetRequest

	// V2LocalAdminPasswordClientManagementIdHistoryGetExecute executes the request
	//  @return LapsAccountManagementHistoryResponse
	V2LocalAdminPasswordClientManagementIdHistoryGetExecute(r LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdHistoryGetRequest) (*LapsAccountManagementHistoryResponse, *http.Response, error)

	/*
	V2LocalAdminPasswordClientManagementIdSetPasswordPut Set the LAPS password for a device.

	Set the LAPS password for a device. This will set the password for all LAPS capable accounts.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clientManagementId client management id of target device.
	@return LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdSetPasswordPutRequest
	*/
	V2LocalAdminPasswordClientManagementIdSetPasswordPut(ctx context.Context, clientManagementId string) LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdSetPasswordPutRequest

	// V2LocalAdminPasswordClientManagementIdSetPasswordPutExecute executes the request
	//  @return LapsUserPasswordResponseV2
	V2LocalAdminPasswordClientManagementIdSetPasswordPutExecute(r LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdSetPasswordPutRequest) (*LapsUserPasswordResponseV2, *http.Response, error)

	/*
	V2LocalAdminPasswordPendingRotationsGet Get a list of the current devices and usernames with pending LAPS rotations

	Return information about all devices and usernames currently in the state of a pending LAPS rotation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LocalAdminPasswordAPIV2LocalAdminPasswordPendingRotationsGetRequest
	*/
	V2LocalAdminPasswordPendingRotationsGet(ctx context.Context) LocalAdminPasswordAPIV2LocalAdminPasswordPendingRotationsGetRequest

	// V2LocalAdminPasswordPendingRotationsGetExecute executes the request
	//  @return LapsPendingRotationResponse
	V2LocalAdminPasswordPendingRotationsGetExecute(r LocalAdminPasswordAPIV2LocalAdminPasswordPendingRotationsGetRequest) (*LapsPendingRotationResponse, *http.Response, error)

	/*
	V2LocalAdminPasswordSettingsGet Get the current LAPS settings.

	Return information about the current LAPS settings.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LocalAdminPasswordAPIV2LocalAdminPasswordSettingsGetRequest
	*/
	V2LocalAdminPasswordSettingsGet(ctx context.Context) LocalAdminPasswordAPIV2LocalAdminPasswordSettingsGetRequest

	// V2LocalAdminPasswordSettingsGetExecute executes the request
	//  @return LapsSettingsResponseV2
	V2LocalAdminPasswordSettingsGetExecute(r LocalAdminPasswordAPIV2LocalAdminPasswordSettingsGetRequest) (*LapsSettingsResponseV2, *http.Response, error)

	/*
	V2LocalAdminPasswordSettingsPut Update settings for LAPS.

	Update settings for LAPS.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LocalAdminPasswordAPIV2LocalAdminPasswordSettingsPutRequest
	*/
	V2LocalAdminPasswordSettingsPut(ctx context.Context) LocalAdminPasswordAPIV2LocalAdminPasswordSettingsPutRequest

	// V2LocalAdminPasswordSettingsPutExecute executes the request
	//  @return LapsSettingsResponseV2
	V2LocalAdminPasswordSettingsPutExecute(r LocalAdminPasswordAPIV2LocalAdminPasswordSettingsPutRequest) (*LapsSettingsResponseV2, *http.Response, error)
}

// LocalAdminPasswordAPIService LocalAdminPasswordAPI service
type LocalAdminPasswordAPIService service

type LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdAccountUsernameAuditGetRequest struct {
	ctx context.Context
	ApiService LocalAdminPasswordAPI
	clientManagementId string
	username string
}

func (r LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdAccountUsernameAuditGetRequest) Execute() (*LapsPasswordAuditsResults, *http.Response, error) {
	return r.ApiService.V1LocalAdminPasswordClientManagementIdAccountUsernameAuditGetExecute(r)
}

/*
V1LocalAdminPasswordClientManagementIdAccountUsernameAuditGet Get LAPS password viewed history.

Get the full history of all local admin passwords for a specific username on a target device. History will include password, who viewed the password and when it was viewed. Get audit history by using the client management id and username as the path parameters.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param clientManagementId client management id of target device.
 @param username user name to view audit information for
 @return LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdAccountUsernameAuditGetRequest

Deprecated
*/
func (a *LocalAdminPasswordAPIService) V1LocalAdminPasswordClientManagementIdAccountUsernameAuditGet(ctx context.Context, clientManagementId string, username string) LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdAccountUsernameAuditGetRequest {
	return LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdAccountUsernameAuditGetRequest{
		ApiService: a,
		ctx: ctx,
		clientManagementId: clientManagementId,
		username: username,
	}
}

// Execute executes the request
//  @return LapsPasswordAuditsResults
// Deprecated
func (a *LocalAdminPasswordAPIService) V1LocalAdminPasswordClientManagementIdAccountUsernameAuditGetExecute(r LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdAccountUsernameAuditGetRequest) (*LapsPasswordAuditsResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LapsPasswordAuditsResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalAdminPasswordAPIService.V1LocalAdminPasswordClientManagementIdAccountUsernameAuditGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/local-admin-password/{clientManagementId}/account/{username}/audit"
	localVarPath = strings.Replace(localVarPath, "{"+"clientManagementId"+"}", url.PathEscape(parameterValueToString(r.clientManagementId, "clientManagementId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"username"+"}", url.PathEscape(parameterValueToString(r.username, "username")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdAccountUsernamePasswordGetRequest struct {
	ctx context.Context
	ApiService LocalAdminPasswordAPI
	clientManagementId string
	username string
}

func (r LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdAccountUsernamePasswordGetRequest) Execute() (*LapsPasswordResponse, *http.Response, error) {
	return r.ApiService.V1LocalAdminPasswordClientManagementIdAccountUsernamePasswordGetExecute(r)
}

/*
V1LocalAdminPasswordClientManagementIdAccountUsernamePasswordGet Get current LAPS password for specified username on a client.

Get current LAPS password for specified client by using the client management id and username as the path parameters. Once the password is viewed it will be rotated out with a new password based on the rotation time settings.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param clientManagementId client management id of target device.
 @param username user name for the account
 @return LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdAccountUsernamePasswordGetRequest

Deprecated
*/
func (a *LocalAdminPasswordAPIService) V1LocalAdminPasswordClientManagementIdAccountUsernamePasswordGet(ctx context.Context, clientManagementId string, username string) LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdAccountUsernamePasswordGetRequest {
	return LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdAccountUsernamePasswordGetRequest{
		ApiService: a,
		ctx: ctx,
		clientManagementId: clientManagementId,
		username: username,
	}
}

// Execute executes the request
//  @return LapsPasswordResponse
// Deprecated
func (a *LocalAdminPasswordAPIService) V1LocalAdminPasswordClientManagementIdAccountUsernamePasswordGetExecute(r LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdAccountUsernamePasswordGetRequest) (*LapsPasswordResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LapsPasswordResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalAdminPasswordAPIService.V1LocalAdminPasswordClientManagementIdAccountUsernamePasswordGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/local-admin-password/{clientManagementId}/account/{username}/password"
	localVarPath = strings.Replace(localVarPath, "{"+"clientManagementId"+"}", url.PathEscape(parameterValueToString(r.clientManagementId, "clientManagementId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"username"+"}", url.PathEscape(parameterValueToString(r.username, "username")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdAccountsGetRequest struct {
	ctx context.Context
	ApiService LocalAdminPasswordAPI
	clientManagementId string
}

func (r LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdAccountsGetRequest) Execute() (*LapsUserResults, *http.Response, error) {
	return r.ApiService.V1LocalAdminPasswordClientManagementIdAccountsGetExecute(r)
}

/*
V1LocalAdminPasswordClientManagementIdAccountsGet Get the LAPS capable admin accounts for a device.

Get a full list of admin accounts that are LAPS capable. Capable accounts are returned in the AutoSetupAdminAccounts from QueryResponses.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param clientManagementId client management id of target device.
 @return LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdAccountsGetRequest

Deprecated
*/
func (a *LocalAdminPasswordAPIService) V1LocalAdminPasswordClientManagementIdAccountsGet(ctx context.Context, clientManagementId string) LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdAccountsGetRequest {
	return LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdAccountsGetRequest{
		ApiService: a,
		ctx: ctx,
		clientManagementId: clientManagementId,
	}
}

// Execute executes the request
//  @return LapsUserResults
// Deprecated
func (a *LocalAdminPasswordAPIService) V1LocalAdminPasswordClientManagementIdAccountsGetExecute(r LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdAccountsGetRequest) (*LapsUserResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LapsUserResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalAdminPasswordAPIService.V1LocalAdminPasswordClientManagementIdAccountsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/local-admin-password/{clientManagementId}/accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"clientManagementId"+"}", url.PathEscape(parameterValueToString(r.clientManagementId, "clientManagementId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdSetPasswordPutRequest struct {
	ctx context.Context
	ApiService LocalAdminPasswordAPI
	clientManagementId string
	lapsUserPasswordRequest *LapsUserPasswordRequest
}

// LAPS password to set
func (r LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdSetPasswordPutRequest) LapsUserPasswordRequest(lapsUserPasswordRequest LapsUserPasswordRequest) LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdSetPasswordPutRequest {
	r.lapsUserPasswordRequest = &lapsUserPasswordRequest
	return r
}

func (r LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdSetPasswordPutRequest) Execute() (*LapsUserPasswordResponse, *http.Response, error) {
	return r.ApiService.V1LocalAdminPasswordClientManagementIdSetPasswordPutExecute(r)
}

/*
V1LocalAdminPasswordClientManagementIdSetPasswordPut Set the LAPS password for a device.

Set the LAPS password for a device. This will set the password for all LAPS capable accounts.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param clientManagementId client management id of target device.
 @return LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdSetPasswordPutRequest

Deprecated
*/
func (a *LocalAdminPasswordAPIService) V1LocalAdminPasswordClientManagementIdSetPasswordPut(ctx context.Context, clientManagementId string) LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdSetPasswordPutRequest {
	return LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdSetPasswordPutRequest{
		ApiService: a,
		ctx: ctx,
		clientManagementId: clientManagementId,
	}
}

// Execute executes the request
//  @return LapsUserPasswordResponse
// Deprecated
func (a *LocalAdminPasswordAPIService) V1LocalAdminPasswordClientManagementIdSetPasswordPutExecute(r LocalAdminPasswordAPIV1LocalAdminPasswordClientManagementIdSetPasswordPutRequest) (*LapsUserPasswordResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LapsUserPasswordResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalAdminPasswordAPIService.V1LocalAdminPasswordClientManagementIdSetPasswordPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/local-admin-password/{clientManagementId}/set-password"
	localVarPath = strings.Replace(localVarPath, "{"+"clientManagementId"+"}", url.PathEscape(parameterValueToString(r.clientManagementId, "clientManagementId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.lapsUserPasswordRequest == nil {
		return localVarReturnValue, nil, reportError("lapsUserPasswordRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.lapsUserPasswordRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocalAdminPasswordAPIV1LocalAdminPasswordSettingsGetRequest struct {
	ctx context.Context
	ApiService LocalAdminPasswordAPI
}

func (r LocalAdminPasswordAPIV1LocalAdminPasswordSettingsGetRequest) Execute() (*LapsSettingsResponse, *http.Response, error) {
	return r.ApiService.V1LocalAdminPasswordSettingsGetExecute(r)
}

/*
V1LocalAdminPasswordSettingsGet Get the current LAPS settings.

Return information about the current LAPS settings.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LocalAdminPasswordAPIV1LocalAdminPasswordSettingsGetRequest

Deprecated
*/
func (a *LocalAdminPasswordAPIService) V1LocalAdminPasswordSettingsGet(ctx context.Context) LocalAdminPasswordAPIV1LocalAdminPasswordSettingsGetRequest {
	return LocalAdminPasswordAPIV1LocalAdminPasswordSettingsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return LapsSettingsResponse
// Deprecated
func (a *LocalAdminPasswordAPIService) V1LocalAdminPasswordSettingsGetExecute(r LocalAdminPasswordAPIV1LocalAdminPasswordSettingsGetRequest) (*LapsSettingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LapsSettingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalAdminPasswordAPIService.V1LocalAdminPasswordSettingsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/local-admin-password/settings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocalAdminPasswordAPIV1LocalAdminPasswordSettingsPutRequest struct {
	ctx context.Context
	ApiService LocalAdminPasswordAPI
	lapsSettingsRequest *LapsSettingsRequest
}

// LAPS settings to update
func (r LocalAdminPasswordAPIV1LocalAdminPasswordSettingsPutRequest) LapsSettingsRequest(lapsSettingsRequest LapsSettingsRequest) LocalAdminPasswordAPIV1LocalAdminPasswordSettingsPutRequest {
	r.lapsSettingsRequest = &lapsSettingsRequest
	return r
}

func (r LocalAdminPasswordAPIV1LocalAdminPasswordSettingsPutRequest) Execute() (*LapsSettingsResponse, *http.Response, error) {
	return r.ApiService.V1LocalAdminPasswordSettingsPutExecute(r)
}

/*
V1LocalAdminPasswordSettingsPut Update settings for LAPS.

Update settings for LAPS.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LocalAdminPasswordAPIV1LocalAdminPasswordSettingsPutRequest

Deprecated
*/
func (a *LocalAdminPasswordAPIService) V1LocalAdminPasswordSettingsPut(ctx context.Context) LocalAdminPasswordAPIV1LocalAdminPasswordSettingsPutRequest {
	return LocalAdminPasswordAPIV1LocalAdminPasswordSettingsPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return LapsSettingsResponse
// Deprecated
func (a *LocalAdminPasswordAPIService) V1LocalAdminPasswordSettingsPutExecute(r LocalAdminPasswordAPIV1LocalAdminPasswordSettingsPutRequest) (*LapsSettingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LapsSettingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalAdminPasswordAPIService.V1LocalAdminPasswordSettingsPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/local-admin-password/settings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.lapsSettingsRequest == nil {
		return localVarReturnValue, nil, reportError("lapsSettingsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.lapsSettingsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameAuditGetRequest struct {
	ctx context.Context
	ApiService LocalAdminPasswordAPI
	clientManagementId string
	username string
}

func (r LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameAuditGetRequest) Execute() (*LapsPasswordAuditsResultsV2, *http.Response, error) {
	return r.ApiService.V2LocalAdminPasswordClientManagementIdAccountUsernameAuditGetExecute(r)
}

/*
V2LocalAdminPasswordClientManagementIdAccountUsernameAuditGet Get LAPS password viewed history.

Get the full history of all local admin passwords for a specific username on a target device. History will include password, who viewed the password and when it was viewed. Get audit history by using the client management id and username as the path parameters. If multiple accounts with the same username exist, the MDM source will be selected by default.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param clientManagementId client management id of target device.
 @param username user name to view audit information for
 @return LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameAuditGetRequest
*/
func (a *LocalAdminPasswordAPIService) V2LocalAdminPasswordClientManagementIdAccountUsernameAuditGet(ctx context.Context, clientManagementId string, username string) LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameAuditGetRequest {
	return LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameAuditGetRequest{
		ApiService: a,
		ctx: ctx,
		clientManagementId: clientManagementId,
		username: username,
	}
}

// Execute executes the request
//  @return LapsPasswordAuditsResultsV2
func (a *LocalAdminPasswordAPIService) V2LocalAdminPasswordClientManagementIdAccountUsernameAuditGetExecute(r LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameAuditGetRequest) (*LapsPasswordAuditsResultsV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LapsPasswordAuditsResultsV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalAdminPasswordAPIService.V2LocalAdminPasswordClientManagementIdAccountUsernameAuditGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/local-admin-password/{clientManagementId}/account/{username}/audit"
	localVarPath = strings.Replace(localVarPath, "{"+"clientManagementId"+"}", url.PathEscape(parameterValueToString(r.clientManagementId, "clientManagementId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"username"+"}", url.PathEscape(parameterValueToString(r.username, "username")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameGuidAuditGetRequest struct {
	ctx context.Context
	ApiService LocalAdminPasswordAPI
	clientManagementId string
	username string
	guid string
}

func (r LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameGuidAuditGetRequest) Execute() (*LapsPasswordAuditsResultsV2, *http.Response, error) {
	return r.ApiService.V2LocalAdminPasswordClientManagementIdAccountUsernameGuidAuditGetExecute(r)
}

/*
V2LocalAdminPasswordClientManagementIdAccountUsernameGuidAuditGet Get LAPS password viewed history.

Get the full history of all local admin passwords for a specific user guid on a target device. History will include password, who viewed the password and when it was viewed. Get audit history by using the client management id, username, and user guid as the path parameters.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param clientManagementId client management id of target device.
 @param username user name to view audit information for
 @param guid user guid to view audit information for
 @return LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameGuidAuditGetRequest
*/
func (a *LocalAdminPasswordAPIService) V2LocalAdminPasswordClientManagementIdAccountUsernameGuidAuditGet(ctx context.Context, clientManagementId string, username string, guid string) LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameGuidAuditGetRequest {
	return LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameGuidAuditGetRequest{
		ApiService: a,
		ctx: ctx,
		clientManagementId: clientManagementId,
		username: username,
		guid: guid,
	}
}

// Execute executes the request
//  @return LapsPasswordAuditsResultsV2
func (a *LocalAdminPasswordAPIService) V2LocalAdminPasswordClientManagementIdAccountUsernameGuidAuditGetExecute(r LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameGuidAuditGetRequest) (*LapsPasswordAuditsResultsV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LapsPasswordAuditsResultsV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalAdminPasswordAPIService.V2LocalAdminPasswordClientManagementIdAccountUsernameGuidAuditGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/local-admin-password/{clientManagementId}/account/{username}/{guid}/audit"
	localVarPath = strings.Replace(localVarPath, "{"+"clientManagementId"+"}", url.PathEscape(parameterValueToString(r.clientManagementId, "clientManagementId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"username"+"}", url.PathEscape(parameterValueToString(r.username, "username")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameGuidHistoryGetRequest struct {
	ctx context.Context
	ApiService LocalAdminPasswordAPI
	clientManagementId string
	username string
	guid string
}

func (r LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameGuidHistoryGetRequest) Execute() (*LapsHistoryResponse, *http.Response, error) {
	return r.ApiService.V2LocalAdminPasswordClientManagementIdAccountUsernameGuidHistoryGetExecute(r)
}

/*
V2LocalAdminPasswordClientManagementIdAccountUsernameGuidHistoryGet Get LAPS historical records for target device and user guid.

Get the full history of all for a specific user guid on a target device. History will include date created, date last seen, expiration time, and rotational status. Get audit history by using the client management id, username, and user guid as the path parameters.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param clientManagementId client management id of target device.
 @param username user name to view history for
 @param guid user guid to view history for
 @return LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameGuidHistoryGetRequest
*/
func (a *LocalAdminPasswordAPIService) V2LocalAdminPasswordClientManagementIdAccountUsernameGuidHistoryGet(ctx context.Context, clientManagementId string, username string, guid string) LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameGuidHistoryGetRequest {
	return LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameGuidHistoryGetRequest{
		ApiService: a,
		ctx: ctx,
		clientManagementId: clientManagementId,
		username: username,
		guid: guid,
	}
}

// Execute executes the request
//  @return LapsHistoryResponse
func (a *LocalAdminPasswordAPIService) V2LocalAdminPasswordClientManagementIdAccountUsernameGuidHistoryGetExecute(r LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameGuidHistoryGetRequest) (*LapsHistoryResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LapsHistoryResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalAdminPasswordAPIService.V2LocalAdminPasswordClientManagementIdAccountUsernameGuidHistoryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/local-admin-password/{clientManagementId}/account/{username}/{guid}/history"
	localVarPath = strings.Replace(localVarPath, "{"+"clientManagementId"+"}", url.PathEscape(parameterValueToString(r.clientManagementId, "clientManagementId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"username"+"}", url.PathEscape(parameterValueToString(r.username, "username")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameGuidPasswordGetRequest struct {
	ctx context.Context
	ApiService LocalAdminPasswordAPI
	clientManagementId string
	username string
	guid string
}

func (r LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameGuidPasswordGetRequest) Execute() (*LapsPasswordResponseV2, *http.Response, error) {
	return r.ApiService.V2LocalAdminPasswordClientManagementIdAccountUsernameGuidPasswordGetExecute(r)
}

/*
V2LocalAdminPasswordClientManagementIdAccountUsernameGuidPasswordGet Get current LAPS password for specified user guid on a client.

Get current LAPS password for specified client by using the client management id, username, and user guid as the path parameters. Once the password is viewed it will be rotated out with a new password based on the rotation time settings.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param clientManagementId client management id of target device.
 @param username user name for the account
 @param guid user guid for the account
 @return LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameGuidPasswordGetRequest
*/
func (a *LocalAdminPasswordAPIService) V2LocalAdminPasswordClientManagementIdAccountUsernameGuidPasswordGet(ctx context.Context, clientManagementId string, username string, guid string) LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameGuidPasswordGetRequest {
	return LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameGuidPasswordGetRequest{
		ApiService: a,
		ctx: ctx,
		clientManagementId: clientManagementId,
		username: username,
		guid: guid,
	}
}

// Execute executes the request
//  @return LapsPasswordResponseV2
func (a *LocalAdminPasswordAPIService) V2LocalAdminPasswordClientManagementIdAccountUsernameGuidPasswordGetExecute(r LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameGuidPasswordGetRequest) (*LapsPasswordResponseV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LapsPasswordResponseV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalAdminPasswordAPIService.V2LocalAdminPasswordClientManagementIdAccountUsernameGuidPasswordGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/local-admin-password/{clientManagementId}/account/{username}/{guid}/password"
	localVarPath = strings.Replace(localVarPath, "{"+"clientManagementId"+"}", url.PathEscape(parameterValueToString(r.clientManagementId, "clientManagementId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"username"+"}", url.PathEscape(parameterValueToString(r.username, "username")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameHistoryGetRequest struct {
	ctx context.Context
	ApiService LocalAdminPasswordAPI
	clientManagementId string
	username string
}

func (r LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameHistoryGetRequest) Execute() (*LapsHistoryResponse, *http.Response, error) {
	return r.ApiService.V2LocalAdminPasswordClientManagementIdAccountUsernameHistoryGetExecute(r)
}

/*
V2LocalAdminPasswordClientManagementIdAccountUsernameHistoryGet Get LAPS historical records for target device and username.

Get the full history of all for a specific username on a target device. History will include date created, date last seen, expiration time, and rotational status. Get audit history by using the client management id and username as the path parameters.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param clientManagementId client management id of target device.
 @param username user name to view history for
 @return LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameHistoryGetRequest
*/
func (a *LocalAdminPasswordAPIService) V2LocalAdminPasswordClientManagementIdAccountUsernameHistoryGet(ctx context.Context, clientManagementId string, username string) LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameHistoryGetRequest {
	return LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameHistoryGetRequest{
		ApiService: a,
		ctx: ctx,
		clientManagementId: clientManagementId,
		username: username,
	}
}

// Execute executes the request
//  @return LapsHistoryResponse
func (a *LocalAdminPasswordAPIService) V2LocalAdminPasswordClientManagementIdAccountUsernameHistoryGetExecute(r LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernameHistoryGetRequest) (*LapsHistoryResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LapsHistoryResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalAdminPasswordAPIService.V2LocalAdminPasswordClientManagementIdAccountUsernameHistoryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/local-admin-password/{clientManagementId}/account/{username}/history"
	localVarPath = strings.Replace(localVarPath, "{"+"clientManagementId"+"}", url.PathEscape(parameterValueToString(r.clientManagementId, "clientManagementId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"username"+"}", url.PathEscape(parameterValueToString(r.username, "username")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernamePasswordGetRequest struct {
	ctx context.Context
	ApiService LocalAdminPasswordAPI
	clientManagementId string
	username string
}

func (r LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernamePasswordGetRequest) Execute() (*LapsPasswordResponseV2, *http.Response, error) {
	return r.ApiService.V2LocalAdminPasswordClientManagementIdAccountUsernamePasswordGetExecute(r)
}

/*
V2LocalAdminPasswordClientManagementIdAccountUsernamePasswordGet Get current LAPS password for specified username on a client.

Get current LAPS password for specified client by using the client management id and username as the path parameters. Once the password is viewed it will be rotated out with a new password based on the rotation time settings. If multiple accounts with the same username exist, the MDM source will be selected by default.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param clientManagementId client management id of target device.
 @param username user name for the account
 @return LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernamePasswordGetRequest
*/
func (a *LocalAdminPasswordAPIService) V2LocalAdminPasswordClientManagementIdAccountUsernamePasswordGet(ctx context.Context, clientManagementId string, username string) LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernamePasswordGetRequest {
	return LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernamePasswordGetRequest{
		ApiService: a,
		ctx: ctx,
		clientManagementId: clientManagementId,
		username: username,
	}
}

// Execute executes the request
//  @return LapsPasswordResponseV2
func (a *LocalAdminPasswordAPIService) V2LocalAdminPasswordClientManagementIdAccountUsernamePasswordGetExecute(r LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountUsernamePasswordGetRequest) (*LapsPasswordResponseV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LapsPasswordResponseV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalAdminPasswordAPIService.V2LocalAdminPasswordClientManagementIdAccountUsernamePasswordGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/local-admin-password/{clientManagementId}/account/{username}/password"
	localVarPath = strings.Replace(localVarPath, "{"+"clientManagementId"+"}", url.PathEscape(parameterValueToString(r.clientManagementId, "clientManagementId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"username"+"}", url.PathEscape(parameterValueToString(r.username, "username")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountsGetRequest struct {
	ctx context.Context
	ApiService LocalAdminPasswordAPI
	clientManagementId string
}

func (r LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountsGetRequest) Execute() (*LapsUserResultsV2, *http.Response, error) {
	return r.ApiService.V2LocalAdminPasswordClientManagementIdAccountsGetExecute(r)
}

/*
V2LocalAdminPasswordClientManagementIdAccountsGet Get the LAPS capable admin accounts for a device.

Get a full list of admin accounts that are LAPS capable. Capable accounts are returned in the AutoSetupAdminAccounts from QueryResponses.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param clientManagementId client management id of target device.
 @return LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountsGetRequest
*/
func (a *LocalAdminPasswordAPIService) V2LocalAdminPasswordClientManagementIdAccountsGet(ctx context.Context, clientManagementId string) LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountsGetRequest {
	return LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountsGetRequest{
		ApiService: a,
		ctx: ctx,
		clientManagementId: clientManagementId,
	}
}

// Execute executes the request
//  @return LapsUserResultsV2
func (a *LocalAdminPasswordAPIService) V2LocalAdminPasswordClientManagementIdAccountsGetExecute(r LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdAccountsGetRequest) (*LapsUserResultsV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LapsUserResultsV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalAdminPasswordAPIService.V2LocalAdminPasswordClientManagementIdAccountsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/local-admin-password/{clientManagementId}/accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"clientManagementId"+"}", url.PathEscape(parameterValueToString(r.clientManagementId, "clientManagementId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdHistoryGetRequest struct {
	ctx context.Context
	ApiService LocalAdminPasswordAPI
	clientManagementId string
}

func (r LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdHistoryGetRequest) Execute() (*LapsAccountManagementHistoryResponse, *http.Response, error) {
	return r.ApiService.V2LocalAdminPasswordClientManagementIdHistoryGetExecute(r)
}

/*
V2LocalAdminPasswordClientManagementIdHistoryGet Get LAPS password viewed history, and rotation history.

Get the full history of all local admin passwords for all accounts for a specific management ID. History will include password, who viewed the password and when it was viewed. This will include rotation history as well.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param clientManagementId client management id of target device.
 @return LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdHistoryGetRequest
*/
func (a *LocalAdminPasswordAPIService) V2LocalAdminPasswordClientManagementIdHistoryGet(ctx context.Context, clientManagementId string) LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdHistoryGetRequest {
	return LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdHistoryGetRequest{
		ApiService: a,
		ctx: ctx,
		clientManagementId: clientManagementId,
	}
}

// Execute executes the request
//  @return LapsAccountManagementHistoryResponse
func (a *LocalAdminPasswordAPIService) V2LocalAdminPasswordClientManagementIdHistoryGetExecute(r LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdHistoryGetRequest) (*LapsAccountManagementHistoryResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LapsAccountManagementHistoryResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalAdminPasswordAPIService.V2LocalAdminPasswordClientManagementIdHistoryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/local-admin-password/{clientManagementId}/history"
	localVarPath = strings.Replace(localVarPath, "{"+"clientManagementId"+"}", url.PathEscape(parameterValueToString(r.clientManagementId, "clientManagementId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdSetPasswordPutRequest struct {
	ctx context.Context
	ApiService LocalAdminPasswordAPI
	clientManagementId string
	lapsUserPasswordRequestV2 *LapsUserPasswordRequestV2
}

// LAPS password to set
func (r LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdSetPasswordPutRequest) LapsUserPasswordRequestV2(lapsUserPasswordRequestV2 LapsUserPasswordRequestV2) LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdSetPasswordPutRequest {
	r.lapsUserPasswordRequestV2 = &lapsUserPasswordRequestV2
	return r
}

func (r LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdSetPasswordPutRequest) Execute() (*LapsUserPasswordResponseV2, *http.Response, error) {
	return r.ApiService.V2LocalAdminPasswordClientManagementIdSetPasswordPutExecute(r)
}

/*
V2LocalAdminPasswordClientManagementIdSetPasswordPut Set the LAPS password for a device.

Set the LAPS password for a device. This will set the password for all LAPS capable accounts.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param clientManagementId client management id of target device.
 @return LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdSetPasswordPutRequest
*/
func (a *LocalAdminPasswordAPIService) V2LocalAdminPasswordClientManagementIdSetPasswordPut(ctx context.Context, clientManagementId string) LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdSetPasswordPutRequest {
	return LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdSetPasswordPutRequest{
		ApiService: a,
		ctx: ctx,
		clientManagementId: clientManagementId,
	}
}

// Execute executes the request
//  @return LapsUserPasswordResponseV2
func (a *LocalAdminPasswordAPIService) V2LocalAdminPasswordClientManagementIdSetPasswordPutExecute(r LocalAdminPasswordAPIV2LocalAdminPasswordClientManagementIdSetPasswordPutRequest) (*LapsUserPasswordResponseV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LapsUserPasswordResponseV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalAdminPasswordAPIService.V2LocalAdminPasswordClientManagementIdSetPasswordPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/local-admin-password/{clientManagementId}/set-password"
	localVarPath = strings.Replace(localVarPath, "{"+"clientManagementId"+"}", url.PathEscape(parameterValueToString(r.clientManagementId, "clientManagementId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.lapsUserPasswordRequestV2 == nil {
		return localVarReturnValue, nil, reportError("lapsUserPasswordRequestV2 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.lapsUserPasswordRequestV2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocalAdminPasswordAPIV2LocalAdminPasswordPendingRotationsGetRequest struct {
	ctx context.Context
	ApiService LocalAdminPasswordAPI
}

func (r LocalAdminPasswordAPIV2LocalAdminPasswordPendingRotationsGetRequest) Execute() (*LapsPendingRotationResponse, *http.Response, error) {
	return r.ApiService.V2LocalAdminPasswordPendingRotationsGetExecute(r)
}

/*
V2LocalAdminPasswordPendingRotationsGet Get a list of the current devices and usernames with pending LAPS rotations

Return information about all devices and usernames currently in the state of a pending LAPS rotation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LocalAdminPasswordAPIV2LocalAdminPasswordPendingRotationsGetRequest
*/
func (a *LocalAdminPasswordAPIService) V2LocalAdminPasswordPendingRotationsGet(ctx context.Context) LocalAdminPasswordAPIV2LocalAdminPasswordPendingRotationsGetRequest {
	return LocalAdminPasswordAPIV2LocalAdminPasswordPendingRotationsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return LapsPendingRotationResponse
func (a *LocalAdminPasswordAPIService) V2LocalAdminPasswordPendingRotationsGetExecute(r LocalAdminPasswordAPIV2LocalAdminPasswordPendingRotationsGetRequest) (*LapsPendingRotationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LapsPendingRotationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalAdminPasswordAPIService.V2LocalAdminPasswordPendingRotationsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/local-admin-password/pending-rotations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocalAdminPasswordAPIV2LocalAdminPasswordSettingsGetRequest struct {
	ctx context.Context
	ApiService LocalAdminPasswordAPI
}

func (r LocalAdminPasswordAPIV2LocalAdminPasswordSettingsGetRequest) Execute() (*LapsSettingsResponseV2, *http.Response, error) {
	return r.ApiService.V2LocalAdminPasswordSettingsGetExecute(r)
}

/*
V2LocalAdminPasswordSettingsGet Get the current LAPS settings.

Return information about the current LAPS settings.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LocalAdminPasswordAPIV2LocalAdminPasswordSettingsGetRequest
*/
func (a *LocalAdminPasswordAPIService) V2LocalAdminPasswordSettingsGet(ctx context.Context) LocalAdminPasswordAPIV2LocalAdminPasswordSettingsGetRequest {
	return LocalAdminPasswordAPIV2LocalAdminPasswordSettingsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return LapsSettingsResponseV2
func (a *LocalAdminPasswordAPIService) V2LocalAdminPasswordSettingsGetExecute(r LocalAdminPasswordAPIV2LocalAdminPasswordSettingsGetRequest) (*LapsSettingsResponseV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LapsSettingsResponseV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalAdminPasswordAPIService.V2LocalAdminPasswordSettingsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/local-admin-password/settings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocalAdminPasswordAPIV2LocalAdminPasswordSettingsPutRequest struct {
	ctx context.Context
	ApiService LocalAdminPasswordAPI
	lapsSettingsRequestV2 *LapsSettingsRequestV2
}

// LAPS settings to update
func (r LocalAdminPasswordAPIV2LocalAdminPasswordSettingsPutRequest) LapsSettingsRequestV2(lapsSettingsRequestV2 LapsSettingsRequestV2) LocalAdminPasswordAPIV2LocalAdminPasswordSettingsPutRequest {
	r.lapsSettingsRequestV2 = &lapsSettingsRequestV2
	return r
}

func (r LocalAdminPasswordAPIV2LocalAdminPasswordSettingsPutRequest) Execute() (*LapsSettingsResponseV2, *http.Response, error) {
	return r.ApiService.V2LocalAdminPasswordSettingsPutExecute(r)
}

/*
V2LocalAdminPasswordSettingsPut Update settings for LAPS.

Update settings for LAPS.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LocalAdminPasswordAPIV2LocalAdminPasswordSettingsPutRequest
*/
func (a *LocalAdminPasswordAPIService) V2LocalAdminPasswordSettingsPut(ctx context.Context) LocalAdminPasswordAPIV2LocalAdminPasswordSettingsPutRequest {
	return LocalAdminPasswordAPIV2LocalAdminPasswordSettingsPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return LapsSettingsResponseV2
func (a *LocalAdminPasswordAPIService) V2LocalAdminPasswordSettingsPutExecute(r LocalAdminPasswordAPIV2LocalAdminPasswordSettingsPutRequest) (*LapsSettingsResponseV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LapsSettingsResponseV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalAdminPasswordAPIService.V2LocalAdminPasswordSettingsPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/local-admin-password/settings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.lapsSettingsRequestV2 == nil {
		return localVarReturnValue, nil, reportError("lapsSettingsRequestV2 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.lapsSettingsRequestV2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
