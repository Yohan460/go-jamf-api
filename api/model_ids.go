/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the Ids type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ids{}

// Ids struct for Ids
type Ids struct {
	Ids []string `json:"ids,omitempty"`
}

// NewIds instantiates a new Ids object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIds() *Ids {
	this := Ids{}
	return &this
}

// NewIdsWithDefaults instantiates a new Ids object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdsWithDefaults() *Ids {
	this := Ids{}
	return &this
}

// GetIds returns the Ids field value if set, zero value otherwise.
func (o *Ids) GetIds() []string {
	if o == nil || IsNil(o.Ids) {
		var ret []string
		return ret
	}
	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ids) GetIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ids) {
		return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *Ids) HasIds() bool {
	if o != nil && !IsNil(o.Ids) {
		return true
	}

	return false
}

// SetIds gets a reference to the given []string and assigns it to the Ids field.
func (o *Ids) SetIds(v []string) {
	o.Ids = v
}

func (o Ids) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ids) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ids) {
		toSerialize["ids"] = o.Ids
	}
	return toSerialize, nil
}

type NullableIds struct {
	value *Ids
	isSet bool
}

func (v NullableIds) Get() *Ids {
	return v.value
}

func (v *NullableIds) Set(val *Ids) {
	v.value = val
	v.isSet = true
}

func (v NullableIds) IsSet() bool {
	return v.isSet
}

func (v *NullableIds) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIds(val *Ids) *NullableIds {
	return &NullableIds{value: val, isSet: true}
}

func (v NullableIds) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIds) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


