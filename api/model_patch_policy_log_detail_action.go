/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the PatchPolicyLogDetailAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchPolicyLogDetailAction{}

// PatchPolicyLogDetailAction struct for PatchPolicyLogDetailAction
type PatchPolicyLogDetailAction struct {
	Id *string `json:"id,omitempty"`
	ActionOrder *int64 `json:"actionOrder,omitempty"`
	Action *string `json:"action,omitempty"`
}

// NewPatchPolicyLogDetailAction instantiates a new PatchPolicyLogDetailAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchPolicyLogDetailAction() *PatchPolicyLogDetailAction {
	this := PatchPolicyLogDetailAction{}
	return &this
}

// NewPatchPolicyLogDetailActionWithDefaults instantiates a new PatchPolicyLogDetailAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchPolicyLogDetailActionWithDefaults() *PatchPolicyLogDetailAction {
	this := PatchPolicyLogDetailAction{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PatchPolicyLogDetailAction) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyLogDetailAction) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PatchPolicyLogDetailAction) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PatchPolicyLogDetailAction) SetId(v string) {
	o.Id = &v
}

// GetActionOrder returns the ActionOrder field value if set, zero value otherwise.
func (o *PatchPolicyLogDetailAction) GetActionOrder() int64 {
	if o == nil || IsNil(o.ActionOrder) {
		var ret int64
		return ret
	}
	return *o.ActionOrder
}

// GetActionOrderOk returns a tuple with the ActionOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyLogDetailAction) GetActionOrderOk() (*int64, bool) {
	if o == nil || IsNil(o.ActionOrder) {
		return nil, false
	}
	return o.ActionOrder, true
}

// HasActionOrder returns a boolean if a field has been set.
func (o *PatchPolicyLogDetailAction) HasActionOrder() bool {
	if o != nil && !IsNil(o.ActionOrder) {
		return true
	}

	return false
}

// SetActionOrder gets a reference to the given int64 and assigns it to the ActionOrder field.
func (o *PatchPolicyLogDetailAction) SetActionOrder(v int64) {
	o.ActionOrder = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *PatchPolicyLogDetailAction) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPolicyLogDetailAction) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *PatchPolicyLogDetailAction) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *PatchPolicyLogDetailAction) SetAction(v string) {
	o.Action = &v
}

func (o PatchPolicyLogDetailAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchPolicyLogDetailAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ActionOrder) {
		toSerialize["actionOrder"] = o.ActionOrder
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	return toSerialize, nil
}

type NullablePatchPolicyLogDetailAction struct {
	value *PatchPolicyLogDetailAction
	isSet bool
}

func (v NullablePatchPolicyLogDetailAction) Get() *PatchPolicyLogDetailAction {
	return v.value
}

func (v *NullablePatchPolicyLogDetailAction) Set(val *PatchPolicyLogDetailAction) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchPolicyLogDetailAction) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchPolicyLogDetailAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchPolicyLogDetailAction(val *PatchPolicyLogDetailAction) *NullablePatchPolicyLogDetailAction {
	return &NullablePatchPolicyLogDetailAction{value: val, isSet: true}
}

func (v NullablePatchPolicyLogDetailAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchPolicyLogDetailAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


