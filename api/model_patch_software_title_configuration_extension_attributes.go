/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the PatchSoftwareTitleConfigurationExtensionAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchSoftwareTitleConfigurationExtensionAttributes{}

// PatchSoftwareTitleConfigurationExtensionAttributes struct for PatchSoftwareTitleConfigurationExtensionAttributes
type PatchSoftwareTitleConfigurationExtensionAttributes struct {
	// Once an extension attribute is accepted, it cannot be reverted.
	Accepted *bool `json:"accepted,omitempty"`
	EaId *string `json:"eaId,omitempty"`
}

// NewPatchSoftwareTitleConfigurationExtensionAttributes instantiates a new PatchSoftwareTitleConfigurationExtensionAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchSoftwareTitleConfigurationExtensionAttributes() *PatchSoftwareTitleConfigurationExtensionAttributes {
	this := PatchSoftwareTitleConfigurationExtensionAttributes{}
	var accepted bool = false
	this.Accepted = &accepted
	return &this
}

// NewPatchSoftwareTitleConfigurationExtensionAttributesWithDefaults instantiates a new PatchSoftwareTitleConfigurationExtensionAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchSoftwareTitleConfigurationExtensionAttributesWithDefaults() *PatchSoftwareTitleConfigurationExtensionAttributes {
	this := PatchSoftwareTitleConfigurationExtensionAttributes{}
	var accepted bool = false
	this.Accepted = &accepted
	return &this
}

// GetAccepted returns the Accepted field value if set, zero value otherwise.
func (o *PatchSoftwareTitleConfigurationExtensionAttributes) GetAccepted() bool {
	if o == nil || IsNil(o.Accepted) {
		var ret bool
		return ret
	}
	return *o.Accepted
}

// GetAcceptedOk returns a tuple with the Accepted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSoftwareTitleConfigurationExtensionAttributes) GetAcceptedOk() (*bool, bool) {
	if o == nil || IsNil(o.Accepted) {
		return nil, false
	}
	return o.Accepted, true
}

// HasAccepted returns a boolean if a field has been set.
func (o *PatchSoftwareTitleConfigurationExtensionAttributes) HasAccepted() bool {
	if o != nil && !IsNil(o.Accepted) {
		return true
	}

	return false
}

// SetAccepted gets a reference to the given bool and assigns it to the Accepted field.
func (o *PatchSoftwareTitleConfigurationExtensionAttributes) SetAccepted(v bool) {
	o.Accepted = &v
}

// GetEaId returns the EaId field value if set, zero value otherwise.
func (o *PatchSoftwareTitleConfigurationExtensionAttributes) GetEaId() string {
	if o == nil || IsNil(o.EaId) {
		var ret string
		return ret
	}
	return *o.EaId
}

// GetEaIdOk returns a tuple with the EaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSoftwareTitleConfigurationExtensionAttributes) GetEaIdOk() (*string, bool) {
	if o == nil || IsNil(o.EaId) {
		return nil, false
	}
	return o.EaId, true
}

// HasEaId returns a boolean if a field has been set.
func (o *PatchSoftwareTitleConfigurationExtensionAttributes) HasEaId() bool {
	if o != nil && !IsNil(o.EaId) {
		return true
	}

	return false
}

// SetEaId gets a reference to the given string and assigns it to the EaId field.
func (o *PatchSoftwareTitleConfigurationExtensionAttributes) SetEaId(v string) {
	o.EaId = &v
}

func (o PatchSoftwareTitleConfigurationExtensionAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchSoftwareTitleConfigurationExtensionAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Accepted) {
		toSerialize["accepted"] = o.Accepted
	}
	if !IsNil(o.EaId) {
		toSerialize["eaId"] = o.EaId
	}
	return toSerialize, nil
}

type NullablePatchSoftwareTitleConfigurationExtensionAttributes struct {
	value *PatchSoftwareTitleConfigurationExtensionAttributes
	isSet bool
}

func (v NullablePatchSoftwareTitleConfigurationExtensionAttributes) Get() *PatchSoftwareTitleConfigurationExtensionAttributes {
	return v.value
}

func (v *NullablePatchSoftwareTitleConfigurationExtensionAttributes) Set(val *PatchSoftwareTitleConfigurationExtensionAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchSoftwareTitleConfigurationExtensionAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchSoftwareTitleConfigurationExtensionAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchSoftwareTitleConfigurationExtensionAttributes(val *PatchSoftwareTitleConfigurationExtensionAttributes) *NullablePatchSoftwareTitleConfigurationExtensionAttributes {
	return &NullablePatchSoftwareTitleConfigurationExtensionAttributes{value: val, isSet: true}
}

func (v NullablePatchSoftwareTitleConfigurationExtensionAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchSoftwareTitleConfigurationExtensionAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


