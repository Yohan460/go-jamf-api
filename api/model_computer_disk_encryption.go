/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ComputerDiskEncryption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComputerDiskEncryption{}

// ComputerDiskEncryption struct for ComputerDiskEncryption
type ComputerDiskEncryption struct {
	BootPartitionEncryptionDetails *ComputerPartitionEncryption `json:"bootPartitionEncryptionDetails,omitempty"`
	IndividualRecoveryKeyValidityStatus *string `json:"individualRecoveryKeyValidityStatus,omitempty"`
	InstitutionalRecoveryKeyPresent *bool `json:"institutionalRecoveryKeyPresent,omitempty"`
	DiskEncryptionConfigurationName *string `json:"diskEncryptionConfigurationName,omitempty"`
	FileVault2EnabledUserNames []string `json:"fileVault2EnabledUserNames,omitempty"`
	FileVault2EligibilityMessage *string `json:"fileVault2EligibilityMessage,omitempty"`
}

// NewComputerDiskEncryption instantiates a new ComputerDiskEncryption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputerDiskEncryption() *ComputerDiskEncryption {
	this := ComputerDiskEncryption{}
	return &this
}

// NewComputerDiskEncryptionWithDefaults instantiates a new ComputerDiskEncryption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputerDiskEncryptionWithDefaults() *ComputerDiskEncryption {
	this := ComputerDiskEncryption{}
	return &this
}

// GetBootPartitionEncryptionDetails returns the BootPartitionEncryptionDetails field value if set, zero value otherwise.
func (o *ComputerDiskEncryption) GetBootPartitionEncryptionDetails() ComputerPartitionEncryption {
	if o == nil || IsNil(o.BootPartitionEncryptionDetails) {
		var ret ComputerPartitionEncryption
		return ret
	}
	return *o.BootPartitionEncryptionDetails
}

// GetBootPartitionEncryptionDetailsOk returns a tuple with the BootPartitionEncryptionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerDiskEncryption) GetBootPartitionEncryptionDetailsOk() (*ComputerPartitionEncryption, bool) {
	if o == nil || IsNil(o.BootPartitionEncryptionDetails) {
		return nil, false
	}
	return o.BootPartitionEncryptionDetails, true
}

// HasBootPartitionEncryptionDetails returns a boolean if a field has been set.
func (o *ComputerDiskEncryption) HasBootPartitionEncryptionDetails() bool {
	if o != nil && !IsNil(o.BootPartitionEncryptionDetails) {
		return true
	}

	return false
}

// SetBootPartitionEncryptionDetails gets a reference to the given ComputerPartitionEncryption and assigns it to the BootPartitionEncryptionDetails field.
func (o *ComputerDiskEncryption) SetBootPartitionEncryptionDetails(v ComputerPartitionEncryption) {
	o.BootPartitionEncryptionDetails = &v
}

// GetIndividualRecoveryKeyValidityStatus returns the IndividualRecoveryKeyValidityStatus field value if set, zero value otherwise.
func (o *ComputerDiskEncryption) GetIndividualRecoveryKeyValidityStatus() string {
	if o == nil || IsNil(o.IndividualRecoveryKeyValidityStatus) {
		var ret string
		return ret
	}
	return *o.IndividualRecoveryKeyValidityStatus
}

// GetIndividualRecoveryKeyValidityStatusOk returns a tuple with the IndividualRecoveryKeyValidityStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerDiskEncryption) GetIndividualRecoveryKeyValidityStatusOk() (*string, bool) {
	if o == nil || IsNil(o.IndividualRecoveryKeyValidityStatus) {
		return nil, false
	}
	return o.IndividualRecoveryKeyValidityStatus, true
}

// HasIndividualRecoveryKeyValidityStatus returns a boolean if a field has been set.
func (o *ComputerDiskEncryption) HasIndividualRecoveryKeyValidityStatus() bool {
	if o != nil && !IsNil(o.IndividualRecoveryKeyValidityStatus) {
		return true
	}

	return false
}

// SetIndividualRecoveryKeyValidityStatus gets a reference to the given string and assigns it to the IndividualRecoveryKeyValidityStatus field.
func (o *ComputerDiskEncryption) SetIndividualRecoveryKeyValidityStatus(v string) {
	o.IndividualRecoveryKeyValidityStatus = &v
}

// GetInstitutionalRecoveryKeyPresent returns the InstitutionalRecoveryKeyPresent field value if set, zero value otherwise.
func (o *ComputerDiskEncryption) GetInstitutionalRecoveryKeyPresent() bool {
	if o == nil || IsNil(o.InstitutionalRecoveryKeyPresent) {
		var ret bool
		return ret
	}
	return *o.InstitutionalRecoveryKeyPresent
}

// GetInstitutionalRecoveryKeyPresentOk returns a tuple with the InstitutionalRecoveryKeyPresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerDiskEncryption) GetInstitutionalRecoveryKeyPresentOk() (*bool, bool) {
	if o == nil || IsNil(o.InstitutionalRecoveryKeyPresent) {
		return nil, false
	}
	return o.InstitutionalRecoveryKeyPresent, true
}

// HasInstitutionalRecoveryKeyPresent returns a boolean if a field has been set.
func (o *ComputerDiskEncryption) HasInstitutionalRecoveryKeyPresent() bool {
	if o != nil && !IsNil(o.InstitutionalRecoveryKeyPresent) {
		return true
	}

	return false
}

// SetInstitutionalRecoveryKeyPresent gets a reference to the given bool and assigns it to the InstitutionalRecoveryKeyPresent field.
func (o *ComputerDiskEncryption) SetInstitutionalRecoveryKeyPresent(v bool) {
	o.InstitutionalRecoveryKeyPresent = &v
}

// GetDiskEncryptionConfigurationName returns the DiskEncryptionConfigurationName field value if set, zero value otherwise.
func (o *ComputerDiskEncryption) GetDiskEncryptionConfigurationName() string {
	if o == nil || IsNil(o.DiskEncryptionConfigurationName) {
		var ret string
		return ret
	}
	return *o.DiskEncryptionConfigurationName
}

// GetDiskEncryptionConfigurationNameOk returns a tuple with the DiskEncryptionConfigurationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerDiskEncryption) GetDiskEncryptionConfigurationNameOk() (*string, bool) {
	if o == nil || IsNil(o.DiskEncryptionConfigurationName) {
		return nil, false
	}
	return o.DiskEncryptionConfigurationName, true
}

// HasDiskEncryptionConfigurationName returns a boolean if a field has been set.
func (o *ComputerDiskEncryption) HasDiskEncryptionConfigurationName() bool {
	if o != nil && !IsNil(o.DiskEncryptionConfigurationName) {
		return true
	}

	return false
}

// SetDiskEncryptionConfigurationName gets a reference to the given string and assigns it to the DiskEncryptionConfigurationName field.
func (o *ComputerDiskEncryption) SetDiskEncryptionConfigurationName(v string) {
	o.DiskEncryptionConfigurationName = &v
}

// GetFileVault2EnabledUserNames returns the FileVault2EnabledUserNames field value if set, zero value otherwise.
func (o *ComputerDiskEncryption) GetFileVault2EnabledUserNames() []string {
	if o == nil || IsNil(o.FileVault2EnabledUserNames) {
		var ret []string
		return ret
	}
	return o.FileVault2EnabledUserNames
}

// GetFileVault2EnabledUserNamesOk returns a tuple with the FileVault2EnabledUserNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerDiskEncryption) GetFileVault2EnabledUserNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.FileVault2EnabledUserNames) {
		return nil, false
	}
	return o.FileVault2EnabledUserNames, true
}

// HasFileVault2EnabledUserNames returns a boolean if a field has been set.
func (o *ComputerDiskEncryption) HasFileVault2EnabledUserNames() bool {
	if o != nil && !IsNil(o.FileVault2EnabledUserNames) {
		return true
	}

	return false
}

// SetFileVault2EnabledUserNames gets a reference to the given []string and assigns it to the FileVault2EnabledUserNames field.
func (o *ComputerDiskEncryption) SetFileVault2EnabledUserNames(v []string) {
	o.FileVault2EnabledUserNames = v
}

// GetFileVault2EligibilityMessage returns the FileVault2EligibilityMessage field value if set, zero value otherwise.
func (o *ComputerDiskEncryption) GetFileVault2EligibilityMessage() string {
	if o == nil || IsNil(o.FileVault2EligibilityMessage) {
		var ret string
		return ret
	}
	return *o.FileVault2EligibilityMessage
}

// GetFileVault2EligibilityMessageOk returns a tuple with the FileVault2EligibilityMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerDiskEncryption) GetFileVault2EligibilityMessageOk() (*string, bool) {
	if o == nil || IsNil(o.FileVault2EligibilityMessage) {
		return nil, false
	}
	return o.FileVault2EligibilityMessage, true
}

// HasFileVault2EligibilityMessage returns a boolean if a field has been set.
func (o *ComputerDiskEncryption) HasFileVault2EligibilityMessage() bool {
	if o != nil && !IsNil(o.FileVault2EligibilityMessage) {
		return true
	}

	return false
}

// SetFileVault2EligibilityMessage gets a reference to the given string and assigns it to the FileVault2EligibilityMessage field.
func (o *ComputerDiskEncryption) SetFileVault2EligibilityMessage(v string) {
	o.FileVault2EligibilityMessage = &v
}

func (o ComputerDiskEncryption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComputerDiskEncryption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BootPartitionEncryptionDetails) {
		toSerialize["bootPartitionEncryptionDetails"] = o.BootPartitionEncryptionDetails
	}
	if !IsNil(o.IndividualRecoveryKeyValidityStatus) {
		toSerialize["individualRecoveryKeyValidityStatus"] = o.IndividualRecoveryKeyValidityStatus
	}
	if !IsNil(o.InstitutionalRecoveryKeyPresent) {
		toSerialize["institutionalRecoveryKeyPresent"] = o.InstitutionalRecoveryKeyPresent
	}
	if !IsNil(o.DiskEncryptionConfigurationName) {
		toSerialize["diskEncryptionConfigurationName"] = o.DiskEncryptionConfigurationName
	}
	if !IsNil(o.FileVault2EnabledUserNames) {
		toSerialize["fileVault2EnabledUserNames"] = o.FileVault2EnabledUserNames
	}
	if !IsNil(o.FileVault2EligibilityMessage) {
		toSerialize["fileVault2EligibilityMessage"] = o.FileVault2EligibilityMessage
	}
	return toSerialize, nil
}

type NullableComputerDiskEncryption struct {
	value *ComputerDiskEncryption
	isSet bool
}

func (v NullableComputerDiskEncryption) Get() *ComputerDiskEncryption {
	return v.value
}

func (v *NullableComputerDiskEncryption) Set(val *ComputerDiskEncryption) {
	v.value = val
	v.isSet = true
}

func (v NullableComputerDiskEncryption) IsSet() bool {
	return v.isSet
}

func (v *NullableComputerDiskEncryption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputerDiskEncryption(val *ComputerDiskEncryption) *NullableComputerDiskEncryption {
	return &NullableComputerDiskEncryption{value: val, isSet: true}
}

func (v NullableComputerDiskEncryption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputerDiskEncryption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


