/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the AvailableUpdates type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AvailableUpdates{}

// AvailableUpdates struct for AvailableUpdates
type AvailableUpdates struct {
	AvailableUpdates []string `json:"availableUpdates,omitempty"`
}

// NewAvailableUpdates instantiates a new AvailableUpdates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailableUpdates() *AvailableUpdates {
	this := AvailableUpdates{}
	return &this
}

// NewAvailableUpdatesWithDefaults instantiates a new AvailableUpdates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailableUpdatesWithDefaults() *AvailableUpdates {
	this := AvailableUpdates{}
	return &this
}

// GetAvailableUpdates returns the AvailableUpdates field value if set, zero value otherwise.
func (o *AvailableUpdates) GetAvailableUpdates() []string {
	if o == nil || IsNil(o.AvailableUpdates) {
		var ret []string
		return ret
	}
	return o.AvailableUpdates
}

// GetAvailableUpdatesOk returns a tuple with the AvailableUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableUpdates) GetAvailableUpdatesOk() ([]string, bool) {
	if o == nil || IsNil(o.AvailableUpdates) {
		return nil, false
	}
	return o.AvailableUpdates, true
}

// HasAvailableUpdates returns a boolean if a field has been set.
func (o *AvailableUpdates) HasAvailableUpdates() bool {
	if o != nil && !IsNil(o.AvailableUpdates) {
		return true
	}

	return false
}

// SetAvailableUpdates gets a reference to the given []string and assigns it to the AvailableUpdates field.
func (o *AvailableUpdates) SetAvailableUpdates(v []string) {
	o.AvailableUpdates = v
}

func (o AvailableUpdates) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AvailableUpdates) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AvailableUpdates) {
		toSerialize["availableUpdates"] = o.AvailableUpdates
	}
	return toSerialize, nil
}

type NullableAvailableUpdates struct {
	value *AvailableUpdates
	isSet bool
}

func (v NullableAvailableUpdates) Get() *AvailableUpdates {
	return v.value
}

func (v *NullableAvailableUpdates) Set(val *AvailableUpdates) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailableUpdates) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailableUpdates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailableUpdates(val *AvailableUpdates) *NullableAvailableUpdates {
	return &NullableAvailableUpdates{value: val, isSet: true}
}

func (v NullableAvailableUpdates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailableUpdates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


