/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the RemoteAdministrationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoteAdministrationResponse{}

// RemoteAdministrationResponse A Remote administration response
type RemoteAdministrationResponse struct {
	Id *string `json:"id,omitempty"`
	SiteId *string `json:"siteId,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewRemoteAdministrationResponse instantiates a new RemoteAdministrationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteAdministrationResponse() *RemoteAdministrationResponse {
	this := RemoteAdministrationResponse{}
	return &this
}

// NewRemoteAdministrationResponseWithDefaults instantiates a new RemoteAdministrationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteAdministrationResponseWithDefaults() *RemoteAdministrationResponse {
	this := RemoteAdministrationResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RemoteAdministrationResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteAdministrationResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RemoteAdministrationResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RemoteAdministrationResponse) SetId(v string) {
	o.Id = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *RemoteAdministrationResponse) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteAdministrationResponse) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *RemoteAdministrationResponse) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *RemoteAdministrationResponse) SetSiteId(v string) {
	o.SiteId = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *RemoteAdministrationResponse) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteAdministrationResponse) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *RemoteAdministrationResponse) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *RemoteAdministrationResponse) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RemoteAdministrationResponse) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteAdministrationResponse) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RemoteAdministrationResponse) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RemoteAdministrationResponse) SetType(v string) {
	o.Type = &v
}

func (o RemoteAdministrationResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoteAdministrationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.SiteId) {
		toSerialize["siteId"] = o.SiteId
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableRemoteAdministrationResponse struct {
	value *RemoteAdministrationResponse
	isSet bool
}

func (v NullableRemoteAdministrationResponse) Get() *RemoteAdministrationResponse {
	return v.value
}

func (v *NullableRemoteAdministrationResponse) Set(val *RemoteAdministrationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteAdministrationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteAdministrationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteAdministrationResponse(val *RemoteAdministrationResponse) *NullableRemoteAdministrationResponse {
	return &NullableRemoteAdministrationResponse{value: val, isSet: true}
}

func (v NullableRemoteAdministrationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteAdministrationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


