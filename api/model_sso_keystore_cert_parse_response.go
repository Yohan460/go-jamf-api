/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// SsoKeystoreCertParseResponse struct for SsoKeystoreCertParseResponse
type SsoKeystoreCertParseResponse struct {
	Key *string `json:"key,omitempty"`
	Keys []CertificateKey `json:"keys,omitempty"`
	Type *string `json:"type,omitempty"`
	KeystoreSetupType *string `json:"keystoreSetupType,omitempty"`
	KeystoreFile []string `json:"keystoreFile,omitempty"`
	KeystoreFileName *string `json:"keystoreFileName,omitempty"`
}

// NewSsoKeystoreCertParseResponse instantiates a new SsoKeystoreCertParseResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSsoKeystoreCertParseResponse() *SsoKeystoreCertParseResponse {
	this := SsoKeystoreCertParseResponse{}
	var key string = " "
	this.Key = &key
	return &this
}

// NewSsoKeystoreCertParseResponseWithDefaults instantiates a new SsoKeystoreCertParseResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSsoKeystoreCertParseResponseWithDefaults() *SsoKeystoreCertParseResponse {
	this := SsoKeystoreCertParseResponse{}
	var key string = " "
	this.Key = &key
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *SsoKeystoreCertParseResponse) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsoKeystoreCertParseResponse) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *SsoKeystoreCertParseResponse) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *SsoKeystoreCertParseResponse) SetKey(v string) {
	o.Key = &v
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *SsoKeystoreCertParseResponse) GetKeys() []CertificateKey {
	if o == nil || o.Keys == nil {
		var ret []CertificateKey
		return ret
	}
	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsoKeystoreCertParseResponse) GetKeysOk() ([]CertificateKey, bool) {
	if o == nil || o.Keys == nil {
		return nil, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *SsoKeystoreCertParseResponse) HasKeys() bool {
	if o != nil && o.Keys != nil {
		return true
	}

	return false
}

// SetKeys gets a reference to the given []CertificateKey and assigns it to the Keys field.
func (o *SsoKeystoreCertParseResponse) SetKeys(v []CertificateKey) {
	o.Keys = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SsoKeystoreCertParseResponse) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsoKeystoreCertParseResponse) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SsoKeystoreCertParseResponse) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SsoKeystoreCertParseResponse) SetType(v string) {
	o.Type = &v
}

// GetKeystoreSetupType returns the KeystoreSetupType field value if set, zero value otherwise.
func (o *SsoKeystoreCertParseResponse) GetKeystoreSetupType() string {
	if o == nil || o.KeystoreSetupType == nil {
		var ret string
		return ret
	}
	return *o.KeystoreSetupType
}

// GetKeystoreSetupTypeOk returns a tuple with the KeystoreSetupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsoKeystoreCertParseResponse) GetKeystoreSetupTypeOk() (*string, bool) {
	if o == nil || o.KeystoreSetupType == nil {
		return nil, false
	}
	return o.KeystoreSetupType, true
}

// HasKeystoreSetupType returns a boolean if a field has been set.
func (o *SsoKeystoreCertParseResponse) HasKeystoreSetupType() bool {
	if o != nil && o.KeystoreSetupType != nil {
		return true
	}

	return false
}

// SetKeystoreSetupType gets a reference to the given string and assigns it to the KeystoreSetupType field.
func (o *SsoKeystoreCertParseResponse) SetKeystoreSetupType(v string) {
	o.KeystoreSetupType = &v
}

// GetKeystoreFile returns the KeystoreFile field value if set, zero value otherwise.
func (o *SsoKeystoreCertParseResponse) GetKeystoreFile() []string {
	if o == nil || o.KeystoreFile == nil {
		var ret []string
		return ret
	}
	return o.KeystoreFile
}

// GetKeystoreFileOk returns a tuple with the KeystoreFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsoKeystoreCertParseResponse) GetKeystoreFileOk() ([]string, bool) {
	if o == nil || o.KeystoreFile == nil {
		return nil, false
	}
	return o.KeystoreFile, true
}

// HasKeystoreFile returns a boolean if a field has been set.
func (o *SsoKeystoreCertParseResponse) HasKeystoreFile() bool {
	if o != nil && o.KeystoreFile != nil {
		return true
	}

	return false
}

// SetKeystoreFile gets a reference to the given []string and assigns it to the KeystoreFile field.
func (o *SsoKeystoreCertParseResponse) SetKeystoreFile(v []string) {
	o.KeystoreFile = v
}

// GetKeystoreFileName returns the KeystoreFileName field value if set, zero value otherwise.
func (o *SsoKeystoreCertParseResponse) GetKeystoreFileName() string {
	if o == nil || o.KeystoreFileName == nil {
		var ret string
		return ret
	}
	return *o.KeystoreFileName
}

// GetKeystoreFileNameOk returns a tuple with the KeystoreFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsoKeystoreCertParseResponse) GetKeystoreFileNameOk() (*string, bool) {
	if o == nil || o.KeystoreFileName == nil {
		return nil, false
	}
	return o.KeystoreFileName, true
}

// HasKeystoreFileName returns a boolean if a field has been set.
func (o *SsoKeystoreCertParseResponse) HasKeystoreFileName() bool {
	if o != nil && o.KeystoreFileName != nil {
		return true
	}

	return false
}

// SetKeystoreFileName gets a reference to the given string and assigns it to the KeystoreFileName field.
func (o *SsoKeystoreCertParseResponse) SetKeystoreFileName(v string) {
	o.KeystoreFileName = &v
}

func (o SsoKeystoreCertParseResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Keys != nil {
		toSerialize["keys"] = o.Keys
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.KeystoreSetupType != nil {
		toSerialize["keystoreSetupType"] = o.KeystoreSetupType
	}
	if o.KeystoreFile != nil {
		toSerialize["keystoreFile"] = o.KeystoreFile
	}
	if o.KeystoreFileName != nil {
		toSerialize["keystoreFileName"] = o.KeystoreFileName
	}
	return json.Marshal(toSerialize)
}

type NullableSsoKeystoreCertParseResponse struct {
	value *SsoKeystoreCertParseResponse
	isSet bool
}

func (v NullableSsoKeystoreCertParseResponse) Get() *SsoKeystoreCertParseResponse {
	return v.value
}

func (v *NullableSsoKeystoreCertParseResponse) Set(val *SsoKeystoreCertParseResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSsoKeystoreCertParseResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSsoKeystoreCertParseResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSsoKeystoreCertParseResponse(val *SsoKeystoreCertParseResponse) *NullableSsoKeystoreCertParseResponse {
	return &NullableSsoKeystoreCertParseResponse{value: val, isSet: true}
}

func (v NullableSsoKeystoreCertParseResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSsoKeystoreCertParseResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


