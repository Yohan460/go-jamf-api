/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// checks if the SchedulerTrigger type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchedulerTrigger{}

// SchedulerTrigger struct for SchedulerTrigger
type SchedulerTrigger struct {
	TriggerKey *string `json:"triggerKey,omitempty"`
	PreviousFireTime *time.Time `json:"previousFireTime,omitempty"`
	NextFireTime *time.Time `json:"nextFireTime,omitempty"`
}

// NewSchedulerTrigger instantiates a new SchedulerTrigger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchedulerTrigger() *SchedulerTrigger {
	this := SchedulerTrigger{}
	return &this
}

// NewSchedulerTriggerWithDefaults instantiates a new SchedulerTrigger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchedulerTriggerWithDefaults() *SchedulerTrigger {
	this := SchedulerTrigger{}
	return &this
}

// GetTriggerKey returns the TriggerKey field value if set, zero value otherwise.
func (o *SchedulerTrigger) GetTriggerKey() string {
	if o == nil || IsNil(o.TriggerKey) {
		var ret string
		return ret
	}
	return *o.TriggerKey
}

// GetTriggerKeyOk returns a tuple with the TriggerKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerTrigger) GetTriggerKeyOk() (*string, bool) {
	if o == nil || IsNil(o.TriggerKey) {
		return nil, false
	}
	return o.TriggerKey, true
}

// HasTriggerKey returns a boolean if a field has been set.
func (o *SchedulerTrigger) HasTriggerKey() bool {
	if o != nil && !IsNil(o.TriggerKey) {
		return true
	}

	return false
}

// SetTriggerKey gets a reference to the given string and assigns it to the TriggerKey field.
func (o *SchedulerTrigger) SetTriggerKey(v string) {
	o.TriggerKey = &v
}

// GetPreviousFireTime returns the PreviousFireTime field value if set, zero value otherwise.
func (o *SchedulerTrigger) GetPreviousFireTime() time.Time {
	if o == nil || IsNil(o.PreviousFireTime) {
		var ret time.Time
		return ret
	}
	return *o.PreviousFireTime
}

// GetPreviousFireTimeOk returns a tuple with the PreviousFireTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerTrigger) GetPreviousFireTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PreviousFireTime) {
		return nil, false
	}
	return o.PreviousFireTime, true
}

// HasPreviousFireTime returns a boolean if a field has been set.
func (o *SchedulerTrigger) HasPreviousFireTime() bool {
	if o != nil && !IsNil(o.PreviousFireTime) {
		return true
	}

	return false
}

// SetPreviousFireTime gets a reference to the given time.Time and assigns it to the PreviousFireTime field.
func (o *SchedulerTrigger) SetPreviousFireTime(v time.Time) {
	o.PreviousFireTime = &v
}

// GetNextFireTime returns the NextFireTime field value if set, zero value otherwise.
func (o *SchedulerTrigger) GetNextFireTime() time.Time {
	if o == nil || IsNil(o.NextFireTime) {
		var ret time.Time
		return ret
	}
	return *o.NextFireTime
}

// GetNextFireTimeOk returns a tuple with the NextFireTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerTrigger) GetNextFireTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.NextFireTime) {
		return nil, false
	}
	return o.NextFireTime, true
}

// HasNextFireTime returns a boolean if a field has been set.
func (o *SchedulerTrigger) HasNextFireTime() bool {
	if o != nil && !IsNil(o.NextFireTime) {
		return true
	}

	return false
}

// SetNextFireTime gets a reference to the given time.Time and assigns it to the NextFireTime field.
func (o *SchedulerTrigger) SetNextFireTime(v time.Time) {
	o.NextFireTime = &v
}

func (o SchedulerTrigger) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchedulerTrigger) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TriggerKey) {
		toSerialize["triggerKey"] = o.TriggerKey
	}
	if !IsNil(o.PreviousFireTime) {
		toSerialize["previousFireTime"] = o.PreviousFireTime
	}
	if !IsNil(o.NextFireTime) {
		toSerialize["nextFireTime"] = o.NextFireTime
	}
	return toSerialize, nil
}

type NullableSchedulerTrigger struct {
	value *SchedulerTrigger
	isSet bool
}

func (v NullableSchedulerTrigger) Get() *SchedulerTrigger {
	return v.value
}

func (v *NullableSchedulerTrigger) Set(val *SchedulerTrigger) {
	v.value = val
	v.isSet = true
}

func (v NullableSchedulerTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableSchedulerTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchedulerTrigger(val *SchedulerTrigger) *NullableSchedulerTrigger {
	return &NullableSchedulerTrigger{value: val, isSet: true}
}

func (v NullableSchedulerTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchedulerTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


