/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the LanguageCode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LanguageCode{}

// LanguageCode struct for LanguageCode
type LanguageCode struct {
	Value *string `json:"value,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewLanguageCode instantiates a new LanguageCode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLanguageCode() *LanguageCode {
	this := LanguageCode{}
	return &this
}

// NewLanguageCodeWithDefaults instantiates a new LanguageCode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLanguageCodeWithDefaults() *LanguageCode {
	this := LanguageCode{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *LanguageCode) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LanguageCode) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *LanguageCode) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *LanguageCode) SetValue(v string) {
	o.Value = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LanguageCode) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LanguageCode) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LanguageCode) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LanguageCode) SetName(v string) {
	o.Name = &v
}

func (o LanguageCode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LanguageCode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableLanguageCode struct {
	value *LanguageCode
	isSet bool
}

func (v NullableLanguageCode) Get() *LanguageCode {
	return v.value
}

func (v *NullableLanguageCode) Set(val *LanguageCode) {
	v.value = val
	v.isSet = true
}

func (v NullableLanguageCode) IsSet() bool {
	return v.isSet
}

func (v *NullableLanguageCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLanguageCode(val *LanguageCode) *NullableLanguageCode {
	return &NullableLanguageCode{value: val, isSet: true}
}

func (v NullableLanguageCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLanguageCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


