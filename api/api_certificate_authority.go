/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


type CertificateAuthorityAPI interface {

	/*
	V1PkiCertificateAuthorityActiveDerGet Returns X.509 of active Certificate Authority (CA) in DER format

	Returns X.509 of active Certificate Authority (CA) in DER format

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return CertificateAuthorityAPIV1PkiCertificateAuthorityActiveDerGetRequest
	*/
	V1PkiCertificateAuthorityActiveDerGet(ctx context.Context) CertificateAuthorityAPIV1PkiCertificateAuthorityActiveDerGetRequest

	// V1PkiCertificateAuthorityActiveDerGetExecute executes the request
	//  @return *os.File
	V1PkiCertificateAuthorityActiveDerGetExecute(r CertificateAuthorityAPIV1PkiCertificateAuthorityActiveDerGetRequest) (*os.File, *http.Response, error)

	/*
	V1PkiCertificateAuthorityActiveGet Returns X.509 details of the active Certificate Authority (CA)

	Returns X.509 details of the active Certificate Authority (CA)

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return CertificateAuthorityAPIV1PkiCertificateAuthorityActiveGetRequest
	*/
	V1PkiCertificateAuthorityActiveGet(ctx context.Context) CertificateAuthorityAPIV1PkiCertificateAuthorityActiveGetRequest

	// V1PkiCertificateAuthorityActiveGetExecute executes the request
	//  @return CertificateRecord
	V1PkiCertificateAuthorityActiveGetExecute(r CertificateAuthorityAPIV1PkiCertificateAuthorityActiveGetRequest) (*CertificateRecord, *http.Response, error)

	/*
	V1PkiCertificateAuthorityActivePemGet Returns active Certificate Authority (CA) in PEM format

	Returns active Certificate Authority (CA) in PEM format

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return CertificateAuthorityAPIV1PkiCertificateAuthorityActivePemGetRequest
	*/
	V1PkiCertificateAuthorityActivePemGet(ctx context.Context) CertificateAuthorityAPIV1PkiCertificateAuthorityActivePemGetRequest

	// V1PkiCertificateAuthorityActivePemGetExecute executes the request
	//  @return *os.File
	V1PkiCertificateAuthorityActivePemGetExecute(r CertificateAuthorityAPIV1PkiCertificateAuthorityActivePemGetRequest) (*os.File, *http.Response, error)

	/*
	V1PkiCertificateAuthorityIdDerGet Returns X.509 current Certificate Authority (CA) with provided ID in DER format

	Returns X.509 current Certificate Authority (CA) with provided ID in DER format

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id UUID of the Certificate Authority (CA)
	@return CertificateAuthorityAPIV1PkiCertificateAuthorityIdDerGetRequest
	*/
	V1PkiCertificateAuthorityIdDerGet(ctx context.Context, id string) CertificateAuthorityAPIV1PkiCertificateAuthorityIdDerGetRequest

	// V1PkiCertificateAuthorityIdDerGetExecute executes the request
	//  @return *os.File
	V1PkiCertificateAuthorityIdDerGetExecute(r CertificateAuthorityAPIV1PkiCertificateAuthorityIdDerGetRequest) (*os.File, *http.Response, error)

	/*
	V1PkiCertificateAuthorityIdGet Returns X.509 details of Certificate Authority (CA) with provided ID

	Returns X.509 details of Certificate Authority (CA) with provided ID

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id UUID of the Certificate Authority (CA)
	@return CertificateAuthorityAPIV1PkiCertificateAuthorityIdGetRequest
	*/
	V1PkiCertificateAuthorityIdGet(ctx context.Context, id string) CertificateAuthorityAPIV1PkiCertificateAuthorityIdGetRequest

	// V1PkiCertificateAuthorityIdGetExecute executes the request
	//  @return CertificateRecord
	V1PkiCertificateAuthorityIdGetExecute(r CertificateAuthorityAPIV1PkiCertificateAuthorityIdGetRequest) (*CertificateRecord, *http.Response, error)

	/*
	V1PkiCertificateAuthorityIdPemGet Returns current Certificate Authority (CA) with provided ID in PEM format

	Returns current Certificate Authority (CA) with provided ID in PEM format

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id UUID of the Certificate Authority (CA)
	@return CertificateAuthorityAPIV1PkiCertificateAuthorityIdPemGetRequest
	*/
	V1PkiCertificateAuthorityIdPemGet(ctx context.Context, id string) CertificateAuthorityAPIV1PkiCertificateAuthorityIdPemGetRequest

	// V1PkiCertificateAuthorityIdPemGetExecute executes the request
	//  @return *os.File
	V1PkiCertificateAuthorityIdPemGetExecute(r CertificateAuthorityAPIV1PkiCertificateAuthorityIdPemGetRequest) (*os.File, *http.Response, error)
}

// CertificateAuthorityAPIService CertificateAuthorityAPI service
type CertificateAuthorityAPIService service

type CertificateAuthorityAPIV1PkiCertificateAuthorityActiveDerGetRequest struct {
	ctx context.Context
	ApiService CertificateAuthorityAPI
}

func (r CertificateAuthorityAPIV1PkiCertificateAuthorityActiveDerGetRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.V1PkiCertificateAuthorityActiveDerGetExecute(r)
}

/*
V1PkiCertificateAuthorityActiveDerGet Returns X.509 of active Certificate Authority (CA) in DER format

Returns X.509 of active Certificate Authority (CA) in DER format

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CertificateAuthorityAPIV1PkiCertificateAuthorityActiveDerGetRequest
*/
func (a *CertificateAuthorityAPIService) V1PkiCertificateAuthorityActiveDerGet(ctx context.Context) CertificateAuthorityAPIV1PkiCertificateAuthorityActiveDerGetRequest {
	return CertificateAuthorityAPIV1PkiCertificateAuthorityActiveDerGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return *os.File
func (a *CertificateAuthorityAPIService) V1PkiCertificateAuthorityActiveDerGetExecute(r CertificateAuthorityAPIV1PkiCertificateAuthorityActiveDerGetRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CertificateAuthorityAPIService.V1PkiCertificateAuthorityActiveDerGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/pki/certificate-authority/active/der"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/pkix-cert"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CertificateAuthorityAPIV1PkiCertificateAuthorityActiveGetRequest struct {
	ctx context.Context
	ApiService CertificateAuthorityAPI
}

func (r CertificateAuthorityAPIV1PkiCertificateAuthorityActiveGetRequest) Execute() (*CertificateRecord, *http.Response, error) {
	return r.ApiService.V1PkiCertificateAuthorityActiveGetExecute(r)
}

/*
V1PkiCertificateAuthorityActiveGet Returns X.509 details of the active Certificate Authority (CA)

Returns X.509 details of the active Certificate Authority (CA)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CertificateAuthorityAPIV1PkiCertificateAuthorityActiveGetRequest
*/
func (a *CertificateAuthorityAPIService) V1PkiCertificateAuthorityActiveGet(ctx context.Context) CertificateAuthorityAPIV1PkiCertificateAuthorityActiveGetRequest {
	return CertificateAuthorityAPIV1PkiCertificateAuthorityActiveGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CertificateRecord
func (a *CertificateAuthorityAPIService) V1PkiCertificateAuthorityActiveGetExecute(r CertificateAuthorityAPIV1PkiCertificateAuthorityActiveGetRequest) (*CertificateRecord, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CertificateRecord
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CertificateAuthorityAPIService.V1PkiCertificateAuthorityActiveGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/pki/certificate-authority/active"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CertificateAuthorityAPIV1PkiCertificateAuthorityActivePemGetRequest struct {
	ctx context.Context
	ApiService CertificateAuthorityAPI
}

func (r CertificateAuthorityAPIV1PkiCertificateAuthorityActivePemGetRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.V1PkiCertificateAuthorityActivePemGetExecute(r)
}

/*
V1PkiCertificateAuthorityActivePemGet Returns active Certificate Authority (CA) in PEM format

Returns active Certificate Authority (CA) in PEM format

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CertificateAuthorityAPIV1PkiCertificateAuthorityActivePemGetRequest
*/
func (a *CertificateAuthorityAPIService) V1PkiCertificateAuthorityActivePemGet(ctx context.Context) CertificateAuthorityAPIV1PkiCertificateAuthorityActivePemGetRequest {
	return CertificateAuthorityAPIV1PkiCertificateAuthorityActivePemGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return *os.File
func (a *CertificateAuthorityAPIService) V1PkiCertificateAuthorityActivePemGetExecute(r CertificateAuthorityAPIV1PkiCertificateAuthorityActivePemGetRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CertificateAuthorityAPIService.V1PkiCertificateAuthorityActivePemGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/pki/certificate-authority/active/pem"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/pem-certificate-chain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CertificateAuthorityAPIV1PkiCertificateAuthorityIdDerGetRequest struct {
	ctx context.Context
	ApiService CertificateAuthorityAPI
	id string
}

func (r CertificateAuthorityAPIV1PkiCertificateAuthorityIdDerGetRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.V1PkiCertificateAuthorityIdDerGetExecute(r)
}

/*
V1PkiCertificateAuthorityIdDerGet Returns X.509 current Certificate Authority (CA) with provided ID in DER format

Returns X.509 current Certificate Authority (CA) with provided ID in DER format

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id UUID of the Certificate Authority (CA)
 @return CertificateAuthorityAPIV1PkiCertificateAuthorityIdDerGetRequest
*/
func (a *CertificateAuthorityAPIService) V1PkiCertificateAuthorityIdDerGet(ctx context.Context, id string) CertificateAuthorityAPIV1PkiCertificateAuthorityIdDerGetRequest {
	return CertificateAuthorityAPIV1PkiCertificateAuthorityIdDerGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return *os.File
func (a *CertificateAuthorityAPIService) V1PkiCertificateAuthorityIdDerGetExecute(r CertificateAuthorityAPIV1PkiCertificateAuthorityIdDerGetRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CertificateAuthorityAPIService.V1PkiCertificateAuthorityIdDerGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/pki/certificate-authority/{id}/der"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/pkix-cert", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CertificateAuthorityAPIV1PkiCertificateAuthorityIdGetRequest struct {
	ctx context.Context
	ApiService CertificateAuthorityAPI
	id string
}

func (r CertificateAuthorityAPIV1PkiCertificateAuthorityIdGetRequest) Execute() (*CertificateRecord, *http.Response, error) {
	return r.ApiService.V1PkiCertificateAuthorityIdGetExecute(r)
}

/*
V1PkiCertificateAuthorityIdGet Returns X.509 details of Certificate Authority (CA) with provided ID

Returns X.509 details of Certificate Authority (CA) with provided ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id UUID of the Certificate Authority (CA)
 @return CertificateAuthorityAPIV1PkiCertificateAuthorityIdGetRequest
*/
func (a *CertificateAuthorityAPIService) V1PkiCertificateAuthorityIdGet(ctx context.Context, id string) CertificateAuthorityAPIV1PkiCertificateAuthorityIdGetRequest {
	return CertificateAuthorityAPIV1PkiCertificateAuthorityIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CertificateRecord
func (a *CertificateAuthorityAPIService) V1PkiCertificateAuthorityIdGetExecute(r CertificateAuthorityAPIV1PkiCertificateAuthorityIdGetRequest) (*CertificateRecord, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CertificateRecord
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CertificateAuthorityAPIService.V1PkiCertificateAuthorityIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/pki/certificate-authority/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CertificateAuthorityAPIV1PkiCertificateAuthorityIdPemGetRequest struct {
	ctx context.Context
	ApiService CertificateAuthorityAPI
	id string
}

func (r CertificateAuthorityAPIV1PkiCertificateAuthorityIdPemGetRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.V1PkiCertificateAuthorityIdPemGetExecute(r)
}

/*
V1PkiCertificateAuthorityIdPemGet Returns current Certificate Authority (CA) with provided ID in PEM format

Returns current Certificate Authority (CA) with provided ID in PEM format

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id UUID of the Certificate Authority (CA)
 @return CertificateAuthorityAPIV1PkiCertificateAuthorityIdPemGetRequest
*/
func (a *CertificateAuthorityAPIService) V1PkiCertificateAuthorityIdPemGet(ctx context.Context, id string) CertificateAuthorityAPIV1PkiCertificateAuthorityIdPemGetRequest {
	return CertificateAuthorityAPIV1PkiCertificateAuthorityIdPemGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return *os.File
func (a *CertificateAuthorityAPIService) V1PkiCertificateAuthorityIdPemGetExecute(r CertificateAuthorityAPIV1PkiCertificateAuthorityIdPemGetRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CertificateAuthorityAPIService.V1PkiCertificateAuthorityIdPemGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/pki/certificate-authority/{id}/pem"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/pem-certificate-chain", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
