/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type JamfProAccountPreferencesAPI interface {

	/*
	V2AccountPreferencesGet Get Jamf Pro account preferences 

	Get Jamf Pro account preferences


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return JamfProAccountPreferencesAPIV2AccountPreferencesGetRequest
	*/
	V2AccountPreferencesGet(ctx context.Context) JamfProAccountPreferencesAPIV2AccountPreferencesGetRequest

	// V2AccountPreferencesGetExecute executes the request
	//  @return AccountPreferencesV5
	V2AccountPreferencesGetExecute(r JamfProAccountPreferencesAPIV2AccountPreferencesGetRequest) (*AccountPreferencesV5, *http.Response, error)

	/*
	V2AccountPreferencesPatch Update Jamf Pro account preferences 

	Update Jamf Pro account preferences


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return JamfProAccountPreferencesAPIV2AccountPreferencesPatchRequest
	*/
	V2AccountPreferencesPatch(ctx context.Context) JamfProAccountPreferencesAPIV2AccountPreferencesPatchRequest

	// V2AccountPreferencesPatchExecute executes the request
	//  @return AccountPreferencesV5
	V2AccountPreferencesPatchExecute(r JamfProAccountPreferencesAPIV2AccountPreferencesPatchRequest) (*AccountPreferencesV5, *http.Response, error)
}

// JamfProAccountPreferencesAPIService JamfProAccountPreferencesAPI service
type JamfProAccountPreferencesAPIService service

type JamfProAccountPreferencesAPIV2AccountPreferencesGetRequest struct {
	ctx context.Context
	ApiService JamfProAccountPreferencesAPI
	acceptLanguage *string
}

// Locale to be used.
func (r JamfProAccountPreferencesAPIV2AccountPreferencesGetRequest) AcceptLanguage(acceptLanguage string) JamfProAccountPreferencesAPIV2AccountPreferencesGetRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r JamfProAccountPreferencesAPIV2AccountPreferencesGetRequest) Execute() (*AccountPreferencesV5, *http.Response, error) {
	return r.ApiService.V2AccountPreferencesGetExecute(r)
}

/*
V2AccountPreferencesGet Get Jamf Pro account preferences 

Get Jamf Pro account preferences


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return JamfProAccountPreferencesAPIV2AccountPreferencesGetRequest
*/
func (a *JamfProAccountPreferencesAPIService) V2AccountPreferencesGet(ctx context.Context) JamfProAccountPreferencesAPIV2AccountPreferencesGetRequest {
	return JamfProAccountPreferencesAPIV2AccountPreferencesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AccountPreferencesV5
func (a *JamfProAccountPreferencesAPIService) V2AccountPreferencesGetExecute(r JamfProAccountPreferencesAPIV2AccountPreferencesGetRequest) (*AccountPreferencesV5, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountPreferencesV5
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JamfProAccountPreferencesAPIService.V2AccountPreferencesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/account-preferences"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type JamfProAccountPreferencesAPIV2AccountPreferencesPatchRequest struct {
	ctx context.Context
	ApiService JamfProAccountPreferencesAPI
	acceptLanguage *string
	jSESSIONID *string
	accountPreferencesV5 *AccountPreferencesV5
}

// Locale to be used, when user has not defined preferred language.
func (r JamfProAccountPreferencesAPIV2AccountPreferencesPatchRequest) AcceptLanguage(acceptLanguage string) JamfProAccountPreferencesAPIV2AccountPreferencesPatchRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

// Session cookie, that&#39;s used to determine user session where account preferences should be refreshed
func (r JamfProAccountPreferencesAPIV2AccountPreferencesPatchRequest) JSESSIONID(jSESSIONID string) JamfProAccountPreferencesAPIV2AccountPreferencesPatchRequest {
	r.jSESSIONID = &jSESSIONID
	return r
}

func (r JamfProAccountPreferencesAPIV2AccountPreferencesPatchRequest) AccountPreferencesV5(accountPreferencesV5 AccountPreferencesV5) JamfProAccountPreferencesAPIV2AccountPreferencesPatchRequest {
	r.accountPreferencesV5 = &accountPreferencesV5
	return r
}

func (r JamfProAccountPreferencesAPIV2AccountPreferencesPatchRequest) Execute() (*AccountPreferencesV5, *http.Response, error) {
	return r.ApiService.V2AccountPreferencesPatchExecute(r)
}

/*
V2AccountPreferencesPatch Update Jamf Pro account preferences 

Update Jamf Pro account preferences


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return JamfProAccountPreferencesAPIV2AccountPreferencesPatchRequest
*/
func (a *JamfProAccountPreferencesAPIService) V2AccountPreferencesPatch(ctx context.Context) JamfProAccountPreferencesAPIV2AccountPreferencesPatchRequest {
	return JamfProAccountPreferencesAPIV2AccountPreferencesPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AccountPreferencesV5
func (a *JamfProAccountPreferencesAPIService) V2AccountPreferencesPatchExecute(r JamfProAccountPreferencesAPIV2AccountPreferencesPatchRequest) (*AccountPreferencesV5, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountPreferencesV5
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JamfProAccountPreferencesAPIService.V2AccountPreferencesPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/account-preferences"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.accountPreferencesV5
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
