/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"os"
)


type SsoSettingsAPI interface {

	/*
	V1SsoDependenciesGet Retrieve the list of Enrollment Customizations using SSO 

	Retrieves the list of Enrollment Customizations using SSO

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SsoSettingsAPIV1SsoDependenciesGetRequest
	*/
	V1SsoDependenciesGet(ctx context.Context) SsoSettingsAPIV1SsoDependenciesGetRequest

	// V1SsoDependenciesGetExecute executes the request
	//  @return EnrollmentCustomizationDependencies
	V1SsoDependenciesGetExecute(r SsoSettingsAPIV1SsoDependenciesGetRequest) (*EnrollmentCustomizationDependencies, *http.Response, error)

	/*
	V1SsoDisablePost Disable SSO 

	Disable SSO

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SsoSettingsAPIV1SsoDisablePostRequest
	*/
	V1SsoDisablePost(ctx context.Context) SsoSettingsAPIV1SsoDisablePostRequest

	// V1SsoDisablePostExecute executes the request
	V1SsoDisablePostExecute(r SsoSettingsAPIV1SsoDisablePostRequest) (*http.Response, error)

	/*
	V1SsoGet Retrieve the current Single Sign On configuration settings 

	Retrieves the current Single Sign On configuration settings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SsoSettingsAPIV1SsoGetRequest
	*/
	V1SsoGet(ctx context.Context) SsoSettingsAPIV1SsoGetRequest

	// V1SsoGetExecute executes the request
	//  @return SsoSettings
	V1SsoGetExecute(r SsoSettingsAPIV1SsoGetRequest) (*SsoSettings, *http.Response, error)

	/*
	V1SsoHistoryGet Get SSO history object 

	Gets SSO history object


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SsoSettingsAPIV1SsoHistoryGetRequest
	*/
	V1SsoHistoryGet(ctx context.Context) SsoSettingsAPIV1SsoHistoryGetRequest

	// V1SsoHistoryGetExecute executes the request
	//  @return HistorySearchResults
	V1SsoHistoryGetExecute(r SsoSettingsAPIV1SsoHistoryGetRequest) (*HistorySearchResults, *http.Response, error)

	/*
	V1SsoHistoryPost Add SSO history object notes 

	Adds SSO history object notes

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SsoSettingsAPIV1SsoHistoryPostRequest
	*/
	V1SsoHistoryPost(ctx context.Context) SsoSettingsAPIV1SsoHistoryPostRequest

	// V1SsoHistoryPostExecute executes the request
	//  @return HrefResponse
	V1SsoHistoryPostExecute(r SsoSettingsAPIV1SsoHistoryPostRequest) (*HrefResponse, *http.Response, error)

	/*
	V1SsoMetadataDownloadGet Download the Jamf Pro SAML metadata file 

	Download the Jamf Pro SAML metadata file

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SsoSettingsAPIV1SsoMetadataDownloadGetRequest
	*/
	V1SsoMetadataDownloadGet(ctx context.Context) SsoSettingsAPIV1SsoMetadataDownloadGetRequest

	// V1SsoMetadataDownloadGetExecute executes the request
	//  @return *os.File
	V1SsoMetadataDownloadGetExecute(r SsoSettingsAPIV1SsoMetadataDownloadGetRequest) (*os.File, *http.Response, error)

	/*
	V1SsoPut Updates the current Single Sign On configuration settings 

	Updates the current Single Sign On configuration settings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SsoSettingsAPIV1SsoPutRequest
	*/
	V1SsoPut(ctx context.Context) SsoSettingsAPIV1SsoPutRequest

	// V1SsoPutExecute executes the request
	//  @return SsoSettings
	V1SsoPutExecute(r SsoSettingsAPIV1SsoPutRequest) (*SsoSettings, *http.Response, error)

	/*
	V1SsoValidatePost Endpoint for validation of a saml metadata url 

	Validation of a content available under provided metadata URL.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SsoSettingsAPIV1SsoValidatePostRequest
	*/
	V1SsoValidatePost(ctx context.Context) SsoSettingsAPIV1SsoValidatePostRequest

	// V1SsoValidatePostExecute executes the request
	V1SsoValidatePostExecute(r SsoSettingsAPIV1SsoValidatePostRequest) (*http.Response, error)
}

// SsoSettingsAPIService SsoSettingsAPI service
type SsoSettingsAPIService service

type SsoSettingsAPIV1SsoDependenciesGetRequest struct {
	ctx context.Context
	ApiService SsoSettingsAPI
}

func (r SsoSettingsAPIV1SsoDependenciesGetRequest) Execute() (*EnrollmentCustomizationDependencies, *http.Response, error) {
	return r.ApiService.V1SsoDependenciesGetExecute(r)
}

/*
V1SsoDependenciesGet Retrieve the list of Enrollment Customizations using SSO 

Retrieves the list of Enrollment Customizations using SSO

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SsoSettingsAPIV1SsoDependenciesGetRequest
*/
func (a *SsoSettingsAPIService) V1SsoDependenciesGet(ctx context.Context) SsoSettingsAPIV1SsoDependenciesGetRequest {
	return SsoSettingsAPIV1SsoDependenciesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EnrollmentCustomizationDependencies
func (a *SsoSettingsAPIService) V1SsoDependenciesGetExecute(r SsoSettingsAPIV1SsoDependenciesGetRequest) (*EnrollmentCustomizationDependencies, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnrollmentCustomizationDependencies
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SsoSettingsAPIService.V1SsoDependenciesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/sso/dependencies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SsoSettingsAPIV1SsoDisablePostRequest struct {
	ctx context.Context
	ApiService SsoSettingsAPI
}

func (r SsoSettingsAPIV1SsoDisablePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1SsoDisablePostExecute(r)
}

/*
V1SsoDisablePost Disable SSO 

Disable SSO

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SsoSettingsAPIV1SsoDisablePostRequest
*/
func (a *SsoSettingsAPIService) V1SsoDisablePost(ctx context.Context) SsoSettingsAPIV1SsoDisablePostRequest {
	return SsoSettingsAPIV1SsoDisablePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SsoSettingsAPIService) V1SsoDisablePostExecute(r SsoSettingsAPIV1SsoDisablePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SsoSettingsAPIService.V1SsoDisablePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/sso/disable"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SsoSettingsAPIV1SsoGetRequest struct {
	ctx context.Context
	ApiService SsoSettingsAPI
}

func (r SsoSettingsAPIV1SsoGetRequest) Execute() (*SsoSettings, *http.Response, error) {
	return r.ApiService.V1SsoGetExecute(r)
}

/*
V1SsoGet Retrieve the current Single Sign On configuration settings 

Retrieves the current Single Sign On configuration settings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SsoSettingsAPIV1SsoGetRequest
*/
func (a *SsoSettingsAPIService) V1SsoGet(ctx context.Context) SsoSettingsAPIV1SsoGetRequest {
	return SsoSettingsAPIV1SsoGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SsoSettings
func (a *SsoSettingsAPIService) V1SsoGetExecute(r SsoSettingsAPIV1SsoGetRequest) (*SsoSettings, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SsoSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SsoSettingsAPIService.V1SsoGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/sso"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SsoSettingsAPIV1SsoHistoryGetRequest struct {
	ctx context.Context
	ApiService SsoSettingsAPI
	page *int32
	pageSize *int32
	sort *[]string
	filter *string
}

func (r SsoSettingsAPIV1SsoHistoryGetRequest) Page(page int32) SsoSettingsAPIV1SsoHistoryGetRequest {
	r.page = &page
	return r
}

func (r SsoSettingsAPIV1SsoHistoryGetRequest) PageSize(pageSize int32) SsoSettingsAPIV1SsoHistoryGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Default sort is date:desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc 
func (r SsoSettingsAPIV1SsoHistoryGetRequest) Sort(sort []string) SsoSettingsAPIV1SsoHistoryGetRequest {
	r.sort = &sort
	return r
}

// Query in the RSQL format, allowing to filter history notes collection. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: username, date, note, details. This param can be combined with paging and sorting. Example: filter&#x3D;username!&#x3D;admin and details&#x3D;&#x3D;*disabled* and date&lt;2019-12-15
func (r SsoSettingsAPIV1SsoHistoryGetRequest) Filter(filter string) SsoSettingsAPIV1SsoHistoryGetRequest {
	r.filter = &filter
	return r
}

func (r SsoSettingsAPIV1SsoHistoryGetRequest) Execute() (*HistorySearchResults, *http.Response, error) {
	return r.ApiService.V1SsoHistoryGetExecute(r)
}

/*
V1SsoHistoryGet Get SSO history object 

Gets SSO history object


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SsoSettingsAPIV1SsoHistoryGetRequest
*/
func (a *SsoSettingsAPIService) V1SsoHistoryGet(ctx context.Context) SsoSettingsAPIV1SsoHistoryGetRequest {
	return SsoSettingsAPIV1SsoHistoryGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HistorySearchResults
func (a *SsoSettingsAPIService) V1SsoHistoryGetExecute(r SsoSettingsAPIV1SsoHistoryGetRequest) (*HistorySearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HistorySearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SsoSettingsAPIService.V1SsoHistoryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/sso/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		defaultValue := []string{"id:desc"}
		r.sort = &defaultValue
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	} else {
		var defaultValue string = ""
		r.filter = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SsoSettingsAPIV1SsoHistoryPostRequest struct {
	ctx context.Context
	ApiService SsoSettingsAPI
	objectHistoryNote *ObjectHistoryNote
}

// history notes to create
func (r SsoSettingsAPIV1SsoHistoryPostRequest) ObjectHistoryNote(objectHistoryNote ObjectHistoryNote) SsoSettingsAPIV1SsoHistoryPostRequest {
	r.objectHistoryNote = &objectHistoryNote
	return r
}

func (r SsoSettingsAPIV1SsoHistoryPostRequest) Execute() (*HrefResponse, *http.Response, error) {
	return r.ApiService.V1SsoHistoryPostExecute(r)
}

/*
V1SsoHistoryPost Add SSO history object notes 

Adds SSO history object notes

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SsoSettingsAPIV1SsoHistoryPostRequest
*/
func (a *SsoSettingsAPIService) V1SsoHistoryPost(ctx context.Context) SsoSettingsAPIV1SsoHistoryPostRequest {
	return SsoSettingsAPIV1SsoHistoryPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HrefResponse
func (a *SsoSettingsAPIService) V1SsoHistoryPostExecute(r SsoSettingsAPIV1SsoHistoryPostRequest) (*HrefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HrefResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SsoSettingsAPIService.V1SsoHistoryPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/sso/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.objectHistoryNote == nil {
		return localVarReturnValue, nil, reportError("objectHistoryNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.objectHistoryNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SsoSettingsAPIV1SsoMetadataDownloadGetRequest struct {
	ctx context.Context
	ApiService SsoSettingsAPI
}

func (r SsoSettingsAPIV1SsoMetadataDownloadGetRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.V1SsoMetadataDownloadGetExecute(r)
}

/*
V1SsoMetadataDownloadGet Download the Jamf Pro SAML metadata file 

Download the Jamf Pro SAML metadata file

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SsoSettingsAPIV1SsoMetadataDownloadGetRequest
*/
func (a *SsoSettingsAPIService) V1SsoMetadataDownloadGet(ctx context.Context) SsoSettingsAPIV1SsoMetadataDownloadGetRequest {
	return SsoSettingsAPIV1SsoMetadataDownloadGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return *os.File
func (a *SsoSettingsAPIService) V1SsoMetadataDownloadGetExecute(r SsoSettingsAPIV1SsoMetadataDownloadGetRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SsoSettingsAPIService.V1SsoMetadataDownloadGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/sso/metadata/download"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SsoSettingsAPIV1SsoPutRequest struct {
	ctx context.Context
	ApiService SsoSettingsAPI
	ssoSettings *SsoSettings
}

func (r SsoSettingsAPIV1SsoPutRequest) SsoSettings(ssoSettings SsoSettings) SsoSettingsAPIV1SsoPutRequest {
	r.ssoSettings = &ssoSettings
	return r
}

func (r SsoSettingsAPIV1SsoPutRequest) Execute() (*SsoSettings, *http.Response, error) {
	return r.ApiService.V1SsoPutExecute(r)
}

/*
V1SsoPut Updates the current Single Sign On configuration settings 

Updates the current Single Sign On configuration settings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SsoSettingsAPIV1SsoPutRequest
*/
func (a *SsoSettingsAPIService) V1SsoPut(ctx context.Context) SsoSettingsAPIV1SsoPutRequest {
	return SsoSettingsAPIV1SsoPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SsoSettings
func (a *SsoSettingsAPIService) V1SsoPutExecute(r SsoSettingsAPIV1SsoPutRequest) (*SsoSettings, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SsoSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SsoSettingsAPIService.V1SsoPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/sso"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ssoSettings == nil {
		return localVarReturnValue, nil, reportError("ssoSettings is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ssoSettings
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SsoSettingsAPIV1SsoValidatePostRequest struct {
	ctx context.Context
	ApiService SsoSettingsAPI
	ssoMetadataUrl *SsoMetadataUrl
}

// url to validate
func (r SsoSettingsAPIV1SsoValidatePostRequest) SsoMetadataUrl(ssoMetadataUrl SsoMetadataUrl) SsoSettingsAPIV1SsoValidatePostRequest {
	r.ssoMetadataUrl = &ssoMetadataUrl
	return r
}

func (r SsoSettingsAPIV1SsoValidatePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1SsoValidatePostExecute(r)
}

/*
V1SsoValidatePost Endpoint for validation of a saml metadata url 

Validation of a content available under provided metadata URL.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SsoSettingsAPIV1SsoValidatePostRequest
*/
func (a *SsoSettingsAPIService) V1SsoValidatePost(ctx context.Context) SsoSettingsAPIV1SsoValidatePostRequest {
	return SsoSettingsAPIV1SsoValidatePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SsoSettingsAPIService) V1SsoValidatePostExecute(r SsoSettingsAPIV1SsoValidatePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SsoSettingsAPIService.V1SsoValidatePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/sso/validate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ssoMetadataUrl == nil {
		return nil, reportError("ssoMetadataUrl is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ssoMetadataUrl
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
