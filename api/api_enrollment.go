/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type EnrollmentAPI interface {

	/*
	V1AdueSessionTokenSettingsGet Retrieve the Account Driven User Enrollment Session Token Settings 

	Retrieve the Account Driven User Enrollment Session Token Settings


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnrollmentAPIV1AdueSessionTokenSettingsGetRequest
	*/
	V1AdueSessionTokenSettingsGet(ctx context.Context) EnrollmentAPIV1AdueSessionTokenSettingsGetRequest

	// V1AdueSessionTokenSettingsGetExecute executes the request
	//  @return AccountDrivenUserEnrollmentSessionTokenSettings
	V1AdueSessionTokenSettingsGetExecute(r EnrollmentAPIV1AdueSessionTokenSettingsGetRequest) (*AccountDrivenUserEnrollmentSessionTokenSettings, *http.Response, error)

	/*
	V1AdueSessionTokenSettingsPut Update Account Driven User Enrollment Session Token Settings. 

	Update the Account Driven User Enrollment Session Token Settings object.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnrollmentAPIV1AdueSessionTokenSettingsPutRequest
	*/
	V1AdueSessionTokenSettingsPut(ctx context.Context) EnrollmentAPIV1AdueSessionTokenSettingsPutRequest

	// V1AdueSessionTokenSettingsPutExecute executes the request
	//  @return AccountDrivenUserEnrollmentSessionTokenSettings
	V1AdueSessionTokenSettingsPutExecute(r EnrollmentAPIV1AdueSessionTokenSettingsPutRequest) (*AccountDrivenUserEnrollmentSessionTokenSettings, *http.Response, error)

	/*
	V2EnrollmentAccessGroupsGet Retrieve the configured LDAP groups configured for User-Initiated Enrollment 

	Retrieves the configured LDAP groups configured for User-Initiated Enrollment.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnrollmentAPIV2EnrollmentAccessGroupsGetRequest

	Deprecated
	*/
	V2EnrollmentAccessGroupsGet(ctx context.Context) EnrollmentAPIV2EnrollmentAccessGroupsGetRequest

	// V2EnrollmentAccessGroupsGetExecute executes the request
	//  @return AccessGroupsV2SearchResults
	// Deprecated
	V2EnrollmentAccessGroupsGetExecute(r EnrollmentAPIV2EnrollmentAccessGroupsGetRequest) (*AccessGroupsV2SearchResults, *http.Response, error)

	/*
	V2EnrollmentAccessGroupsPost Add the configured LDAP group for User-Initiated Enrollment. 

	Add the configured LDAP group for User-Initiated Enrollment.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnrollmentAPIV2EnrollmentAccessGroupsPostRequest

	Deprecated
	*/
	V2EnrollmentAccessGroupsPost(ctx context.Context) EnrollmentAPIV2EnrollmentAccessGroupsPostRequest

	// V2EnrollmentAccessGroupsPostExecute executes the request
	//  @return HrefResponse
	// Deprecated
	V2EnrollmentAccessGroupsPostExecute(r EnrollmentAPIV2EnrollmentAccessGroupsPostRequest) (*HrefResponse, *http.Response, error)

	/*
	V2EnrollmentAccessGroupsServerIdGroupIdDelete Delete an LDAP group's access to user initiated Enrollment 

	Deletes an LDAP group's access to user initiated enrollment. The group "All LDAP Users" cannot be deleted, but it can be modified to disallow User-Initiated Enrollment.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serverId LDAP server id
	@param groupId LDAP group id.
	@return EnrollmentAPIV2EnrollmentAccessGroupsServerIdGroupIdDeleteRequest

	Deprecated
	*/
	V2EnrollmentAccessGroupsServerIdGroupIdDelete(ctx context.Context, serverId string, groupId string) EnrollmentAPIV2EnrollmentAccessGroupsServerIdGroupIdDeleteRequest

	// V2EnrollmentAccessGroupsServerIdGroupIdDeleteExecute executes the request
	// Deprecated
	V2EnrollmentAccessGroupsServerIdGroupIdDeleteExecute(r EnrollmentAPIV2EnrollmentAccessGroupsServerIdGroupIdDeleteRequest) (*http.Response, error)

	/*
	V2EnrollmentAccessGroupsServerIdGroupIdGet Retrieve the configured LDAP groups configured for User-Initiated Enrollment 

	Retrieves the configured LDAP groups configured for User-Initiated Enrollment.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serverId LDAP server id.
	@param groupId LDAP group id.
	@return EnrollmentAPIV2EnrollmentAccessGroupsServerIdGroupIdGetRequest

	Deprecated
	*/
	V2EnrollmentAccessGroupsServerIdGroupIdGet(ctx context.Context, serverId string, groupId string) EnrollmentAPIV2EnrollmentAccessGroupsServerIdGroupIdGetRequest

	// V2EnrollmentAccessGroupsServerIdGroupIdGetExecute executes the request
	//  @return EnrollmentAccessGroupV2
	// Deprecated
	V2EnrollmentAccessGroupsServerIdGroupIdGetExecute(r EnrollmentAPIV2EnrollmentAccessGroupsServerIdGroupIdGetRequest) (*EnrollmentAccessGroupV2, *http.Response, error)

	/*
	V2EnrollmentAccessGroupsServerIdGroupIdPut Modify the configured LDAP groups configured for User-Initiated Enrollment 

	Modifies the configured LDAP groups configured for User-Initiated Enrollment.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serverId LDAP server id.
	@param groupId LDAP group id.
	@return EnrollmentAPIV2EnrollmentAccessGroupsServerIdGroupIdPutRequest

	Deprecated
	*/
	V2EnrollmentAccessGroupsServerIdGroupIdPut(ctx context.Context, serverId string, groupId string) EnrollmentAPIV2EnrollmentAccessGroupsServerIdGroupIdPutRequest

	// V2EnrollmentAccessGroupsServerIdGroupIdPutExecute executes the request
	//  @return EnrollmentAccessGroupV2
	// Deprecated
	V2EnrollmentAccessGroupsServerIdGroupIdPutExecute(r EnrollmentAPIV2EnrollmentAccessGroupsServerIdGroupIdPutRequest) (*EnrollmentAccessGroupV2, *http.Response, error)

	/*
	V2EnrollmentFilteredLanguageCodesGet Retrieve the list of languages and corresponding ISO 639-1 Codes but only those not already added to Enrollment 

	Retrieves the list of languages and corresponding ISO 639-1 Codes, but only those not already added to Enrollment.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnrollmentAPIV2EnrollmentFilteredLanguageCodesGetRequest

	Deprecated
	*/
	V2EnrollmentFilteredLanguageCodesGet(ctx context.Context) EnrollmentAPIV2EnrollmentFilteredLanguageCodesGetRequest

	// V2EnrollmentFilteredLanguageCodesGetExecute executes the request
	//  @return []LanguageCode
	// Deprecated
	V2EnrollmentFilteredLanguageCodesGetExecute(r EnrollmentAPIV2EnrollmentFilteredLanguageCodesGetRequest) ([]LanguageCode, *http.Response, error)

	/*
	V2EnrollmentGet Get Enrollment object and Re-enrollment settings 

	Gets Enrollment object and re-enrollment settings. The settings can be altered without providing the existing management password by providing the following value for `managementPassword`:
`\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff`.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnrollmentAPIV2EnrollmentGetRequest

	Deprecated
	*/
	V2EnrollmentGet(ctx context.Context) EnrollmentAPIV2EnrollmentGetRequest

	// V2EnrollmentGetExecute executes the request
	//  @return EnrollmentSettingsV2
	// Deprecated
	V2EnrollmentGetExecute(r EnrollmentAPIV2EnrollmentGetRequest) (*EnrollmentSettingsV2, *http.Response, error)

	/*
	V2EnrollmentHistoryExportPost Export enrollment history collection 

	Export enrollment history collection


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnrollmentAPIV2EnrollmentHistoryExportPostRequest
	*/
	V2EnrollmentHistoryExportPost(ctx context.Context) EnrollmentAPIV2EnrollmentHistoryExportPostRequest

	// V2EnrollmentHistoryExportPostExecute executes the request
	//  @return interface{}
	V2EnrollmentHistoryExportPostExecute(r EnrollmentAPIV2EnrollmentHistoryExportPostRequest) (interface{}, *http.Response, error)

	/*
	V2EnrollmentHistoryGet Get sorted and paged Enrollment history object 

	Gets sorted and paged Enrollment history object


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnrollmentAPIV2EnrollmentHistoryGetRequest
	*/
	V2EnrollmentHistoryGet(ctx context.Context) EnrollmentAPIV2EnrollmentHistoryGetRequest

	// V2EnrollmentHistoryGetExecute executes the request
	//  @return HistorySearchResults
	V2EnrollmentHistoryGetExecute(r EnrollmentAPIV2EnrollmentHistoryGetRequest) (*HistorySearchResults, *http.Response, error)

	/*
	V2EnrollmentHistoryPost Add Enrollment history object notes 

	Adds Enrollment history object notes


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnrollmentAPIV2EnrollmentHistoryPostRequest
	*/
	V2EnrollmentHistoryPost(ctx context.Context) EnrollmentAPIV2EnrollmentHistoryPostRequest

	// V2EnrollmentHistoryPostExecute executes the request
	//  @return HrefResponse
	V2EnrollmentHistoryPostExecute(r EnrollmentAPIV2EnrollmentHistoryPostRequest) (*HrefResponse, *http.Response, error)

	/*
	V2EnrollmentLanguageCodesGet Retrieve the list of languages and corresponding ISO 639-1 Codes 

	Retrieves the list of languages and corresponding ISO 639-1 Codes.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnrollmentAPIV2EnrollmentLanguageCodesGetRequest

	Deprecated
	*/
	V2EnrollmentLanguageCodesGet(ctx context.Context) EnrollmentAPIV2EnrollmentLanguageCodesGetRequest

	// V2EnrollmentLanguageCodesGetExecute executes the request
	//  @return []LanguageCode
	// Deprecated
	V2EnrollmentLanguageCodesGetExecute(r EnrollmentAPIV2EnrollmentLanguageCodesGetRequest) ([]LanguageCode, *http.Response, error)

	/*
	V2EnrollmentLanguagesDeleteMultiplePost Delete multiple configured languages from User-Initiated Enrollment settings 

	Delete multiple configured languages from User-Initiated Enrollment settings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnrollmentAPIV2EnrollmentLanguagesDeleteMultiplePostRequest

	Deprecated
	*/
	V2EnrollmentLanguagesDeleteMultiplePost(ctx context.Context) EnrollmentAPIV2EnrollmentLanguagesDeleteMultiplePostRequest

	// V2EnrollmentLanguagesDeleteMultiplePostExecute executes the request
	// Deprecated
	V2EnrollmentLanguagesDeleteMultiplePostExecute(r EnrollmentAPIV2EnrollmentLanguagesDeleteMultiplePostRequest) (*http.Response, error)

	/*
	V2EnrollmentLanguagesGet Get an array of the language codes that have Enrollment messaging 

	Returns an array of the language codes that have enrollment messaging currently configured.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnrollmentAPIV2EnrollmentLanguagesGetRequest

	Deprecated
	*/
	V2EnrollmentLanguagesGet(ctx context.Context) EnrollmentAPIV2EnrollmentLanguagesGetRequest

	// V2EnrollmentLanguagesGetExecute executes the request
	//  @return ProcessTextsSearchResults
	// Deprecated
	V2EnrollmentLanguagesGetExecute(r EnrollmentAPIV2EnrollmentLanguagesGetRequest) (*ProcessTextsSearchResults, *http.Response, error)

	/*
	V2EnrollmentLanguagesLanguageIdDelete Delete the Enrollment messaging for a language 

	Delete the enrollment messaging for a language.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param languageId Two letter ISO 639-1 Language Code
	@return EnrollmentAPIV2EnrollmentLanguagesLanguageIdDeleteRequest

	Deprecated
	*/
	V2EnrollmentLanguagesLanguageIdDelete(ctx context.Context, languageId string) EnrollmentAPIV2EnrollmentLanguagesLanguageIdDeleteRequest

	// V2EnrollmentLanguagesLanguageIdDeleteExecute executes the request
	// Deprecated
	V2EnrollmentLanguagesLanguageIdDeleteExecute(r EnrollmentAPIV2EnrollmentLanguagesLanguageIdDeleteRequest) (*http.Response, error)

	/*
	V2EnrollmentLanguagesLanguageIdGet Retrieve the Enrollment messaging for a language 

	Retrieves the enrollment messaging for a language.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param languageId Two letter ISO 639-1 Language Code
	@return EnrollmentAPIV2EnrollmentLanguagesLanguageIdGetRequest

	Deprecated
	*/
	V2EnrollmentLanguagesLanguageIdGet(ctx context.Context, languageId string) EnrollmentAPIV2EnrollmentLanguagesLanguageIdGetRequest

	// V2EnrollmentLanguagesLanguageIdGetExecute executes the request
	//  @return EnrollmentProcessTextObject
	// Deprecated
	V2EnrollmentLanguagesLanguageIdGetExecute(r EnrollmentAPIV2EnrollmentLanguagesLanguageIdGetRequest) (*EnrollmentProcessTextObject, *http.Response, error)

	/*
	V2EnrollmentLanguagesLanguageIdPut Edit Enrollment messaging for a language 

	Edit enrollment messaging for a language.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param languageId Two letter ISO 639-1 Language Code
	@return EnrollmentAPIV2EnrollmentLanguagesLanguageIdPutRequest

	Deprecated
	*/
	V2EnrollmentLanguagesLanguageIdPut(ctx context.Context, languageId string) EnrollmentAPIV2EnrollmentLanguagesLanguageIdPutRequest

	// V2EnrollmentLanguagesLanguageIdPutExecute executes the request
	//  @return EnrollmentProcessTextObject
	// Deprecated
	V2EnrollmentLanguagesLanguageIdPutExecute(r EnrollmentAPIV2EnrollmentLanguagesLanguageIdPutRequest) (*EnrollmentProcessTextObject, *http.Response, error)

	/*
	V2EnrollmentPut Update Enrollment object 

	Update enrollment object. Regarding the `developerCertificateIdentity`,
if this object is omitted, the certificate will not be deleted from Jamf Pro.
The `identityKeystore` is the entire cert file as a base64 encoded string. The
`md5Sum` field is not required in the PUT request, but is calculated and returned
in the response.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnrollmentAPIV2EnrollmentPutRequest

	Deprecated
	*/
	V2EnrollmentPut(ctx context.Context) EnrollmentAPIV2EnrollmentPutRequest

	// V2EnrollmentPutExecute executes the request
	//  @return EnrollmentSettingsV2
	// Deprecated
	V2EnrollmentPutExecute(r EnrollmentAPIV2EnrollmentPutRequest) (*EnrollmentSettingsV2, *http.Response, error)

	/*
	V3EnrollmentAccessGroupsGet Retrieve the configured LDAP groups configured for User-Initiated Enrollment. 

	Retrieves the configured LDAP groups configured for User-Initiated Enrollment.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnrollmentAPIV3EnrollmentAccessGroupsGetRequest
	*/
	V3EnrollmentAccessGroupsGet(ctx context.Context) EnrollmentAPIV3EnrollmentAccessGroupsGetRequest

	// V3EnrollmentAccessGroupsGetExecute executes the request
	//  @return AccessGroupsPreviewSearchResults
	V3EnrollmentAccessGroupsGetExecute(r EnrollmentAPIV3EnrollmentAccessGroupsGetRequest) (*AccessGroupsPreviewSearchResults, *http.Response, error)

	/*
	V3EnrollmentAccessGroupsIdDelete Delete an LDAP group's access to user initiated Enrollment. 

	Deletes an LDAP group's access to user initiated enrollment. The group "All LDAP Users" cannot be deleted, but it can be modified to disallow User-Initiated Enrollment.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Autogenerated Access Group ID.
	@return EnrollmentAPIV3EnrollmentAccessGroupsIdDeleteRequest
	*/
	V3EnrollmentAccessGroupsIdDelete(ctx context.Context, id string) EnrollmentAPIV3EnrollmentAccessGroupsIdDeleteRequest

	// V3EnrollmentAccessGroupsIdDeleteExecute executes the request
	V3EnrollmentAccessGroupsIdDeleteExecute(r EnrollmentAPIV3EnrollmentAccessGroupsIdDeleteRequest) (*http.Response, error)

	/*
	V3EnrollmentAccessGroupsIdGet Retrieve the configured LDAP groups configured for User-Initiated Enrollment 

	Retrieves the configured LDAP groups configured for User-Initiated Enrollment.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Autogenerated Access Group ID.
	@return EnrollmentAPIV3EnrollmentAccessGroupsIdGetRequest
	*/
	V3EnrollmentAccessGroupsIdGet(ctx context.Context, id string) EnrollmentAPIV3EnrollmentAccessGroupsIdGetRequest

	// V3EnrollmentAccessGroupsIdGetExecute executes the request
	//  @return EnrollmentAccessGroupPreview
	V3EnrollmentAccessGroupsIdGetExecute(r EnrollmentAPIV3EnrollmentAccessGroupsIdGetRequest) (*EnrollmentAccessGroupPreview, *http.Response, error)

	/*
	V3EnrollmentAccessGroupsIdPut Modify the configured LDAP groups configured for User-Initiated Enrollment. Only exiting Access Groups can be updated. 

	Modify the configured LDAP groups configured for User-Initiated Enrollment. Only exiting Access Groups can be updated.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Autogenerated Access Group ID.
	@return EnrollmentAPIV3EnrollmentAccessGroupsIdPutRequest
	*/
	V3EnrollmentAccessGroupsIdPut(ctx context.Context, id string) EnrollmentAPIV3EnrollmentAccessGroupsIdPutRequest

	// V3EnrollmentAccessGroupsIdPutExecute executes the request
	//  @return EnrollmentAccessGroupPreview
	V3EnrollmentAccessGroupsIdPutExecute(r EnrollmentAPIV3EnrollmentAccessGroupsIdPutRequest) (*EnrollmentAccessGroupPreview, *http.Response, error)

	/*
	V3EnrollmentAccessGroupsPost Add the configured LDAP group for User-Initiated Enrollment. 

	Add the configured LDAP group for User-Initiated Enrollment.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnrollmentAPIV3EnrollmentAccessGroupsPostRequest
	*/
	V3EnrollmentAccessGroupsPost(ctx context.Context) EnrollmentAPIV3EnrollmentAccessGroupsPostRequest

	// V3EnrollmentAccessGroupsPostExecute executes the request
	//  @return HrefResponse
	V3EnrollmentAccessGroupsPostExecute(r EnrollmentAPIV3EnrollmentAccessGroupsPostRequest) (*HrefResponse, *http.Response, error)

	/*
	V3EnrollmentFilteredLanguageCodesGet Retrieve the list of languages and corresponding ISO 639-1 Codes but only those not already added to Enrollment 

	Retrieves the list of languages and corresponding ISO 639-1 Codes, but only those not already added to Enrollment.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnrollmentAPIV3EnrollmentFilteredLanguageCodesGetRequest
	*/
	V3EnrollmentFilteredLanguageCodesGet(ctx context.Context) EnrollmentAPIV3EnrollmentFilteredLanguageCodesGetRequest

	// V3EnrollmentFilteredLanguageCodesGetExecute executes the request
	//  @return []LanguageCode
	V3EnrollmentFilteredLanguageCodesGetExecute(r EnrollmentAPIV3EnrollmentFilteredLanguageCodesGetRequest) ([]LanguageCode, *http.Response, error)

	/*
	V3EnrollmentGet Get Enrollment object and Re-enrollment settings 

	Gets Enrollment object and re-enrollment settings. The settings can be altered without providing the existing management password by providing the following value for `managementPassword`:
`\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff`.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnrollmentAPIV3EnrollmentGetRequest
	*/
	V3EnrollmentGet(ctx context.Context) EnrollmentAPIV3EnrollmentGetRequest

	// V3EnrollmentGetExecute executes the request
	//  @return EnrollmentSettingsV3
	V3EnrollmentGetExecute(r EnrollmentAPIV3EnrollmentGetRequest) (*EnrollmentSettingsV3, *http.Response, error)

	/*
	V3EnrollmentLanguageCodesGet Retrieve the list of languages and corresponding ISO 639-1 Codes 

	Retrieves the list of languages and corresponding ISO 639-1 Codes.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnrollmentAPIV3EnrollmentLanguageCodesGetRequest
	*/
	V3EnrollmentLanguageCodesGet(ctx context.Context) EnrollmentAPIV3EnrollmentLanguageCodesGetRequest

	// V3EnrollmentLanguageCodesGetExecute executes the request
	//  @return []LanguageCode
	V3EnrollmentLanguageCodesGetExecute(r EnrollmentAPIV3EnrollmentLanguageCodesGetRequest) ([]LanguageCode, *http.Response, error)

	/*
	V3EnrollmentLanguagesDeleteMultiplePost Delete multiple configured languages from User-Initiated Enrollment settings 

	Delete multiple configured languages from User-Initiated Enrollment settings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnrollmentAPIV3EnrollmentLanguagesDeleteMultiplePostRequest
	*/
	V3EnrollmentLanguagesDeleteMultiplePost(ctx context.Context) EnrollmentAPIV3EnrollmentLanguagesDeleteMultiplePostRequest

	// V3EnrollmentLanguagesDeleteMultiplePostExecute executes the request
	V3EnrollmentLanguagesDeleteMultiplePostExecute(r EnrollmentAPIV3EnrollmentLanguagesDeleteMultiplePostRequest) (*http.Response, error)

	/*
	V3EnrollmentLanguagesGet Get an array of the language codes that have Enrollment messaging 

	Returns an array of the language codes that have enrollment messaging currently configured.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnrollmentAPIV3EnrollmentLanguagesGetRequest
	*/
	V3EnrollmentLanguagesGet(ctx context.Context) EnrollmentAPIV3EnrollmentLanguagesGetRequest

	// V3EnrollmentLanguagesGetExecute executes the request
	//  @return ProcessTextsSearchResults
	V3EnrollmentLanguagesGetExecute(r EnrollmentAPIV3EnrollmentLanguagesGetRequest) (*ProcessTextsSearchResults, *http.Response, error)

	/*
	V3EnrollmentLanguagesLanguageIdDelete Delete the Enrollment messaging for a language 

	Delete the enrollment messaging for a language.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param languageId Two letter ISO 639-1 Language Code
	@return EnrollmentAPIV3EnrollmentLanguagesLanguageIdDeleteRequest
	*/
	V3EnrollmentLanguagesLanguageIdDelete(ctx context.Context, languageId string) EnrollmentAPIV3EnrollmentLanguagesLanguageIdDeleteRequest

	// V3EnrollmentLanguagesLanguageIdDeleteExecute executes the request
	V3EnrollmentLanguagesLanguageIdDeleteExecute(r EnrollmentAPIV3EnrollmentLanguagesLanguageIdDeleteRequest) (*http.Response, error)

	/*
	V3EnrollmentLanguagesLanguageIdGet Retrieve the Enrollment messaging for a language 

	Retrieves the enrollment messaging for a language.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param languageId Two letter ISO 639-1 Language Code
	@return EnrollmentAPIV3EnrollmentLanguagesLanguageIdGetRequest
	*/
	V3EnrollmentLanguagesLanguageIdGet(ctx context.Context, languageId string) EnrollmentAPIV3EnrollmentLanguagesLanguageIdGetRequest

	// V3EnrollmentLanguagesLanguageIdGetExecute executes the request
	//  @return EnrollmentProcessTextObject
	V3EnrollmentLanguagesLanguageIdGetExecute(r EnrollmentAPIV3EnrollmentLanguagesLanguageIdGetRequest) (*EnrollmentProcessTextObject, *http.Response, error)

	/*
	V3EnrollmentLanguagesLanguageIdPut Edit Enrollment messaging for a language 

	Edit enrollment messaging for a language.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param languageId Two letter ISO 639-1 Language Code
	@return EnrollmentAPIV3EnrollmentLanguagesLanguageIdPutRequest
	*/
	V3EnrollmentLanguagesLanguageIdPut(ctx context.Context, languageId string) EnrollmentAPIV3EnrollmentLanguagesLanguageIdPutRequest

	// V3EnrollmentLanguagesLanguageIdPutExecute executes the request
	//  @return EnrollmentProcessTextObject
	V3EnrollmentLanguagesLanguageIdPutExecute(r EnrollmentAPIV3EnrollmentLanguagesLanguageIdPutRequest) (*EnrollmentProcessTextObject, *http.Response, error)

	/*
	V3EnrollmentPut Update Enrollment object 

	Update enrollment object. Regarding the `developerCertificateIdentity`,
if this object is omitted, the certificate will not be deleted from Jamf Pro.
The `identityKeystore` is the entire cert file as a base64 encoded string. The
`md5Sum` field is not required in the PUT request, but is calculated and returned
in the response.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EnrollmentAPIV3EnrollmentPutRequest
	*/
	V3EnrollmentPut(ctx context.Context) EnrollmentAPIV3EnrollmentPutRequest

	// V3EnrollmentPutExecute executes the request
	//  @return EnrollmentSettingsV3
	V3EnrollmentPutExecute(r EnrollmentAPIV3EnrollmentPutRequest) (*EnrollmentSettingsV3, *http.Response, error)
}

// EnrollmentAPIService EnrollmentAPI service
type EnrollmentAPIService service

type EnrollmentAPIV1AdueSessionTokenSettingsGetRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
}

func (r EnrollmentAPIV1AdueSessionTokenSettingsGetRequest) Execute() (*AccountDrivenUserEnrollmentSessionTokenSettings, *http.Response, error) {
	return r.ApiService.V1AdueSessionTokenSettingsGetExecute(r)
}

/*
V1AdueSessionTokenSettingsGet Retrieve the Account Driven User Enrollment Session Token Settings 

Retrieve the Account Driven User Enrollment Session Token Settings


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnrollmentAPIV1AdueSessionTokenSettingsGetRequest
*/
func (a *EnrollmentAPIService) V1AdueSessionTokenSettingsGet(ctx context.Context) EnrollmentAPIV1AdueSessionTokenSettingsGetRequest {
	return EnrollmentAPIV1AdueSessionTokenSettingsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AccountDrivenUserEnrollmentSessionTokenSettings
func (a *EnrollmentAPIService) V1AdueSessionTokenSettingsGetExecute(r EnrollmentAPIV1AdueSessionTokenSettingsGetRequest) (*AccountDrivenUserEnrollmentSessionTokenSettings, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountDrivenUserEnrollmentSessionTokenSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V1AdueSessionTokenSettingsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/adue-session-token-settings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentAPIV1AdueSessionTokenSettingsPutRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
	accountDrivenUserEnrollmentSessionTokenSettings *AccountDrivenUserEnrollmentSessionTokenSettings
}

// Update Account Driven User Enrollment Session Token Settings.
func (r EnrollmentAPIV1AdueSessionTokenSettingsPutRequest) AccountDrivenUserEnrollmentSessionTokenSettings(accountDrivenUserEnrollmentSessionTokenSettings AccountDrivenUserEnrollmentSessionTokenSettings) EnrollmentAPIV1AdueSessionTokenSettingsPutRequest {
	r.accountDrivenUserEnrollmentSessionTokenSettings = &accountDrivenUserEnrollmentSessionTokenSettings
	return r
}

func (r EnrollmentAPIV1AdueSessionTokenSettingsPutRequest) Execute() (*AccountDrivenUserEnrollmentSessionTokenSettings, *http.Response, error) {
	return r.ApiService.V1AdueSessionTokenSettingsPutExecute(r)
}

/*
V1AdueSessionTokenSettingsPut Update Account Driven User Enrollment Session Token Settings. 

Update the Account Driven User Enrollment Session Token Settings object.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnrollmentAPIV1AdueSessionTokenSettingsPutRequest
*/
func (a *EnrollmentAPIService) V1AdueSessionTokenSettingsPut(ctx context.Context) EnrollmentAPIV1AdueSessionTokenSettingsPutRequest {
	return EnrollmentAPIV1AdueSessionTokenSettingsPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AccountDrivenUserEnrollmentSessionTokenSettings
func (a *EnrollmentAPIService) V1AdueSessionTokenSettingsPutExecute(r EnrollmentAPIV1AdueSessionTokenSettingsPutRequest) (*AccountDrivenUserEnrollmentSessionTokenSettings, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountDrivenUserEnrollmentSessionTokenSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V1AdueSessionTokenSettingsPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/adue-session-token-settings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.accountDrivenUserEnrollmentSessionTokenSettings == nil {
		return localVarReturnValue, nil, reportError("accountDrivenUserEnrollmentSessionTokenSettings is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.accountDrivenUserEnrollmentSessionTokenSettings
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentAPIV2EnrollmentAccessGroupsGetRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
	page *int32
	pageSize *int32
	sort *[]string
	allUsersOptionFirst *bool
}

func (r EnrollmentAPIV2EnrollmentAccessGroupsGetRequest) Page(page int32) EnrollmentAPIV2EnrollmentAccessGroupsGetRequest {
	r.page = &page
	return r
}

func (r EnrollmentAPIV2EnrollmentAccessGroupsGetRequest) PageSize(pageSize int32) EnrollmentAPIV2EnrollmentAccessGroupsGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: &#x60;property:asc/desc&#x60;. Default sort is &#x60;name:asc&#x60;. Multiple sort criteria are supported and must be separated with a comma. Example: &#x60;sort&#x3D;date:desc,name:asc&#x60;. 
func (r EnrollmentAPIV2EnrollmentAccessGroupsGetRequest) Sort(sort []string) EnrollmentAPIV2EnrollmentAccessGroupsGetRequest {
	r.sort = &sort
	return r
}

// Return \&quot;All LDAP Users\&quot; option on the first position if it is present in the current page
func (r EnrollmentAPIV2EnrollmentAccessGroupsGetRequest) AllUsersOptionFirst(allUsersOptionFirst bool) EnrollmentAPIV2EnrollmentAccessGroupsGetRequest {
	r.allUsersOptionFirst = &allUsersOptionFirst
	return r
}

func (r EnrollmentAPIV2EnrollmentAccessGroupsGetRequest) Execute() (*AccessGroupsV2SearchResults, *http.Response, error) {
	return r.ApiService.V2EnrollmentAccessGroupsGetExecute(r)
}

/*
V2EnrollmentAccessGroupsGet Retrieve the configured LDAP groups configured for User-Initiated Enrollment 

Retrieves the configured LDAP groups configured for User-Initiated Enrollment.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnrollmentAPIV2EnrollmentAccessGroupsGetRequest

Deprecated
*/
func (a *EnrollmentAPIService) V2EnrollmentAccessGroupsGet(ctx context.Context) EnrollmentAPIV2EnrollmentAccessGroupsGetRequest {
	return EnrollmentAPIV2EnrollmentAccessGroupsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AccessGroupsV2SearchResults
// Deprecated
func (a *EnrollmentAPIService) V2EnrollmentAccessGroupsGetExecute(r EnrollmentAPIV2EnrollmentAccessGroupsGetRequest) (*AccessGroupsV2SearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccessGroupsV2SearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V2EnrollmentAccessGroupsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/enrollment/access-groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		var defaultValue []string = ["name:asc"]
		r.sort = &defaultValue
	}
	if r.allUsersOptionFirst != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "all-users-option-first", r.allUsersOptionFirst, "")
	} else {
		var defaultValue bool = false
		r.allUsersOptionFirst = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentAPIV2EnrollmentAccessGroupsPostRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
	enrollmentAccessGroupV2 *EnrollmentAccessGroupV2
}

// Configured LDAP group to create.
func (r EnrollmentAPIV2EnrollmentAccessGroupsPostRequest) EnrollmentAccessGroupV2(enrollmentAccessGroupV2 EnrollmentAccessGroupV2) EnrollmentAPIV2EnrollmentAccessGroupsPostRequest {
	r.enrollmentAccessGroupV2 = &enrollmentAccessGroupV2
	return r
}

func (r EnrollmentAPIV2EnrollmentAccessGroupsPostRequest) Execute() (*HrefResponse, *http.Response, error) {
	return r.ApiService.V2EnrollmentAccessGroupsPostExecute(r)
}

/*
V2EnrollmentAccessGroupsPost Add the configured LDAP group for User-Initiated Enrollment. 

Add the configured LDAP group for User-Initiated Enrollment.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnrollmentAPIV2EnrollmentAccessGroupsPostRequest

Deprecated
*/
func (a *EnrollmentAPIService) V2EnrollmentAccessGroupsPost(ctx context.Context) EnrollmentAPIV2EnrollmentAccessGroupsPostRequest {
	return EnrollmentAPIV2EnrollmentAccessGroupsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HrefResponse
// Deprecated
func (a *EnrollmentAPIService) V2EnrollmentAccessGroupsPostExecute(r EnrollmentAPIV2EnrollmentAccessGroupsPostRequest) (*HrefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HrefResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V2EnrollmentAccessGroupsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/enrollment/access-groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.enrollmentAccessGroupV2 == nil {
		return localVarReturnValue, nil, reportError("enrollmentAccessGroupV2 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enrollmentAccessGroupV2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentAPIV2EnrollmentAccessGroupsServerIdGroupIdDeleteRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
	serverId string
	groupId string
}

func (r EnrollmentAPIV2EnrollmentAccessGroupsServerIdGroupIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V2EnrollmentAccessGroupsServerIdGroupIdDeleteExecute(r)
}

/*
V2EnrollmentAccessGroupsServerIdGroupIdDelete Delete an LDAP group's access to user initiated Enrollment 

Deletes an LDAP group's access to user initiated enrollment. The group "All LDAP Users" cannot be deleted, but it can be modified to disallow User-Initiated Enrollment.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serverId LDAP server id
 @param groupId LDAP group id.
 @return EnrollmentAPIV2EnrollmentAccessGroupsServerIdGroupIdDeleteRequest

Deprecated
*/
func (a *EnrollmentAPIService) V2EnrollmentAccessGroupsServerIdGroupIdDelete(ctx context.Context, serverId string, groupId string) EnrollmentAPIV2EnrollmentAccessGroupsServerIdGroupIdDeleteRequest {
	return EnrollmentAPIV2EnrollmentAccessGroupsServerIdGroupIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		serverId: serverId,
		groupId: groupId,
	}
}

// Execute executes the request
// Deprecated
func (a *EnrollmentAPIService) V2EnrollmentAccessGroupsServerIdGroupIdDeleteExecute(r EnrollmentAPIV2EnrollmentAccessGroupsServerIdGroupIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V2EnrollmentAccessGroupsServerIdGroupIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/enrollment/access-groups/{serverId}/{groupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serverId"+"}", url.PathEscape(parameterValueToString(r.serverId, "serverId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"groupId"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EnrollmentAPIV2EnrollmentAccessGroupsServerIdGroupIdGetRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
	serverId string
	groupId string
}

func (r EnrollmentAPIV2EnrollmentAccessGroupsServerIdGroupIdGetRequest) Execute() (*EnrollmentAccessGroupV2, *http.Response, error) {
	return r.ApiService.V2EnrollmentAccessGroupsServerIdGroupIdGetExecute(r)
}

/*
V2EnrollmentAccessGroupsServerIdGroupIdGet Retrieve the configured LDAP groups configured for User-Initiated Enrollment 

Retrieves the configured LDAP groups configured for User-Initiated Enrollment.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serverId LDAP server id.
 @param groupId LDAP group id.
 @return EnrollmentAPIV2EnrollmentAccessGroupsServerIdGroupIdGetRequest

Deprecated
*/
func (a *EnrollmentAPIService) V2EnrollmentAccessGroupsServerIdGroupIdGet(ctx context.Context, serverId string, groupId string) EnrollmentAPIV2EnrollmentAccessGroupsServerIdGroupIdGetRequest {
	return EnrollmentAPIV2EnrollmentAccessGroupsServerIdGroupIdGetRequest{
		ApiService: a,
		ctx: ctx,
		serverId: serverId,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return EnrollmentAccessGroupV2
// Deprecated
func (a *EnrollmentAPIService) V2EnrollmentAccessGroupsServerIdGroupIdGetExecute(r EnrollmentAPIV2EnrollmentAccessGroupsServerIdGroupIdGetRequest) (*EnrollmentAccessGroupV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnrollmentAccessGroupV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V2EnrollmentAccessGroupsServerIdGroupIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/enrollment/access-groups/{serverId}/{groupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serverId"+"}", url.PathEscape(parameterValueToString(r.serverId, "serverId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"groupId"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentAPIV2EnrollmentAccessGroupsServerIdGroupIdPutRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
	serverId string
	groupId string
	enrollmentAccessGroupV2 *EnrollmentAccessGroupV2
}

func (r EnrollmentAPIV2EnrollmentAccessGroupsServerIdGroupIdPutRequest) EnrollmentAccessGroupV2(enrollmentAccessGroupV2 EnrollmentAccessGroupV2) EnrollmentAPIV2EnrollmentAccessGroupsServerIdGroupIdPutRequest {
	r.enrollmentAccessGroupV2 = &enrollmentAccessGroupV2
	return r
}

func (r EnrollmentAPIV2EnrollmentAccessGroupsServerIdGroupIdPutRequest) Execute() (*EnrollmentAccessGroupV2, *http.Response, error) {
	return r.ApiService.V2EnrollmentAccessGroupsServerIdGroupIdPutExecute(r)
}

/*
V2EnrollmentAccessGroupsServerIdGroupIdPut Modify the configured LDAP groups configured for User-Initiated Enrollment 

Modifies the configured LDAP groups configured for User-Initiated Enrollment.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serverId LDAP server id.
 @param groupId LDAP group id.
 @return EnrollmentAPIV2EnrollmentAccessGroupsServerIdGroupIdPutRequest

Deprecated
*/
func (a *EnrollmentAPIService) V2EnrollmentAccessGroupsServerIdGroupIdPut(ctx context.Context, serverId string, groupId string) EnrollmentAPIV2EnrollmentAccessGroupsServerIdGroupIdPutRequest {
	return EnrollmentAPIV2EnrollmentAccessGroupsServerIdGroupIdPutRequest{
		ApiService: a,
		ctx: ctx,
		serverId: serverId,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return EnrollmentAccessGroupV2
// Deprecated
func (a *EnrollmentAPIService) V2EnrollmentAccessGroupsServerIdGroupIdPutExecute(r EnrollmentAPIV2EnrollmentAccessGroupsServerIdGroupIdPutRequest) (*EnrollmentAccessGroupV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnrollmentAccessGroupV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V2EnrollmentAccessGroupsServerIdGroupIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/enrollment/access-groups/{serverId}/{groupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serverId"+"}", url.PathEscape(parameterValueToString(r.serverId, "serverId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"groupId"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enrollmentAccessGroupV2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentAPIV2EnrollmentFilteredLanguageCodesGetRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
}

func (r EnrollmentAPIV2EnrollmentFilteredLanguageCodesGetRequest) Execute() ([]LanguageCode, *http.Response, error) {
	return r.ApiService.V2EnrollmentFilteredLanguageCodesGetExecute(r)
}

/*
V2EnrollmentFilteredLanguageCodesGet Retrieve the list of languages and corresponding ISO 639-1 Codes but only those not already added to Enrollment 

Retrieves the list of languages and corresponding ISO 639-1 Codes, but only those not already added to Enrollment.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnrollmentAPIV2EnrollmentFilteredLanguageCodesGetRequest

Deprecated
*/
func (a *EnrollmentAPIService) V2EnrollmentFilteredLanguageCodesGet(ctx context.Context) EnrollmentAPIV2EnrollmentFilteredLanguageCodesGetRequest {
	return EnrollmentAPIV2EnrollmentFilteredLanguageCodesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []LanguageCode
// Deprecated
func (a *EnrollmentAPIService) V2EnrollmentFilteredLanguageCodesGetExecute(r EnrollmentAPIV2EnrollmentFilteredLanguageCodesGetRequest) ([]LanguageCode, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []LanguageCode
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V2EnrollmentFilteredLanguageCodesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/enrollment/filtered-language-codes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentAPIV2EnrollmentGetRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
}

func (r EnrollmentAPIV2EnrollmentGetRequest) Execute() (*EnrollmentSettingsV2, *http.Response, error) {
	return r.ApiService.V2EnrollmentGetExecute(r)
}

/*
V2EnrollmentGet Get Enrollment object and Re-enrollment settings 

Gets Enrollment object and re-enrollment settings. The settings can be altered without providing the existing management password by providing the following value for `managementPassword`:
`\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff`.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnrollmentAPIV2EnrollmentGetRequest

Deprecated
*/
func (a *EnrollmentAPIService) V2EnrollmentGet(ctx context.Context) EnrollmentAPIV2EnrollmentGetRequest {
	return EnrollmentAPIV2EnrollmentGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EnrollmentSettingsV2
// Deprecated
func (a *EnrollmentAPIService) V2EnrollmentGetExecute(r EnrollmentAPIV2EnrollmentGetRequest) (*EnrollmentSettingsV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnrollmentSettingsV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V2EnrollmentGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/enrollment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentAPIV2EnrollmentHistoryExportPostRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
	exportFields *[]string
	exportLabels *[]string
	page *int32
	pageSize *int32
	sort *[]string
	filter *string
	exportParameters *ExportParameters
}

// Export fields parameter, used to change default order or ignore some of the response properties. Default is empty array, which means that all fields of the response entity will be serialized. Example: export-fields&#x3D;id,username
func (r EnrollmentAPIV2EnrollmentHistoryExportPostRequest) ExportFields(exportFields []string) EnrollmentAPIV2EnrollmentHistoryExportPostRequest {
	r.exportFields = &exportFields
	return r
}

// Export labels parameter, used to customize fieldnames/columns in the exported file. Default is empty array, which means that response properties names will be used. Number of the provided labels must match the number of export-fields Example: export-labels&#x3D;identifier,name with matching: export-fields&#x3D;id,username
func (r EnrollmentAPIV2EnrollmentHistoryExportPostRequest) ExportLabels(exportLabels []string) EnrollmentAPIV2EnrollmentHistoryExportPostRequest {
	r.exportLabels = &exportLabels
	return r
}

func (r EnrollmentAPIV2EnrollmentHistoryExportPostRequest) Page(page int32) EnrollmentAPIV2EnrollmentHistoryExportPostRequest {
	r.page = &page
	return r
}

func (r EnrollmentAPIV2EnrollmentHistoryExportPostRequest) PageSize(pageSize int32) EnrollmentAPIV2EnrollmentHistoryExportPostRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Default sort is id:desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;id:desc,name:asc 
func (r EnrollmentAPIV2EnrollmentHistoryExportPostRequest) Sort(sort []string) EnrollmentAPIV2EnrollmentHistoryExportPostRequest {
	r.sort = &sort
	return r
}

// Query in the RSQL format, allowing to filter history notes collection. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: id, name. This param can be combined with paging and sorting. Example: name&#x3D;&#x3D;\&quot;*script*\&quot;
func (r EnrollmentAPIV2EnrollmentHistoryExportPostRequest) Filter(filter string) EnrollmentAPIV2EnrollmentHistoryExportPostRequest {
	r.filter = &filter
	return r
}

// Optional. Override query parameters since they can make URI exceed 2,000 character limit.
func (r EnrollmentAPIV2EnrollmentHistoryExportPostRequest) ExportParameters(exportParameters ExportParameters) EnrollmentAPIV2EnrollmentHistoryExportPostRequest {
	r.exportParameters = &exportParameters
	return r
}

func (r EnrollmentAPIV2EnrollmentHistoryExportPostRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.V2EnrollmentHistoryExportPostExecute(r)
}

/*
V2EnrollmentHistoryExportPost Export enrollment history collection 

Export enrollment history collection


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnrollmentAPIV2EnrollmentHistoryExportPostRequest
*/
func (a *EnrollmentAPIService) V2EnrollmentHistoryExportPost(ctx context.Context) EnrollmentAPIV2EnrollmentHistoryExportPostRequest {
	return EnrollmentAPIV2EnrollmentHistoryExportPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return interface{}
func (a *EnrollmentAPIService) V2EnrollmentHistoryExportPostExecute(r EnrollmentAPIV2EnrollmentHistoryExportPostRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V2EnrollmentHistoryExportPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/enrollment/history/export"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.exportFields != nil {
		t := *r.exportFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "export-fields", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "export-fields", t, "multi")
		}
	} else {
		var defaultValue []string = []
		r.exportFields = &defaultValue
	}
	if r.exportLabels != nil {
		t := *r.exportLabels
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "export-labels", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "export-labels", t, "multi")
		}
	} else {
		var defaultValue []string = []
		r.exportLabels = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		var defaultValue []string = ["id:asc"]
		r.sort = &defaultValue
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	} else {
		var defaultValue string = ""
		r.filter = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/csv,application/json", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.exportParameters
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentAPIV2EnrollmentHistoryGetRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
	page *int32
	pageSize *int32
	sort *[]string
}

func (r EnrollmentAPIV2EnrollmentHistoryGetRequest) Page(page int32) EnrollmentAPIV2EnrollmentHistoryGetRequest {
	r.page = &page
	return r
}

func (r EnrollmentAPIV2EnrollmentHistoryGetRequest) PageSize(pageSize int32) EnrollmentAPIV2EnrollmentHistoryGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: &#x60;property:asc/desc&#x60;. Default sort is &#x60;date:desc&#x60;. Multiple sort criteria are supported and must be separated with a comma. Example: &#x60;sort&#x3D;date:desc,name:asc&#x60;. 
func (r EnrollmentAPIV2EnrollmentHistoryGetRequest) Sort(sort []string) EnrollmentAPIV2EnrollmentHistoryGetRequest {
	r.sort = &sort
	return r
}

func (r EnrollmentAPIV2EnrollmentHistoryGetRequest) Execute() (*HistorySearchResults, *http.Response, error) {
	return r.ApiService.V2EnrollmentHistoryGetExecute(r)
}

/*
V2EnrollmentHistoryGet Get sorted and paged Enrollment history object 

Gets sorted and paged Enrollment history object


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnrollmentAPIV2EnrollmentHistoryGetRequest
*/
func (a *EnrollmentAPIService) V2EnrollmentHistoryGet(ctx context.Context) EnrollmentAPIV2EnrollmentHistoryGetRequest {
	return EnrollmentAPIV2EnrollmentHistoryGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HistorySearchResults
func (a *EnrollmentAPIService) V2EnrollmentHistoryGetExecute(r EnrollmentAPIV2EnrollmentHistoryGetRequest) (*HistorySearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HistorySearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V2EnrollmentHistoryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/enrollment/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		var defaultValue []string = ["date:desc"]
		r.sort = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentAPIV2EnrollmentHistoryPostRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
	objectHistoryNote *ObjectHistoryNote
}

// history notes to create
func (r EnrollmentAPIV2EnrollmentHistoryPostRequest) ObjectHistoryNote(objectHistoryNote ObjectHistoryNote) EnrollmentAPIV2EnrollmentHistoryPostRequest {
	r.objectHistoryNote = &objectHistoryNote
	return r
}

func (r EnrollmentAPIV2EnrollmentHistoryPostRequest) Execute() (*HrefResponse, *http.Response, error) {
	return r.ApiService.V2EnrollmentHistoryPostExecute(r)
}

/*
V2EnrollmentHistoryPost Add Enrollment history object notes 

Adds Enrollment history object notes


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnrollmentAPIV2EnrollmentHistoryPostRequest
*/
func (a *EnrollmentAPIService) V2EnrollmentHistoryPost(ctx context.Context) EnrollmentAPIV2EnrollmentHistoryPostRequest {
	return EnrollmentAPIV2EnrollmentHistoryPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HrefResponse
func (a *EnrollmentAPIService) V2EnrollmentHistoryPostExecute(r EnrollmentAPIV2EnrollmentHistoryPostRequest) (*HrefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HrefResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V2EnrollmentHistoryPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/enrollment/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.objectHistoryNote == nil {
		return localVarReturnValue, nil, reportError("objectHistoryNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.objectHistoryNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentAPIV2EnrollmentLanguageCodesGetRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
}

func (r EnrollmentAPIV2EnrollmentLanguageCodesGetRequest) Execute() ([]LanguageCode, *http.Response, error) {
	return r.ApiService.V2EnrollmentLanguageCodesGetExecute(r)
}

/*
V2EnrollmentLanguageCodesGet Retrieve the list of languages and corresponding ISO 639-1 Codes 

Retrieves the list of languages and corresponding ISO 639-1 Codes.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnrollmentAPIV2EnrollmentLanguageCodesGetRequest

Deprecated
*/
func (a *EnrollmentAPIService) V2EnrollmentLanguageCodesGet(ctx context.Context) EnrollmentAPIV2EnrollmentLanguageCodesGetRequest {
	return EnrollmentAPIV2EnrollmentLanguageCodesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []LanguageCode
// Deprecated
func (a *EnrollmentAPIService) V2EnrollmentLanguageCodesGetExecute(r EnrollmentAPIV2EnrollmentLanguageCodesGetRequest) ([]LanguageCode, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []LanguageCode
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V2EnrollmentLanguageCodesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/enrollment/language-codes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentAPIV2EnrollmentLanguagesDeleteMultiplePostRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
	ids *Ids
}

// ids of each language to delete
func (r EnrollmentAPIV2EnrollmentLanguagesDeleteMultiplePostRequest) Ids(ids Ids) EnrollmentAPIV2EnrollmentLanguagesDeleteMultiplePostRequest {
	r.ids = &ids
	return r
}

func (r EnrollmentAPIV2EnrollmentLanguagesDeleteMultiplePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.V2EnrollmentLanguagesDeleteMultiplePostExecute(r)
}

/*
V2EnrollmentLanguagesDeleteMultiplePost Delete multiple configured languages from User-Initiated Enrollment settings 

Delete multiple configured languages from User-Initiated Enrollment settings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnrollmentAPIV2EnrollmentLanguagesDeleteMultiplePostRequest

Deprecated
*/
func (a *EnrollmentAPIService) V2EnrollmentLanguagesDeleteMultiplePost(ctx context.Context) EnrollmentAPIV2EnrollmentLanguagesDeleteMultiplePostRequest {
	return EnrollmentAPIV2EnrollmentLanguagesDeleteMultiplePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
// Deprecated
func (a *EnrollmentAPIService) V2EnrollmentLanguagesDeleteMultiplePostExecute(r EnrollmentAPIV2EnrollmentLanguagesDeleteMultiplePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V2EnrollmentLanguagesDeleteMultiplePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/enrollment/languages/delete-multiple"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ids == nil {
		return nil, reportError("ids is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ids
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EnrollmentAPIV2EnrollmentLanguagesGetRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
	page *int32
	pageSize *int32
	sort *[]string
}

func (r EnrollmentAPIV2EnrollmentLanguagesGetRequest) Page(page int32) EnrollmentAPIV2EnrollmentLanguagesGetRequest {
	r.page = &page
	return r
}

func (r EnrollmentAPIV2EnrollmentLanguagesGetRequest) PageSize(pageSize int32) EnrollmentAPIV2EnrollmentLanguagesGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Default sort is &#x60;languageCode:asc&#x60;. Multiple sort criteria are supported and must be separated with a comma. Example: &#x60;sort&#x3D;date:desc,name:asc&#x60;. 
func (r EnrollmentAPIV2EnrollmentLanguagesGetRequest) Sort(sort []string) EnrollmentAPIV2EnrollmentLanguagesGetRequest {
	r.sort = &sort
	return r
}

func (r EnrollmentAPIV2EnrollmentLanguagesGetRequest) Execute() (*ProcessTextsSearchResults, *http.Response, error) {
	return r.ApiService.V2EnrollmentLanguagesGetExecute(r)
}

/*
V2EnrollmentLanguagesGet Get an array of the language codes that have Enrollment messaging 

Returns an array of the language codes that have enrollment messaging currently configured.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnrollmentAPIV2EnrollmentLanguagesGetRequest

Deprecated
*/
func (a *EnrollmentAPIService) V2EnrollmentLanguagesGet(ctx context.Context) EnrollmentAPIV2EnrollmentLanguagesGetRequest {
	return EnrollmentAPIV2EnrollmentLanguagesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProcessTextsSearchResults
// Deprecated
func (a *EnrollmentAPIService) V2EnrollmentLanguagesGetExecute(r EnrollmentAPIV2EnrollmentLanguagesGetRequest) (*ProcessTextsSearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProcessTextsSearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V2EnrollmentLanguagesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/enrollment/languages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		var defaultValue []string = ["languageCode:asc"]
		r.sort = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentAPIV2EnrollmentLanguagesLanguageIdDeleteRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
	languageId string
}

func (r EnrollmentAPIV2EnrollmentLanguagesLanguageIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V2EnrollmentLanguagesLanguageIdDeleteExecute(r)
}

/*
V2EnrollmentLanguagesLanguageIdDelete Delete the Enrollment messaging for a language 

Delete the enrollment messaging for a language.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param languageId Two letter ISO 639-1 Language Code
 @return EnrollmentAPIV2EnrollmentLanguagesLanguageIdDeleteRequest

Deprecated
*/
func (a *EnrollmentAPIService) V2EnrollmentLanguagesLanguageIdDelete(ctx context.Context, languageId string) EnrollmentAPIV2EnrollmentLanguagesLanguageIdDeleteRequest {
	return EnrollmentAPIV2EnrollmentLanguagesLanguageIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		languageId: languageId,
	}
}

// Execute executes the request
// Deprecated
func (a *EnrollmentAPIService) V2EnrollmentLanguagesLanguageIdDeleteExecute(r EnrollmentAPIV2EnrollmentLanguagesLanguageIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V2EnrollmentLanguagesLanguageIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/enrollment/languages/{languageId}"
	localVarPath = strings.Replace(localVarPath, "{"+"languageId"+"}", url.PathEscape(parameterValueToString(r.languageId, "languageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EnrollmentAPIV2EnrollmentLanguagesLanguageIdGetRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
	languageId string
}

func (r EnrollmentAPIV2EnrollmentLanguagesLanguageIdGetRequest) Execute() (*EnrollmentProcessTextObject, *http.Response, error) {
	return r.ApiService.V2EnrollmentLanguagesLanguageIdGetExecute(r)
}

/*
V2EnrollmentLanguagesLanguageIdGet Retrieve the Enrollment messaging for a language 

Retrieves the enrollment messaging for a language.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param languageId Two letter ISO 639-1 Language Code
 @return EnrollmentAPIV2EnrollmentLanguagesLanguageIdGetRequest

Deprecated
*/
func (a *EnrollmentAPIService) V2EnrollmentLanguagesLanguageIdGet(ctx context.Context, languageId string) EnrollmentAPIV2EnrollmentLanguagesLanguageIdGetRequest {
	return EnrollmentAPIV2EnrollmentLanguagesLanguageIdGetRequest{
		ApiService: a,
		ctx: ctx,
		languageId: languageId,
	}
}

// Execute executes the request
//  @return EnrollmentProcessTextObject
// Deprecated
func (a *EnrollmentAPIService) V2EnrollmentLanguagesLanguageIdGetExecute(r EnrollmentAPIV2EnrollmentLanguagesLanguageIdGetRequest) (*EnrollmentProcessTextObject, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnrollmentProcessTextObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V2EnrollmentLanguagesLanguageIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/enrollment/languages/{languageId}"
	localVarPath = strings.Replace(localVarPath, "{"+"languageId"+"}", url.PathEscape(parameterValueToString(r.languageId, "languageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentAPIV2EnrollmentLanguagesLanguageIdPutRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
	languageId string
	enrollmentProcessTextObject *EnrollmentProcessTextObject
}

func (r EnrollmentAPIV2EnrollmentLanguagesLanguageIdPutRequest) EnrollmentProcessTextObject(enrollmentProcessTextObject EnrollmentProcessTextObject) EnrollmentAPIV2EnrollmentLanguagesLanguageIdPutRequest {
	r.enrollmentProcessTextObject = &enrollmentProcessTextObject
	return r
}

func (r EnrollmentAPIV2EnrollmentLanguagesLanguageIdPutRequest) Execute() (*EnrollmentProcessTextObject, *http.Response, error) {
	return r.ApiService.V2EnrollmentLanguagesLanguageIdPutExecute(r)
}

/*
V2EnrollmentLanguagesLanguageIdPut Edit Enrollment messaging for a language 

Edit enrollment messaging for a language.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param languageId Two letter ISO 639-1 Language Code
 @return EnrollmentAPIV2EnrollmentLanguagesLanguageIdPutRequest

Deprecated
*/
func (a *EnrollmentAPIService) V2EnrollmentLanguagesLanguageIdPut(ctx context.Context, languageId string) EnrollmentAPIV2EnrollmentLanguagesLanguageIdPutRequest {
	return EnrollmentAPIV2EnrollmentLanguagesLanguageIdPutRequest{
		ApiService: a,
		ctx: ctx,
		languageId: languageId,
	}
}

// Execute executes the request
//  @return EnrollmentProcessTextObject
// Deprecated
func (a *EnrollmentAPIService) V2EnrollmentLanguagesLanguageIdPutExecute(r EnrollmentAPIV2EnrollmentLanguagesLanguageIdPutRequest) (*EnrollmentProcessTextObject, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnrollmentProcessTextObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V2EnrollmentLanguagesLanguageIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/enrollment/languages/{languageId}"
	localVarPath = strings.Replace(localVarPath, "{"+"languageId"+"}", url.PathEscape(parameterValueToString(r.languageId, "languageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enrollmentProcessTextObject
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentAPIV2EnrollmentPutRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
	enrollmentSettingsV2 *EnrollmentSettingsV2
}

// Update enrollment
func (r EnrollmentAPIV2EnrollmentPutRequest) EnrollmentSettingsV2(enrollmentSettingsV2 EnrollmentSettingsV2) EnrollmentAPIV2EnrollmentPutRequest {
	r.enrollmentSettingsV2 = &enrollmentSettingsV2
	return r
}

func (r EnrollmentAPIV2EnrollmentPutRequest) Execute() (*EnrollmentSettingsV2, *http.Response, error) {
	return r.ApiService.V2EnrollmentPutExecute(r)
}

/*
V2EnrollmentPut Update Enrollment object 

Update enrollment object. Regarding the `developerCertificateIdentity`,
if this object is omitted, the certificate will not be deleted from Jamf Pro.
The `identityKeystore` is the entire cert file as a base64 encoded string. The
`md5Sum` field is not required in the PUT request, but is calculated and returned
in the response.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnrollmentAPIV2EnrollmentPutRequest

Deprecated
*/
func (a *EnrollmentAPIService) V2EnrollmentPut(ctx context.Context) EnrollmentAPIV2EnrollmentPutRequest {
	return EnrollmentAPIV2EnrollmentPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EnrollmentSettingsV2
// Deprecated
func (a *EnrollmentAPIService) V2EnrollmentPutExecute(r EnrollmentAPIV2EnrollmentPutRequest) (*EnrollmentSettingsV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnrollmentSettingsV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V2EnrollmentPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/enrollment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.enrollmentSettingsV2 == nil {
		return localVarReturnValue, nil, reportError("enrollmentSettingsV2 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enrollmentSettingsV2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentAPIV3EnrollmentAccessGroupsGetRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
	page *int32
	pageSize *int32
	sort *[]string
	allUsersOptionFirst *bool
}

func (r EnrollmentAPIV3EnrollmentAccessGroupsGetRequest) Page(page int32) EnrollmentAPIV3EnrollmentAccessGroupsGetRequest {
	r.page = &page
	return r
}

func (r EnrollmentAPIV3EnrollmentAccessGroupsGetRequest) PageSize(pageSize int32) EnrollmentAPIV3EnrollmentAccessGroupsGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: &#x60;property:asc/desc&#x60;. Default sort is &#x60;name:asc&#x60;. Multiple sort criteria are supported and must be separated with a comma. Example: &#x60;sort&#x3D;date:desc,name:asc&#x60;. 
func (r EnrollmentAPIV3EnrollmentAccessGroupsGetRequest) Sort(sort []string) EnrollmentAPIV3EnrollmentAccessGroupsGetRequest {
	r.sort = &sort
	return r
}

// Return \&quot;All LDAP Users\&quot; option on the first position if it is present in the current page
func (r EnrollmentAPIV3EnrollmentAccessGroupsGetRequest) AllUsersOptionFirst(allUsersOptionFirst bool) EnrollmentAPIV3EnrollmentAccessGroupsGetRequest {
	r.allUsersOptionFirst = &allUsersOptionFirst
	return r
}

func (r EnrollmentAPIV3EnrollmentAccessGroupsGetRequest) Execute() (*AccessGroupsPreviewSearchResults, *http.Response, error) {
	return r.ApiService.V3EnrollmentAccessGroupsGetExecute(r)
}

/*
V3EnrollmentAccessGroupsGet Retrieve the configured LDAP groups configured for User-Initiated Enrollment. 

Retrieves the configured LDAP groups configured for User-Initiated Enrollment.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnrollmentAPIV3EnrollmentAccessGroupsGetRequest
*/
func (a *EnrollmentAPIService) V3EnrollmentAccessGroupsGet(ctx context.Context) EnrollmentAPIV3EnrollmentAccessGroupsGetRequest {
	return EnrollmentAPIV3EnrollmentAccessGroupsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AccessGroupsPreviewSearchResults
func (a *EnrollmentAPIService) V3EnrollmentAccessGroupsGetExecute(r EnrollmentAPIV3EnrollmentAccessGroupsGetRequest) (*AccessGroupsPreviewSearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccessGroupsPreviewSearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V3EnrollmentAccessGroupsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/enrollment/access-groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		var defaultValue []string = ["name:asc"]
		r.sort = &defaultValue
	}
	if r.allUsersOptionFirst != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "all-users-option-first", r.allUsersOptionFirst, "")
	} else {
		var defaultValue bool = false
		r.allUsersOptionFirst = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentAPIV3EnrollmentAccessGroupsIdDeleteRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
	id string
}

func (r EnrollmentAPIV3EnrollmentAccessGroupsIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V3EnrollmentAccessGroupsIdDeleteExecute(r)
}

/*
V3EnrollmentAccessGroupsIdDelete Delete an LDAP group's access to user initiated Enrollment. 

Deletes an LDAP group's access to user initiated enrollment. The group "All LDAP Users" cannot be deleted, but it can be modified to disallow User-Initiated Enrollment.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Autogenerated Access Group ID.
 @return EnrollmentAPIV3EnrollmentAccessGroupsIdDeleteRequest
*/
func (a *EnrollmentAPIService) V3EnrollmentAccessGroupsIdDelete(ctx context.Context, id string) EnrollmentAPIV3EnrollmentAccessGroupsIdDeleteRequest {
	return EnrollmentAPIV3EnrollmentAccessGroupsIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *EnrollmentAPIService) V3EnrollmentAccessGroupsIdDeleteExecute(r EnrollmentAPIV3EnrollmentAccessGroupsIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V3EnrollmentAccessGroupsIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/enrollment/access-groups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EnrollmentAPIV3EnrollmentAccessGroupsIdGetRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
	id string
}

func (r EnrollmentAPIV3EnrollmentAccessGroupsIdGetRequest) Execute() (*EnrollmentAccessGroupPreview, *http.Response, error) {
	return r.ApiService.V3EnrollmentAccessGroupsIdGetExecute(r)
}

/*
V3EnrollmentAccessGroupsIdGet Retrieve the configured LDAP groups configured for User-Initiated Enrollment 

Retrieves the configured LDAP groups configured for User-Initiated Enrollment.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Autogenerated Access Group ID.
 @return EnrollmentAPIV3EnrollmentAccessGroupsIdGetRequest
*/
func (a *EnrollmentAPIService) V3EnrollmentAccessGroupsIdGet(ctx context.Context, id string) EnrollmentAPIV3EnrollmentAccessGroupsIdGetRequest {
	return EnrollmentAPIV3EnrollmentAccessGroupsIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return EnrollmentAccessGroupPreview
func (a *EnrollmentAPIService) V3EnrollmentAccessGroupsIdGetExecute(r EnrollmentAPIV3EnrollmentAccessGroupsIdGetRequest) (*EnrollmentAccessGroupPreview, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnrollmentAccessGroupPreview
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V3EnrollmentAccessGroupsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/enrollment/access-groups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentAPIV3EnrollmentAccessGroupsIdPutRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
	id string
	enrollmentAccessGroupPreview *EnrollmentAccessGroupPreview
}

func (r EnrollmentAPIV3EnrollmentAccessGroupsIdPutRequest) EnrollmentAccessGroupPreview(enrollmentAccessGroupPreview EnrollmentAccessGroupPreview) EnrollmentAPIV3EnrollmentAccessGroupsIdPutRequest {
	r.enrollmentAccessGroupPreview = &enrollmentAccessGroupPreview
	return r
}

func (r EnrollmentAPIV3EnrollmentAccessGroupsIdPutRequest) Execute() (*EnrollmentAccessGroupPreview, *http.Response, error) {
	return r.ApiService.V3EnrollmentAccessGroupsIdPutExecute(r)
}

/*
V3EnrollmentAccessGroupsIdPut Modify the configured LDAP groups configured for User-Initiated Enrollment. Only exiting Access Groups can be updated. 

Modify the configured LDAP groups configured for User-Initiated Enrollment. Only exiting Access Groups can be updated.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Autogenerated Access Group ID.
 @return EnrollmentAPIV3EnrollmentAccessGroupsIdPutRequest
*/
func (a *EnrollmentAPIService) V3EnrollmentAccessGroupsIdPut(ctx context.Context, id string) EnrollmentAPIV3EnrollmentAccessGroupsIdPutRequest {
	return EnrollmentAPIV3EnrollmentAccessGroupsIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return EnrollmentAccessGroupPreview
func (a *EnrollmentAPIService) V3EnrollmentAccessGroupsIdPutExecute(r EnrollmentAPIV3EnrollmentAccessGroupsIdPutRequest) (*EnrollmentAccessGroupPreview, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnrollmentAccessGroupPreview
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V3EnrollmentAccessGroupsIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/enrollment/access-groups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.enrollmentAccessGroupPreview == nil {
		return localVarReturnValue, nil, reportError("enrollmentAccessGroupPreview is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enrollmentAccessGroupPreview
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentAPIV3EnrollmentAccessGroupsPostRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
	enrollmentAccessGroupPreview *EnrollmentAccessGroupPreview
}

// Configured LDAP group to create.
func (r EnrollmentAPIV3EnrollmentAccessGroupsPostRequest) EnrollmentAccessGroupPreview(enrollmentAccessGroupPreview EnrollmentAccessGroupPreview) EnrollmentAPIV3EnrollmentAccessGroupsPostRequest {
	r.enrollmentAccessGroupPreview = &enrollmentAccessGroupPreview
	return r
}

func (r EnrollmentAPIV3EnrollmentAccessGroupsPostRequest) Execute() (*HrefResponse, *http.Response, error) {
	return r.ApiService.V3EnrollmentAccessGroupsPostExecute(r)
}

/*
V3EnrollmentAccessGroupsPost Add the configured LDAP group for User-Initiated Enrollment. 

Add the configured LDAP group for User-Initiated Enrollment.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnrollmentAPIV3EnrollmentAccessGroupsPostRequest
*/
func (a *EnrollmentAPIService) V3EnrollmentAccessGroupsPost(ctx context.Context) EnrollmentAPIV3EnrollmentAccessGroupsPostRequest {
	return EnrollmentAPIV3EnrollmentAccessGroupsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HrefResponse
func (a *EnrollmentAPIService) V3EnrollmentAccessGroupsPostExecute(r EnrollmentAPIV3EnrollmentAccessGroupsPostRequest) (*HrefResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HrefResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V3EnrollmentAccessGroupsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/enrollment/access-groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.enrollmentAccessGroupPreview == nil {
		return localVarReturnValue, nil, reportError("enrollmentAccessGroupPreview is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enrollmentAccessGroupPreview
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentAPIV3EnrollmentFilteredLanguageCodesGetRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
}

func (r EnrollmentAPIV3EnrollmentFilteredLanguageCodesGetRequest) Execute() ([]LanguageCode, *http.Response, error) {
	return r.ApiService.V3EnrollmentFilteredLanguageCodesGetExecute(r)
}

/*
V3EnrollmentFilteredLanguageCodesGet Retrieve the list of languages and corresponding ISO 639-1 Codes but only those not already added to Enrollment 

Retrieves the list of languages and corresponding ISO 639-1 Codes, but only those not already added to Enrollment.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnrollmentAPIV3EnrollmentFilteredLanguageCodesGetRequest
*/
func (a *EnrollmentAPIService) V3EnrollmentFilteredLanguageCodesGet(ctx context.Context) EnrollmentAPIV3EnrollmentFilteredLanguageCodesGetRequest {
	return EnrollmentAPIV3EnrollmentFilteredLanguageCodesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []LanguageCode
func (a *EnrollmentAPIService) V3EnrollmentFilteredLanguageCodesGetExecute(r EnrollmentAPIV3EnrollmentFilteredLanguageCodesGetRequest) ([]LanguageCode, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []LanguageCode
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V3EnrollmentFilteredLanguageCodesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/enrollment/filtered-language-codes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentAPIV3EnrollmentGetRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
}

func (r EnrollmentAPIV3EnrollmentGetRequest) Execute() (*EnrollmentSettingsV3, *http.Response, error) {
	return r.ApiService.V3EnrollmentGetExecute(r)
}

/*
V3EnrollmentGet Get Enrollment object and Re-enrollment settings 

Gets Enrollment object and re-enrollment settings. The settings can be altered without providing the existing management password by providing the following value for `managementPassword`:
`\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff`.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnrollmentAPIV3EnrollmentGetRequest
*/
func (a *EnrollmentAPIService) V3EnrollmentGet(ctx context.Context) EnrollmentAPIV3EnrollmentGetRequest {
	return EnrollmentAPIV3EnrollmentGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EnrollmentSettingsV3
func (a *EnrollmentAPIService) V3EnrollmentGetExecute(r EnrollmentAPIV3EnrollmentGetRequest) (*EnrollmentSettingsV3, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnrollmentSettingsV3
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V3EnrollmentGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/enrollment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentAPIV3EnrollmentLanguageCodesGetRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
}

func (r EnrollmentAPIV3EnrollmentLanguageCodesGetRequest) Execute() ([]LanguageCode, *http.Response, error) {
	return r.ApiService.V3EnrollmentLanguageCodesGetExecute(r)
}

/*
V3EnrollmentLanguageCodesGet Retrieve the list of languages and corresponding ISO 639-1 Codes 

Retrieves the list of languages and corresponding ISO 639-1 Codes.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnrollmentAPIV3EnrollmentLanguageCodesGetRequest
*/
func (a *EnrollmentAPIService) V3EnrollmentLanguageCodesGet(ctx context.Context) EnrollmentAPIV3EnrollmentLanguageCodesGetRequest {
	return EnrollmentAPIV3EnrollmentLanguageCodesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []LanguageCode
func (a *EnrollmentAPIService) V3EnrollmentLanguageCodesGetExecute(r EnrollmentAPIV3EnrollmentLanguageCodesGetRequest) ([]LanguageCode, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []LanguageCode
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V3EnrollmentLanguageCodesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/enrollment/language-codes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentAPIV3EnrollmentLanguagesDeleteMultiplePostRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
	ids *Ids
}

// ids of each language to delete
func (r EnrollmentAPIV3EnrollmentLanguagesDeleteMultiplePostRequest) Ids(ids Ids) EnrollmentAPIV3EnrollmentLanguagesDeleteMultiplePostRequest {
	r.ids = &ids
	return r
}

func (r EnrollmentAPIV3EnrollmentLanguagesDeleteMultiplePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.V3EnrollmentLanguagesDeleteMultiplePostExecute(r)
}

/*
V3EnrollmentLanguagesDeleteMultiplePost Delete multiple configured languages from User-Initiated Enrollment settings 

Delete multiple configured languages from User-Initiated Enrollment settings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnrollmentAPIV3EnrollmentLanguagesDeleteMultiplePostRequest
*/
func (a *EnrollmentAPIService) V3EnrollmentLanguagesDeleteMultiplePost(ctx context.Context) EnrollmentAPIV3EnrollmentLanguagesDeleteMultiplePostRequest {
	return EnrollmentAPIV3EnrollmentLanguagesDeleteMultiplePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *EnrollmentAPIService) V3EnrollmentLanguagesDeleteMultiplePostExecute(r EnrollmentAPIV3EnrollmentLanguagesDeleteMultiplePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V3EnrollmentLanguagesDeleteMultiplePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/enrollment/languages/delete-multiple"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ids == nil {
		return nil, reportError("ids is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ids
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EnrollmentAPIV3EnrollmentLanguagesGetRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
	page *int32
	pageSize *int32
	sort *[]string
}

func (r EnrollmentAPIV3EnrollmentLanguagesGetRequest) Page(page int32) EnrollmentAPIV3EnrollmentLanguagesGetRequest {
	r.page = &page
	return r
}

func (r EnrollmentAPIV3EnrollmentLanguagesGetRequest) PageSize(pageSize int32) EnrollmentAPIV3EnrollmentLanguagesGetRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property:asc/desc. Default sort is &#x60;languageCode:asc&#x60;. Multiple sort criteria are supported and must be separated with a comma. Example: &#x60;sort&#x3D;date:desc,name:asc&#x60;. 
func (r EnrollmentAPIV3EnrollmentLanguagesGetRequest) Sort(sort []string) EnrollmentAPIV3EnrollmentLanguagesGetRequest {
	r.sort = &sort
	return r
}

func (r EnrollmentAPIV3EnrollmentLanguagesGetRequest) Execute() (*ProcessTextsSearchResults, *http.Response, error) {
	return r.ApiService.V3EnrollmentLanguagesGetExecute(r)
}

/*
V3EnrollmentLanguagesGet Get an array of the language codes that have Enrollment messaging 

Returns an array of the language codes that have enrollment messaging currently configured.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnrollmentAPIV3EnrollmentLanguagesGetRequest
*/
func (a *EnrollmentAPIService) V3EnrollmentLanguagesGet(ctx context.Context) EnrollmentAPIV3EnrollmentLanguagesGetRequest {
	return EnrollmentAPIV3EnrollmentLanguagesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProcessTextsSearchResults
func (a *EnrollmentAPIService) V3EnrollmentLanguagesGetExecute(r EnrollmentAPIV3EnrollmentLanguagesGetRequest) (*ProcessTextsSearchResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProcessTextsSearchResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V3EnrollmentLanguagesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/enrollment/languages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	} else {
		var defaultValue []string = ["languageCode:asc"]
		r.sort = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentAPIV3EnrollmentLanguagesLanguageIdDeleteRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
	languageId string
}

func (r EnrollmentAPIV3EnrollmentLanguagesLanguageIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V3EnrollmentLanguagesLanguageIdDeleteExecute(r)
}

/*
V3EnrollmentLanguagesLanguageIdDelete Delete the Enrollment messaging for a language 

Delete the enrollment messaging for a language.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param languageId Two letter ISO 639-1 Language Code
 @return EnrollmentAPIV3EnrollmentLanguagesLanguageIdDeleteRequest
*/
func (a *EnrollmentAPIService) V3EnrollmentLanguagesLanguageIdDelete(ctx context.Context, languageId string) EnrollmentAPIV3EnrollmentLanguagesLanguageIdDeleteRequest {
	return EnrollmentAPIV3EnrollmentLanguagesLanguageIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		languageId: languageId,
	}
}

// Execute executes the request
func (a *EnrollmentAPIService) V3EnrollmentLanguagesLanguageIdDeleteExecute(r EnrollmentAPIV3EnrollmentLanguagesLanguageIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V3EnrollmentLanguagesLanguageIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/enrollment/languages/{languageId}"
	localVarPath = strings.Replace(localVarPath, "{"+"languageId"+"}", url.PathEscape(parameterValueToString(r.languageId, "languageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EnrollmentAPIV3EnrollmentLanguagesLanguageIdGetRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
	languageId string
}

func (r EnrollmentAPIV3EnrollmentLanguagesLanguageIdGetRequest) Execute() (*EnrollmentProcessTextObject, *http.Response, error) {
	return r.ApiService.V3EnrollmentLanguagesLanguageIdGetExecute(r)
}

/*
V3EnrollmentLanguagesLanguageIdGet Retrieve the Enrollment messaging for a language 

Retrieves the enrollment messaging for a language.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param languageId Two letter ISO 639-1 Language Code
 @return EnrollmentAPIV3EnrollmentLanguagesLanguageIdGetRequest
*/
func (a *EnrollmentAPIService) V3EnrollmentLanguagesLanguageIdGet(ctx context.Context, languageId string) EnrollmentAPIV3EnrollmentLanguagesLanguageIdGetRequest {
	return EnrollmentAPIV3EnrollmentLanguagesLanguageIdGetRequest{
		ApiService: a,
		ctx: ctx,
		languageId: languageId,
	}
}

// Execute executes the request
//  @return EnrollmentProcessTextObject
func (a *EnrollmentAPIService) V3EnrollmentLanguagesLanguageIdGetExecute(r EnrollmentAPIV3EnrollmentLanguagesLanguageIdGetRequest) (*EnrollmentProcessTextObject, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnrollmentProcessTextObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V3EnrollmentLanguagesLanguageIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/enrollment/languages/{languageId}"
	localVarPath = strings.Replace(localVarPath, "{"+"languageId"+"}", url.PathEscape(parameterValueToString(r.languageId, "languageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentAPIV3EnrollmentLanguagesLanguageIdPutRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
	languageId string
	enrollmentProcessTextObject *EnrollmentProcessTextObject
}

func (r EnrollmentAPIV3EnrollmentLanguagesLanguageIdPutRequest) EnrollmentProcessTextObject(enrollmentProcessTextObject EnrollmentProcessTextObject) EnrollmentAPIV3EnrollmentLanguagesLanguageIdPutRequest {
	r.enrollmentProcessTextObject = &enrollmentProcessTextObject
	return r
}

func (r EnrollmentAPIV3EnrollmentLanguagesLanguageIdPutRequest) Execute() (*EnrollmentProcessTextObject, *http.Response, error) {
	return r.ApiService.V3EnrollmentLanguagesLanguageIdPutExecute(r)
}

/*
V3EnrollmentLanguagesLanguageIdPut Edit Enrollment messaging for a language 

Edit enrollment messaging for a language.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param languageId Two letter ISO 639-1 Language Code
 @return EnrollmentAPIV3EnrollmentLanguagesLanguageIdPutRequest
*/
func (a *EnrollmentAPIService) V3EnrollmentLanguagesLanguageIdPut(ctx context.Context, languageId string) EnrollmentAPIV3EnrollmentLanguagesLanguageIdPutRequest {
	return EnrollmentAPIV3EnrollmentLanguagesLanguageIdPutRequest{
		ApiService: a,
		ctx: ctx,
		languageId: languageId,
	}
}

// Execute executes the request
//  @return EnrollmentProcessTextObject
func (a *EnrollmentAPIService) V3EnrollmentLanguagesLanguageIdPutExecute(r EnrollmentAPIV3EnrollmentLanguagesLanguageIdPutRequest) (*EnrollmentProcessTextObject, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnrollmentProcessTextObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V3EnrollmentLanguagesLanguageIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/enrollment/languages/{languageId}"
	localVarPath = strings.Replace(localVarPath, "{"+"languageId"+"}", url.PathEscape(parameterValueToString(r.languageId, "languageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enrollmentProcessTextObject
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnrollmentAPIV3EnrollmentPutRequest struct {
	ctx context.Context
	ApiService EnrollmentAPI
	enrollmentSettingsV3 *EnrollmentSettingsV3
}

// Update enrollment
func (r EnrollmentAPIV3EnrollmentPutRequest) EnrollmentSettingsV3(enrollmentSettingsV3 EnrollmentSettingsV3) EnrollmentAPIV3EnrollmentPutRequest {
	r.enrollmentSettingsV3 = &enrollmentSettingsV3
	return r
}

func (r EnrollmentAPIV3EnrollmentPutRequest) Execute() (*EnrollmentSettingsV3, *http.Response, error) {
	return r.ApiService.V3EnrollmentPutExecute(r)
}

/*
V3EnrollmentPut Update Enrollment object 

Update enrollment object. Regarding the `developerCertificateIdentity`,
if this object is omitted, the certificate will not be deleted from Jamf Pro.
The `identityKeystore` is the entire cert file as a base64 encoded string. The
`md5Sum` field is not required in the PUT request, but is calculated and returned
in the response.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnrollmentAPIV3EnrollmentPutRequest
*/
func (a *EnrollmentAPIService) V3EnrollmentPut(ctx context.Context) EnrollmentAPIV3EnrollmentPutRequest {
	return EnrollmentAPIV3EnrollmentPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EnrollmentSettingsV3
func (a *EnrollmentAPIService) V3EnrollmentPutExecute(r EnrollmentAPIV3EnrollmentPutRequest) (*EnrollmentSettingsV3, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnrollmentSettingsV3
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnrollmentAPIService.V3EnrollmentPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/enrollment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.enrollmentSettingsV3 == nil {
		return localVarReturnValue, nil, reportError("enrollmentSettingsV3 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enrollmentSettingsV3
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
