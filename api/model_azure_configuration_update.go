/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AzureConfigurationUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureConfigurationUpdate{}

// AzureConfigurationUpdate A Cloud Identity Provider Azure configuration for update
type AzureConfigurationUpdate struct {
	CloudIdPCommon CloudIdPCommon `json:"cloudIdPCommon"`
	Server AzureServerConfigurationUpdate `json:"server"`
}

type _AzureConfigurationUpdate AzureConfigurationUpdate

// NewAzureConfigurationUpdate instantiates a new AzureConfigurationUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureConfigurationUpdate(cloudIdPCommon CloudIdPCommon, server AzureServerConfigurationUpdate) *AzureConfigurationUpdate {
	this := AzureConfigurationUpdate{}
	this.CloudIdPCommon = cloudIdPCommon
	this.Server = server
	return &this
}

// NewAzureConfigurationUpdateWithDefaults instantiates a new AzureConfigurationUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureConfigurationUpdateWithDefaults() *AzureConfigurationUpdate {
	this := AzureConfigurationUpdate{}
	return &this
}

// GetCloudIdPCommon returns the CloudIdPCommon field value
func (o *AzureConfigurationUpdate) GetCloudIdPCommon() CloudIdPCommon {
	if o == nil {
		var ret CloudIdPCommon
		return ret
	}

	return o.CloudIdPCommon
}

// GetCloudIdPCommonOk returns a tuple with the CloudIdPCommon field value
// and a boolean to check if the value has been set.
func (o *AzureConfigurationUpdate) GetCloudIdPCommonOk() (*CloudIdPCommon, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloudIdPCommon, true
}

// SetCloudIdPCommon sets field value
func (o *AzureConfigurationUpdate) SetCloudIdPCommon(v CloudIdPCommon) {
	o.CloudIdPCommon = v
}

// GetServer returns the Server field value
func (o *AzureConfigurationUpdate) GetServer() AzureServerConfigurationUpdate {
	if o == nil {
		var ret AzureServerConfigurationUpdate
		return ret
	}

	return o.Server
}

// GetServerOk returns a tuple with the Server field value
// and a boolean to check if the value has been set.
func (o *AzureConfigurationUpdate) GetServerOk() (*AzureServerConfigurationUpdate, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Server, true
}

// SetServer sets field value
func (o *AzureConfigurationUpdate) SetServer(v AzureServerConfigurationUpdate) {
	o.Server = v
}

func (o AzureConfigurationUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureConfigurationUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cloudIdPCommon"] = o.CloudIdPCommon
	toSerialize["server"] = o.Server
	return toSerialize, nil
}

func (o *AzureConfigurationUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cloudIdPCommon",
		"server",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAzureConfigurationUpdate := _AzureConfigurationUpdate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAzureConfigurationUpdate)

	if err != nil {
		return err
	}

	*o = AzureConfigurationUpdate(varAzureConfigurationUpdate)

	return err
}

type NullableAzureConfigurationUpdate struct {
	value *AzureConfigurationUpdate
	isSet bool
}

func (v NullableAzureConfigurationUpdate) Get() *AzureConfigurationUpdate {
	return v.value
}

func (v *NullableAzureConfigurationUpdate) Set(val *AzureConfigurationUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureConfigurationUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureConfigurationUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureConfigurationUpdate(val *AzureConfigurationUpdate) *NullableAzureConfigurationUpdate {
	return &NullableAzureConfigurationUpdate{value: val, isSet: true}
}

func (v NullableAzureConfigurationUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureConfigurationUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


