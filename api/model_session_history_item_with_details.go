/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// checks if the SessionHistoryItemWithDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SessionHistoryItemWithDetails{}

// SessionHistoryItemWithDetails struct for SessionHistoryItemWithDetails
type SessionHistoryItemWithDetails struct {
	TenantId *string `json:"tenantId,omitempty"`
	SessionId *string `json:"sessionId,omitempty"`
	DeviceId *string `json:"deviceId,omitempty"`
	SessionStartedTimestamp *time.Time `json:"sessionStartedTimestamp,omitempty"`
	SessionEndedTimestamp *time.Time `json:"sessionEndedTimestamp,omitempty"`
	SessionType *string `json:"sessionType,omitempty"`
	StatusType *string `json:"statusType,omitempty"`
	SessionAdminId *string `json:"sessionAdminId,omitempty"`
	Comment *string `json:"comment,omitempty"`
	Details *SessionHistoryItemDetails `json:"details,omitempty"`
}

// NewSessionHistoryItemWithDetails instantiates a new SessionHistoryItemWithDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSessionHistoryItemWithDetails() *SessionHistoryItemWithDetails {
	this := SessionHistoryItemWithDetails{}
	return &this
}

// NewSessionHistoryItemWithDetailsWithDefaults instantiates a new SessionHistoryItemWithDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionHistoryItemWithDetailsWithDefaults() *SessionHistoryItemWithDetails {
	this := SessionHistoryItemWithDetails{}
	return &this
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *SessionHistoryItemWithDetails) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionHistoryItemWithDetails) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *SessionHistoryItemWithDetails) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *SessionHistoryItemWithDetails) SetTenantId(v string) {
	o.TenantId = &v
}

// GetSessionId returns the SessionId field value if set, zero value otherwise.
func (o *SessionHistoryItemWithDetails) GetSessionId() string {
	if o == nil || IsNil(o.SessionId) {
		var ret string
		return ret
	}
	return *o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionHistoryItemWithDetails) GetSessionIdOk() (*string, bool) {
	if o == nil || IsNil(o.SessionId) {
		return nil, false
	}
	return o.SessionId, true
}

// HasSessionId returns a boolean if a field has been set.
func (o *SessionHistoryItemWithDetails) HasSessionId() bool {
	if o != nil && !IsNil(o.SessionId) {
		return true
	}

	return false
}

// SetSessionId gets a reference to the given string and assigns it to the SessionId field.
func (o *SessionHistoryItemWithDetails) SetSessionId(v string) {
	o.SessionId = &v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *SessionHistoryItemWithDetails) GetDeviceId() string {
	if o == nil || IsNil(o.DeviceId) {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionHistoryItemWithDetails) GetDeviceIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *SessionHistoryItemWithDetails) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *SessionHistoryItemWithDetails) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetSessionStartedTimestamp returns the SessionStartedTimestamp field value if set, zero value otherwise.
func (o *SessionHistoryItemWithDetails) GetSessionStartedTimestamp() time.Time {
	if o == nil || IsNil(o.SessionStartedTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.SessionStartedTimestamp
}

// GetSessionStartedTimestampOk returns a tuple with the SessionStartedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionHistoryItemWithDetails) GetSessionStartedTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SessionStartedTimestamp) {
		return nil, false
	}
	return o.SessionStartedTimestamp, true
}

// HasSessionStartedTimestamp returns a boolean if a field has been set.
func (o *SessionHistoryItemWithDetails) HasSessionStartedTimestamp() bool {
	if o != nil && !IsNil(o.SessionStartedTimestamp) {
		return true
	}

	return false
}

// SetSessionStartedTimestamp gets a reference to the given time.Time and assigns it to the SessionStartedTimestamp field.
func (o *SessionHistoryItemWithDetails) SetSessionStartedTimestamp(v time.Time) {
	o.SessionStartedTimestamp = &v
}

// GetSessionEndedTimestamp returns the SessionEndedTimestamp field value if set, zero value otherwise.
func (o *SessionHistoryItemWithDetails) GetSessionEndedTimestamp() time.Time {
	if o == nil || IsNil(o.SessionEndedTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.SessionEndedTimestamp
}

// GetSessionEndedTimestampOk returns a tuple with the SessionEndedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionHistoryItemWithDetails) GetSessionEndedTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SessionEndedTimestamp) {
		return nil, false
	}
	return o.SessionEndedTimestamp, true
}

// HasSessionEndedTimestamp returns a boolean if a field has been set.
func (o *SessionHistoryItemWithDetails) HasSessionEndedTimestamp() bool {
	if o != nil && !IsNil(o.SessionEndedTimestamp) {
		return true
	}

	return false
}

// SetSessionEndedTimestamp gets a reference to the given time.Time and assigns it to the SessionEndedTimestamp field.
func (o *SessionHistoryItemWithDetails) SetSessionEndedTimestamp(v time.Time) {
	o.SessionEndedTimestamp = &v
}

// GetSessionType returns the SessionType field value if set, zero value otherwise.
func (o *SessionHistoryItemWithDetails) GetSessionType() string {
	if o == nil || IsNil(o.SessionType) {
		var ret string
		return ret
	}
	return *o.SessionType
}

// GetSessionTypeOk returns a tuple with the SessionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionHistoryItemWithDetails) GetSessionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SessionType) {
		return nil, false
	}
	return o.SessionType, true
}

// HasSessionType returns a boolean if a field has been set.
func (o *SessionHistoryItemWithDetails) HasSessionType() bool {
	if o != nil && !IsNil(o.SessionType) {
		return true
	}

	return false
}

// SetSessionType gets a reference to the given string and assigns it to the SessionType field.
func (o *SessionHistoryItemWithDetails) SetSessionType(v string) {
	o.SessionType = &v
}

// GetStatusType returns the StatusType field value if set, zero value otherwise.
func (o *SessionHistoryItemWithDetails) GetStatusType() string {
	if o == nil || IsNil(o.StatusType) {
		var ret string
		return ret
	}
	return *o.StatusType
}

// GetStatusTypeOk returns a tuple with the StatusType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionHistoryItemWithDetails) GetStatusTypeOk() (*string, bool) {
	if o == nil || IsNil(o.StatusType) {
		return nil, false
	}
	return o.StatusType, true
}

// HasStatusType returns a boolean if a field has been set.
func (o *SessionHistoryItemWithDetails) HasStatusType() bool {
	if o != nil && !IsNil(o.StatusType) {
		return true
	}

	return false
}

// SetStatusType gets a reference to the given string and assigns it to the StatusType field.
func (o *SessionHistoryItemWithDetails) SetStatusType(v string) {
	o.StatusType = &v
}

// GetSessionAdminId returns the SessionAdminId field value if set, zero value otherwise.
func (o *SessionHistoryItemWithDetails) GetSessionAdminId() string {
	if o == nil || IsNil(o.SessionAdminId) {
		var ret string
		return ret
	}
	return *o.SessionAdminId
}

// GetSessionAdminIdOk returns a tuple with the SessionAdminId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionHistoryItemWithDetails) GetSessionAdminIdOk() (*string, bool) {
	if o == nil || IsNil(o.SessionAdminId) {
		return nil, false
	}
	return o.SessionAdminId, true
}

// HasSessionAdminId returns a boolean if a field has been set.
func (o *SessionHistoryItemWithDetails) HasSessionAdminId() bool {
	if o != nil && !IsNil(o.SessionAdminId) {
		return true
	}

	return false
}

// SetSessionAdminId gets a reference to the given string and assigns it to the SessionAdminId field.
func (o *SessionHistoryItemWithDetails) SetSessionAdminId(v string) {
	o.SessionAdminId = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *SessionHistoryItemWithDetails) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionHistoryItemWithDetails) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *SessionHistoryItemWithDetails) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *SessionHistoryItemWithDetails) SetComment(v string) {
	o.Comment = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *SessionHistoryItemWithDetails) GetDetails() SessionHistoryItemDetails {
	if o == nil || IsNil(o.Details) {
		var ret SessionHistoryItemDetails
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionHistoryItemWithDetails) GetDetailsOk() (*SessionHistoryItemDetails, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *SessionHistoryItemWithDetails) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given SessionHistoryItemDetails and assigns it to the Details field.
func (o *SessionHistoryItemWithDetails) SetDetails(v SessionHistoryItemDetails) {
	o.Details = &v
}

func (o SessionHistoryItemWithDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SessionHistoryItemWithDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	if !IsNil(o.SessionId) {
		toSerialize["sessionId"] = o.SessionId
	}
	if !IsNil(o.DeviceId) {
		toSerialize["deviceId"] = o.DeviceId
	}
	if !IsNil(o.SessionStartedTimestamp) {
		toSerialize["sessionStartedTimestamp"] = o.SessionStartedTimestamp
	}
	if !IsNil(o.SessionEndedTimestamp) {
		toSerialize["sessionEndedTimestamp"] = o.SessionEndedTimestamp
	}
	if !IsNil(o.SessionType) {
		toSerialize["sessionType"] = o.SessionType
	}
	if !IsNil(o.StatusType) {
		toSerialize["statusType"] = o.StatusType
	}
	if !IsNil(o.SessionAdminId) {
		toSerialize["sessionAdminId"] = o.SessionAdminId
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	return toSerialize, nil
}

type NullableSessionHistoryItemWithDetails struct {
	value *SessionHistoryItemWithDetails
	isSet bool
}

func (v NullableSessionHistoryItemWithDetails) Get() *SessionHistoryItemWithDetails {
	return v.value
}

func (v *NullableSessionHistoryItemWithDetails) Set(val *SessionHistoryItemWithDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionHistoryItemWithDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionHistoryItemWithDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionHistoryItemWithDetails(val *SessionHistoryItemWithDetails) *NullableSessionHistoryItemWithDetails {
	return &NullableSessionHistoryItemWithDetails{value: val, isSet: true}
}

func (v NullableSessionHistoryItemWithDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionHistoryItemWithDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


