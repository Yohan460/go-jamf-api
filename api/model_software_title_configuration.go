/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// SoftwareTitleConfiguration struct for SoftwareTitleConfiguration
type SoftwareTitleConfiguration struct {
	Id *int32 `json:"id,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
}

// NewSoftwareTitleConfiguration instantiates a new SoftwareTitleConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSoftwareTitleConfiguration() *SoftwareTitleConfiguration {
	this := SoftwareTitleConfiguration{}
	return &this
}

// NewSoftwareTitleConfigurationWithDefaults instantiates a new SoftwareTitleConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSoftwareTitleConfigurationWithDefaults() *SoftwareTitleConfiguration {
	this := SoftwareTitleConfiguration{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SoftwareTitleConfiguration) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareTitleConfiguration) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SoftwareTitleConfiguration) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SoftwareTitleConfiguration) SetId(v int32) {
	o.Id = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *SoftwareTitleConfiguration) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareTitleConfiguration) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *SoftwareTitleConfiguration) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *SoftwareTitleConfiguration) SetDisplayName(v string) {
	o.DisplayName = &v
}

func (o SoftwareTitleConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	return json.Marshal(toSerialize)
}

type NullableSoftwareTitleConfiguration struct {
	value *SoftwareTitleConfiguration
	isSet bool
}

func (v NullableSoftwareTitleConfiguration) Get() *SoftwareTitleConfiguration {
	return v.value
}

func (v *NullableSoftwareTitleConfiguration) Set(val *SoftwareTitleConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableSoftwareTitleConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableSoftwareTitleConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSoftwareTitleConfiguration(val *SoftwareTitleConfiguration) *NullableSoftwareTitleConfiguration {
	return &NullableSoftwareTitleConfiguration{value: val, isSet: true}
}

func (v NullableSoftwareTitleConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSoftwareTitleConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


