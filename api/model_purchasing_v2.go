/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// checks if the PurchasingV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PurchasingV2{}

// PurchasingV2 struct for PurchasingV2
type PurchasingV2 struct {
	Purchased *bool `json:"purchased,omitempty"`
	Leased *bool `json:"leased,omitempty"`
	PoNumber *string `json:"poNumber,omitempty"`
	Vendor *string `json:"vendor,omitempty"`
	AppleCareId *string `json:"appleCareId,omitempty"`
	PurchasePrice *string `json:"purchasePrice,omitempty"`
	PurchasingAccount *string `json:"purchasingAccount,omitempty"`
	PoDate *time.Time `json:"poDate,omitempty"`
	WarrantyExpiresDate *time.Time `json:"warrantyExpiresDate,omitempty"`
	LeaseExpiresDate *time.Time `json:"leaseExpiresDate,omitempty"`
	LifeExpectancy *int64 `json:"lifeExpectancy,omitempty"`
	PurchasingContact *string `json:"purchasingContact,omitempty"`
}

// NewPurchasingV2 instantiates a new PurchasingV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPurchasingV2() *PurchasingV2 {
	this := PurchasingV2{}
	return &this
}

// NewPurchasingV2WithDefaults instantiates a new PurchasingV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPurchasingV2WithDefaults() *PurchasingV2 {
	this := PurchasingV2{}
	return &this
}

// GetPurchased returns the Purchased field value if set, zero value otherwise.
func (o *PurchasingV2) GetPurchased() bool {
	if o == nil || IsNil(o.Purchased) {
		var ret bool
		return ret
	}
	return *o.Purchased
}

// GetPurchasedOk returns a tuple with the Purchased field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasingV2) GetPurchasedOk() (*bool, bool) {
	if o == nil || IsNil(o.Purchased) {
		return nil, false
	}
	return o.Purchased, true
}

// HasPurchased returns a boolean if a field has been set.
func (o *PurchasingV2) HasPurchased() bool {
	if o != nil && !IsNil(o.Purchased) {
		return true
	}

	return false
}

// SetPurchased gets a reference to the given bool and assigns it to the Purchased field.
func (o *PurchasingV2) SetPurchased(v bool) {
	o.Purchased = &v
}

// GetLeased returns the Leased field value if set, zero value otherwise.
func (o *PurchasingV2) GetLeased() bool {
	if o == nil || IsNil(o.Leased) {
		var ret bool
		return ret
	}
	return *o.Leased
}

// GetLeasedOk returns a tuple with the Leased field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasingV2) GetLeasedOk() (*bool, bool) {
	if o == nil || IsNil(o.Leased) {
		return nil, false
	}
	return o.Leased, true
}

// HasLeased returns a boolean if a field has been set.
func (o *PurchasingV2) HasLeased() bool {
	if o != nil && !IsNil(o.Leased) {
		return true
	}

	return false
}

// SetLeased gets a reference to the given bool and assigns it to the Leased field.
func (o *PurchasingV2) SetLeased(v bool) {
	o.Leased = &v
}

// GetPoNumber returns the PoNumber field value if set, zero value otherwise.
func (o *PurchasingV2) GetPoNumber() string {
	if o == nil || IsNil(o.PoNumber) {
		var ret string
		return ret
	}
	return *o.PoNumber
}

// GetPoNumberOk returns a tuple with the PoNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasingV2) GetPoNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PoNumber) {
		return nil, false
	}
	return o.PoNumber, true
}

// HasPoNumber returns a boolean if a field has been set.
func (o *PurchasingV2) HasPoNumber() bool {
	if o != nil && !IsNil(o.PoNumber) {
		return true
	}

	return false
}

// SetPoNumber gets a reference to the given string and assigns it to the PoNumber field.
func (o *PurchasingV2) SetPoNumber(v string) {
	o.PoNumber = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *PurchasingV2) GetVendor() string {
	if o == nil || IsNil(o.Vendor) {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasingV2) GetVendorOk() (*string, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *PurchasingV2) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *PurchasingV2) SetVendor(v string) {
	o.Vendor = &v
}

// GetAppleCareId returns the AppleCareId field value if set, zero value otherwise.
func (o *PurchasingV2) GetAppleCareId() string {
	if o == nil || IsNil(o.AppleCareId) {
		var ret string
		return ret
	}
	return *o.AppleCareId
}

// GetAppleCareIdOk returns a tuple with the AppleCareId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasingV2) GetAppleCareIdOk() (*string, bool) {
	if o == nil || IsNil(o.AppleCareId) {
		return nil, false
	}
	return o.AppleCareId, true
}

// HasAppleCareId returns a boolean if a field has been set.
func (o *PurchasingV2) HasAppleCareId() bool {
	if o != nil && !IsNil(o.AppleCareId) {
		return true
	}

	return false
}

// SetAppleCareId gets a reference to the given string and assigns it to the AppleCareId field.
func (o *PurchasingV2) SetAppleCareId(v string) {
	o.AppleCareId = &v
}

// GetPurchasePrice returns the PurchasePrice field value if set, zero value otherwise.
func (o *PurchasingV2) GetPurchasePrice() string {
	if o == nil || IsNil(o.PurchasePrice) {
		var ret string
		return ret
	}
	return *o.PurchasePrice
}

// GetPurchasePriceOk returns a tuple with the PurchasePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasingV2) GetPurchasePriceOk() (*string, bool) {
	if o == nil || IsNil(o.PurchasePrice) {
		return nil, false
	}
	return o.PurchasePrice, true
}

// HasPurchasePrice returns a boolean if a field has been set.
func (o *PurchasingV2) HasPurchasePrice() bool {
	if o != nil && !IsNil(o.PurchasePrice) {
		return true
	}

	return false
}

// SetPurchasePrice gets a reference to the given string and assigns it to the PurchasePrice field.
func (o *PurchasingV2) SetPurchasePrice(v string) {
	o.PurchasePrice = &v
}

// GetPurchasingAccount returns the PurchasingAccount field value if set, zero value otherwise.
func (o *PurchasingV2) GetPurchasingAccount() string {
	if o == nil || IsNil(o.PurchasingAccount) {
		var ret string
		return ret
	}
	return *o.PurchasingAccount
}

// GetPurchasingAccountOk returns a tuple with the PurchasingAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasingV2) GetPurchasingAccountOk() (*string, bool) {
	if o == nil || IsNil(o.PurchasingAccount) {
		return nil, false
	}
	return o.PurchasingAccount, true
}

// HasPurchasingAccount returns a boolean if a field has been set.
func (o *PurchasingV2) HasPurchasingAccount() bool {
	if o != nil && !IsNil(o.PurchasingAccount) {
		return true
	}

	return false
}

// SetPurchasingAccount gets a reference to the given string and assigns it to the PurchasingAccount field.
func (o *PurchasingV2) SetPurchasingAccount(v string) {
	o.PurchasingAccount = &v
}

// GetPoDate returns the PoDate field value if set, zero value otherwise.
func (o *PurchasingV2) GetPoDate() time.Time {
	if o == nil || IsNil(o.PoDate) {
		var ret time.Time
		return ret
	}
	return *o.PoDate
}

// GetPoDateOk returns a tuple with the PoDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasingV2) GetPoDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PoDate) {
		return nil, false
	}
	return o.PoDate, true
}

// HasPoDate returns a boolean if a field has been set.
func (o *PurchasingV2) HasPoDate() bool {
	if o != nil && !IsNil(o.PoDate) {
		return true
	}

	return false
}

// SetPoDate gets a reference to the given time.Time and assigns it to the PoDate field.
func (o *PurchasingV2) SetPoDate(v time.Time) {
	o.PoDate = &v
}

// GetWarrantyExpiresDate returns the WarrantyExpiresDate field value if set, zero value otherwise.
func (o *PurchasingV2) GetWarrantyExpiresDate() time.Time {
	if o == nil || IsNil(o.WarrantyExpiresDate) {
		var ret time.Time
		return ret
	}
	return *o.WarrantyExpiresDate
}

// GetWarrantyExpiresDateOk returns a tuple with the WarrantyExpiresDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasingV2) GetWarrantyExpiresDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.WarrantyExpiresDate) {
		return nil, false
	}
	return o.WarrantyExpiresDate, true
}

// HasWarrantyExpiresDate returns a boolean if a field has been set.
func (o *PurchasingV2) HasWarrantyExpiresDate() bool {
	if o != nil && !IsNil(o.WarrantyExpiresDate) {
		return true
	}

	return false
}

// SetWarrantyExpiresDate gets a reference to the given time.Time and assigns it to the WarrantyExpiresDate field.
func (o *PurchasingV2) SetWarrantyExpiresDate(v time.Time) {
	o.WarrantyExpiresDate = &v
}

// GetLeaseExpiresDate returns the LeaseExpiresDate field value if set, zero value otherwise.
func (o *PurchasingV2) GetLeaseExpiresDate() time.Time {
	if o == nil || IsNil(o.LeaseExpiresDate) {
		var ret time.Time
		return ret
	}
	return *o.LeaseExpiresDate
}

// GetLeaseExpiresDateOk returns a tuple with the LeaseExpiresDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasingV2) GetLeaseExpiresDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LeaseExpiresDate) {
		return nil, false
	}
	return o.LeaseExpiresDate, true
}

// HasLeaseExpiresDate returns a boolean if a field has been set.
func (o *PurchasingV2) HasLeaseExpiresDate() bool {
	if o != nil && !IsNil(o.LeaseExpiresDate) {
		return true
	}

	return false
}

// SetLeaseExpiresDate gets a reference to the given time.Time and assigns it to the LeaseExpiresDate field.
func (o *PurchasingV2) SetLeaseExpiresDate(v time.Time) {
	o.LeaseExpiresDate = &v
}

// GetLifeExpectancy returns the LifeExpectancy field value if set, zero value otherwise.
func (o *PurchasingV2) GetLifeExpectancy() int64 {
	if o == nil || IsNil(o.LifeExpectancy) {
		var ret int64
		return ret
	}
	return *o.LifeExpectancy
}

// GetLifeExpectancyOk returns a tuple with the LifeExpectancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasingV2) GetLifeExpectancyOk() (*int64, bool) {
	if o == nil || IsNil(o.LifeExpectancy) {
		return nil, false
	}
	return o.LifeExpectancy, true
}

// HasLifeExpectancy returns a boolean if a field has been set.
func (o *PurchasingV2) HasLifeExpectancy() bool {
	if o != nil && !IsNil(o.LifeExpectancy) {
		return true
	}

	return false
}

// SetLifeExpectancy gets a reference to the given int64 and assigns it to the LifeExpectancy field.
func (o *PurchasingV2) SetLifeExpectancy(v int64) {
	o.LifeExpectancy = &v
}

// GetPurchasingContact returns the PurchasingContact field value if set, zero value otherwise.
func (o *PurchasingV2) GetPurchasingContact() string {
	if o == nil || IsNil(o.PurchasingContact) {
		var ret string
		return ret
	}
	return *o.PurchasingContact
}

// GetPurchasingContactOk returns a tuple with the PurchasingContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasingV2) GetPurchasingContactOk() (*string, bool) {
	if o == nil || IsNil(o.PurchasingContact) {
		return nil, false
	}
	return o.PurchasingContact, true
}

// HasPurchasingContact returns a boolean if a field has been set.
func (o *PurchasingV2) HasPurchasingContact() bool {
	if o != nil && !IsNil(o.PurchasingContact) {
		return true
	}

	return false
}

// SetPurchasingContact gets a reference to the given string and assigns it to the PurchasingContact field.
func (o *PurchasingV2) SetPurchasingContact(v string) {
	o.PurchasingContact = &v
}

func (o PurchasingV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PurchasingV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Purchased) {
		toSerialize["purchased"] = o.Purchased
	}
	if !IsNil(o.Leased) {
		toSerialize["leased"] = o.Leased
	}
	if !IsNil(o.PoNumber) {
		toSerialize["poNumber"] = o.PoNumber
	}
	if !IsNil(o.Vendor) {
		toSerialize["vendor"] = o.Vendor
	}
	if !IsNil(o.AppleCareId) {
		toSerialize["appleCareId"] = o.AppleCareId
	}
	if !IsNil(o.PurchasePrice) {
		toSerialize["purchasePrice"] = o.PurchasePrice
	}
	if !IsNil(o.PurchasingAccount) {
		toSerialize["purchasingAccount"] = o.PurchasingAccount
	}
	if !IsNil(o.PoDate) {
		toSerialize["poDate"] = o.PoDate
	}
	if !IsNil(o.WarrantyExpiresDate) {
		toSerialize["warrantyExpiresDate"] = o.WarrantyExpiresDate
	}
	if !IsNil(o.LeaseExpiresDate) {
		toSerialize["leaseExpiresDate"] = o.LeaseExpiresDate
	}
	if !IsNil(o.LifeExpectancy) {
		toSerialize["lifeExpectancy"] = o.LifeExpectancy
	}
	if !IsNil(o.PurchasingContact) {
		toSerialize["purchasingContact"] = o.PurchasingContact
	}
	return toSerialize, nil
}

type NullablePurchasingV2 struct {
	value *PurchasingV2
	isSet bool
}

func (v NullablePurchasingV2) Get() *PurchasingV2 {
	return v.value
}

func (v *NullablePurchasingV2) Set(val *PurchasingV2) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchasingV2) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchasingV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchasingV2(val *PurchasingV2) *NullablePurchasingV2 {
	return &NullablePurchasingV2{value: val, isSet: true}
}

func (v NullablePurchasingV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurchasingV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


