/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the GroupMappings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupMappings{}

// GroupMappings Cloud Identity Provider user group mappings configuration
type GroupMappings struct {
	ObjectClassLimitation string `json:"objectClassLimitation"`
	ObjectClasses string `json:"objectClasses"`
	SearchBase string `json:"searchBase"`
	SearchScope string `json:"searchScope"`
	GroupID string `json:"groupID"`
	GroupName string `json:"groupName"`
	GroupUuid string `json:"groupUuid"`
}

// NewGroupMappings instantiates a new GroupMappings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupMappings(objectClassLimitation string, objectClasses string, searchBase string, searchScope string, groupID string, groupName string, groupUuid string) *GroupMappings {
	this := GroupMappings{}
	this.ObjectClassLimitation = objectClassLimitation
	this.ObjectClasses = objectClasses
	this.SearchBase = searchBase
	this.SearchScope = searchScope
	this.GroupID = groupID
	this.GroupName = groupName
	this.GroupUuid = groupUuid
	return &this
}

// NewGroupMappingsWithDefaults instantiates a new GroupMappings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupMappingsWithDefaults() *GroupMappings {
	this := GroupMappings{}
	return &this
}

// GetObjectClassLimitation returns the ObjectClassLimitation field value
func (o *GroupMappings) GetObjectClassLimitation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectClassLimitation
}

// GetObjectClassLimitationOk returns a tuple with the ObjectClassLimitation field value
// and a boolean to check if the value has been set.
func (o *GroupMappings) GetObjectClassLimitationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectClassLimitation, true
}

// SetObjectClassLimitation sets field value
func (o *GroupMappings) SetObjectClassLimitation(v string) {
	o.ObjectClassLimitation = v
}

// GetObjectClasses returns the ObjectClasses field value
func (o *GroupMappings) GetObjectClasses() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectClasses
}

// GetObjectClassesOk returns a tuple with the ObjectClasses field value
// and a boolean to check if the value has been set.
func (o *GroupMappings) GetObjectClassesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectClasses, true
}

// SetObjectClasses sets field value
func (o *GroupMappings) SetObjectClasses(v string) {
	o.ObjectClasses = v
}

// GetSearchBase returns the SearchBase field value
func (o *GroupMappings) GetSearchBase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SearchBase
}

// GetSearchBaseOk returns a tuple with the SearchBase field value
// and a boolean to check if the value has been set.
func (o *GroupMappings) GetSearchBaseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SearchBase, true
}

// SetSearchBase sets field value
func (o *GroupMappings) SetSearchBase(v string) {
	o.SearchBase = v
}

// GetSearchScope returns the SearchScope field value
func (o *GroupMappings) GetSearchScope() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SearchScope
}

// GetSearchScopeOk returns a tuple with the SearchScope field value
// and a boolean to check if the value has been set.
func (o *GroupMappings) GetSearchScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SearchScope, true
}

// SetSearchScope sets field value
func (o *GroupMappings) SetSearchScope(v string) {
	o.SearchScope = v
}

// GetGroupID returns the GroupID field value
func (o *GroupMappings) GetGroupID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupID
}

// GetGroupIDOk returns a tuple with the GroupID field value
// and a boolean to check if the value has been set.
func (o *GroupMappings) GetGroupIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupID, true
}

// SetGroupID sets field value
func (o *GroupMappings) SetGroupID(v string) {
	o.GroupID = v
}

// GetGroupName returns the GroupName field value
func (o *GroupMappings) GetGroupName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value
// and a boolean to check if the value has been set.
func (o *GroupMappings) GetGroupNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupName, true
}

// SetGroupName sets field value
func (o *GroupMappings) SetGroupName(v string) {
	o.GroupName = v
}

// GetGroupUuid returns the GroupUuid field value
func (o *GroupMappings) GetGroupUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupUuid
}

// GetGroupUuidOk returns a tuple with the GroupUuid field value
// and a boolean to check if the value has been set.
func (o *GroupMappings) GetGroupUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupUuid, true
}

// SetGroupUuid sets field value
func (o *GroupMappings) SetGroupUuid(v string) {
	o.GroupUuid = v
}

func (o GroupMappings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupMappings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["objectClassLimitation"] = o.ObjectClassLimitation
	toSerialize["objectClasses"] = o.ObjectClasses
	toSerialize["searchBase"] = o.SearchBase
	toSerialize["searchScope"] = o.SearchScope
	toSerialize["groupID"] = o.GroupID
	toSerialize["groupName"] = o.GroupName
	toSerialize["groupUuid"] = o.GroupUuid
	return toSerialize, nil
}

type NullableGroupMappings struct {
	value *GroupMappings
	isSet bool
}

func (v NullableGroupMappings) Get() *GroupMappings {
	return v.value
}

func (v *NullableGroupMappings) Set(val *GroupMappings) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupMappings) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupMappings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupMappings(val *GroupMappings) *NullableGroupMappings {
	return &NullableGroupMappings{value: val, isSet: true}
}

func (v NullableGroupMappings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupMappings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


