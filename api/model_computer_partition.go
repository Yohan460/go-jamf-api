/*
Jamf Pro API

## Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

API version: production
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ComputerPartition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComputerPartition{}

// ComputerPartition struct for ComputerPartition
type ComputerPartition struct {
	Name *string `json:"name,omitempty"`
	// Partition Size in MB.
	SizeMegabytes *int64 `json:"sizeMegabytes,omitempty"`
	// Available space in MB.
	AvailableMegabytes *int64 `json:"availableMegabytes,omitempty"`
	PartitionType *string `json:"partitionType,omitempty"`
	// Percentage of space used.
	PercentUsed *int32 `json:"percentUsed,omitempty"`
	FileVault2State *ComputerPartitionFileVault2State `json:"fileVault2State,omitempty"`
	// Percentage progress of current FileVault 2 operation.
	FileVault2ProgressPercent NullableInt32 `json:"fileVault2ProgressPercent,omitempty"`
	LvmManaged *bool `json:"lvmManaged,omitempty"`
}

// NewComputerPartition instantiates a new ComputerPartition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputerPartition() *ComputerPartition {
	this := ComputerPartition{}
	return &this
}

// NewComputerPartitionWithDefaults instantiates a new ComputerPartition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputerPartitionWithDefaults() *ComputerPartition {
	this := ComputerPartition{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ComputerPartition) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerPartition) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ComputerPartition) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ComputerPartition) SetName(v string) {
	o.Name = &v
}

// GetSizeMegabytes returns the SizeMegabytes field value if set, zero value otherwise.
func (o *ComputerPartition) GetSizeMegabytes() int64 {
	if o == nil || IsNil(o.SizeMegabytes) {
		var ret int64
		return ret
	}
	return *o.SizeMegabytes
}

// GetSizeMegabytesOk returns a tuple with the SizeMegabytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerPartition) GetSizeMegabytesOk() (*int64, bool) {
	if o == nil || IsNil(o.SizeMegabytes) {
		return nil, false
	}
	return o.SizeMegabytes, true
}

// HasSizeMegabytes returns a boolean if a field has been set.
func (o *ComputerPartition) HasSizeMegabytes() bool {
	if o != nil && !IsNil(o.SizeMegabytes) {
		return true
	}

	return false
}

// SetSizeMegabytes gets a reference to the given int64 and assigns it to the SizeMegabytes field.
func (o *ComputerPartition) SetSizeMegabytes(v int64) {
	o.SizeMegabytes = &v
}

// GetAvailableMegabytes returns the AvailableMegabytes field value if set, zero value otherwise.
func (o *ComputerPartition) GetAvailableMegabytes() int64 {
	if o == nil || IsNil(o.AvailableMegabytes) {
		var ret int64
		return ret
	}
	return *o.AvailableMegabytes
}

// GetAvailableMegabytesOk returns a tuple with the AvailableMegabytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerPartition) GetAvailableMegabytesOk() (*int64, bool) {
	if o == nil || IsNil(o.AvailableMegabytes) {
		return nil, false
	}
	return o.AvailableMegabytes, true
}

// HasAvailableMegabytes returns a boolean if a field has been set.
func (o *ComputerPartition) HasAvailableMegabytes() bool {
	if o != nil && !IsNil(o.AvailableMegabytes) {
		return true
	}

	return false
}

// SetAvailableMegabytes gets a reference to the given int64 and assigns it to the AvailableMegabytes field.
func (o *ComputerPartition) SetAvailableMegabytes(v int64) {
	o.AvailableMegabytes = &v
}

// GetPartitionType returns the PartitionType field value if set, zero value otherwise.
func (o *ComputerPartition) GetPartitionType() string {
	if o == nil || IsNil(o.PartitionType) {
		var ret string
		return ret
	}
	return *o.PartitionType
}

// GetPartitionTypeOk returns a tuple with the PartitionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerPartition) GetPartitionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PartitionType) {
		return nil, false
	}
	return o.PartitionType, true
}

// HasPartitionType returns a boolean if a field has been set.
func (o *ComputerPartition) HasPartitionType() bool {
	if o != nil && !IsNil(o.PartitionType) {
		return true
	}

	return false
}

// SetPartitionType gets a reference to the given string and assigns it to the PartitionType field.
func (o *ComputerPartition) SetPartitionType(v string) {
	o.PartitionType = &v
}

// GetPercentUsed returns the PercentUsed field value if set, zero value otherwise.
func (o *ComputerPartition) GetPercentUsed() int32 {
	if o == nil || IsNil(o.PercentUsed) {
		var ret int32
		return ret
	}
	return *o.PercentUsed
}

// GetPercentUsedOk returns a tuple with the PercentUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerPartition) GetPercentUsedOk() (*int32, bool) {
	if o == nil || IsNil(o.PercentUsed) {
		return nil, false
	}
	return o.PercentUsed, true
}

// HasPercentUsed returns a boolean if a field has been set.
func (o *ComputerPartition) HasPercentUsed() bool {
	if o != nil && !IsNil(o.PercentUsed) {
		return true
	}

	return false
}

// SetPercentUsed gets a reference to the given int32 and assigns it to the PercentUsed field.
func (o *ComputerPartition) SetPercentUsed(v int32) {
	o.PercentUsed = &v
}

// GetFileVault2State returns the FileVault2State field value if set, zero value otherwise.
func (o *ComputerPartition) GetFileVault2State() ComputerPartitionFileVault2State {
	if o == nil || IsNil(o.FileVault2State) {
		var ret ComputerPartitionFileVault2State
		return ret
	}
	return *o.FileVault2State
}

// GetFileVault2StateOk returns a tuple with the FileVault2State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerPartition) GetFileVault2StateOk() (*ComputerPartitionFileVault2State, bool) {
	if o == nil || IsNil(o.FileVault2State) {
		return nil, false
	}
	return o.FileVault2State, true
}

// HasFileVault2State returns a boolean if a field has been set.
func (o *ComputerPartition) HasFileVault2State() bool {
	if o != nil && !IsNil(o.FileVault2State) {
		return true
	}

	return false
}

// SetFileVault2State gets a reference to the given ComputerPartitionFileVault2State and assigns it to the FileVault2State field.
func (o *ComputerPartition) SetFileVault2State(v ComputerPartitionFileVault2State) {
	o.FileVault2State = &v
}

// GetFileVault2ProgressPercent returns the FileVault2ProgressPercent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComputerPartition) GetFileVault2ProgressPercent() int32 {
	if o == nil || IsNil(o.FileVault2ProgressPercent.Get()) {
		var ret int32
		return ret
	}
	return *o.FileVault2ProgressPercent.Get()
}

// GetFileVault2ProgressPercentOk returns a tuple with the FileVault2ProgressPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputerPartition) GetFileVault2ProgressPercentOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileVault2ProgressPercent.Get(), o.FileVault2ProgressPercent.IsSet()
}

// HasFileVault2ProgressPercent returns a boolean if a field has been set.
func (o *ComputerPartition) HasFileVault2ProgressPercent() bool {
	if o != nil && o.FileVault2ProgressPercent.IsSet() {
		return true
	}

	return false
}

// SetFileVault2ProgressPercent gets a reference to the given NullableInt32 and assigns it to the FileVault2ProgressPercent field.
func (o *ComputerPartition) SetFileVault2ProgressPercent(v int32) {
	o.FileVault2ProgressPercent.Set(&v)
}
// SetFileVault2ProgressPercentNil sets the value for FileVault2ProgressPercent to be an explicit nil
func (o *ComputerPartition) SetFileVault2ProgressPercentNil() {
	o.FileVault2ProgressPercent.Set(nil)
}

// UnsetFileVault2ProgressPercent ensures that no value is present for FileVault2ProgressPercent, not even an explicit nil
func (o *ComputerPartition) UnsetFileVault2ProgressPercent() {
	o.FileVault2ProgressPercent.Unset()
}

// GetLvmManaged returns the LvmManaged field value if set, zero value otherwise.
func (o *ComputerPartition) GetLvmManaged() bool {
	if o == nil || IsNil(o.LvmManaged) {
		var ret bool
		return ret
	}
	return *o.LvmManaged
}

// GetLvmManagedOk returns a tuple with the LvmManaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerPartition) GetLvmManagedOk() (*bool, bool) {
	if o == nil || IsNil(o.LvmManaged) {
		return nil, false
	}
	return o.LvmManaged, true
}

// HasLvmManaged returns a boolean if a field has been set.
func (o *ComputerPartition) HasLvmManaged() bool {
	if o != nil && !IsNil(o.LvmManaged) {
		return true
	}

	return false
}

// SetLvmManaged gets a reference to the given bool and assigns it to the LvmManaged field.
func (o *ComputerPartition) SetLvmManaged(v bool) {
	o.LvmManaged = &v
}

func (o ComputerPartition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComputerPartition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SizeMegabytes) {
		toSerialize["sizeMegabytes"] = o.SizeMegabytes
	}
	if !IsNil(o.AvailableMegabytes) {
		toSerialize["availableMegabytes"] = o.AvailableMegabytes
	}
	if !IsNil(o.PartitionType) {
		toSerialize["partitionType"] = o.PartitionType
	}
	if !IsNil(o.PercentUsed) {
		toSerialize["percentUsed"] = o.PercentUsed
	}
	if !IsNil(o.FileVault2State) {
		toSerialize["fileVault2State"] = o.FileVault2State
	}
	if o.FileVault2ProgressPercent.IsSet() {
		toSerialize["fileVault2ProgressPercent"] = o.FileVault2ProgressPercent.Get()
	}
	if !IsNil(o.LvmManaged) {
		toSerialize["lvmManaged"] = o.LvmManaged
	}
	return toSerialize, nil
}

type NullableComputerPartition struct {
	value *ComputerPartition
	isSet bool
}

func (v NullableComputerPartition) Get() *ComputerPartition {
	return v.value
}

func (v *NullableComputerPartition) Set(val *ComputerPartition) {
	v.value = val
	v.isSet = true
}

func (v NullableComputerPartition) IsSet() bool {
	return v.isSet
}

func (v *NullableComputerPartition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputerPartition(val *ComputerPartition) *NullableComputerPartition {
	return &NullableComputerPartition{value: val, isSet: true}
}

func (v NullableComputerPartition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputerPartition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


